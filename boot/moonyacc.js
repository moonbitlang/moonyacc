const $1L = { hi: 0, lo: 1 };
const $0L = { hi: 0, lo: 0 };
class $PanicError extends Error {}
function $panic() {
  throw new $PanicError();
}
const moonbitlang$core$array$$JSArray$copy = (arr) => arr.slice(0);
function $make_array_len_and_init(a, b) {
  const arr = new Array(a);
  for (let i = 0; i < a; i++) {
    arr[i] = b;
  }
  return arr;
}
function $bound_check(arr, index) {
  if (index < 0 || index >= arr.length) throw new Error("Index out of bounds");
}
function $compare_int(a, b) {
  return (a >= b) - (a <= b);
}
const $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$0$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$0$(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$0$.prototype.$tag = 1;
function Result$Err$1$(param0) {
  this._0 = param0;
}
Result$Err$1$.prototype.$tag = 0;
function Result$Ok$1$(param0) {
  this._0 = param0;
}
Result$Ok$1$.prototype.$tag = 1;
function Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__immut_list_T__ast_TypeExpr_$46$YYObj__immut_list_T__ast_TypeExpr_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__immut_list_T__ast_TypeExpr_$46$YYObj__immut_list_T__ast_TypeExpr_.prototype.$tag = 46;
function Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr.prototype.$tag = 45;
function Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__String__String_$46$YYObj__String__String_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__String__String_$46$YYObj__String__String_.prototype.$tag = 44;
function Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj_String$46$YYObj_String(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj_String$46$YYObj_String.prototype.$tag = 43;
const Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj_Void$46$YYObj_Void = { $tag: 42 };
const Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void = { $tag: 41 };
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ParserSpec$46$YYObj__ast_ParserSpec(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ParserSpec$46$YYObj__ast_ParserSpec.prototype.$tag = 40;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__String_$46$YYObj__String__String_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__String_$46$YYObj__String__String_.prototype.$tag = 39;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Declaration_$46$YYObj__immut_list_T__ast_Declaration_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Declaration_$46$YYObj__immut_list_T__ast_Declaration_.prototype.$tag = 38;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj___ast_Code__Int__Int__$46$YYObj___ast_Code__Int__Int__(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj___ast_Code__Int__Int__$46$YYObj___ast_Code__Int__Int__.prototype.$tag = 37;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Option_Unit_$46$YYObj_Option_Unit_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Option_Unit_$46$YYObj_Option_Unit_.prototype.$tag = 36;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Symbol_$46$YYObj__immut_list_T__ast_Symbol_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Symbol_$46$YYObj__immut_list_T__ast_Symbol_.prototype.$tag = 35;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ClauseItem$46$YYObj__ast_ClauseItem(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ClauseItem$46$YYObj__ast_ClauseItem.prototype.$tag = 34;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__Int__Array__ast_SubstItem__$46$YYObj__String__Int__Array__ast_SubstItem__(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__Int__Array__ast_SubstItem__$46$YYObj__String__Int__Array__ast_SubstItem__.prototype.$tag = 33;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_PrecSymbol_$46$YYObj__ast_PrecSymbol_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_PrecSymbol_$46$YYObj__ast_PrecSymbol_.prototype.$tag = 32;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_ClauseItem_$46$YYObj__immut_list_T__ast_ClauseItem_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_ClauseItem_$46$YYObj__immut_list_T__ast_ClauseItem_.prototype.$tag = 31;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Term_$46$YYObj__immut_list_T__ast_Term_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Term_$46$YYObj__immut_list_T__ast_Term_.prototype.$tag = 30;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term.prototype.$tag = 29;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_TypeExpr_$46$YYObj__immut_list_T__ast_TypeExpr_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_TypeExpr_$46$YYObj__immut_list_T__ast_TypeExpr_.prototype.$tag = 28;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr_$46$YYObj__ast_TypeExpr_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr_$46$YYObj__ast_TypeExpr_.prototype.$tag = 27;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ClauseAction$46$YYObj__ast_ClauseAction(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ClauseAction$46$YYObj__ast_ClauseAction.prototype.$tag = 26;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_PrecSymbol_$46$YYObj__immut_list_T__ast_PrecSymbol_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_PrecSymbol_$46$YYObj__immut_list_T__ast_PrecSymbol_.prototype.$tag = 25;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration.prototype.$tag = 24;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__Int__Int_$46$YYObj__String__Int__Int_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__Int__Int_$46$YYObj__String__Int__Int_.prototype.$tag = 23;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__String___ast_TypeExpr___$46$YYObj__immut_list_T__String___ast_TypeExpr___(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__String___ast_TypeExpr___$46$YYObj__immut_list_T__String___ast_TypeExpr___.prototype.$tag = 22;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_PrecSymbol$46$YYObj__ast_PrecSymbol(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_PrecSymbol$46$YYObj__ast_PrecSymbol.prototype.$tag = 21;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Symbol$46$YYObj__ast_Symbol(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Symbol$46$YYObj__ast_Symbol.prototype.$tag = 20;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr.prototype.$tag = 19;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Rule_$46$YYObj__immut_list_T__ast_Rule_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Rule_$46$YYObj__immut_list_T__ast_Rule_.prototype.$tag = 18;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Rule$46$YYObj__ast_Rule(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Rule$46$YYObj__ast_Rule.prototype.$tag = 17;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__.prototype.$tag = 16;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ClauseWithoutAction$46$YYObj__ast_ClauseWithoutAction(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ClauseWithoutAction$46$YYObj__ast_ClauseWithoutAction.prototype.$tag = 15;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_String_$46$YYObj__immut_list_T_String_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_String_$46$YYObj__immut_list_T_String_.prototype.$tag = 14;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_String$46$YYObj_String(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_String$46$YYObj_String.prototype.$tag = 13;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Array_String_$46$YYObj_Array_String_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Array_String_$46$YYObj_Array_String_.prototype.$tag = 12;
function Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError.prototype.$tag = 11;
function Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$ParseOrLexError$46$ParseError(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$ParseOrLexError$46$ParseError.prototype.$tag = 10;
function Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$ParseOrLexError$46$LexError(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$ParseOrLexError$46$LexError.prototype.$tag = 9;
function Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$LexError$46$Unrecognized(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$LexError$46$Unrecognized.prototype.$tag = 8;
function Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$ParseError$46$UnexpectedToken(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$ParseError$46$UnexpectedToken.prototype.$tag = 7;
function Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$ParseError$46$UnexpectedEndOfInput(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$ParseError$46$UnexpectedEndOfInput.prototype.$tag = 6;
function Error$moonbitlang$47$yacc$47$lib$47$elab$46$ElabError$46$UnresolvedSymbol(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
Error$moonbitlang$47$yacc$47$lib$47$elab$46$ElabError$46$UnresolvedSymbol.prototype.$tag = 5;
function Error$moonbitlang$47$yacc$47$lib$47$elab$46$ElabError$46$FailedToParseTypeExpr(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$elab$46$ElabError$46$FailedToParseTypeExpr.prototype.$tag = 4;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$ParseError$46$UnexpectedToken(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$ParseError$46$UnexpectedToken.prototype.$tag = 3;
const Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$UnexpectedEndOfFile = { $tag: 2 };
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$Unrecognized(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$Unrecognized.prototype.$tag = 1;
function Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError.prototype.$tag = 0;
const $9223372036854775807L = { hi: 2147483647, lo: -1 };
const $10L = { hi: 0, lo: 10 };
const $16L = { hi: 0, lo: 16 };
const $_9223372036854775808L = { hi: -2147483648, lo: 0 };
function Result$Err$2$(param0) {
  this._0 = param0;
}
Result$Err$2$.prototype.$tag = 0;
function Result$Ok$2$(param0) {
  this._0 = param0;
}
Result$Ok$2$.prototype.$tag = 1;
function Result$Err$3$(param0) {
  this._0 = param0;
}
Result$Err$3$.prototype.$tag = 0;
function Result$Ok$3$(param0) {
  this._0 = param0;
}
Result$Ok$3$.prototype.$tag = 1;
function Result$Err$4$(param0) {
  this._0 = param0;
}
Result$Err$4$.prototype.$tag = 0;
function Result$Ok$4$(param0) {
  this._0 = param0;
}
Result$Ok$4$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$5$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$5$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$5$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$5$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$5$.prototype.$tag = 2;
const $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$6$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$6$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$6$.prototype.$tag = 2;
const $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$7$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$7$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$7$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$7$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$7$.prototype.$tag = 2;
const $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$8$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$8$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$8$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$8$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$8$.prototype.$tag = 2;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$9$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$9$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$9$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$10$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$10$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$10$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$11$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$11$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$11$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$12$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$12$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$12$.prototype.$tag = 1;
const $bytes_literal$0 = new Uint8Array();
function $unsafe_make_string(a, b) {
  return String.fromCodePoint(b).repeat(a);
}
const moonbitlang$core$builtin$$JSArray$push = (arr, val) => { arr.push(val); };
const moonbitlang$core$builtin$$JSArray$pop = (arr) => arr.pop();
const moonbitlang$core$builtin$$JSArray$splice = (arr, idx, cnt) => arr.splice(idx, cnt);
function $64$moonbitlang$47$core$47$builtin$46$Json$Number(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$Json$Number.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$Json$String(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$Json$String.prototype.$tag = 4;
function $64$moonbitlang$47$core$47$builtin$46$Json$Array(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$Json$Array.prototype.$tag = 5;
function $64$moonbitlang$47$core$47$builtin$46$Json$Object(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$Json$Object.prototype.$tag = 6;
const moonbitlang$core$builtin$$get_int64_wasm_helper = function f() {
  if (f._exports) return f._exports;
  return f._exports = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
};
const moonbitlang$core$builtin$$MyInt64$compare = (a, b) => {
  const ahi = a.hi;
  const bhi = b.hi;
  if (ahi < bhi) {
    return -1;
  }
  if (ahi > bhi) {
    return 1;
  }
  const alo = a.lo >>> 0;
  const blo = b.lo >>> 0;
  if (alo < blo) {
    return -1;
  }
  if (alo > blo) {
    return 1;
  }
  return 0;
};
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$13$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$13$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$13$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$13$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$13$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$13$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$13$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$13$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$13$.prototype.$tag = 4;
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$14$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$14$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$14$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$14$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$14$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$14$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$14$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$14$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$14$.prototype.$tag = 4;
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$15$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$15$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$15$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$15$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$15$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$15$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$15$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$15$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$15$.prototype.$tag = 4;
const moonbitlang$x$fs$$read_file_ffi = function(path) {
   var fs = require('fs');
   try {
     const content = fs.readFileSync(path);
     globalThis.fileContent = content;
     return 0;
   } catch (error) {
     globalThis.errorMessage = error.message;
     return -1;
   }
 };
const moonbitlang$x$fs$$write_file_ffi = function(path, content) {
   var fs = require('fs');
   try {
     fs.writeFileSync(path, Buffer.from(content));
     return 0;
   } catch (error) {
     globalThis.errorMessage = error.message;
     return -1;
   }
 };
const moonbitlang$x$fs$$get_file_content_ffi = function() {
   return globalThis.fileContent;
 };
const moonbitlang$x$fs$$get_error_message_ffi = function() {
   return globalThis.errorMessage || '';
 };
function Result$Err$16$(param0) {
  this._0 = param0;
}
Result$Err$16$.prototype.$tag = 0;
function Result$Ok$16$(param0) {
  this._0 = param0;
}
Result$Ok$16$.prototype.$tag = 1;
function Result$Err$17$(param0) {
  this._0 = param0;
}
Result$Err$17$.prototype.$tag = 0;
function Result$Ok$17$(param0) {
  this._0 = param0;
}
Result$Ok$17$.prototype.$tag = 1;
function Result$Err$18$(param0) {
  this._0 = param0;
}
Result$Err$18$.prototype.$tag = 0;
function Result$Ok$18$(param0) {
  this._0 = param0;
}
Result$Ok$18$.prototype.$tag = 1;
function Result$Err$19$(param0) {
  this._0 = param0;
}
Result$Err$19$.prototype.$tag = 0;
function Result$Ok$19$(param0) {
  this._0 = param0;
}
Result$Ok$19$.prototype.$tag = 1;
function Result$Err$20$(param0) {
  this._0 = param0;
}
Result$Err$20$.prototype.$tag = 0;
function Result$Ok$20$(param0) {
  this._0 = param0;
}
Result$Ok$20$.prototype.$tag = 1;
function Result$Err$21$(param0) {
  this._0 = param0;
}
Result$Err$21$.prototype.$tag = 0;
function Result$Ok$21$(param0) {
  this._0 = param0;
}
Result$Ok$21$.prototype.$tag = 1;
const moonbitlang$x$sys$internal$ffi$$get_cli_args_internal = function() {
  return process.argv;
 };
function $64$Yoorkin$47$ArgParser$46$Spec$Unit(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Unit.prototype.$tag = 0;
function $64$Yoorkin$47$ArgParser$46$Spec$String(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$String.prototype.$tag = 1;
function $64$Yoorkin$47$ArgParser$46$Spec$Set_string(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Set_string.prototype.$tag = 2;
function $64$Yoorkin$47$ArgParser$46$Spec$Set(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Set.prototype.$tag = 3;
function $64$Yoorkin$47$ArgParser$46$Spec$Clear(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Clear.prototype.$tag = 4;
function Result$Err$22$(param0) {
  this._0 = param0;
}
Result$Err$22$.prototype.$tag = 0;
function Result$Ok$22$(param0) {
  this._0 = param0;
}
Result$Ok$22$.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$Dollar(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$Dollar.prototype.$tag = 0;
const $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$StartPos = { $tag: 1 };
const $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$EndPos = { $tag: 2 };
const $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$Loc = { $tag: 3 };
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$StartPosOf(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$StartPosOf.prototype.$tag = 4;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$EndPosOf(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$EndPosOf.prototype.$tag = 5;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$LocOf(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$LocOf.prototype.$tag = 6;
const $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$SymbolStartPos = { $tag: 7 };
const $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$Sloc = { $tag: 8 };
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$ClauseItemIdent$Dollar(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$ClauseItemIdent$Dollar.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$ClauseItemIdent$Name(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$ClauseItemIdent$Name.prototype.$tag = 1;
function Result$Err$23$(param0) {
  this._0 = param0;
}
Result$Err$23$.prototype.$tag = 0;
function Result$Ok$23$(param0) {
  this._0 = param0;
}
Result$Ok$23$.prototype.$tag = 1;
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$EOF = { $tag: 0 };
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$IDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$IDENT.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$STRING(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$STRING.prototype.$tag = 2;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LANGLE_CODE_RANGLE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LANGLE_CODE_RANGLE.prototype.$tag = 3;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LBRACE_CODE_RBRACE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LBRACE_CODE_RBRACE.prototype.$tag = 4;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_LBRACE_CODE_PERCENT_RBRACE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_LBRACE_CODE_PERCENT_RBRACE.prototype.$tag = 5;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_PERCENT_CODE_EOF(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_PERCENT_CODE_EOF.prototype.$tag = 6;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PKG_AND_IDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PKG_AND_IDENT.prototype.$tag = 7;
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_PERCENT = { $tag: 8 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_START = { $tag: 9 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_TOKEN = { $tag: 10 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_TYPE = { $tag: 11 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_POSITION = { $tag: 12 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_LEFT = { $tag: 13 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_RIGHT = { $tag: 14 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_NONASSOC = { $tag: 15 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_PREC = { $tag: 16 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_DERIVE = { $tag: 17 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_INLINE = { $tag: 18 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LBRACKET = { $tag: 19 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$RBRACKET = { $tag: 20 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LPAREN = { $tag: 21 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$RPAREN = { $tag: 22 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$COMMA = { $tag: 23 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$ARROW = { $tag: 24 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$QUESTION = { $tag: 25 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$COLON = { $tag: 26 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$BAR = { $tag: 27 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$EQ = { $tag: 28 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$SEMI = { $tag: 29 };
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$24$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$25$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$25$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$25$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$26$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$26$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$26$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$27$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$27$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$27$.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Constr(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Constr.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Option(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Option.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Tuple(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Tuple.prototype.$tag = 2;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Arrow(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Arrow.prototype.$tag = 3;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$PrecSymbol$Symbol(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$PrecSymbol$Symbol.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$PrecSymbol$Image(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$PrecSymbol$Image.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$28$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$28$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$28$.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Header(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Header.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Trailer(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Trailer.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Start(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Start.prototype.$tag = 2;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Token(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Token.prototype.$tag = 3;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Token1(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Token1.prototype.$tag = 4;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Type(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Type.prototype.$tag = 5;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Derive(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Derive.prototype.$tag = 6;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Position(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Position.prototype.$tag = 7;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Left(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Left.prototype.$tag = 8;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Right(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Right.prototype.$tag = 9;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Nonassoc(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Nonassoc.prototype.$tag = 10;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$29$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$29$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$29$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$30$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$30$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$30$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$31$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$31$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$31$.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$Term$Symbol(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$Term$Symbol.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$Term$Image(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$Term$Image.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$ast$46$Term$RuleCall(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$ast$46$Term$RuleCall.prototype.$tag = 2;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$32$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$32$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$32$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$33$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$33$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$33$.prototype.$tag = 1;
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Accept = { $tag: 0 };
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce.prototype.$tag = 2;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead.prototype.$tag = 3;
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error = { $tag: 4 };
function Result$Err$34$(param0) {
  this._0 = param0;
}
Result$Err$34$.prototype.$tag = 0;
function Result$Ok$34$(param0) {
  this._0 = param0;
}
Result$Ok$34$.prototype.$tag = 1;
function Result$Err$35$(param0) {
  this._0 = param0;
}
Result$Err$35$.prototype.$tag = 0;
function Result$Ok$35$(param0) {
  this._0 = param0;
}
Result$Ok$35$.prototype.$tag = 1;
function $i32_ctz(a) {
  a >>>= 0;
  if (a === 0) return 32;
  a &= -a;
  return 31 - Math.clz32(a);
}
function $i32_popcnt(a) {
  a = a - ((a >>> 1) & 0x55555555);
  a = (a & 0x33333333) + ((a >>> 2) & 0x33333333);
  a = (a + (a >>> 4)) & 0x0f0f0f0f;
  a = a + (a >>> 8);
  a = a + (a >>> 16);
  return a & 0x3f;
}
const Option$None$36$ = { $tag: 0 };
function Option$Some$36$(param0) {
  this._0 = param0;
}
Option$Some$36$.prototype.$tag = 1;
const $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$EndOfInput = { $tag: 0 };
function $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$Input(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$Input.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$37$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$37$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$37$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$37$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$37$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$37$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$37$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$37$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$37$.prototype.$tag = 4;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$38$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$38$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$38$.prototype.$tag = 1;
function Result$Err$39$(param0) {
  this._0 = param0;
}
Result$Err$39$.prototype.$tag = 0;
function Result$Ok$39$(param0) {
  this._0 = param0;
}
Result$Ok$39$.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Shift(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Shift.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Reduce(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Reduce.prototype.$tag = 1;
const $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Accept = { $tag: 2 };
function $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Conflict(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Conflict.prototype.$tag = 3;
function $64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Reduce_conflict_resolved_by_presentation_order(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Reduce_conflict_resolved_by_presentation_order.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Shift_reduce_conflict_resolved_without_precedence(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Shift_reduce_conflict_resolved_without_precedence.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Shift_reduce_conflict_not_resolved_because_of_non_assoc(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Shift_reduce_conflict_not_resolved_because_of_non_assoc.prototype.$tag = 2;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$40$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$40$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$40$.prototype.$tag = 1;
const Option$None$41$ = { $tag: 0 };
function Option$Some$41$(param0) {
  this._0 = param0;
}
Option$Some$41$.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$T(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$T.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$NT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$NT.prototype.$tag = 1;
function Result$Err$42$(param0) {
  this._0 = param0;
}
Result$Err$42$.prototype.$tag = 0;
function Result$Ok$42$(param0) {
  this._0 = param0;
}
Result$Ok$42$.prototype.$tag = 1;
const $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$EOF = { $tag: 0 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$LPAREN = { $tag: 1 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$RPAREN = { $tag: 2 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$LBRACKET = { $tag: 3 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$RBRACKET = { $tag: 4 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$COMMA = { $tag: 5 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$ARROW = { $tag: 6 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$QUESTION = { $tag: 7 };
function $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$IDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$IDENT.prototype.$tag = 8;
function $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$PKG_AND_IDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$PKG_AND_IDENT.prototype.$tag = 9;
function Result$Err$43$(param0) {
  this._0 = param0;
}
Result$Err$43$.prototype.$tag = 0;
function Result$Ok$43$(param0) {
  this._0 = param0;
}
Result$Ok$43$.prototype.$tag = 1;
function Result$Err$44$(param0) {
  this._0 = param0;
}
Result$Err$44$.prototype.$tag = 0;
function Result$Ok$44$(param0) {
  this._0 = param0;
}
Result$Ok$44$.prototype.$tag = 1;
const $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Accept = { $tag: 0 };
function $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Reduce(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Reduce.prototype.$tag = 2;
function $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$ReduceNoLookahead(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$ReduceNoLookahead.prototype.$tag = 3;
const $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error = { $tag: 4 };
function Result$Err$45$(param0) {
  this._0 = param0;
}
Result$Err$45$.prototype.$tag = 0;
function Result$Ok$45$(param0) {
  this._0 = param0;
}
Result$Ok$45$.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$Data(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$Data.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$StartPosOf(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$StartPosOf.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$EndPosOf(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$EndPosOf.prototype.$tag = 2;
const $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$StartPos = { $tag: 3 };
const $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$EndPos = { $tag: 4 };
const $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$SymbolStartPos = { $tag: 5 };
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$SubAction(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$SubAction.prototype.$tag = 6;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Param(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Param.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Option(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Option.prototype.$tag = 2;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Tuple(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Tuple.prototype.$tag = 3;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Arrow(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Arrow.prototype.$tag = 4;
function Result$Err$46$(param0) {
  this._0 = param0;
}
Result$Err$46$.prototype.$tag = 0;
function Result$Ok$46$(param0) {
  this._0 = param0;
}
Result$Ok$46$.prototype.$tag = 1;
function Result$Err$47$(param0) {
  this._0 = param0;
}
Result$Err$47$.prototype.$tag = 0;
function Result$Ok$47$(param0) {
  this._0 = param0;
}
Result$Ok$47$.prototype.$tag = 1;
function Result$Err$48$(param0) {
  this._0 = param0;
}
Result$Err$48$.prototype.$tag = 0;
function Result$Ok$48$(param0) {
  this._0 = param0;
}
Result$Ok$48$.prototype.$tag = 1;
function Result$Err$49$(param0) {
  this._0 = param0;
}
Result$Err$49$.prototype.$tag = 0;
function Result$Ok$49$(param0) {
  this._0 = param0;
}
Result$Ok$49$.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$Token(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$Token.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$Param(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$Param.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall.prototype.$tag = 2;
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$50$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$50$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$50$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$50$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$50$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$50$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$50$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$50$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$50$.prototype.$tag = 4;
function Result$Err$51$(param0) {
  this._0 = param0;
}
Result$Err$51$.prototype.$tag = 0;
function Result$Ok$51$(param0) {
  this._0 = param0;
}
Result$Ok$51$.prototype.$tag = 1;
function Result$Err$52$(param0) {
  this._0 = param0;
}
Result$Err$52$.prototype.$tag = 0;
function Result$Ok$52$(param0) {
  this._0 = param0;
}
Result$Ok$52$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$53$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$53$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$53$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$53$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$53$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$53$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$53$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$53$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$53$.prototype.$tag = 4;
const moonbitlang$yacc$lib$driver$util$$ffi_exit = (code) => { process.exit(code); };
const moonbitlang$yacc$lib$driver$util$$println_to_stderr = (msg) => { console.error("%s", msg); };
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$54$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$54$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$54$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$54$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$54$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$54$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$54$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$54$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$54$.prototype.$tag = 4;
function $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$T(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$T.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$NT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$NT.prototype.$tag = 1;
const $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$EOI = { $tag: 2 };
const $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Accept = { $tag: 0 };
function $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Shift(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Shift.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Reduce(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Reduce.prototype.$tag = 2;
function $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$ReduceNoLookahead(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$ReduceNoLookahead.prototype.$tag = 3;
function Error$$to_string(_e) {
  switch (_e.$tag) {
    case 29: {
      return "moonbitlang/yacc/lib/parser.YYObj__ast_Term.YYObj__ast_Term";
    }
    case 13: {
      return "moonbitlang/yacc/lib/parser.YYObj_String.YYObj_String";
    }
    case 34: {
      return "moonbitlang/yacc/lib/parser.YYObj__ast_ClauseItem.YYObj__ast_ClauseItem";
    }
    case 40: {
      return "moonbitlang/yacc/lib/parser.YYObj__ast_ParserSpec.YYObj__ast_ParserSpec";
    }
    case 31: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T__ast_ClauseItem_.YYObj__immut_list_T__ast_ClauseItem_";
    }
    case 24: {
      return "moonbitlang/yacc/lib/parser.YYObj__ast_Declaration.YYObj__ast_Declaration";
    }
    case 21: {
      return "moonbitlang/yacc/lib/parser.YYObj__ast_PrecSymbol.YYObj__ast_PrecSymbol";
    }
    case 45: {
      return "moonbitlang/yacc/lib/parser/type_expr_parser.YYObj__ast_TypeExpr.YYObj__ast_TypeExpr";
    }
    case 27: {
      return "moonbitlang/yacc/lib/parser.YYObj__ast_TypeExpr_.YYObj__ast_TypeExpr_";
    }
    case 7: {
      return moonbitlang$core$builtin$$Show$to_string$0$(_e);
    }
    case 23: {
      return "moonbitlang/yacc/lib/parser.YYObj__String__Int__Int_.YYObj__String__Int__Int_";
    }
    case 3: {
      return "moonbitlang/yacc/lib/parser.ParseError.UnexpectedToken";
    }
    case 2: {
      return "moonbitlang/yacc/lib/parser.LexError.UnexpectedEndOfFile";
    }
    case 38: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T__ast_Declaration_.YYObj__immut_list_T__ast_Declaration_";
    }
    case 33: {
      return "moonbitlang/yacc/lib/parser.YYObj__String__Int__Array__ast_SubstItem__.YYObj__String__Int__Array__ast_SubstItem__";
    }
    case 30: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T__ast_Term_.YYObj__immut_list_T__ast_Term_";
    }
    case 10: {
      return moonbitlang$core$builtin$$Show$to_string$1$(_e);
    }
    case 9: {
      return moonbitlang$core$builtin$$Show$to_string$1$(_e);
    }
    case 35: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T__ast_Symbol_.YYObj__immut_list_T__ast_Symbol_";
    }
    case 11: {
      return moonbitlang$core$builtin$$Show$to_string$2$(_e);
    }
    case 39: {
      return "moonbitlang/yacc/lib/parser.YYObj__String__String_.YYObj__String__String_";
    }
    case 17: {
      return "moonbitlang/yacc/lib/parser.YYObj__ast_Rule.YYObj__ast_Rule";
    }
    case 26: {
      return "moonbitlang/yacc/lib/parser.YYObj__ast_ClauseAction.YYObj__ast_ClauseAction";
    }
    case 16: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__.YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__";
    }
    case 14: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T_String_.YYObj__immut_list_T_String_";
    }
    case 4: {
      return "moonbitlang/yacc/lib/elab.ElabError.FailedToParseTypeExpr";
    }
    case 8: {
      return moonbitlang$core$builtin$$Show$to_string$3$(_e);
    }
    case 44: {
      return "moonbitlang/yacc/lib/parser/type_expr_parser.YYObj__String__String_.YYObj__String__String_";
    }
    case 41: {
      return "moonbitlang/yacc/lib/parser.YYObj_Void.YYObj_Void";
    }
    case 15: {
      return "moonbitlang/yacc/lib/parser.YYObj__ast_ClauseWithoutAction.YYObj__ast_ClauseWithoutAction";
    }
    case 28: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T__ast_TypeExpr_.YYObj__immut_list_T__ast_TypeExpr_";
    }
    case 19: {
      return "moonbitlang/yacc/lib/parser.YYObj__ast_TypeExpr.YYObj__ast_TypeExpr";
    }
    case 43: {
      return "moonbitlang/yacc/lib/parser/type_expr_parser.YYObj_String.YYObj_String";
    }
    case 42: {
      return "moonbitlang/yacc/lib/parser/type_expr_parser.YYObj_Void.YYObj_Void";
    }
    case 18: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T__ast_Rule_.YYObj__immut_list_T__ast_Rule_";
    }
    case 6: {
      return moonbitlang$core$builtin$$Show$to_string$0$(_e);
    }
    case 5: {
      return "moonbitlang/yacc/lib/elab.ElabError.UnresolvedSymbol";
    }
    case 46: {
      return "moonbitlang/yacc/lib/parser/type_expr_parser.YYObj__immut_list_T__ast_TypeExpr_.YYObj__immut_list_T__ast_TypeExpr_";
    }
    case 25: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T__ast_PrecSymbol_.YYObj__immut_list_T__ast_PrecSymbol_";
    }
    case 0: {
      return moonbitlang$core$builtin$$Show$to_string$4$(_e);
    }
    case 32: {
      return "moonbitlang/yacc/lib/parser.YYObj__ast_PrecSymbol_.YYObj__ast_PrecSymbol_";
    }
    case 22: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T__String___ast_TypeExpr___.YYObj__immut_list_T__String___ast_TypeExpr___";
    }
    case 37: {
      return "moonbitlang/yacc/lib/parser.YYObj___ast_Code__Int__Int__.YYObj___ast_Code__Int__Int__";
    }
    case 12: {
      return "moonbitlang/yacc/lib/parser.YYObj_Array_String_.YYObj_Array_String_";
    }
    case 1: {
      return "moonbitlang/yacc/lib/parser.LexError.Unrecognized";
    }
    case 36: {
      return "moonbitlang/yacc/lib/parser.YYObj_Option_Unit_.YYObj_Option_Unit_";
    }
    default: {
      return "moonbitlang/yacc/lib/parser.YYObj__ast_Symbol.YYObj__ast_Symbol";
    }
  }
}
const moonbitlang$core$strconv$$base_err_str = "invalid base";
const moonbitlang$core$strconv$$range_err_str = "value out of range";
const moonbitlang$core$strconv$$syntax_err_str = "invalid syntax";
const moonbitlang$core$int$$max_value = 2147483647;
const moonbitlang$yacc$lib$parser$$code_rbrace$46$42$bind$124$1167 = "$";
const moonbitlang$yacc$lib$util$stamp$$next_stamp = { val: 0 };
const moonbitlang$yacc$lib$util$small_int_set$$_empty = [0];
const moonbitlang$yacc$lib$elab$$elaborate$46$42$bind$124$848 = ",";
const moonbitlang$yacc$lib$elab$$elaborate$46$42$bind$124$849 = " ";
const moonbitlang$yacc$lib$elab$$stdlib_src = "%%\n\noption[T](X : T) -> Option[T]\n  : { None }\n  | X { Some($1) }\n  ;\n\n%inline ioption[T](X : T) -> Option[T]\n  : { None }\n  | X { Some($1) }\n  ;\n\nloption[T](X : @immut/list.T[T]) -> @immut/list.T[T]\n  : { Nil }\n  | X { $1 }\n  ;\n\nboption[T](X : T) -> Bool\n  : { false }\n  | X { true }\n  ;\n\n%inline pair[X, Y](X : X, Y : Y) -> (X, Y)\n  : X Y { ($1, $2) }\n  ;\n\n%inline separated_pair[X, Y](X : X, SEP, Y : Y) -> (X, Y)\n  : X SEP Y { ($1, $3) }\n  ;\n\n%inline preceded[T](L, X : T) -> T\n  : L X { $2 }\n  ;\n\n%inline terminated[T](X : T, R) -> T\n  : X R { $1 }\n  ;\n\n%inline delimited[T](L, X : T, R) -> T\n  : L X R { $2 }\n  ;\n\nlist[T](X : T) -> @immut/list.T[T]\n  : { Nil }\n  | X list(X) { Cons($1, Nil) }\n  ;\n\nnonempty_list[T](X : T) -> @immut/list.T[T]\n  : X { Cons($1, Nil) }\n  | X nonempty_list(X) { Cons($1, $2) }\n  ;\n\nseparated_list[T](SEP, X : T) -> @immut/list.T[T]\n  : { Nil }\n  | separated_nonempty_list(SEP, X) { $1 }\n  ;\n\nseparated_nonempty_list[T](SEP, X : T) -> @immut/list.T[T]\n  : X { Cons($1, Nil) }\n  | X SEP separated_nonempty_list(SEP, X) { Cons($1, $3) }\n  ;\n";
const moonbitlang$yacc$lib$driver$util$$path_basename$46$42$bind$124$19 = "/";
const moonbitlang$yacc$lib$driver$util$$path_basename$46$42$bind$124$13 = "\\";
const moonbitlang$yacc$lib$driver$$array_to_or_list$46$42$bind$124$147 = ", ";
const moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$479 = " ";
const moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$481 = "_";
const moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$484 = "(";
const moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$486 = "_";
const moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$489 = ")";
const moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$491 = "_";
const moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$494 = ",";
const moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$496 = "_";
const moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident$46$42$bind$124$509 = "/";
const moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident$46$42$bind$124$511 = "_";
const moonbitlang$yacc$lib$codegen$gen_mbt$$fix_result_type$46$42$bind$124$578 = "->";
const moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$type_$124$36 = "ParseError";
const moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$42$bind$124$747 = "\n";
const moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$42$bind$124$846 = " | ";
const moonbitlang$yacc$main$$_init$42$46$usage$124$1 = "Usage: moonyacc [options] <input-file>";
const moonbitlang$yacc$lib$util$stamp$$initial_stamp = moonbitlang$yacc$lib$util$stamp$$new();
const moonbitlang$yacc$lib$lr1$$_empty = { concrete_set: moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$empty(), vars: moonbitlang$yacc$lib$util$small_int_set$$_empty };
const moonbitlang$yacc$lib$codegen$gen_mbt$$generator = { self: undefined, method_0: moonbitlang$yacc$lib$codegen$$CodeGenerator$void_type$5$, method_1: moonbitlang$yacc$lib$codegen$$CodeGenerator$void_action_code$5$, method_2: moonbitlang$yacc$lib$codegen$$CodeGenerator$codegen_tokens$5$, method_3: moonbitlang$yacc$lib$codegen$$CodeGenerator$codegen$5$ };
function moonbitlang$core$abort$$abort$6$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$7$(msg) {
  $panic();
}
function moonbitlang$core$abort$$abort$8$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$9$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$10$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$11$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$12$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$13$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$14$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$15$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$16$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$17$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$18$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$19$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$20$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$21$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$22$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$23$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$24$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$25$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$26$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$27$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$28$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$29$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$30$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$31$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$32$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$33$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$34$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$35$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$36$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$37$(msg) {
  return $panic();
}
function moonbitlang$core$array$$get_limit(len) {
  let len$2 = len;
  let limit = 0;
  while (true) {
    if (len$2 > 0) {
      len$2 = len$2 / 2 | 0;
      limit = limit + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return limit;
}
function moonbitlang$core$array$$ArrayView$rev_inplace$18$(self) {
  const mid_len = self.len / 2 | 0;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < mid_len) {
      const j = (self.len - i | 0) - 1 | 0;
      moonbitlang$core$array$$ArrayView$swap$18$(self, i, j);
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$ArrayView$rev_inplace$23$(self) {
  const mid_len = self.len / 2 | 0;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < mid_len) {
      const j = (self.len - i | 0) - 1 | 0;
      moonbitlang$core$array$$ArrayView$swap$23$(self, i, j);
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$minimum(x, y) {
  return x > y ? y : x;
}
function moonbitlang$core$array$$ArrayView$iter$6$(self) {
  const _p = (yield_) => {
    const _len = self.len;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self.buf[self.start + _i | 0];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$makei$30$(length, value) {
  if (length <= 0) {
    return [];
  } else {
    const array = moonbitlang$core$array$$Array$make$30$(length, value(0));
    let _tmp = 1;
    while (true) {
      const i = _tmp;
      if (i < length) {
        moonbitlang$core$array$$Array$op_set$30$(array, i, value(i));
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return array;
  }
}
function moonbitlang$core$array$$Array$makei$32$(length, value) {
  if (length <= 0) {
    return [];
  } else {
    const array = moonbitlang$core$array$$Array$make$32$(length, value(0));
    let _tmp = 1;
    while (true) {
      const i = _tmp;
      if (i < length) {
        moonbitlang$core$array$$Array$op_set$32$(array, i, value(i));
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return array;
  }
}
function moonbitlang$core$array$$Array$makei$35$(length, value) {
  if (length <= 0) {
    return [];
  } else {
    const array = moonbitlang$core$array$$Array$make$35$(length, value(0));
    let _tmp = 1;
    while (true) {
      const i = _tmp;
      if (i < length) {
        moonbitlang$core$array$$Array$op_set$35$(array, i, value(i));
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return array;
  }
}
function moonbitlang$core$array$$ArrayView$join(self, separator) {
  if (self.len === 0) {
    return "";
  } else {
    const _hd = self.buf[self.start];
    const _bind = self.buf;
    const _bind$2 = 1 + self.start | 0;
    const _some = self.len;
    const _bind$3 = _some - 1 | 0;
    const _x = { buf: _bind, start: _bind$2, len: _bind$3 };
    let size_hint = _hd.length;
    const _len = _x.len;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const s = _bind[_bind$2 + _i | 0];
        size_hint = size_hint + (s.length + (separator.end - separator.start | 0) | 0) | 0;
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    size_hint = size_hint << 1;
    const buf = moonbitlang$core$builtin$$StringBuilder$new(size_hint);
    moonbitlang$core$builtin$$Logger$write_string$38$(buf, _hd);
    if (moonbitlang$core$string$$String$char_length_eq(separator.str, 0, separator.start, separator.end)) {
      const _len$2 = _x.len;
      let _tmp$2 = 0;
      while (true) {
        const _i = _tmp$2;
        if (_i < _len$2) {
          const s = _bind[_bind$2 + _i | 0];
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, s);
          _tmp$2 = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
    } else {
      const separator$2 = moonbitlang$core$builtin$$Show$to_string$20$(separator);
      const _len$2 = _x.len;
      let _tmp$2 = 0;
      while (true) {
        const _i = _tmp$2;
        if (_i < _len$2) {
          const s = _bind[_bind$2 + _i | 0];
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, separator$2);
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, s);
          _tmp$2 = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
    }
    return buf.val;
  }
}
function moonbitlang$core$array$$FixedArray$copy$17$(self) {
  return moonbitlang$core$array$$JSArray$copy(self);
}
function moonbitlang$core$array$$FixedArray$copy$8$(self) {
  return moonbitlang$core$array$$JSArray$copy(self);
}
function moonbitlang$core$array$$FixedArray$copy$21$(self) {
  return moonbitlang$core$array$$JSArray$copy(self);
}
function moonbitlang$core$array$$FixedArray$copy$22$(self) {
  return moonbitlang$core$array$$JSArray$copy(self);
}
function moonbitlang$core$array$$Array$copy$8$(self) {
  return moonbitlang$core$array$$JSArray$copy(self);
}
function moonbitlang$core$array$$FixedArray$makei$39$(length, value) {
  if (length <= 0) {
    return [];
  } else {
    const array = $make_array_len_and_init(length, value(0));
    let _tmp = 1;
    while (true) {
      const i = _tmp;
      if (i < length) {
        $bound_check(array, i);
        array[i] = value(i);
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return array;
  }
}
function moonbitlang$core$array$$FixedArray$makei$29$(length, value) {
  if (length <= 0) {
    return [];
  } else {
    const array = $make_array_len_and_init(length, value(0));
    let _tmp = 1;
    while (true) {
      const i = _tmp;
      if (i < length) {
        $bound_check(array, i);
        array[i] = value(i);
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return array;
  }
}
function moonbitlang$core$array$$FixedArray$makei$28$(length, value) {
  if (length <= 0) {
    return [];
  } else {
    const array = $make_array_len_and_init(length, value(0));
    let _tmp = 1;
    while (true) {
      const i = _tmp;
      if (i < length) {
        $bound_check(array, i);
        array[i] = value(i);
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return array;
  }
}
function moonbitlang$core$array$$FixedArray$makei$8$(length, value) {
  if (length <= 0) {
    return [];
  } else {
    const array = $make_array_len_and_init(length, value(0));
    let _tmp = 1;
    while (true) {
      const i = _tmp;
      if (i < length) {
        $bound_check(array, i);
        array[i] = value(i);
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return array;
  }
}
function moonbitlang$core$array$$FixedArray$makei$27$(length, value) {
  if (length <= 0) {
    return [];
  } else {
    const array = $make_array_len_and_init(length, value(0));
    let _tmp = 1;
    while (true) {
      const i = _tmp;
      if (i < length) {
        $bound_check(array, i);
        array[i] = value(i);
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return array;
  }
}
function moonbitlang$core$array$$FixedArray$makei$40$(length, value) {
  if (length <= 0) {
    return [];
  } else {
    const array = $make_array_len_and_init(length, value(0));
    let _tmp = 1;
    while (true) {
      const i = _tmp;
      if (i < length) {
        $bound_check(array, i);
        array[i] = value(i);
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return array;
  }
}
function moonbitlang$core$array$$FixedArray$makei$22$(length, value) {
  if (length <= 0) {
    return [];
  } else {
    const array = $make_array_len_and_init(length, value(0));
    let _tmp = 1;
    while (true) {
      const i = _tmp;
      if (i < length) {
        $bound_check(array, i);
        array[i] = value(i);
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return array;
  }
}
function moonbitlang$core$array$$FixedArray$makei$21$(length, value) {
  if (length <= 0) {
    return [];
  } else {
    const array = $make_array_len_and_init(length, value(0));
    let _tmp = 1;
    while (true) {
      const i = _tmp;
      if (i < length) {
        $bound_check(array, i);
        array[i] = value(i);
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return array;
  }
}
function moonbitlang$core$array$$bubble_sort_by$18$(arr, cmp) {
  const _end437 = arr.len;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < _end437) {
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && cmp(moonbitlang$core$array$$ArrayView$op_get$18$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$18$(arr, j)) > 0) {
          moonbitlang$core$array$$ArrayView$swap$18$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$bubble_sort_by$23$(arr, cmp) {
  const _end437 = arr.len;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < _end437) {
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && cmp(moonbitlang$core$array$$ArrayView$op_get$23$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$23$(arr, j)) > 0) {
          moonbitlang$core$array$$ArrayView$swap$23$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$153(_env, a, b) {
  const swaps = _env._2;
  const cmp = _env._1;
  const arr = _env._0;
  if (cmp(moonbitlang$core$array$$ArrayView$op_get$18$(arr, a), moonbitlang$core$array$$ArrayView$op_get$18$(arr, b)) > 0) {
    moonbitlang$core$array$$ArrayView$swap$18$(arr, a, b);
    swaps.val = swaps.val + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$154(_env, a, b, c) {
  moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$153(_env, a, b);
  moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$153(_env, b, c);
  moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$153(_env, a, b);
}
function moonbitlang$core$array$$choose_pivot_by$18$(arr, cmp) {
  const len = arr.len;
  const swaps = { val: 0 };
  const b = Math.imul(len / 4 | 0, 2) | 0;
  if (len >= 8) {
    const a = Math.imul(len / 4 | 0, 1) | 0;
    const c = Math.imul(len / 4 | 0, 3) | 0;
    const _env = { _0: arr, _1: cmp, _2: swaps };
    if (len > 50) {
      moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$154(_env, a - 1 | 0, a, a + 1 | 0);
      moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$154(_env, b - 1 | 0, b, b + 1 | 0);
      moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$154(_env, c - 1 | 0, c, c + 1 | 0);
    }
    moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$154(_env, a, b, c);
  }
  if (swaps.val === 12) {
    moonbitlang$core$array$$ArrayView$rev_inplace$18$(arr);
    return { _0: (len - b | 0) - 1 | 0, _1: true };
  } else {
    return { _0: b, _1: swaps.val === 0 };
  }
}
function moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$173(_env, a, b) {
  const swaps = _env._2;
  const cmp = _env._1;
  const arr = _env._0;
  if (cmp(moonbitlang$core$array$$ArrayView$op_get$23$(arr, a), moonbitlang$core$array$$ArrayView$op_get$23$(arr, b)) > 0) {
    moonbitlang$core$array$$ArrayView$swap$23$(arr, a, b);
    swaps.val = swaps.val + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$174(_env, a, b, c) {
  moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$173(_env, a, b);
  moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$173(_env, b, c);
  moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$173(_env, a, b);
}
function moonbitlang$core$array$$choose_pivot_by$23$(arr, cmp) {
  const len = arr.len;
  const swaps = { val: 0 };
  const b = Math.imul(len / 4 | 0, 2) | 0;
  if (len >= 8) {
    const a = Math.imul(len / 4 | 0, 1) | 0;
    const c = Math.imul(len / 4 | 0, 3) | 0;
    const _env = { _0: arr, _1: cmp, _2: swaps };
    if (len > 50) {
      moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$174(_env, a - 1 | 0, a, a + 1 | 0);
      moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$174(_env, b - 1 | 0, b, b + 1 | 0);
      moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$174(_env, c - 1 | 0, c, c + 1 | 0);
    }
    moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$174(_env, a, b, c);
  }
  if (swaps.val === 12) {
    moonbitlang$core$array$$ArrayView$rev_inplace$23$(arr);
    return { _0: (len - b | 0) - 1 | 0, _1: true };
  } else {
    return { _0: b, _1: swaps.val === 0 };
  }
}
function moonbitlang$core$array$$sift_down_by$18$(arr, index, cmp) {
  let index$2 = index;
  const len = arr.len;
  let child = (Math.imul(index$2, 2) | 0) + 1 | 0;
  while (true) {
    if (child < len) {
      if ((child + 1 | 0) < len && cmp(moonbitlang$core$array$$ArrayView$op_get$18$(arr, child), moonbitlang$core$array$$ArrayView$op_get$18$(arr, child + 1 | 0)) < 0) {
        child = child + 1 | 0;
      }
      if (cmp(moonbitlang$core$array$$ArrayView$op_get$18$(arr, index$2), moonbitlang$core$array$$ArrayView$op_get$18$(arr, child)) >= 0) {
        return undefined;
      }
      moonbitlang$core$array$$ArrayView$swap$18$(arr, index$2, child);
      index$2 = child;
      child = (Math.imul(index$2, 2) | 0) + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$sift_down_by$23$(arr, index, cmp) {
  let index$2 = index;
  const len = arr.len;
  let child = (Math.imul(index$2, 2) | 0) + 1 | 0;
  while (true) {
    if (child < len) {
      if ((child + 1 | 0) < len && cmp(moonbitlang$core$array$$ArrayView$op_get$23$(arr, child), moonbitlang$core$array$$ArrayView$op_get$23$(arr, child + 1 | 0)) < 0) {
        child = child + 1 | 0;
      }
      if (cmp(moonbitlang$core$array$$ArrayView$op_get$23$(arr, index$2), moonbitlang$core$array$$ArrayView$op_get$23$(arr, child)) >= 0) {
        return undefined;
      }
      moonbitlang$core$array$$ArrayView$swap$23$(arr, index$2, child);
      index$2 = child;
      child = (Math.imul(index$2, 2) | 0) + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$heap_sort_by$18$(arr, cmp) {
  const len = arr.len;
  let _tmp = (len / 2 | 0) - 1 | 0;
  while (true) {
    const i = _tmp;
    if (i >= 0) {
      moonbitlang$core$array$$sift_down_by$18$(arr, i, cmp);
      _tmp = i - 1 | 0;
      continue;
    } else {
      break;
    }
  }
  let _tmp$2 = len - 1 | 0;
  while (true) {
    const i = _tmp$2;
    if (i > 0) {
      moonbitlang$core$array$$ArrayView$swap$18$(arr, 0, i);
      moonbitlang$core$array$$sift_down_by$18$(moonbitlang$core$array$$ArrayView$op_as_view$18$(arr, 0, i), 0, cmp);
      _tmp$2 = i - 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$heap_sort_by$23$(arr, cmp) {
  const len = arr.len;
  let _tmp = (len / 2 | 0) - 1 | 0;
  while (true) {
    const i = _tmp;
    if (i >= 0) {
      moonbitlang$core$array$$sift_down_by$23$(arr, i, cmp);
      _tmp = i - 1 | 0;
      continue;
    } else {
      break;
    }
  }
  let _tmp$2 = len - 1 | 0;
  while (true) {
    const i = _tmp$2;
    if (i > 0) {
      moonbitlang$core$array$$ArrayView$swap$23$(arr, 0, i);
      moonbitlang$core$array$$sift_down_by$23$(moonbitlang$core$array$$ArrayView$op_as_view$23$(arr, 0, i), 0, cmp);
      _tmp$2 = i - 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$partition_by$18$(arr, cmp, pivot_index) {
  moonbitlang$core$array$$ArrayView$swap$18$(arr, pivot_index, arr.len - 1 | 0);
  const pivot = moonbitlang$core$array$$ArrayView$op_get$18$(arr, arr.len - 1 | 0);
  let i = 0;
  let partitioned = true;
  const _end430 = arr.len - 1 | 0;
  let _tmp = 0;
  while (true) {
    const j = _tmp;
    if (j < _end430) {
      if (cmp(moonbitlang$core$array$$ArrayView$op_get$18$(arr, j), pivot) < 0) {
        if (i !== j) {
          moonbitlang$core$array$$ArrayView$swap$18$(arr, i, j);
          partitioned = false;
        }
        i = i + 1 | 0;
      }
      _tmp = j + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$array$$ArrayView$swap$18$(arr, i, arr.len - 1 | 0);
  return { _0: i, _1: partitioned };
}
function moonbitlang$core$array$$partition_by$23$(arr, cmp, pivot_index) {
  moonbitlang$core$array$$ArrayView$swap$23$(arr, pivot_index, arr.len - 1 | 0);
  const pivot = moonbitlang$core$array$$ArrayView$op_get$23$(arr, arr.len - 1 | 0);
  let i = 0;
  let partitioned = true;
  const _end430 = arr.len - 1 | 0;
  let _tmp = 0;
  while (true) {
    const j = _tmp;
    if (j < _end430) {
      if (cmp(moonbitlang$core$array$$ArrayView$op_get$23$(arr, j), pivot) < 0) {
        if (i !== j) {
          moonbitlang$core$array$$ArrayView$swap$23$(arr, i, j);
          partitioned = false;
        }
        i = i + 1 | 0;
      }
      _tmp = j + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$array$$ArrayView$swap$23$(arr, i, arr.len - 1 | 0);
  return { _0: i, _1: partitioned };
}
function moonbitlang$core$array$$try_bubble_sort_by$18$(arr, cmp) {
  let tries = 0;
  const _end447 = arr.len;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < _end447) {
      let sorted = true;
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && cmp(moonbitlang$core$array$$ArrayView$op_get$18$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$18$(arr, j)) > 0) {
          sorted = false;
          moonbitlang$core$array$$ArrayView$swap$18$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      if (!sorted) {
        tries = tries + 1 | 0;
        if (tries > 8) {
          return false;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return true;
}
function moonbitlang$core$array$$try_bubble_sort_by$23$(arr, cmp) {
  let tries = 0;
  const _end447 = arr.len;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < _end447) {
      let sorted = true;
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && cmp(moonbitlang$core$array$$ArrayView$op_get$23$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$23$(arr, j)) > 0) {
          sorted = false;
          moonbitlang$core$array$$ArrayView$swap$23$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      if (!sorted) {
        tries = tries + 1 | 0;
        if (tries > 8) {
          return false;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return true;
}
function moonbitlang$core$array$$quick_sort_by$18$(arr, cmp, pred, limit) {
  let limit$2 = limit;
  let arr$2 = arr;
  let pred$2 = pred;
  let was_partitioned = true;
  let balanced = true;
  while (true) {
    const _p = arr$2;
    const len = _p.len;
    if (len <= 16) {
      if (len >= 2) {
        moonbitlang$core$array$$bubble_sort_by$18$(arr$2, cmp);
      }
      return undefined;
    }
    if (limit$2 === 0) {
      moonbitlang$core$array$$heap_sort_by$18$(arr$2, cmp);
      return undefined;
    }
    const _bind = moonbitlang$core$array$$choose_pivot_by$18$(arr$2, cmp);
    const _pivot_index = _bind._0;
    const _likely_sorted = _bind._1;
    if (was_partitioned && (balanced && _likely_sorted)) {
      if (moonbitlang$core$array$$try_bubble_sort_by$18$(arr$2, cmp)) {
        return undefined;
      }
    }
    const _bind$2 = moonbitlang$core$array$$partition_by$18$(arr$2, cmp, _pivot_index);
    const _pivot = _bind$2._0;
    const _partitioned = _bind$2._1;
    was_partitioned = _partitioned;
    balanced = moonbitlang$core$array$$minimum(_pivot, len - _pivot | 0) >= (len / 8 | 0);
    if (!balanced) {
      limit$2 = limit$2 - 1 | 0;
    }
    const _bind$3 = pred$2;
    if (_bind$3 === undefined) {
    } else {
      const _Some = _bind$3;
      const _pred = _Some;
      if (cmp(_pred, moonbitlang$core$array$$ArrayView$op_get$18$(arr$2, _pivot)) === 0) {
        let i = _pivot;
        while (true) {
          if (i < len && cmp(_pred, moonbitlang$core$array$$ArrayView$op_get$18$(arr$2, i)) === 0) {
            i = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        arr$2 = moonbitlang$core$array$$ArrayView$op_as_view$18$(arr$2, i, len);
        continue;
      }
    }
    const left = moonbitlang$core$array$$ArrayView$op_as_view$18$(arr$2, 0, _pivot);
    const right = moonbitlang$core$array$$ArrayView$op_as_view$18$(arr$2, _pivot + 1 | 0, len);
    if (left.len < right.len) {
      moonbitlang$core$array$$quick_sort_by$18$(left, cmp, pred$2, limit$2);
      pred$2 = moonbitlang$core$array$$ArrayView$op_get$18$(arr$2, _pivot);
      arr$2 = right;
    } else {
      moonbitlang$core$array$$quick_sort_by$18$(right, cmp, moonbitlang$core$array$$ArrayView$op_get$18$(arr$2, _pivot), limit$2);
      arr$2 = left;
    }
    continue;
  }
}
function moonbitlang$core$array$$quick_sort_by$23$(arr, cmp, pred, limit) {
  let limit$2 = limit;
  let arr$2 = arr;
  let pred$2 = pred;
  let was_partitioned = true;
  let balanced = true;
  while (true) {
    const _p = arr$2;
    const len = _p.len;
    if (len <= 16) {
      if (len >= 2) {
        moonbitlang$core$array$$bubble_sort_by$23$(arr$2, cmp);
      }
      return undefined;
    }
    if (limit$2 === 0) {
      moonbitlang$core$array$$heap_sort_by$23$(arr$2, cmp);
      return undefined;
    }
    const _bind = moonbitlang$core$array$$choose_pivot_by$23$(arr$2, cmp);
    const _pivot_index = _bind._0;
    const _likely_sorted = _bind._1;
    if (was_partitioned && (balanced && _likely_sorted)) {
      if (moonbitlang$core$array$$try_bubble_sort_by$23$(arr$2, cmp)) {
        return undefined;
      }
    }
    const _bind$2 = moonbitlang$core$array$$partition_by$23$(arr$2, cmp, _pivot_index);
    const _pivot = _bind$2._0;
    const _partitioned = _bind$2._1;
    was_partitioned = _partitioned;
    balanced = moonbitlang$core$array$$minimum(_pivot, len - _pivot | 0) >= (len / 8 | 0);
    if (!balanced) {
      limit$2 = limit$2 - 1 | 0;
    }
    const _bind$3 = pred$2;
    if (_bind$3 === undefined) {
    } else {
      const _Some = _bind$3;
      const _pred = _Some;
      if (cmp(_pred, moonbitlang$core$array$$ArrayView$op_get$23$(arr$2, _pivot)) === 0) {
        let i = _pivot;
        while (true) {
          if (i < len && cmp(_pred, moonbitlang$core$array$$ArrayView$op_get$23$(arr$2, i)) === 0) {
            i = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        arr$2 = moonbitlang$core$array$$ArrayView$op_as_view$23$(arr$2, i, len);
        continue;
      }
    }
    const left = moonbitlang$core$array$$ArrayView$op_as_view$23$(arr$2, 0, _pivot);
    const right = moonbitlang$core$array$$ArrayView$op_as_view$23$(arr$2, _pivot + 1 | 0, len);
    if (left.len < right.len) {
      moonbitlang$core$array$$quick_sort_by$23$(left, cmp, pred$2, limit$2);
      pred$2 = moonbitlang$core$array$$ArrayView$op_get$23$(arr$2, _pivot);
      arr$2 = right;
    } else {
      moonbitlang$core$array$$quick_sort_by$23$(right, cmp, moonbitlang$core$array$$ArrayView$op_get$23$(arr$2, _pivot), limit$2);
      arr$2 = left;
    }
    continue;
  }
}
function moonbitlang$core$array$$Array$sort_by_key$41$(self, map) {
  moonbitlang$core$array$$quick_sort_by$18$({ buf: self, start: 0, len: self.length }, (a, b) => $compare_int(map(a), map(b)), undefined, moonbitlang$core$array$$get_limit(self.length));
}
function moonbitlang$core$array$$Array$sort_by_key$42$(self, map) {
  moonbitlang$core$array$$quick_sort_by$23$({ buf: self, start: 0, len: self.length }, (a, b) => {
    const _p = map(a);
    const _p$2 = map(b);
    return $compare_int(_p, _p$2);
  }, undefined, moonbitlang$core$array$$get_limit(self.length));
}
function moonbitlang$core$array$$FixedArray$map$43$(self, f) {
  if (self.length === 0) {
    return [];
  }
  const _tmp = self.length;
  $bound_check(self, 0);
  const res = $make_array_len_and_init(_tmp, f(self[0]));
  const _end334 = self.length;
  let _tmp$2 = 1;
  while (true) {
    const i = _tmp$2;
    if (i < _end334) {
      $bound_check(self, i);
      $bound_check(res, i);
      res[i] = f(self[i]);
      _tmp$2 = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return res;
}
function moonbitlang$core$array$$FixedArray$from_array$8$(array) {
  return moonbitlang$core$array$$FixedArray$makei$8$(array.length, (i) => moonbitlang$core$array$$Array$op_get$8$(array, i));
}
function moonbitlang$core$array$$FixedArray$from_array$21$(array) {
  return moonbitlang$core$array$$FixedArray$makei$21$(array.length, (i) => moonbitlang$core$array$$Array$op_get$21$(array, i));
}
function moonbitlang$core$array$$FixedArray$fold$44$(self, init, f) {
  let _tmp = 0;
  let _tmp$2 = init;
  while (true) {
    const i = _tmp;
    const acc = _tmp$2;
    if (i < self.length) {
      const _tmp$3 = i + 1 | 0;
      $bound_check(self, i);
      const _tmp$4 = f(acc, self[i]);
      _tmp = _tmp$3;
      _tmp$2 = _tmp$4;
      continue;
    } else {
      return acc;
    }
  }
}
function moonbitlang$core$array$$Array$push_iter$6$(self, iter) {
  iter((x) => {
    moonbitlang$core$array$$Array$push$6$(self, x);
    return 1;
  });
}
function moonbitlang$core$array$$Array$join(self, separator) {
  return moonbitlang$core$array$$ArrayView$join({ buf: self, start: 0, len: self.length }, separator);
}
function moonbitlang$core$sorted_set$$new$6$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_set$$new$45$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_set$$new$46$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_set$$height$45$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_set$$height$6$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_set$$height$46$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_set$$height_ge$45$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_set$$height_ge$6$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_set$$height_ge$46$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_set$$max(x, y) {
  return x > y ? x : y;
}
function moonbitlang$core$sorted_set$$Node$update_height$45$(self) {
  self.height = 1 + moonbitlang$core$sorted_set$$max(moonbitlang$core$sorted_set$$height$45$(self.left), moonbitlang$core$sorted_set$$height$45$(self.right)) | 0;
}
function moonbitlang$core$sorted_set$$Node$update_height$6$(self) {
  self.height = 1 + moonbitlang$core$sorted_set$$max(moonbitlang$core$sorted_set$$height$6$(self.left), moonbitlang$core$sorted_set$$height$6$(self.right)) | 0;
}
function moonbitlang$core$sorted_set$$Node$update_height$46$(self) {
  self.height = 1 + moonbitlang$core$sorted_set$$max(moonbitlang$core$sorted_set$$height$46$(self.left), moonbitlang$core$sorted_set$$height$46$(self.right)) | 0;
}
function moonbitlang$core$sorted_set$$rotate_l$45$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$47$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_set$$Node$update_height$45$(n);
  moonbitlang$core$sorted_set$$Node$update_height$45$(r);
  return r;
}
function moonbitlang$core$sorted_set$$rotate_l$6$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$48$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_set$$Node$update_height$6$(n);
  moonbitlang$core$sorted_set$$Node$update_height$6$(r);
  return r;
}
function moonbitlang$core$sorted_set$$rotate_l$46$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$49$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_set$$Node$update_height$46$(n);
  moonbitlang$core$sorted_set$$Node$update_height$46$(r);
  return r;
}
function moonbitlang$core$sorted_set$$rotate_r$45$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$47$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_set$$Node$update_height$45$(n);
  moonbitlang$core$sorted_set$$Node$update_height$45$(l);
  return l;
}
function moonbitlang$core$sorted_set$$rotate_r$6$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$48$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_set$$Node$update_height$6$(n);
  moonbitlang$core$sorted_set$$Node$update_height$6$(l);
  return l;
}
function moonbitlang$core$sorted_set$$rotate_r$46$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$49$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_set$$Node$update_height$46$(n);
  moonbitlang$core$sorted_set$$Node$update_height$46$(l);
  return l;
}
function moonbitlang$core$sorted_set$$rotate_lr$45$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$47$(n.left);
  const v = moonbitlang$core$sorted_set$$rotate_l$45$(l);
  n.left = v;
  return moonbitlang$core$sorted_set$$rotate_r$45$(n);
}
function moonbitlang$core$sorted_set$$rotate_lr$6$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$48$(n.left);
  const v = moonbitlang$core$sorted_set$$rotate_l$6$(l);
  n.left = v;
  return moonbitlang$core$sorted_set$$rotate_r$6$(n);
}
function moonbitlang$core$sorted_set$$rotate_lr$46$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$49$(n.left);
  const v = moonbitlang$core$sorted_set$$rotate_l$46$(l);
  n.left = v;
  return moonbitlang$core$sorted_set$$rotate_r$46$(n);
}
function moonbitlang$core$sorted_set$$rotate_rl$45$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$47$(n.right);
  const v = moonbitlang$core$sorted_set$$rotate_r$45$(r);
  n.right = v;
  return moonbitlang$core$sorted_set$$rotate_l$45$(n);
}
function moonbitlang$core$sorted_set$$rotate_rl$6$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$48$(n.right);
  const v = moonbitlang$core$sorted_set$$rotate_r$6$(r);
  n.right = v;
  return moonbitlang$core$sorted_set$$rotate_l$6$(n);
}
function moonbitlang$core$sorted_set$$rotate_rl$46$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$49$(n.right);
  const v = moonbitlang$core$sorted_set$$rotate_r$46$(r);
  n.right = v;
  return moonbitlang$core$sorted_set$$rotate_l$46$(n);
}
function moonbitlang$core$sorted_set$$balance$45$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_set$$height$45$(l);
  const hr = moonbitlang$core$sorted_set$$height$45$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$47$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_set$$height_ge$45$(_ll, _lr) ? moonbitlang$core$sorted_set$$rotate_r$45$(root) : moonbitlang$core$sorted_set$$rotate_lr$45$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$47$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_set$$height_ge$45$(_rr, _rl) ? moonbitlang$core$sorted_set$$rotate_l$45$(root) : moonbitlang$core$sorted_set$$rotate_rl$45$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_set$$Node$update_height$45$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_set$$balance$6$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_set$$height$6$(l);
  const hr = moonbitlang$core$sorted_set$$height$6$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$48$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_set$$height_ge$6$(_ll, _lr) ? moonbitlang$core$sorted_set$$rotate_r$6$(root) : moonbitlang$core$sorted_set$$rotate_lr$6$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$48$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_set$$height_ge$6$(_rr, _rl) ? moonbitlang$core$sorted_set$$rotate_l$6$(root) : moonbitlang$core$sorted_set$$rotate_rl$6$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_set$$Node$update_height$6$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_set$$balance$46$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_set$$height$46$(l);
  const hr = moonbitlang$core$sorted_set$$height$46$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$49$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_set$$height_ge$46$(_ll, _lr) ? moonbitlang$core$sorted_set$$rotate_r$46$(root) : moonbitlang$core$sorted_set$$rotate_lr$46$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$49$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_set$$height_ge$46$(_rr, _rl) ? moonbitlang$core$sorted_set$$rotate_l$46$(root) : moonbitlang$core$sorted_set$$rotate_rl$46$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_set$$Node$update_height$46$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_set$$new_node$45$(value, left, right, height) {
  return { value: value, left: left, right: right, height: height };
}
function moonbitlang$core$sorted_set$$new_node$6$(value, left, right, height) {
  return { value: value, left: left, right: right, height: height };
}
function moonbitlang$core$sorted_set$$new_node$46$(value, left, right, height) {
  return { value: value, left: left, right: right, height: height };
}
function moonbitlang$core$sorted_set$$add_node$45$(root, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_set$$new_node$45$(value, undefined, undefined, 1), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    const comp = moonbitlang$core$builtin$$Compare$compare$45$(value, _n.value);
    if (comp === 0) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (comp < 0) {
        const _bind = moonbitlang$core$sorted_set$$add_node$45$(l, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_set$$balance$45$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_set$$add_node$45$(r, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_set$$balance$45$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_set$$add_node$6$(root, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_set$$new_node$6$(value, undefined, undefined, 1), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    const comp = moonbitlang$core$builtin$$Compare$compare$6$(value, _n.value);
    if (comp === 0) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (comp < 0) {
        const _bind = moonbitlang$core$sorted_set$$add_node$6$(l, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_set$$balance$6$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_set$$add_node$6$(r, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_set$$balance$6$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_set$$add_node$46$(root, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_set$$new_node$46$(value, undefined, undefined, 1), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    const comp = moonbitlang$core$builtin$$Compare$compare$46$(value, _n.value);
    if (comp === 0) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (comp < 0) {
        const _bind = moonbitlang$core$sorted_set$$add_node$46$(l, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_set$$balance$46$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_set$$add_node$46$(r, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_set$$balance$46$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_set$$T$add$45$(self, value) {
  const _bind = moonbitlang$core$sorted_set$$add_node$45$(self.root, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$50$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_set$$T$add$6$(self, value) {
  const _bind = moonbitlang$core$sorted_set$$add_node$6$(self.root, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$51$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_set$$T$add$46$(self, value) {
  const _bind = moonbitlang$core$sorted_set$$add_node$46$(self.root, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$52$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_set$$T$contains$46$(self, value) {
  let _tmp = self.root;
  let _tmp$2 = value;
  while (true) {
    const _param_0 = _tmp;
    const _param_1 = _tmp$2;
    if (_param_0 === undefined) {
      return false;
    } else {
      const _Some = _param_0;
      const _node = _Some;
      const compare_result = moonbitlang$core$builtin$$Compare$compare$46$(_param_1, _node.value);
      if (compare_result === 0) {
        return true;
      } else {
        if (compare_result < 0) {
          _tmp = _node.left;
          continue;
        } else {
          _tmp = _node.right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_set$$iter$46$go$47$506(yield_, x) {
  let _tmp = x;
  while (true) {
    const x$2 = _tmp;
    if (x$2 === undefined) {
      return 1;
    } else {
      const _Some = x$2;
      const _x = _Some;
      const _left = _x.left;
      const _right = _x.right;
      const _value = _x.value;
      const _bind = moonbitlang$core$sorted_set$$iter$46$go$47$506(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_set$$T$iter$45$(self) {
  const _p = (yield_) => moonbitlang$core$sorted_set$$iter$46$go$47$506(yield_, self.root);
  return _p;
}
function moonbitlang$core$sorted_set$$iter$46$go$47$520(yield_, x) {
  let _tmp = x;
  while (true) {
    const x$2 = _tmp;
    if (x$2 === undefined) {
      return 1;
    } else {
      const _Some = x$2;
      const _x = _Some;
      const _left = _x.left;
      const _right = _x.right;
      const _value = _x.value;
      const _bind = moonbitlang$core$sorted_set$$iter$46$go$47$520(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_set$$T$iter$6$(self) {
  const _p = (yield_) => moonbitlang$core$sorted_set$$iter$46$go$47$520(yield_, self.root);
  return _p;
}
function moonbitlang$core$builtin$$Eq$op_equal$53$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$45$(self.value, other.value);
}
function moonbitlang$core$builtin$$Eq$op_equal$54$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$46$(self.value, other.value);
}
function moonbitlang$core$set$$power_2_above(x, n) {
  let _tmp = x;
  while (true) {
    const i = _tmp;
    if (i >= n) {
      return i;
    }
    const next = i << 1;
    if (next < 0) {
      return i;
    }
    _tmp = next;
    continue;
  }
}
function moonbitlang$core$set$$Set$new$6$(capacity) {
  const capacity$2 = moonbitlang$core$set$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined });
  const _bind$5 = undefined;
  const _bind$6 = undefined;
  return { entries: _bind$3, list: _bind$4, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$5, tail: _bind$6 };
}
function moonbitlang$core$set$$Set$new$55$(capacity) {
  const capacity$2 = moonbitlang$core$set$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined });
  const _bind$5 = undefined;
  const _bind$6 = undefined;
  return { entries: _bind$3, list: _bind$4, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$5, tail: _bind$6 };
}
function moonbitlang$core$set$$Set$add_entry_to_tail$6$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$set$$Set$add_entry_to_tail$55$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$set$$Set$add$6$(self, key) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$set$$Set$grow$6$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const entry = _tmp$3;
    const node = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, idx);
    const _bind = _tmp$5[idx];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, idx);
      _tmp$6[idx] = entry;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, idx);
      _tmp$7[idx] = node;
      entry.idx = idx;
      moonbitlang$core$set$$Set$add_entry_to_tail$6$(self, insert_entry);
      self.size = self.size + 1 | 0;
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === entry.hash && _curr_entry.key === entry.key) {
        break;
      }
      if (entry.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, idx);
        _tmp$8[idx] = entry;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, idx);
        _tmp$9[idx] = node;
        entry.idx = idx;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = i + 1 | 0;
        const _tmp$11 = idx + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        entry.psl = entry.psl + 1 | 0;
        const _tmp$8 = i + 1 | 0;
        const _tmp$9 = idx + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$set$$Set$add$55$(self, key) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$set$$Set$grow$55$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$57$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const entry = _tmp$3;
    const node = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, idx);
    const _bind = _tmp$5[idx];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, idx);
      _tmp$6[idx] = entry;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, idx);
      _tmp$7[idx] = node;
      entry.idx = idx;
      moonbitlang$core$set$$Set$add_entry_to_tail$55$(self, insert_entry);
      self.size = self.size + 1 | 0;
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      let _tmp$8;
      if (_curr_entry.hash === entry.hash) {
        const _p = _curr_entry.key;
        const _p$2 = entry.key;
        _tmp$8 = _p === _p$2;
      } else {
        _tmp$8 = false;
      }
      if (_tmp$8) {
        break;
      }
      if (entry.psl > _curr_entry.psl) {
        const _tmp$9 = self.entries;
        $bound_check(_tmp$9, idx);
        _tmp$9[idx] = entry;
        const _tmp$10 = self.list;
        $bound_check(_tmp$10, idx);
        _tmp$10[idx] = node;
        entry.idx = idx;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$11 = i + 1 | 0;
        const _tmp$12 = idx + 1 & self.capacity_mask;
        _tmp = _tmp$11;
        _tmp$2 = _tmp$12;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        entry.psl = entry.psl + 1 | 0;
        const _tmp$9 = i + 1 | 0;
        const _tmp$10 = idx + 1 & self.capacity_mask;
        _tmp = _tmp$9;
        _tmp$2 = _tmp$10;
        continue;
      }
    }
  }
}
function moonbitlang$core$set$$Set$grow$6$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      moonbitlang$core$set$$Set$add$6$(self, _key);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$set$$Set$grow$55$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      moonbitlang$core$set$$Set$add$55$(self, _key);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$set$$Set$from_array$6$(arr) {
  const m = moonbitlang$core$set$$Set$new$6$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$set$$Set$add$6$(m, e);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$set$$Set$add_and_check$55$(self, key) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$set$$Set$grow$55$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$57$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const entry = _tmp$3;
    const node = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, idx);
    const _bind = _tmp$5[idx];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, idx);
      _tmp$6[idx] = entry;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, idx);
      _tmp$7[idx] = node;
      entry.idx = idx;
      moonbitlang$core$set$$Set$add_entry_to_tail$55$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return true;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      let _tmp$8;
      if (_curr_entry.hash === entry.hash) {
        const _p = _curr_entry.key;
        const _p$2 = entry.key;
        _tmp$8 = _p === _p$2;
      } else {
        _tmp$8 = false;
      }
      if (_tmp$8) {
        return false;
      }
      if (entry.psl > _curr_entry.psl) {
        const _tmp$9 = self.entries;
        $bound_check(_tmp$9, idx);
        _tmp$9[idx] = entry;
        const _tmp$10 = self.list;
        $bound_check(_tmp$10, idx);
        _tmp$10[idx] = node;
        entry.idx = idx;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$11 = i + 1 | 0;
        const _tmp$12 = idx + 1 & self.capacity_mask;
        _tmp = _tmp$11;
        _tmp$2 = _tmp$12;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        entry.psl = entry.psl + 1 | 0;
        const _tmp$9 = i + 1 | 0;
        const _tmp$10 = idx + 1 & self.capacity_mask;
        _tmp = _tmp$9;
        _tmp$2 = _tmp$10;
        continue;
      }
    }
  }
}
function moonbitlang$core$set$$Set$contains$6$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return false;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return true;
      }
      if (i > _entry.psl) {
        return false;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$set$$Set$from_iter$6$(iter) {
  const m = moonbitlang$core$set$$Set$new$6$(8);
  iter((_p) => {
    moonbitlang$core$set$$Set$add$6$(m, _p);
    return 1;
  });
  return m;
}
function moonbitlang$core$immut$sorted_set$$T$size$58$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    const _size = _Node._2;
    return _size;
  }
}
function moonbitlang$core$immut$sorted_set$$create$58$(left, value, right) {
  return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$0$(left, right, (moonbitlang$core$immut$sorted_set$$T$size$58$(left) + moonbitlang$core$immut$sorted_set$$T$size$58$(right) | 0) + 1 | 0, value);
}
function moonbitlang$core$immut$sorted_set$$balance$58$(left, value, right) {
  const left_size = moonbitlang$core$immut$sorted_set$$T$size$58$(left);
  const right_size = moonbitlang$core$immut$sorted_set$$T$size$58$(right);
  if ((left_size + right_size | 0) < 2) {
    return moonbitlang$core$immut$sorted_set$$create$58$(left, value, right);
  } else {
    if (left_size > (Math.imul(right_size, 5) | 0)) {
      if (left.$tag === 0) {
        return moonbitlang$core$abort$$abort$25$("balance: left is empty.");
      } else {
        const _Node = left;
        const _ll = _Node._0;
        const _lv = _Node._3;
        const _lr = _Node._1;
        if (moonbitlang$core$immut$sorted_set$$T$size$58$(_ll) >= moonbitlang$core$immut$sorted_set$$T$size$58$(_lr)) {
          return moonbitlang$core$immut$sorted_set$$create$58$(_ll, _lv, moonbitlang$core$immut$sorted_set$$create$58$(_lr, value, right));
        } else {
          if (_lr.$tag === 0) {
            return moonbitlang$core$abort$$abort$25$("balance: right left.right is empty.");
          } else {
            const _Node$2 = _lr;
            const _lrl = _Node$2._0;
            const _lrv = _Node$2._3;
            const _lrr = _Node$2._1;
            return moonbitlang$core$immut$sorted_set$$create$58$(moonbitlang$core$immut$sorted_set$$create$58$(_ll, _lv, _lrl), _lrv, moonbitlang$core$immut$sorted_set$$create$58$(_lrr, value, right));
          }
        }
      }
    } else {
      if (right_size > (Math.imul(left_size, 5) | 0)) {
        if (right.$tag === 0) {
          return moonbitlang$core$abort$$abort$25$("balance: right is empty");
        } else {
          const _Node = right;
          const _rl = _Node._0;
          const _rv = _Node._3;
          const _rr = _Node._1;
          if (moonbitlang$core$immut$sorted_set$$T$size$58$(_rr) >= moonbitlang$core$immut$sorted_set$$T$size$58$(_rl)) {
            return moonbitlang$core$immut$sorted_set$$create$58$(moonbitlang$core$immut$sorted_set$$create$58$(left, value, _rl), _rv, _rr);
          } else {
            if (_rl.$tag === 0) {
              return moonbitlang$core$abort$$abort$25$("balance: right.left is empty");
            } else {
              const _Node$2 = _rl;
              const _rll = _Node$2._0;
              const _rlv = _Node$2._3;
              const _rlr = _Node$2._1;
              return moonbitlang$core$immut$sorted_set$$create$58$(moonbitlang$core$immut$sorted_set$$create$58$(left, value, _rll), _rlv, moonbitlang$core$immut$sorted_set$$create$58$(_rlr, _rv, _rr));
            }
          }
        }
      } else {
        return moonbitlang$core$immut$sorted_set$$create$58$(left, value, right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add$58$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$0$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$0$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$0$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = moonbitlang$core$builtin$$Compare$compare$58$(value, _node_value);
    if (compare_result === 0) {
      return self;
    } else {
      if (compare_result < 0) {
        const ll = moonbitlang$core$immut$sorted_set$$T$add$58$(_left, value);
        return _left === ll ? self : moonbitlang$core$immut$sorted_set$$balance$58$(ll, _node_value, _right);
      } else {
        const rr = moonbitlang$core$immut$sorted_set$$T$add$58$(_right, value);
        return _right === rr ? self : moonbitlang$core$immut$sorted_set$$balance$58$(_left, _node_value, rr);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$iter$46$go$47$687(yield_, t) {
  let _tmp = t;
  while (true) {
    const t$2 = _tmp;
    if (t$2.$tag === 0) {
      return 1;
    } else {
      const _Node = t$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _value = _Node._3;
      const _bind = moonbitlang$core$immut$sorted_set$$iter$46$go$47$687(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$iter$58$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_set$$iter$46$go$47$687(yield_, self);
  return _p;
}
function moonbitlang$core$strconv$$base_err$59$() {
  return new Result$Err$1$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$base_err_str));
}
function moonbitlang$core$strconv$$check_and_consume_base(view, base) {
  if (base === 0) {
    _L: {
      let rest;
      _L$2: {
        let rest$2;
        _L$3: {
          let rest$3;
          _L$4: {
            if (moonbitlang$core$string$$String$char_length_ge(view.str, 2, view.start, view.end)) {
              const _x = moonbitlang$core$string$$String$unsafe_char_at(view.str, moonbitlang$core$string$$String$offset_of_nth_char(view.str, 0, view.start, view.end));
              if (_x === 48) {
                const _x$2 = moonbitlang$core$string$$String$unsafe_char_at(view.str, moonbitlang$core$string$$String$offset_of_nth_char(view.str, 1, view.start, view.end));
                switch (_x$2) {
                  case 120: {
                    const _tmp = view.str;
                    const _bind = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$2;
                    if (_bind === undefined) {
                      _tmp$2 = view.end;
                    } else {
                      const _Some = _bind;
                      _tmp$2 = _Some;
                    }
                    const _tmp$3 = _tmp$2;
                    const _x$3 = { str: _tmp, start: _tmp$3, end: view.end };
                    rest$3 = _x$3;
                    break _L$4;
                  }
                  case 88: {
                    const _tmp$4 = view.str;
                    const _bind$2 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$5;
                    if (_bind$2 === undefined) {
                      _tmp$5 = view.end;
                    } else {
                      const _Some = _bind$2;
                      _tmp$5 = _Some;
                    }
                    const _tmp$6 = _tmp$5;
                    const _x$4 = { str: _tmp$4, start: _tmp$6, end: view.end };
                    rest$3 = _x$4;
                    break _L$4;
                  }
                  case 111: {
                    const _tmp$7 = view.str;
                    const _bind$3 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$8;
                    if (_bind$3 === undefined) {
                      _tmp$8 = view.end;
                    } else {
                      const _Some = _bind$3;
                      _tmp$8 = _Some;
                    }
                    const _tmp$9 = _tmp$8;
                    const _x$5 = { str: _tmp$7, start: _tmp$9, end: view.end };
                    rest$2 = _x$5;
                    break _L$3;
                  }
                  case 79: {
                    const _tmp$10 = view.str;
                    const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$11;
                    if (_bind$4 === undefined) {
                      _tmp$11 = view.end;
                    } else {
                      const _Some = _bind$4;
                      _tmp$11 = _Some;
                    }
                    const _tmp$12 = _tmp$11;
                    const _x$6 = { str: _tmp$10, start: _tmp$12, end: view.end };
                    rest$2 = _x$6;
                    break _L$3;
                  }
                  case 98: {
                    const _tmp$13 = view.str;
                    const _bind$5 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$14;
                    if (_bind$5 === undefined) {
                      _tmp$14 = view.end;
                    } else {
                      const _Some = _bind$5;
                      _tmp$14 = _Some;
                    }
                    const _tmp$15 = _tmp$14;
                    const _x$7 = { str: _tmp$13, start: _tmp$15, end: view.end };
                    rest = _x$7;
                    break _L$2;
                  }
                  case 66: {
                    const _tmp$16 = view.str;
                    const _bind$6 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$17;
                    if (_bind$6 === undefined) {
                      _tmp$17 = view.end;
                    } else {
                      const _Some = _bind$6;
                      _tmp$17 = _Some;
                    }
                    const _tmp$18 = _tmp$17;
                    const _x$8 = { str: _tmp$16, start: _tmp$18, end: view.end };
                    rest = _x$8;
                    break _L$2;
                  }
                  default: {
                    break _L;
                  }
                }
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return new Result$Ok$1$({ _0: 16, _1: rest$3, _2: true });
        }
        return new Result$Ok$1$({ _0: 8, _1: rest$2, _2: true });
      }
      return new Result$Ok$1$({ _0: 2, _1: rest, _2: true });
    }
    return new Result$Ok$1$({ _0: 10, _1: view, _2: false });
  } else {
    _L: {
      let rest;
      _L$2: {
        let rest$2;
        _L$3: {
          let rest$3;
          _L$4: {
            if (moonbitlang$core$string$$String$char_length_ge(view.str, 2, view.start, view.end)) {
              const _x = moonbitlang$core$string$$String$unsafe_char_at(view.str, moonbitlang$core$string$$String$offset_of_nth_char(view.str, 0, view.start, view.end));
              if (_x === 48) {
                const _x$2 = moonbitlang$core$string$$String$unsafe_char_at(view.str, moonbitlang$core$string$$String$offset_of_nth_char(view.str, 1, view.start, view.end));
                switch (_x$2) {
                  case 120: {
                    const _tmp = view.str;
                    const _bind = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$2;
                    if (_bind === undefined) {
                      _tmp$2 = view.end;
                    } else {
                      const _Some = _bind;
                      _tmp$2 = _Some;
                    }
                    const _tmp$3 = _tmp$2;
                    const _x$3 = { str: _tmp, start: _tmp$3, end: view.end };
                    if (base === 16) {
                      rest$3 = _x$3;
                      break _L$4;
                    } else {
                      break _L;
                    }
                  }
                  case 88: {
                    const _tmp$4 = view.str;
                    const _bind$2 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$5;
                    if (_bind$2 === undefined) {
                      _tmp$5 = view.end;
                    } else {
                      const _Some = _bind$2;
                      _tmp$5 = _Some;
                    }
                    const _tmp$6 = _tmp$5;
                    const _x$4 = { str: _tmp$4, start: _tmp$6, end: view.end };
                    if (base === 16) {
                      rest$3 = _x$4;
                      break _L$4;
                    } else {
                      break _L;
                    }
                  }
                  case 111: {
                    const _tmp$7 = view.str;
                    const _bind$3 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$8;
                    if (_bind$3 === undefined) {
                      _tmp$8 = view.end;
                    } else {
                      const _Some = _bind$3;
                      _tmp$8 = _Some;
                    }
                    const _tmp$9 = _tmp$8;
                    const _x$5 = { str: _tmp$7, start: _tmp$9, end: view.end };
                    if (base === 8) {
                      rest$2 = _x$5;
                      break _L$3;
                    } else {
                      break _L;
                    }
                  }
                  case 79: {
                    const _tmp$10 = view.str;
                    const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$11;
                    if (_bind$4 === undefined) {
                      _tmp$11 = view.end;
                    } else {
                      const _Some = _bind$4;
                      _tmp$11 = _Some;
                    }
                    const _tmp$12 = _tmp$11;
                    const _x$6 = { str: _tmp$10, start: _tmp$12, end: view.end };
                    if (base === 8) {
                      rest$2 = _x$6;
                      break _L$3;
                    } else {
                      break _L;
                    }
                  }
                  case 98: {
                    const _tmp$13 = view.str;
                    const _bind$5 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$14;
                    if (_bind$5 === undefined) {
                      _tmp$14 = view.end;
                    } else {
                      const _Some = _bind$5;
                      _tmp$14 = _Some;
                    }
                    const _tmp$15 = _tmp$14;
                    const _x$7 = { str: _tmp$13, start: _tmp$15, end: view.end };
                    if (base === 2) {
                      rest = _x$7;
                      break _L$2;
                    } else {
                      break _L;
                    }
                  }
                  case 66: {
                    const _tmp$16 = view.str;
                    const _bind$6 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$17;
                    if (_bind$6 === undefined) {
                      _tmp$17 = view.end;
                    } else {
                      const _Some = _bind$6;
                      _tmp$17 = _Some;
                    }
                    const _tmp$18 = _tmp$17;
                    const _x$8 = { str: _tmp$16, start: _tmp$18, end: view.end };
                    if (base === 2) {
                      rest = _x$8;
                      break _L$2;
                    } else {
                      break _L;
                    }
                  }
                  default: {
                    break _L;
                  }
                }
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return new Result$Ok$1$({ _0: 16, _1: rest$3, _2: true });
        }
        return new Result$Ok$1$({ _0: 8, _1: rest$2, _2: true });
      }
      return new Result$Ok$1$({ _0: 2, _1: rest, _2: true });
    }
    return base >= 2 && base <= 36 ? new Result$Ok$1$({ _0: base, _1: view, _2: false }) : moonbitlang$core$strconv$$base_err$59$();
  }
}
function moonbitlang$core$strconv$$overflow_threshold(base, neg) {
  return !neg ? (base === 10 ? moonbitlang$core$builtin$$Add$op_add$60$(moonbitlang$core$builtin$$Div$op_div$60$($9223372036854775807L, $10L), $1L) : base === 16 ? moonbitlang$core$builtin$$Add$op_add$60$(moonbitlang$core$builtin$$Div$op_div$60$($9223372036854775807L, $16L), $1L) : moonbitlang$core$builtin$$Add$op_add$60$(moonbitlang$core$builtin$$Div$op_div$60$($9223372036854775807L, moonbitlang$core$int$$Int$to_int64(base)), $1L)) : base === 10 ? moonbitlang$core$builtin$$Div$op_div$60$($_9223372036854775808L, $10L) : base === 16 ? moonbitlang$core$builtin$$Div$op_div$60$($_9223372036854775808L, $16L) : moonbitlang$core$builtin$$Div$op_div$60$($_9223372036854775808L, moonbitlang$core$int$$Int$to_int64(base));
}
function moonbitlang$core$strconv$$range_err$7$() {
  return new Result$Err$2$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$range_err_str));
}
function moonbitlang$core$strconv$$range_err$60$() {
  return new Result$Err$3$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$range_err_str));
}
function moonbitlang$core$strconv$$syntax_err$8$() {
  return new Result$Err$4$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$syntax_err_str));
}
function moonbitlang$core$strconv$$syntax_err$60$() {
  return new Result$Err$3$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$syntax_err_str));
}
function moonbitlang$core$strconv$$parse_int64(str, base) {
  const _p = "";
  if (!(str === _p)) {
    let _bind;
    let rest;
    _L: {
      _L$2: {
        const _bind$2 = moonbitlang$core$string$$String$view(str, 0, undefined);
        if (moonbitlang$core$string$$String$char_length_ge(_bind$2.str, 1, _bind$2.start, _bind$2.end)) {
          const _x = moonbitlang$core$string$$String$unsafe_char_at(_bind$2.str, moonbitlang$core$string$$String$offset_of_nth_char(_bind$2.str, 0, _bind$2.start, _bind$2.end));
          switch (_x) {
            case 43: {
              const _tmp = _bind$2.str;
              const _bind$3 = moonbitlang$core$string$$String$offset_of_nth_char(_bind$2.str, 1, _bind$2.start, _bind$2.end);
              let _tmp$2;
              if (_bind$3 === undefined) {
                _tmp$2 = _bind$2.end;
              } else {
                const _Some = _bind$3;
                _tmp$2 = _Some;
              }
              const _tmp$3 = _tmp$2;
              const _x$2 = { str: _tmp, start: _tmp$3, end: _bind$2.end };
              _bind = { _0: false, _1: _x$2 };
              break;
            }
            case 45: {
              const _tmp$4 = _bind$2.str;
              const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(_bind$2.str, 1, _bind$2.start, _bind$2.end);
              let _tmp$5;
              if (_bind$4 === undefined) {
                _tmp$5 = _bind$2.end;
              } else {
                const _Some = _bind$4;
                _tmp$5 = _Some;
              }
              const _tmp$6 = _tmp$5;
              const _x$3 = { str: _tmp$4, start: _tmp$6, end: _bind$2.end };
              _bind = { _0: true, _1: _x$3 };
              break;
            }
            default: {
              rest = _bind$2;
              break _L$2;
            }
          }
        } else {
          rest = _bind$2;
          break _L$2;
        }
        break _L;
      }
      _bind = { _0: false, _1: rest };
    }
    const _neg = _bind._0;
    const _rest = _bind._1;
    const _bind$2 = moonbitlang$core$strconv$$check_and_consume_base(_rest, base);
    let _bind$3;
    if (_bind$2.$tag === 1) {
      const _ok = _bind$2;
      _bind$3 = _ok._0;
    } else {
      return _bind$2;
    }
    const _num_base = _bind$3._0;
    const _rest$2 = _bind$3._1;
    const _allow_underscore = _bind$3._2;
    const overflow_threshold = moonbitlang$core$strconv$$overflow_threshold(_num_base, _neg);
    let has_digit;
    if (moonbitlang$core$string$$String$char_length_ge(_rest$2.str, 1, _rest$2.start, _rest$2.end)) {
      const _x = moonbitlang$core$string$$String$unsafe_char_at(_rest$2.str, moonbitlang$core$string$$String$offset_of_nth_char(_rest$2.str, 0, _rest$2.start, _rest$2.end));
      if (_x >= 48 && _x <= 57) {
        has_digit = true;
      } else {
        if (_x >= 97 && _x <= 122) {
          has_digit = true;
        } else {
          if (_x >= 65 && _x <= 90) {
            has_digit = true;
          } else {
            if (moonbitlang$core$string$$String$char_length_ge(_rest$2.str, 2, _rest$2.start, _rest$2.end)) {
              if (_x === 95) {
                const _x$2 = moonbitlang$core$string$$String$unsafe_char_at(_rest$2.str, moonbitlang$core$string$$String$offset_of_nth_char(_rest$2.str, 1, _rest$2.start, _rest$2.end));
                has_digit = _x$2 >= 48 && _x$2 <= 57 ? true : _x$2 >= 97 && _x$2 <= 122 ? true : _x$2 >= 65 && _x$2 <= 90;
              } else {
                has_digit = false;
              }
            } else {
              has_digit = false;
            }
          }
        }
      }
    } else {
      has_digit = false;
    }
    if (has_digit) {
      let _tmp;
      let _tmp$2 = _rest$2;
      let _tmp$3 = $0L;
      let _tmp$4 = _allow_underscore;
      while (true) {
        const _param_0 = _tmp$2;
        const _param_1 = _tmp$3;
        const _param_2 = _tmp$4;
        let acc;
        let rest$2;
        let c;
        _L$2: {
          if (moonbitlang$core$string$$String$char_length_eq(_param_0.str, 1, _param_0.start, _param_0.end)) {
            const _x = moonbitlang$core$string$$String$unsafe_char_at(_param_0.str, moonbitlang$core$string$$String$offset_of_nth_char(_param_0.str, 0, _param_0.start, _param_0.end));
            if (_x === 95) {
              const _bind$4 = moonbitlang$core$strconv$$syntax_err$60$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                _tmp = _ok._0;
                break;
              } else {
                return _bind$4;
              }
            } else {
              const _tmp$5 = _param_0.str;
              const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(_param_0.str, 1, _param_0.start, _param_0.end);
              let _tmp$6;
              if (_bind$4 === undefined) {
                _tmp$6 = _param_0.end;
              } else {
                const _Some = _bind$4;
                _tmp$6 = _Some;
              }
              const _tmp$7 = _tmp$6;
              const _x$2 = { str: _tmp$5, start: _tmp$7, end: _param_0.end };
              acc = _param_1;
              rest$2 = _x$2;
              c = _x;
              break _L$2;
            }
          } else {
            if (moonbitlang$core$string$$String$char_length_ge(_param_0.str, 1, _param_0.start, _param_0.end)) {
              const _x = moonbitlang$core$string$$String$unsafe_char_at(_param_0.str, moonbitlang$core$string$$String$offset_of_nth_char(_param_0.str, 0, _param_0.start, _param_0.end));
              if (_x === 95) {
                if (_param_2 === false) {
                  const _bind$4 = moonbitlang$core$strconv$$syntax_err$60$();
                  if (_bind$4.$tag === 1) {
                    const _ok = _bind$4;
                    _tmp = _ok._0;
                    break;
                  } else {
                    return _bind$4;
                  }
                } else {
                  const _tmp$5 = _param_0.str;
                  const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(_param_0.str, 1, _param_0.start, _param_0.end);
                  let _tmp$6;
                  if (_bind$4 === undefined) {
                    _tmp$6 = _param_0.end;
                  } else {
                    const _Some = _bind$4;
                    _tmp$6 = _Some;
                  }
                  const _tmp$7 = _tmp$6;
                  const _x$2 = { str: _tmp$5, start: _tmp$7, end: _param_0.end };
                  _tmp$2 = _x$2;
                  _tmp$4 = false;
                  continue;
                }
              } else {
                const _tmp$5 = _param_0.str;
                const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(_param_0.str, 1, _param_0.start, _param_0.end);
                let _tmp$6;
                if (_bind$4 === undefined) {
                  _tmp$6 = _param_0.end;
                } else {
                  const _Some = _bind$4;
                  _tmp$6 = _Some;
                }
                const _tmp$7 = _tmp$6;
                const _x$2 = { str: _tmp$5, start: _tmp$7, end: _param_0.end };
                acc = _param_1;
                rest$2 = _x$2;
                c = _x;
                break _L$2;
              }
            } else {
              _tmp = _param_1;
              break;
            }
          }
        }
        const c$2 = c;
        let d;
        if (c$2 >= 48 && c$2 <= 57) {
          d = c$2 - 48 | 0;
        } else {
          if (c$2 >= 97 && c$2 <= 122) {
            d = c$2 + -87 | 0;
          } else {
            if (c$2 >= 65 && c$2 <= 90) {
              d = c$2 + -55 | 0;
            } else {
              const _bind$4 = moonbitlang$core$strconv$$syntax_err$8$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                d = _ok._0;
              } else {
                return _bind$4;
              }
            }
          }
        }
        if (d < _num_base) {
          if (_neg) {
            if (moonbitlang$core$builtin$$op_ge$60$(acc, overflow_threshold)) {
              const next_acc = moonbitlang$core$builtin$$Sub$op_sub$60$(moonbitlang$core$builtin$$Mul$op_mul$60$(acc, moonbitlang$core$int$$Int$to_int64(_num_base)), moonbitlang$core$int$$Int$to_int64(d));
              if (moonbitlang$core$builtin$$op_le$60$(next_acc, acc)) {
                _tmp$2 = rest$2;
                _tmp$3 = next_acc;
                _tmp$4 = true;
                continue;
              } else {
                const _bind$4 = moonbitlang$core$strconv$$range_err$60$();
                if (_bind$4.$tag === 1) {
                  const _ok = _bind$4;
                  _tmp = _ok._0;
                  break;
                } else {
                  return _bind$4;
                }
              }
            } else {
              const _bind$4 = moonbitlang$core$strconv$$range_err$60$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                _tmp = _ok._0;
                break;
              } else {
                return _bind$4;
              }
            }
          } else {
            if (moonbitlang$core$builtin$$op_lt$60$(acc, overflow_threshold)) {
              const next_acc = moonbitlang$core$builtin$$Add$op_add$60$(moonbitlang$core$builtin$$Mul$op_mul$60$(acc, moonbitlang$core$int$$Int$to_int64(_num_base)), moonbitlang$core$int$$Int$to_int64(d));
              if (moonbitlang$core$builtin$$op_ge$60$(next_acc, acc)) {
                _tmp$2 = rest$2;
                _tmp$3 = next_acc;
                _tmp$4 = true;
                continue;
              } else {
                const _bind$4 = moonbitlang$core$strconv$$range_err$60$();
                if (_bind$4.$tag === 1) {
                  const _ok = _bind$4;
                  _tmp = _ok._0;
                  break;
                } else {
                  return _bind$4;
                }
              }
            } else {
              const _bind$4 = moonbitlang$core$strconv$$range_err$60$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                _tmp = _ok._0;
                break;
              } else {
                return _bind$4;
              }
            }
          }
        } else {
          const _bind$4 = moonbitlang$core$strconv$$syntax_err$60$();
          if (_bind$4.$tag === 1) {
            const _ok = _bind$4;
            _tmp = _ok._0;
            break;
          } else {
            return _bind$4;
          }
        }
      }
      return new Result$Ok$3$(_tmp);
    } else {
      return moonbitlang$core$strconv$$syntax_err$60$();
    }
  } else {
    return moonbitlang$core$strconv$$syntax_err$60$();
  }
}
function moonbitlang$core$strconv$$parse_int(str, base) {
  const _bind = moonbitlang$core$strconv$$parse_int64(str, base);
  let n;
  if (_bind.$tag === 1) {
    const _ok = _bind;
    n = _ok._0;
  } else {
    return _bind;
  }
  if (moonbitlang$core$builtin$$op_lt$60$(n, moonbitlang$core$int$$Int$to_int64(-2147483648)) || moonbitlang$core$builtin$$op_gt$60$(n, moonbitlang$core$int$$Int$to_int64(2147483647))) {
    const _bind$2 = moonbitlang$core$strconv$$range_err$7$();
    if (_bind$2.$tag === 1) {
      const _ok = _bind$2;
      _ok._0;
    } else {
      return _bind$2;
    }
  }
  return new Result$Ok$4$(moonbitlang$core$int64$$Int64$to_int(n));
}
function moonbitlang$core$builtin$$Show$output$61$(self, logger) {
  const _StrConvError = self;
  const _err = _StrConvError._0;
  logger.method_0(logger.self, _err);
}
function moonbitlang$core$result$$Result$unwrap$62$(self) {
  if (self.$tag === 1) {
    const _Ok = self;
    _Ok._0;
    return;
  } else {
    moonbitlang$core$abort$$abort$7$("called `Result::unwrap()` on an `Err` value");
    return;
  }
}
function moonbitlang$core$result$$Result$unwrap$63$(self) {
  if (self.$tag === 1) {
    const _Ok = self;
    const _x = _Ok._0;
    return _x;
  } else {
    return moonbitlang$core$abort$$abort$12$("called `Result::unwrap()` on an `Err` value");
  }
}
function moonbitlang$core$result$$Result$unwrap$64$(self) {
  if (self.$tag === 1) {
    const _Ok = self;
    const _x = _Ok._0;
    return _x;
  } else {
    return moonbitlang$core$abort$$abort$13$("called `Result::unwrap()` on an `Err` value");
  }
}
function moonbitlang$core$result$$Result$unwrap$65$(self) {
  if (self.$tag === 1) {
    const _Ok = self;
    const _x = _Ok._0;
    return _x;
  } else {
    return moonbitlang$core$abort$$abort$14$("called `Result::unwrap()` on an `Err` value");
  }
}
function moonbitlang$core$char$$Char$is_control(self) {
  return self >= 0 && self <= 31 ? true : self >= 127 && self <= 159;
}
function moonbitlang$core$char$$Char$is_printable(self) {
  if (moonbitlang$core$char$$Char$is_control(self)) {
    return false;
  }
  const self$2 = self;
  _L: {
    _L$2: {
      if (self$2 >= 57344 && self$2 <= 63743) {
        break _L$2;
      } else {
        if (self$2 >= 983040 && self$2 <= 1048573) {
          break _L$2;
        } else {
          if (self$2 >= 1048576 && self$2 <= 1114109) {
            break _L$2;
          }
        }
      }
      break _L;
    }
    return false;
  }
  _L$2: {
    _L$3: {
      if (self$2 === 173) {
        break _L$3;
      } else {
        if (self$2 >= 1536 && self$2 <= 1541) {
          break _L$3;
        } else {
          if (self$2 === 1564) {
            break _L$3;
          } else {
            if (self$2 === 1757) {
              break _L$3;
            } else {
              if (self$2 === 1807) {
                break _L$3;
              } else {
                if (self$2 >= 2192 && self$2 <= 2193) {
                  break _L$3;
                } else {
                  if (self$2 === 2274) {
                    break _L$3;
                  } else {
                    if (self$2 === 6158) {
                      break _L$3;
                    } else {
                      if (self$2 >= 8203 && self$2 <= 8207) {
                        break _L$3;
                      } else {
                        if (self$2 >= 8234 && self$2 <= 8238) {
                          break _L$3;
                        } else {
                          if (self$2 >= 8288 && self$2 <= 8292) {
                            break _L$3;
                          } else {
                            if (self$2 >= 8294 && self$2 <= 8303) {
                              break _L$3;
                            } else {
                              if (self$2 === 65279) {
                                break _L$3;
                              } else {
                                if (self$2 >= 65529 && self$2 <= 65531) {
                                  break _L$3;
                                } else {
                                  if (self$2 === 69821) {
                                    break _L$3;
                                  } else {
                                    if (self$2 === 69837) {
                                      break _L$3;
                                    } else {
                                      if (self$2 >= 78896 && self$2 <= 78911) {
                                        break _L$3;
                                      } else {
                                        if (self$2 >= 113824 && self$2 <= 113827) {
                                          break _L$3;
                                        } else {
                                          if (self$2 >= 119155 && self$2 <= 119162) {
                                            break _L$3;
                                          } else {
                                            if (self$2 === 917505) {
                                              break _L$3;
                                            } else {
                                              if (self$2 >= 917536 && self$2 <= 917631) {
                                                break _L$3;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      break _L$2;
    }
    return false;
  }
  if (self$2 >= 55296 && self$2 <= 57343) {
    return false;
  }
  if (self$2 === 8232 || self$2 === 8233) {
    return false;
  }
  _L$3: {
    _L$4: {
      if (self$2 >= 64976 && self$2 <= 65007) {
        break _L$4;
      } else {
        if (self$2 >= 65534 && self$2 <= 65535) {
          break _L$4;
        } else {
          if (self$2 >= 131070 && self$2 <= 131071) {
            break _L$4;
          } else {
            if (self$2 >= 196606 && self$2 <= 196607) {
              break _L$4;
            } else {
              if (self$2 >= 262142 && self$2 <= 262143) {
                break _L$4;
              } else {
                if (self$2 >= 327678 && self$2 <= 327679) {
                  break _L$4;
                } else {
                  if (self$2 >= 393214 && self$2 <= 393215) {
                    break _L$4;
                  } else {
                    if (self$2 >= 458750 && self$2 <= 458751) {
                      break _L$4;
                    } else {
                      if (self$2 >= 524286 && self$2 <= 524287) {
                        break _L$4;
                      } else {
                        if (self$2 >= 589822 && self$2 <= 589823) {
                          break _L$4;
                        } else {
                          if (self$2 >= 655358 && self$2 <= 655359) {
                            break _L$4;
                          } else {
                            if (self$2 >= 720894 && self$2 <= 720895) {
                              break _L$4;
                            } else {
                              if (self$2 >= 786430 && self$2 <= 786431) {
                                break _L$4;
                              } else {
                                if (self$2 >= 851966 && self$2 <= 851967) {
                                  break _L$4;
                                } else {
                                  if (self$2 >= 917502 && self$2 <= 917503) {
                                    break _L$4;
                                  } else {
                                    if (self$2 >= 983038 && self$2 <= 983039) {
                                      break _L$4;
                                    } else {
                                      if (self$2 >= 1048574 && self$2 <= 1048575) {
                                        break _L$4;
                                      } else {
                                        if (self$2 >= 1114110 && self$2 <= 1114111) {
                                          break _L$4;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      break _L$3;
    }
    return false;
  }
  return true;
}
function moonbitlang$core$builtin$$Show$to_string$66$(self) {
  return String.fromCodePoint(self);
}
function moonbitlang$core$char$$output$46$to_hex_digit$124$4(i) {
  return i < 10 ? i + 48 | 0 : (i + 97 | 0) - 10 | 0;
}
function moonbitlang$core$builtin$$Show$output$66$(self, logger) {
  logger.method_2(logger.self, 39);
  _L: {
    _L$2: {
      if (self === 39) {
        break _L$2;
      } else {
        if (self === 92) {
          break _L$2;
        } else {
          if (self === 10) {
            logger.method_0(logger.self, "\\n");
          } else {
            if (self === 13) {
              logger.method_0(logger.self, "\\r");
            } else {
              if (self === 8) {
                logger.method_0(logger.self, "\\b");
              } else {
                if (self === 9) {
                  logger.method_0(logger.self, "\\t");
                } else {
                  if (self >= 32 && self <= 126) {
                    logger.method_2(logger.self, self);
                  } else {
                    if (!moonbitlang$core$char$$Char$is_printable(self)) {
                      const code = self;
                      const hex_len = code <= 255 ? 2 : code <= 4095 ? 3 : code <= 65535 ? 4 : code <= 1048575 ? 5 : 6;
                      logger.method_0(logger.self, "\\u{");
                      if (hex_len >= 6) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$4(code >> 20 & 15));
                      }
                      if (hex_len >= 5) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$4(code >> 16 & 15));
                      }
                      if (hex_len >= 4) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$4(code >> 12 & 15));
                      }
                      if (hex_len >= 3) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$4(code >> 8 & 15));
                      }
                      if (hex_len >= 2) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$4(code >> 4 & 15));
                      }
                      logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$4(code & 15));
                      logger.method_2(logger.self, 125);
                    } else {
                      logger.method_2(logger.self, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
      break _L;
    }
    logger.method_2(logger.self, 92);
    logger.method_2(logger.self, self);
  }
  logger.method_2(logger.self, 39);
}
function moonbitlang$core$bytes$$Bytes$from_array(arr) {
  return moonbitlang$core$bytes$$Bytes$makei(arr.length, (i) => moonbitlang$core$array$$Array$op_get$67$(arr, i));
}
function moonbitlang$core$immut$array$$new_branch_left$68$(leaf, shift) {
  if (shift === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$5$(leaf);
  } else {
    return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$5$([moonbitlang$core$immut$array$$new_branch_left$68$(leaf, shift - 5 | 0)], undefined);
  }
}
function moonbitlang$core$immut$array$$new_branch_left$27$(leaf, shift) {
  if (shift === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$6$(leaf);
  } else {
    return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$([moonbitlang$core$immut$array$$new_branch_left$27$(leaf, shift - 5 | 0)], undefined);
  }
}
function moonbitlang$core$immut$array$$new_branch_left$28$(leaf, shift) {
  if (shift === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$7$(leaf);
  } else {
    return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$7$([moonbitlang$core$immut$array$$new_branch_left$28$(leaf, shift - 5 | 0)], undefined);
  }
}
function moonbitlang$core$immut$array$$Tree$get_first$27$(self) {
  let _tmp = self;
  _L: while (true) {
    const self$2 = _tmp;
    switch (self$2.$tag) {
      case 2: {
        const _Leaf = self$2;
        const _leaf = _Leaf._0;
        $bound_check(_leaf, 0);
        return _leaf[0];
      }
      case 1: {
        const _Node = self$2;
        const _node = _Node._0;
        $bound_check(_node, 0);
        _tmp = _node[0];
        continue _L;
      }
      default: {
        return moonbitlang$core$abort$$abort$27$("Index out of bounds");
      }
    }
  }
}
function moonbitlang$core$immut$array$$Tree$get_first$28$(self) {
  let _tmp = self;
  _L: while (true) {
    const self$2 = _tmp;
    switch (self$2.$tag) {
      case 2: {
        const _Leaf = self$2;
        const _leaf = _Leaf._0;
        $bound_check(_leaf, 0);
        return _leaf[0];
      }
      case 1: {
        const _Node = self$2;
        const _node = _Node._0;
        $bound_check(_node, 0);
        _tmp = _node[0];
        continue _L;
      }
      default: {
        return moonbitlang$core$abort$$abort$28$("Index out of bounds");
      }
    }
  }
}
function moonbitlang$core$immut$array$$Tree$get_first$29$(self) {
  let _tmp = self;
  _L: while (true) {
    const self$2 = _tmp;
    switch (self$2.$tag) {
      case 2: {
        const _Leaf = self$2;
        const _leaf = _Leaf._0;
        $bound_check(_leaf, 0);
        return _leaf[0];
      }
      case 1: {
        const _Node = self$2;
        const _node = _Node._0;
        $bound_check(_node, 0);
        _tmp = _node[0];
        continue _L;
      }
      default: {
        return moonbitlang$core$abort$$abort$29$("Index out of bounds");
      }
    }
  }
}
function moonbitlang$core$immut$array$$Tree$get_last$27$(self) {
  let _tmp = self;
  _L: while (true) {
    const self$2 = _tmp;
    switch (self$2.$tag) {
      case 2: {
        const _Leaf = self$2;
        const _leaf = _Leaf._0;
        const _tmp$2 = _leaf.length - 1 | 0;
        $bound_check(_leaf, _tmp$2);
        return _leaf[_tmp$2];
      }
      case 1: {
        const _Node = self$2;
        const _node = _Node._0;
        const _tmp$3 = _node.length - 1 | 0;
        $bound_check(_node, _tmp$3);
        _tmp = _node[_tmp$3];
        continue _L;
      }
      default: {
        return moonbitlang$core$abort$$abort$27$("Index out of bounds");
      }
    }
  }
}
function moonbitlang$core$immut$array$$Tree$get_last$28$(self) {
  let _tmp = self;
  _L: while (true) {
    const self$2 = _tmp;
    switch (self$2.$tag) {
      case 2: {
        const _Leaf = self$2;
        const _leaf = _Leaf._0;
        const _tmp$2 = _leaf.length - 1 | 0;
        $bound_check(_leaf, _tmp$2);
        return _leaf[_tmp$2];
      }
      case 1: {
        const _Node = self$2;
        const _node = _Node._0;
        const _tmp$3 = _node.length - 1 | 0;
        $bound_check(_node, _tmp$3);
        _tmp = _node[_tmp$3];
        continue _L;
      }
      default: {
        return moonbitlang$core$abort$$abort$28$("Index out of bounds");
      }
    }
  }
}
function moonbitlang$core$immut$array$$Tree$get_last$29$(self) {
  let _tmp = self;
  _L: while (true) {
    const self$2 = _tmp;
    switch (self$2.$tag) {
      case 2: {
        const _Leaf = self$2;
        const _leaf = _Leaf._0;
        const _tmp$2 = _leaf.length - 1 | 0;
        $bound_check(_leaf, _tmp$2);
        return _leaf[_tmp$2];
      }
      case 1: {
        const _Node = self$2;
        const _node = _Node._0;
        const _tmp$3 = _node.length - 1 | 0;
        $bound_check(_node, _tmp$3);
        _tmp = _node[_tmp$3];
        continue _L;
      }
      default: {
        return moonbitlang$core$abort$$abort$29$("Index out of bounds");
      }
    }
  }
}
function moonbitlang$core$immut$array$$get_branch_index(sizes, index) {
  let lo = 0;
  let hi = sizes.length;
  while (true) {
    if (4 < (hi - lo | 0)) {
      const mid = (lo + hi | 0) / 2 | 0;
      $bound_check(sizes, mid);
      if (sizes[mid] <= index) {
        lo = mid;
      } else {
        hi = mid;
      }
      continue;
    } else {
      break;
    }
  }
  while (true) {
    const _tmp = lo;
    $bound_check(sizes, _tmp);
    if (sizes[_tmp] <= index) {
      lo = lo + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return lo;
}
function moonbitlang$core$immut$array$$radix_indexing(index, shift) {
  return index >>> shift & 31;
}
function moonbitlang$core$immut$array$$Tree$get$27$(self, index, shift) {
  let _tmp = self;
  let _tmp$2 = index;
  let _tmp$3 = shift;
  _L: while (true) {
    const self$2 = _tmp;
    const index$2 = _tmp$2;
    const shift$2 = _tmp$3;
    let node;
    let shift$3;
    _L$2: {
      switch (self$2.$tag) {
        case 2: {
          const _Leaf = self$2;
          const _leaf = _Leaf._0;
          $bound_check(_leaf, index$2);
          return _leaf[index$2];
        }
        case 1: {
          const _Node = self$2;
          const _children = _Node._0;
          const _x = _Node._1;
          if (_x === undefined) {
            node = self$2;
            shift$3 = shift$2;
            break _L$2;
          } else {
            const _Some = _x;
            const _sizes = _Some;
            const branch_index = moonbitlang$core$immut$array$$get_branch_index(_sizes, index$2);
            let sub_index;
            if (branch_index === 0) {
              sub_index = index$2;
            } else {
              const _tmp$4 = branch_index - 1 | 0;
              $bound_check(_sizes, _tmp$4);
              sub_index = index$2 - _sizes[_tmp$4] | 0;
            }
            $bound_check(_children, branch_index);
            const _tmp$4 = _children[branch_index];
            const _tmp$5 = shift$2 - 5 | 0;
            _tmp = _tmp$4;
            _tmp$2 = sub_index;
            _tmp$3 = _tmp$5;
            continue _L;
          }
        }
        default: {
          return moonbitlang$core$abort$$abort$27$("Index out of bounds");
        }
      }
    }
    let _tmp$4 = node;
    let _tmp$5 = shift$3;
    _L$3: while (true) {
      const node$2 = _tmp$4;
      const shift$4 = _tmp$5;
      switch (node$2.$tag) {
        case 2: {
          const _Leaf = node$2;
          const _leaf = _Leaf._0;
          const _tmp$6 = index$2 & 31;
          $bound_check(_leaf, _tmp$6);
          return _leaf[_tmp$6];
        }
        case 1: {
          const _Node = node$2;
          const _node = _Node._0;
          const _x = _Node._1;
          if (_x === undefined) {
            const _tmp$7 = moonbitlang$core$immut$array$$radix_indexing(index$2, shift$4);
            $bound_check(_node, _tmp$7);
            const _tmp$8 = _node[_tmp$7];
            const _tmp$9 = shift$4 - 5 | 0;
            _tmp$4 = _tmp$8;
            _tmp$5 = _tmp$9;
            continue _L$3;
          } else {
            return moonbitlang$core$abort$$abort$27$("Unreachable: Node should not have sizes in get_radix");
          }
        }
        default: {
          return moonbitlang$core$abort$$abort$27$("Index out of bounds");
        }
      }
    }
  }
}
function moonbitlang$core$immut$array$$Tree$get$28$(self, index, shift) {
  let _tmp = self;
  let _tmp$2 = index;
  let _tmp$3 = shift;
  _L: while (true) {
    const self$2 = _tmp;
    const index$2 = _tmp$2;
    const shift$2 = _tmp$3;
    let node;
    let shift$3;
    _L$2: {
      switch (self$2.$tag) {
        case 2: {
          const _Leaf = self$2;
          const _leaf = _Leaf._0;
          $bound_check(_leaf, index$2);
          return _leaf[index$2];
        }
        case 1: {
          const _Node = self$2;
          const _children = _Node._0;
          const _x = _Node._1;
          if (_x === undefined) {
            node = self$2;
            shift$3 = shift$2;
            break _L$2;
          } else {
            const _Some = _x;
            const _sizes = _Some;
            const branch_index = moonbitlang$core$immut$array$$get_branch_index(_sizes, index$2);
            let sub_index;
            if (branch_index === 0) {
              sub_index = index$2;
            } else {
              const _tmp$4 = branch_index - 1 | 0;
              $bound_check(_sizes, _tmp$4);
              sub_index = index$2 - _sizes[_tmp$4] | 0;
            }
            $bound_check(_children, branch_index);
            const _tmp$4 = _children[branch_index];
            const _tmp$5 = shift$2 - 5 | 0;
            _tmp = _tmp$4;
            _tmp$2 = sub_index;
            _tmp$3 = _tmp$5;
            continue _L;
          }
        }
        default: {
          return moonbitlang$core$abort$$abort$28$("Index out of bounds");
        }
      }
    }
    let _tmp$4 = node;
    let _tmp$5 = shift$3;
    _L$3: while (true) {
      const node$2 = _tmp$4;
      const shift$4 = _tmp$5;
      switch (node$2.$tag) {
        case 2: {
          const _Leaf = node$2;
          const _leaf = _Leaf._0;
          const _tmp$6 = index$2 & 31;
          $bound_check(_leaf, _tmp$6);
          return _leaf[_tmp$6];
        }
        case 1: {
          const _Node = node$2;
          const _node = _Node._0;
          const _x = _Node._1;
          if (_x === undefined) {
            const _tmp$7 = moonbitlang$core$immut$array$$radix_indexing(index$2, shift$4);
            $bound_check(_node, _tmp$7);
            const _tmp$8 = _node[_tmp$7];
            const _tmp$9 = shift$4 - 5 | 0;
            _tmp$4 = _tmp$8;
            _tmp$5 = _tmp$9;
            continue _L$3;
          } else {
            return moonbitlang$core$abort$$abort$28$("Unreachable: Node should not have sizes in get_radix");
          }
        }
        default: {
          return moonbitlang$core$abort$$abort$28$("Index out of bounds");
        }
      }
    }
  }
}
function moonbitlang$core$immut$array$$Tree$get$29$(self, index, shift) {
  let _tmp = self;
  let _tmp$2 = index;
  let _tmp$3 = shift;
  _L: while (true) {
    const self$2 = _tmp;
    const index$2 = _tmp$2;
    const shift$2 = _tmp$3;
    let node;
    let shift$3;
    _L$2: {
      switch (self$2.$tag) {
        case 2: {
          const _Leaf = self$2;
          const _leaf = _Leaf._0;
          $bound_check(_leaf, index$2);
          return _leaf[index$2];
        }
        case 1: {
          const _Node = self$2;
          const _children = _Node._0;
          const _x = _Node._1;
          if (_x === undefined) {
            node = self$2;
            shift$3 = shift$2;
            break _L$2;
          } else {
            const _Some = _x;
            const _sizes = _Some;
            const branch_index = moonbitlang$core$immut$array$$get_branch_index(_sizes, index$2);
            let sub_index;
            if (branch_index === 0) {
              sub_index = index$2;
            } else {
              const _tmp$4 = branch_index - 1 | 0;
              $bound_check(_sizes, _tmp$4);
              sub_index = index$2 - _sizes[_tmp$4] | 0;
            }
            $bound_check(_children, branch_index);
            const _tmp$4 = _children[branch_index];
            const _tmp$5 = shift$2 - 5 | 0;
            _tmp = _tmp$4;
            _tmp$2 = sub_index;
            _tmp$3 = _tmp$5;
            continue _L;
          }
        }
        default: {
          return moonbitlang$core$abort$$abort$29$("Index out of bounds");
        }
      }
    }
    let _tmp$4 = node;
    let _tmp$5 = shift$3;
    _L$3: while (true) {
      const node$2 = _tmp$4;
      const shift$4 = _tmp$5;
      switch (node$2.$tag) {
        case 2: {
          const _Leaf = node$2;
          const _leaf = _Leaf._0;
          const _tmp$6 = index$2 & 31;
          $bound_check(_leaf, _tmp$6);
          return _leaf[_tmp$6];
        }
        case 1: {
          const _Node = node$2;
          const _node = _Node._0;
          const _x = _Node._1;
          if (_x === undefined) {
            const _tmp$7 = moonbitlang$core$immut$array$$radix_indexing(index$2, shift$4);
            $bound_check(_node, _tmp$7);
            const _tmp$8 = _node[_tmp$7];
            const _tmp$9 = shift$4 - 5 | 0;
            _tmp$4 = _tmp$8;
            _tmp$5 = _tmp$9;
            continue _L$3;
          } else {
            return moonbitlang$core$abort$$abort$29$("Unreachable: Node should not have sizes in get_radix");
          }
        }
        default: {
          return moonbitlang$core$abort$$abort$29$("Index out of bounds");
        }
      }
    }
  }
}
function moonbitlang$core$immut$array$$immutable_push$68$(arr, val) {
  const len = arr.length;
  const new_arr = $make_array_len_and_init(len + 1 | 0, val);
  moonbitlang$core$array$$FixedArray$blit_to$68$(arr, new_arr, len, 0, 0);
  $bound_check(new_arr, len);
  new_arr[len] = val;
  return new_arr;
}
function moonbitlang$core$immut$array$$immutable_push$8$(arr, val) {
  const len = arr.length;
  const new_arr = $make_array_len_and_init(len + 1 | 0, val);
  moonbitlang$core$array$$FixedArray$blit_to$8$(arr, new_arr, len, 0, 0);
  $bound_check(new_arr, len);
  new_arr[len] = val;
  return new_arr;
}
function moonbitlang$core$immut$array$$immutable_push$17$(arr, val) {
  const len = arr.length;
  const new_arr = $make_array_len_and_init(len + 1 | 0, val);
  moonbitlang$core$array$$FixedArray$blit_to$17$(arr, new_arr, len, 0, 0);
  $bound_check(new_arr, len);
  new_arr[len] = val;
  return new_arr;
}
function moonbitlang$core$immut$array$$immutable_push$27$(arr, val) {
  const len = arr.length;
  const new_arr = $make_array_len_and_init(len + 1 | 0, val);
  moonbitlang$core$array$$FixedArray$blit_to$27$(arr, new_arr, len, 0, 0);
  $bound_check(new_arr, len);
  new_arr[len] = val;
  return new_arr;
}
function moonbitlang$core$immut$array$$immutable_push$21$(arr, val) {
  const len = arr.length;
  const new_arr = $make_array_len_and_init(len + 1 | 0, val);
  moonbitlang$core$array$$FixedArray$blit_to$21$(arr, new_arr, len, 0, 0);
  $bound_check(new_arr, len);
  new_arr[len] = val;
  return new_arr;
}
function moonbitlang$core$immut$array$$immutable_push$28$(arr, val) {
  const len = arr.length;
  const new_arr = $make_array_len_and_init(len + 1 | 0, val);
  moonbitlang$core$array$$FixedArray$blit_to$28$(arr, new_arr, len, 0, 0);
  $bound_check(new_arr, len);
  new_arr[len] = val;
  return new_arr;
}
function moonbitlang$core$immut$array$$immutable_push$22$(arr, val) {
  const len = arr.length;
  const new_arr = $make_array_len_and_init(len + 1 | 0, val);
  moonbitlang$core$array$$FixedArray$blit_to$22$(arr, new_arr, len, 0, 0);
  $bound_check(new_arr, len);
  new_arr[len] = val;
  return new_arr;
}
function moonbitlang$core$immut$array$$push_end$46$worker$47$991(value, node, shift) {
  switch (node.$tag) {
    case 2: {
      const _Leaf = node;
      const _leaf = _Leaf._0;
      if (shift !== 0) {
        moonbitlang$core$abort$$abort$7$("Unreachable: Leaf should not have a non-zero shift, which means we have not reached the bottom of the tree");
      }
      return _leaf.length < 32 ? new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$5$(moonbitlang$core$immut$array$$immutable_push$68$(_leaf, value)) : undefined;
    }
    case 1: {
      const _Node = node;
      const _nodes = _Node._0;
      const _sizes = _Node._1;
      const len = _nodes.length;
      const _tmp = len - 1 | 0;
      $bound_check(_nodes, _tmp);
      const _bind = moonbitlang$core$immut$array$$push_end$46$worker$47$991(value, _nodes[_tmp], shift - 5 | 0);
      if (_bind === undefined) {
        if (len < 32) {
          let sizes;
          if (_sizes === undefined) {
            sizes = undefined;
          } else {
            const _Some = _sizes;
            const _sizes$2 = _Some;
            const _tmp$2 = _sizes$2.length - 1 | 0;
            $bound_check(_sizes$2, _tmp$2);
            sizes = moonbitlang$core$immut$array$$immutable_push$8$(_sizes$2, 1 + _sizes$2[_tmp$2] | 0);
          }
          return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$5$(moonbitlang$core$immut$array$$immutable_push$17$(_nodes, moonbitlang$core$immut$array$$new_branch_left$68$([value], shift - 5 | 0)), sizes);
        } else {
          return undefined;
        }
      } else {
        const _Some = _bind;
        const _new_node = _Some;
        const new_nodes = moonbitlang$core$array$$FixedArray$copy$17$(_nodes);
        const _tmp$2 = len - 1 | 0;
        $bound_check(new_nodes, _tmp$2);
        new_nodes[_tmp$2] = _new_node;
        let sizes;
        if (_sizes === undefined) {
          sizes = undefined;
        } else {
          const _Some$2 = _sizes;
          const _sizes$2 = _Some$2;
          const new_sizes = moonbitlang$core$array$$FixedArray$copy$8$(_sizes$2);
          const _index_2 = new_sizes.length - 1 | 0;
          $bound_check(new_sizes, _index_2);
          $bound_check(new_sizes, _index_2);
          new_sizes[_index_2] = new_sizes[_index_2] + 1 | 0;
          sizes = new_sizes;
        }
        return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$5$(new_nodes, sizes);
      }
    }
    default: {
      return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$5$([value]);
    }
  }
}
function moonbitlang$core$immut$array$$Tree$push_end$68$(self, shift, value) {
  const _bind = moonbitlang$core$immut$array$$push_end$46$worker$47$991(value, self, shift);
  if (_bind === undefined) {
    const new_branch = moonbitlang$core$immut$array$$new_branch_left$68$([value], shift);
    let _tmp;
    switch (self.$tag) {
      case 2: {
        _tmp = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$5$([self, new_branch], undefined);
        break;
      }
      case 1: {
        const _Node = self;
        const _x = _Node._1;
        if (_x === undefined) {
          _tmp = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$5$([self, new_branch], undefined);
        } else {
          const _Some = _x;
          const _sizes = _Some;
          const _tmp$2 = _sizes.length - 1 | 0;
          $bound_check(_sizes, _tmp$2);
          const len = _sizes[_tmp$2];
          const sizes = moonbitlang$core$array$$FixedArray$from_array$8$([len, 1 + len | 0]);
          _tmp = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$5$([self, new_branch], sizes);
        }
        break;
      }
      default: {
        _tmp = moonbitlang$core$abort$$abort$17$("Unreachable: Empty tree should have fallen into the Some(new_tree) branch");
      }
    }
    return { _0: _tmp, _1: shift + 5 | 0 };
  } else {
    const _Some = _bind;
    const _new_tree = _Some;
    return { _0: _new_tree, _1: shift };
  }
}
function moonbitlang$core$immut$array$$push_end$46$worker$47$1026(value, node, shift) {
  switch (node.$tag) {
    case 2: {
      const _Leaf = node;
      const _leaf = _Leaf._0;
      if (shift !== 0) {
        moonbitlang$core$abort$$abort$7$("Unreachable: Leaf should not have a non-zero shift, which means we have not reached the bottom of the tree");
      }
      return _leaf.length < 32 ? new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$6$(moonbitlang$core$immut$array$$immutable_push$27$(_leaf, value)) : undefined;
    }
    case 1: {
      const _Node = node;
      const _nodes = _Node._0;
      const _sizes = _Node._1;
      const len = _nodes.length;
      const _tmp = len - 1 | 0;
      $bound_check(_nodes, _tmp);
      const _bind = moonbitlang$core$immut$array$$push_end$46$worker$47$1026(value, _nodes[_tmp], shift - 5 | 0);
      if (_bind === undefined) {
        if (len < 32) {
          let sizes;
          if (_sizes === undefined) {
            sizes = undefined;
          } else {
            const _Some = _sizes;
            const _sizes$2 = _Some;
            const _tmp$2 = _sizes$2.length - 1 | 0;
            $bound_check(_sizes$2, _tmp$2);
            sizes = moonbitlang$core$immut$array$$immutable_push$8$(_sizes$2, 1 + _sizes$2[_tmp$2] | 0);
          }
          return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$(moonbitlang$core$immut$array$$immutable_push$21$(_nodes, moonbitlang$core$immut$array$$new_branch_left$27$([value], shift - 5 | 0)), sizes);
        } else {
          return undefined;
        }
      } else {
        const _Some = _bind;
        const _new_node = _Some;
        const new_nodes = moonbitlang$core$array$$FixedArray$copy$21$(_nodes);
        const _tmp$2 = len - 1 | 0;
        $bound_check(new_nodes, _tmp$2);
        new_nodes[_tmp$2] = _new_node;
        let sizes;
        if (_sizes === undefined) {
          sizes = undefined;
        } else {
          const _Some$2 = _sizes;
          const _sizes$2 = _Some$2;
          const new_sizes = moonbitlang$core$array$$FixedArray$copy$8$(_sizes$2);
          const _index_2 = new_sizes.length - 1 | 0;
          $bound_check(new_sizes, _index_2);
          $bound_check(new_sizes, _index_2);
          new_sizes[_index_2] = new_sizes[_index_2] + 1 | 0;
          sizes = new_sizes;
        }
        return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$(new_nodes, sizes);
      }
    }
    default: {
      return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$6$([value]);
    }
  }
}
function moonbitlang$core$immut$array$$Tree$push_end$27$(self, shift, value) {
  const _bind = moonbitlang$core$immut$array$$push_end$46$worker$47$1026(value, self, shift);
  if (_bind === undefined) {
    const new_branch = moonbitlang$core$immut$array$$new_branch_left$27$([value], shift);
    let _tmp;
    switch (self.$tag) {
      case 2: {
        _tmp = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$([self, new_branch], undefined);
        break;
      }
      case 1: {
        const _Node = self;
        const _x = _Node._1;
        if (_x === undefined) {
          _tmp = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$([self, new_branch], undefined);
        } else {
          const _Some = _x;
          const _sizes = _Some;
          const _tmp$2 = _sizes.length - 1 | 0;
          $bound_check(_sizes, _tmp$2);
          const len = _sizes[_tmp$2];
          const sizes = moonbitlang$core$array$$FixedArray$from_array$8$([len, 1 + len | 0]);
          _tmp = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$([self, new_branch], sizes);
        }
        break;
      }
      default: {
        _tmp = moonbitlang$core$abort$$abort$21$("Unreachable: Empty tree should have fallen into the Some(new_tree) branch");
      }
    }
    return { _0: _tmp, _1: shift + 5 | 0 };
  } else {
    const _Some = _bind;
    const _new_tree = _Some;
    return { _0: _new_tree, _1: shift };
  }
}
function moonbitlang$core$immut$array$$push_end$46$worker$47$1061(value, node, shift) {
  switch (node.$tag) {
    case 2: {
      const _Leaf = node;
      const _leaf = _Leaf._0;
      if (shift !== 0) {
        moonbitlang$core$abort$$abort$7$("Unreachable: Leaf should not have a non-zero shift, which means we have not reached the bottom of the tree");
      }
      return _leaf.length < 32 ? new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$7$(moonbitlang$core$immut$array$$immutable_push$28$(_leaf, value)) : undefined;
    }
    case 1: {
      const _Node = node;
      const _nodes = _Node._0;
      const _sizes = _Node._1;
      const len = _nodes.length;
      const _tmp = len - 1 | 0;
      $bound_check(_nodes, _tmp);
      const _bind = moonbitlang$core$immut$array$$push_end$46$worker$47$1061(value, _nodes[_tmp], shift - 5 | 0);
      if (_bind === undefined) {
        if (len < 32) {
          let sizes;
          if (_sizes === undefined) {
            sizes = undefined;
          } else {
            const _Some = _sizes;
            const _sizes$2 = _Some;
            const _tmp$2 = _sizes$2.length - 1 | 0;
            $bound_check(_sizes$2, _tmp$2);
            sizes = moonbitlang$core$immut$array$$immutable_push$8$(_sizes$2, 1 + _sizes$2[_tmp$2] | 0);
          }
          return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$7$(moonbitlang$core$immut$array$$immutable_push$22$(_nodes, moonbitlang$core$immut$array$$new_branch_left$28$([value], shift - 5 | 0)), sizes);
        } else {
          return undefined;
        }
      } else {
        const _Some = _bind;
        const _new_node = _Some;
        const new_nodes = moonbitlang$core$array$$FixedArray$copy$22$(_nodes);
        const _tmp$2 = len - 1 | 0;
        $bound_check(new_nodes, _tmp$2);
        new_nodes[_tmp$2] = _new_node;
        let sizes;
        if (_sizes === undefined) {
          sizes = undefined;
        } else {
          const _Some$2 = _sizes;
          const _sizes$2 = _Some$2;
          const new_sizes = moonbitlang$core$array$$FixedArray$copy$8$(_sizes$2);
          const _index_2 = new_sizes.length - 1 | 0;
          $bound_check(new_sizes, _index_2);
          $bound_check(new_sizes, _index_2);
          new_sizes[_index_2] = new_sizes[_index_2] + 1 | 0;
          sizes = new_sizes;
        }
        return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$7$(new_nodes, sizes);
      }
    }
    default: {
      return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$7$([value]);
    }
  }
}
function moonbitlang$core$immut$array$$Tree$push_end$28$(self, shift, value) {
  const _bind = moonbitlang$core$immut$array$$push_end$46$worker$47$1061(value, self, shift);
  if (_bind === undefined) {
    const new_branch = moonbitlang$core$immut$array$$new_branch_left$28$([value], shift);
    let _tmp;
    switch (self.$tag) {
      case 2: {
        _tmp = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$7$([self, new_branch], undefined);
        break;
      }
      case 1: {
        const _Node = self;
        const _x = _Node._1;
        if (_x === undefined) {
          _tmp = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$7$([self, new_branch], undefined);
        } else {
          const _Some = _x;
          const _sizes = _Some;
          const _tmp$2 = _sizes.length - 1 | 0;
          $bound_check(_sizes, _tmp$2);
          const len = _sizes[_tmp$2];
          const sizes = moonbitlang$core$array$$FixedArray$from_array$8$([len, 1 + len | 0]);
          _tmp = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$7$([self, new_branch], sizes);
        }
        break;
      }
      default: {
        _tmp = moonbitlang$core$abort$$abort$22$("Unreachable: Empty tree should have fallen into the Some(new_tree) branch");
      }
    }
    return { _0: _tmp, _1: shift + 5 | 0 };
  } else {
    const _Some = _bind;
    const _new_tree = _Some;
    return { _0: _new_tree, _1: shift };
  }
}
function moonbitlang$core$immut$array$$Tree$iter$68$(self) {
  const _p = (yield_) => {
    switch (self.$tag) {
      case 0: {
        return 1;
      }
      case 2: {
        const _Leaf = self;
        const _l = _Leaf._0;
        return moonbitlang$core$builtin$$Iter$run$68$((_p$2) => {
          const _len = _l.length;
          let _tmp = 0;
          while (true) {
            const _i = _tmp;
            if (_i < _len) {
              if (_p$2(_l[_i]) === 1) {
                _tmp = _i + 1 | 0;
                continue;
              } else {
                return 0;
              }
            } else {
              return 1;
            }
          }
        }, yield_);
      }
      default: {
        const _Node = self;
        const _ns = _Node._0;
        const _len = _ns.length;
        let _tmp = 0;
        while (true) {
          const _i = _tmp;
          if (_i < _len) {
            const n = _ns[_i];
            const _bind = moonbitlang$core$builtin$$Iter$run$68$(moonbitlang$core$immut$array$$Tree$iter$68$(n), yield_);
            if (_bind === 1) {
            } else {
              return 0;
            }
            _tmp = _i + 1 | 0;
            continue;
          } else {
            return 1;
          }
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$immut$array$$Tree$eachi$27$(self, f, shift, start) {
  switch (self.$tag) {
    case 0: {
      return;
    }
    case 2: {
      const _Leaf = self;
      const _l = _Leaf._0;
      const _end343 = _l.length;
      let _tmp = 0;
      while (true) {
        const i = _tmp;
        if (i < _end343) {
          const _tmp$2 = start + i | 0;
          $bound_check(_l, i);
          f(_tmp$2, _l[i]);
          _tmp = i + 1 | 0;
          continue;
        } else {
          return;
        }
      }
    }
    default: {
      const _Node = self;
      const _ns = _Node._0;
      const _x = _Node._1;
      if (_x === undefined) {
        const child_shift = shift - 5 | 0;
        let start$2 = start;
        const _end351 = _ns.length;
        let _tmp$2 = 0;
        while (true) {
          const i = _tmp$2;
          if (i < _end351) {
            $bound_check(_ns, i);
            moonbitlang$core$immut$array$$Tree$eachi$27$(_ns[i], f, child_shift, start$2);
            start$2 = start$2 + (1 << shift) | 0;
            _tmp$2 = i + 1 | 0;
            continue;
          } else {
            return;
          }
        }
      } else {
        const _Some = _x;
        const _sizes = _Some;
        const child_shift = shift - 5 | 0;
        let start$2 = start;
        const _end360 = _ns.length;
        let _tmp$2 = 0;
        while (true) {
          const i = _tmp$2;
          if (i < _end360) {
            $bound_check(_ns, i);
            moonbitlang$core$immut$array$$Tree$eachi$27$(_ns[i], f, child_shift, start$2);
            const _tmp$3 = start$2;
            $bound_check(_sizes, i);
            start$2 = _tmp$3 + _sizes[i] | 0;
            _tmp$2 = i + 1 | 0;
            continue;
          } else {
            return;
          }
        }
      }
    }
  }
}
function moonbitlang$core$immut$array$$Tree$eachi$28$(self, f, shift, start) {
  switch (self.$tag) {
    case 0: {
      return;
    }
    case 2: {
      const _Leaf = self;
      const _l = _Leaf._0;
      const _end343 = _l.length;
      let _tmp = 0;
      while (true) {
        const i = _tmp;
        if (i < _end343) {
          const _tmp$2 = start + i | 0;
          $bound_check(_l, i);
          f(_tmp$2, _l[i]);
          _tmp = i + 1 | 0;
          continue;
        } else {
          return;
        }
      }
    }
    default: {
      const _Node = self;
      const _ns = _Node._0;
      const _x = _Node._1;
      if (_x === undefined) {
        const child_shift = shift - 5 | 0;
        let start$2 = start;
        const _end351 = _ns.length;
        let _tmp$2 = 0;
        while (true) {
          const i = _tmp$2;
          if (i < _end351) {
            $bound_check(_ns, i);
            moonbitlang$core$immut$array$$Tree$eachi$28$(_ns[i], f, child_shift, start$2);
            start$2 = start$2 + (1 << shift) | 0;
            _tmp$2 = i + 1 | 0;
            continue;
          } else {
            return;
          }
        }
      } else {
        const _Some = _x;
        const _sizes = _Some;
        const child_shift = shift - 5 | 0;
        let start$2 = start;
        const _end360 = _ns.length;
        let _tmp$2 = 0;
        while (true) {
          const i = _tmp$2;
          if (i < _end360) {
            $bound_check(_ns, i);
            moonbitlang$core$immut$array$$Tree$eachi$28$(_ns[i], f, child_shift, start$2);
            const _tmp$3 = start$2;
            $bound_check(_sizes, i);
            start$2 = _tmp$3 + _sizes[i] | 0;
            _tmp$2 = i + 1 | 0;
            continue;
          } else {
            return;
          }
        }
      }
    }
  }
}
function moonbitlang$core$immut$array$$Tree$eachi$29$(self, f, shift, start) {
  switch (self.$tag) {
    case 0: {
      return;
    }
    case 2: {
      const _Leaf = self;
      const _l = _Leaf._0;
      const _end343 = _l.length;
      let _tmp = 0;
      while (true) {
        const i = _tmp;
        if (i < _end343) {
          const _tmp$2 = start + i | 0;
          $bound_check(_l, i);
          f(_tmp$2, _l[i]);
          _tmp = i + 1 | 0;
          continue;
        } else {
          return;
        }
      }
    }
    default: {
      const _Node = self;
      const _ns = _Node._0;
      const _x = _Node._1;
      if (_x === undefined) {
        const child_shift = shift - 5 | 0;
        let start$2 = start;
        const _end351 = _ns.length;
        let _tmp$2 = 0;
        while (true) {
          const i = _tmp$2;
          if (i < _end351) {
            $bound_check(_ns, i);
            moonbitlang$core$immut$array$$Tree$eachi$29$(_ns[i], f, child_shift, start$2);
            start$2 = start$2 + (1 << shift) | 0;
            _tmp$2 = i + 1 | 0;
            continue;
          } else {
            return;
          }
        }
      } else {
        const _Some = _x;
        const _sizes = _Some;
        const child_shift = shift - 5 | 0;
        let start$2 = start;
        const _end360 = _ns.length;
        let _tmp$2 = 0;
        while (true) {
          const i = _tmp$2;
          if (i < _end360) {
            $bound_check(_ns, i);
            moonbitlang$core$immut$array$$Tree$eachi$29$(_ns[i], f, child_shift, start$2);
            const _tmp$3 = start$2;
            $bound_check(_sizes, i);
            start$2 = _tmp$3 + _sizes[i] | 0;
            _tmp$2 = i + 1 | 0;
            continue;
          } else {
            return;
          }
        }
      }
    }
  }
}
function moonbitlang$core$immut$array$$copy_sizes(sizes) {
  if (sizes === undefined) {
    return undefined;
  } else {
    const _Some = sizes;
    const _sizes = _Some;
    return moonbitlang$core$array$$FixedArray$copy$8$(_sizes);
  }
}
function moonbitlang$core$immut$array$$Tree$map$69$(self, f) {
  switch (self.$tag) {
    case 0: {
      return $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$8$;
    }
    case 2: {
      const _Leaf = self;
      const _l = _Leaf._0;
      return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$8$(moonbitlang$core$array$$FixedArray$map$43$(_l, f));
    }
    default: {
      const _Node = self;
      const _n = _Node._0;
      const _szs = _Node._1;
      return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$8$(moonbitlang$core$array$$FixedArray$makei$40$(_n.length, (i) => {
        $bound_check(_n, i);
        return moonbitlang$core$immut$array$$Tree$map$69$(_n[i], f);
      }), moonbitlang$core$immut$array$$copy_sizes(_szs));
    }
  }
}
function moonbitlang$core$immut$array$$Tree$size$27$(self, shift) {
  switch (self.$tag) {
    case 0: {
      return 0;
    }
    case 2: {
      const _Leaf = self;
      const _l = _Leaf._0;
      return _l.length;
    }
    default: {
      const _Node = self;
      const _x = _Node._0;
      const _x$2 = _Node._1;
      if (_x$2 === undefined) {
        const len_1 = _x.length - 1 | 0;
        const _tmp = len_1 << shift;
        $bound_check(_x, len_1);
        return _tmp + moonbitlang$core$immut$array$$Tree$size$27$(_x[len_1], shift - 5 | 0) | 0;
      } else {
        const _Some = _x$2;
        const _sizes = _Some;
        const _tmp = _sizes.length - 1 | 0;
        $bound_check(_sizes, _tmp);
        return _sizes[_tmp];
      }
    }
  }
}
function moonbitlang$core$immut$array$$compute_sizes$27$(children, shift) {
  const len = children.length;
  const sizes = $make_array_len_and_init(len, 0);
  let sum = 0;
  let flag = true;
  const full_subtree_size = 32 << shift;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      $bound_check(children, i);
      const sz = moonbitlang$core$immut$array$$Tree$size$27$(children[i], shift);
      flag = flag && sz === full_subtree_size;
      sum = sum + sz | 0;
      $bound_check(sizes, i);
      sizes[i] = sum;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return flag ? undefined : sizes;
}
function moonbitlang$core$immut$array$$min(a, b) {
  return a < b ? a : b;
}
function moonbitlang$core$immut$array$$Tree$leaf_elements$27$(self) {
  if (self.$tag === 2) {
    const _Leaf = self;
    const _children = _Leaf._0;
    return _children;
  } else {
    return moonbitlang$core$abort$$abort$35$("Should not call `get_leaf_elements` on non-leaf nodes");
  }
}
function moonbitlang$core$immut$array$$Tree$node_children$27$(self) {
  if (self.$tag === 1) {
    const _Node = self;
    const _children = _Node._0;
    return _children;
  } else {
    return moonbitlang$core$abort$$abort$37$("Should not call `node_children` on non-`Node`s");
  }
}
function moonbitlang$core$immut$array$$redis$27$(old_t, node_counts, node_nums, shift) {
  const old_len = old_t.length;
  const new_t = $make_array_len_and_init(node_nums, $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$6$);
  let old_offset = 0;
  let j = 0;
  if (shift === 0) {
    let old_leaf_elems = moonbitlang$core$builtin$$Default$default$70$();
    let old_leaf_len = 0;
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < node_nums) {
        const _tmp$2 = j;
        $bound_check(old_t, _tmp$2);
        old_leaf_elems = moonbitlang$core$immut$array$$Tree$leaf_elements$27$(old_t[_tmp$2]);
        old_leaf_len = old_leaf_elems.length;
        let _tmp$3;
        if (old_offset === 0) {
          const _tmp$4 = old_leaf_len;
          $bound_check(node_counts, i);
          _tmp$3 = _tmp$4 === node_counts[i];
        } else {
          _tmp$3 = false;
        }
        if (_tmp$3) {
          const _tmp$4 = j;
          $bound_check(old_t, _tmp$4);
          $bound_check(new_t, i);
          new_t[i] = old_t[_tmp$4];
          j = j + 1 | 0;
        } else {
          let new_offset = 0;
          $bound_check(node_counts, i);
          const new_leaf_len = node_counts[i];
          const _tmp$4 = old_leaf_elems;
          $bound_check(_tmp$4, 0);
          const new_leaf_elems = $make_array_len_and_init(new_leaf_len, _tmp$4[0]);
          while (true) {
            if (new_offset < new_leaf_len) {
              const _tmp$5 = j;
              $bound_check(old_t, _tmp$5);
              old_leaf_elems = moonbitlang$core$immut$array$$Tree$leaf_elements$27$(old_t[_tmp$5]);
              old_leaf_len = old_leaf_elems.length;
              if (j < old_len) {
                const remaining = moonbitlang$core$immut$array$$min(new_leaf_len - new_offset | 0, old_leaf_len - old_offset | 0);
                moonbitlang$core$array$$FixedArray$unsafe_blit$27$(new_leaf_elems, new_offset, old_leaf_elems, old_offset, remaining);
                new_offset = new_offset + remaining | 0;
                old_offset = old_offset + remaining | 0;
                if (old_offset === old_leaf_len) {
                  j = j + 1 | 0;
                  old_offset = 0;
                }
              } else {
                $panic();
              }
              continue;
            } else {
              break;
            }
          }
          $bound_check(new_t, i);
          new_t[i] = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$6$(new_leaf_elems);
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
  } else {
    let old_node_chldrn = moonbitlang$core$builtin$$Default$default$71$();
    let old_node_len = 0;
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < node_nums) {
        const _tmp$2 = j;
        $bound_check(old_t, _tmp$2);
        old_node_chldrn = moonbitlang$core$immut$array$$Tree$node_children$27$(old_t[_tmp$2]);
        old_node_len = old_node_chldrn.length;
        let _tmp$3;
        if (old_offset === 0) {
          const _tmp$4 = old_node_len;
          $bound_check(node_counts, i);
          _tmp$3 = _tmp$4 === node_counts[i];
        } else {
          _tmp$3 = false;
        }
        if (_tmp$3) {
          const _tmp$4 = j;
          $bound_check(old_t, _tmp$4);
          $bound_check(new_t, i);
          new_t[i] = old_t[_tmp$4];
          j = j + 1 | 0;
        } else {
          let new_offset = 0;
          $bound_check(node_counts, i);
          const new_node_len = node_counts[i];
          const _tmp$4 = old_node_chldrn;
          $bound_check(_tmp$4, 0);
          const new_node_chldrn = $make_array_len_and_init(new_node_len, _tmp$4[0]);
          while (true) {
            if (new_offset < new_node_len) {
              const _tmp$5 = j;
              $bound_check(old_t, _tmp$5);
              old_node_chldrn = moonbitlang$core$immut$array$$Tree$node_children$27$(old_t[_tmp$5]);
              old_node_len = old_node_chldrn.length;
              if (j < old_len) {
                const remaining = moonbitlang$core$immut$array$$min(new_node_len - new_offset | 0, old_node_len - old_offset | 0);
                moonbitlang$core$array$$FixedArray$unsafe_blit$21$(new_node_chldrn, new_offset, old_node_chldrn, old_offset, remaining);
                new_offset = new_offset + remaining | 0;
                old_offset = old_offset + remaining | 0;
                if (old_offset === old_node_len) {
                  j = j + 1 | 0;
                  old_offset = 0;
                }
              } else {
                $panic();
              }
              continue;
            } else {
              break;
            }
          }
          $bound_check(new_t, i);
          new_t[i] = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$(new_node_chldrn, moonbitlang$core$immut$array$$compute_sizes$27$(new_node_chldrn, shift - 5 | 0));
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
  }
  return new_t;
}
function moonbitlang$core$immut$array$$Tree$local_size$27$(self) {
  switch (self.$tag) {
    case 0: {
      return 0;
    }
    case 2: {
      const _Leaf = self;
      const _l = _Leaf._0;
      return _l.length;
    }
    default: {
      const _Node = self;
      const _children = _Node._0;
      return _children.length;
    }
  }
}
function moonbitlang$core$immut$array$$redis_plan$27$(t) {
  const node_counts = moonbitlang$core$array$$FixedArray$makei$8$(t.length, (i) => {
    $bound_check(t, i);
    return moonbitlang$core$immut$array$$Tree$local_size$27$(t[i]);
  });
  const total_nodes = moonbitlang$core$array$$FixedArray$fold$44$(node_counts, 0, (acc, x) => acc + x | 0);
  const opt_len = ((total_nodes + 32 | 0) - 1 | 0) / 32 | 0;
  let new_len = t.length;
  let i = 0;
  while (true) {
    if ((opt_len + 1 | 0) < new_len) {
      while (true) {
        const _tmp = i;
        $bound_check(node_counts, _tmp);
        if (node_counts[_tmp] > 31) {
          i = i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const _tmp = i;
      $bound_check(node_counts, _tmp);
      let remaining_nodes = node_counts[_tmp];
      while (true) {
        if (remaining_nodes > 0) {
          const _tmp$2 = remaining_nodes;
          const _tmp$3 = i + 1 | 0;
          $bound_check(node_counts, _tmp$3);
          const min_size = moonbitlang$core$immut$array$$min(_tmp$2 + node_counts[_tmp$3] | 0, 32);
          const _tmp$4 = i;
          $bound_check(node_counts, _tmp$4);
          node_counts[_tmp$4] = min_size;
          const _tmp$5 = remaining_nodes;
          const _tmp$6 = i + 1 | 0;
          $bound_check(node_counts, _tmp$6);
          remaining_nodes = (_tmp$5 + node_counts[_tmp$6] | 0) - min_size | 0;
          i = i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j < (new_len - 1 | 0)) {
          const _tmp$3 = j + 1 | 0;
          $bound_check(node_counts, _tmp$3);
          $bound_check(node_counts, j);
          node_counts[j] = node_counts[_tmp$3];
          _tmp$2 = j + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      new_len = new_len - 1 | 0;
      i = i - 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return { _0: node_counts, _1: new_len };
}
function moonbitlang$core$immut$array$$Tree$is_leaf$27$(self) {
  if (self.$tag === 2) {
    return true;
  } else {
    return false;
  }
}
function moonbitlang$core$immut$array$$Tree$is_node$27$(self) {
  if (self.$tag === 1) {
    return true;
  } else {
    return false;
  }
}
function moonbitlang$core$immut$array$$tri_merge$46$get_children$47$1271(self) {
  switch (self.$tag) {
    case 1: {
      const _Node = self;
      const _children = _Node._0;
      return _children;
    }
    case 0: {
      return [];
    }
    default: {
      return moonbitlang$core$abort$$abort$37$("Unreachable");
    }
  }
}
function moonbitlang$core$immut$array$$tri_merge$27$(left, center, right) {
  if (moonbitlang$core$immut$array$$Tree$is_leaf$27$(left) || (!moonbitlang$core$immut$array$$Tree$is_node$27$(center) || moonbitlang$core$immut$array$$Tree$is_leaf$27$(right))) {
    moonbitlang$core$abort$$abort$7$("Unreachable: input to merge is invalid");
  }
  const left_children = moonbitlang$core$immut$array$$tri_merge$46$get_children$47$1271(left);
  const center_children = moonbitlang$core$immut$array$$tri_merge$46$get_children$47$1271(center);
  const right_children = moonbitlang$core$immut$array$$tri_merge$46$get_children$47$1271(right);
  const left_len = left_children.length;
  const left_len$2 = left_len === 0 ? 0 : left_len - 1 | 0;
  const center_len = center_children.length;
  const right_len = right_children.length;
  const right_len$2 = right_len === 0 ? 0 : right_len - 1 | 0;
  return moonbitlang$core$array$$FixedArray$makei$21$((left_len$2 + center_len | 0) + right_len$2 | 0, (i) => {
    if (i < left_len$2) {
      $bound_check(left_children, i);
      return left_children[i];
    } else {
      if (i < (left_len$2 + center_len | 0)) {
        const _tmp = i - left_len$2 | 0;
        $bound_check(center_children, _tmp);
        return center_children[_tmp];
      } else {
        if (right_len$2 > 0) {
          const _tmp = ((1 + i | 0) - left_len$2 | 0) - center_len | 0;
          $bound_check(right_children, _tmp);
          return right_children[_tmp];
        } else {
          return moonbitlang$core$abort$$abort$21$("Unreachable");
        }
      }
    }
  });
}
function moonbitlang$core$immut$array$$rebalance$27$(left, center, right, shift, top) {
  const t = moonbitlang$core$immut$array$$tri_merge$27$(left, center, right);
  const _bind = moonbitlang$core$immut$array$$redis_plan$27$(t);
  const _nc = _bind._0;
  const _nc_len = _bind._1;
  const new_t = moonbitlang$core$immut$array$$redis$27$(t, _nc, _nc_len, shift - 5 | 0);
  if (new_t.length === _nc_len) {
    if (_nc_len <= 32) {
      const node = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$(new_t, moonbitlang$core$immut$array$$compute_sizes$27$(new_t, shift - 5 | 0));
      return !top ? { _0: new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$(moonbitlang$core$array$$FixedArray$from_array$21$([node]), undefined), _1: shift + 5 | 0 } : { _0: node, _1: shift };
    } else {
      const new_child_1 = moonbitlang$core$array$$FixedArray$makei$21$(32, (i) => {
        $bound_check(new_t, i);
        return new_t[i];
      });
      const new_child_2 = moonbitlang$core$array$$FixedArray$makei$21$(new_t.length - 32 | 0, (i) => {
        const _tmp = i + 32 | 0;
        $bound_check(new_t, _tmp);
        return new_t[_tmp];
      });
      const new_node_1 = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$(new_child_1, moonbitlang$core$immut$array$$compute_sizes$27$(new_child_1, shift - 5 | 0));
      const new_node_2 = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$(new_child_2, moonbitlang$core$immut$array$$compute_sizes$27$(new_child_2, shift - 5 | 0));
      const new_children = moonbitlang$core$array$$FixedArray$from_array$21$([new_node_1, new_node_2]);
      return { _0: new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$(new_children, moonbitlang$core$immut$array$$compute_sizes$27$(new_children, shift)), _1: shift + 5 | 0 };
    }
  } else {
    return $panic();
  }
}
function moonbitlang$core$immut$array$$Tree$left_child$27$(self) {
  _L: {
    switch (self.$tag) {
      case 1: {
        const _Node = self;
        const _children = _Node._0;
        $bound_check(_children, 0);
        return _children[0];
      }
      case 2: {
        break _L;
      }
      default: {
        break _L;
      }
    }
  }
  return moonbitlang$core$abort$$abort$21$("Should not get children on non-`Node`s");
}
function moonbitlang$core$immut$array$$Tree$right_child$27$(self) {
  _L: {
    switch (self.$tag) {
      case 1: {
        const _Node = self;
        const _children = _Node._0;
        const _tmp = _children.length - 1 | 0;
        $bound_check(_children, _tmp);
        return _children[_tmp];
      }
      case 2: {
        break _L;
      }
      default: {
        break _L;
      }
    }
  }
  return moonbitlang$core$abort$$abort$21$("Should not get children on non-`Node`s");
}
function moonbitlang$core$immut$array$$Tree$concat$27$(left, left_shift, right, right_shift, top) {
  if (left_shift > right_shift) {
    const _bind = moonbitlang$core$immut$array$$Tree$concat$27$(moonbitlang$core$immut$array$$Tree$right_child$27$(left), left_shift - 5 | 0, right, right_shift, false);
    const _c = _bind._0;
    const _c_shift = _bind._1;
    return _c_shift === left_shift ? moonbitlang$core$immut$array$$rebalance$27$(left, _c, $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$6$, left_shift, top) : $panic();
  } else {
    if (right_shift > left_shift) {
      const _bind = moonbitlang$core$immut$array$$Tree$concat$27$(left, left_shift, moonbitlang$core$immut$array$$Tree$left_child$27$(right), right_shift - 5 | 0, false);
      const _c = _bind._0;
      const _c_shift = _bind._1;
      return _c_shift === right_shift ? moonbitlang$core$immut$array$$rebalance$27$($64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$6$, _c, right, right_shift, top) : $panic();
    } else {
      if (left_shift === 0) {
        const left_elems = moonbitlang$core$immut$array$$Tree$leaf_elements$27$(left);
        const right_elems = moonbitlang$core$immut$array$$Tree$leaf_elements$27$(right);
        const left_len = left_elems.length;
        const right_len = right_elems.length;
        const len = left_len + right_len | 0;
        return top && len <= 32 ? { _0: new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$6$(moonbitlang$core$array$$FixedArray$makei$27$(len, (i) => {
          if (i < left_len) {
            $bound_check(left_elems, i);
            return left_elems[i];
          } else {
            const _tmp = i - left_len | 0;
            $bound_check(right_elems, _tmp);
            return right_elems[_tmp];
          }
        })), _1: 0 } : { _0: new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$(moonbitlang$core$array$$FixedArray$from_array$21$([left, right]), moonbitlang$core$array$$FixedArray$from_array$8$([left_len, len])), _1: 5 };
      } else {
        const _bind = moonbitlang$core$immut$array$$Tree$concat$27$(moonbitlang$core$immut$array$$Tree$right_child$27$(left), left_shift - 5 | 0, moonbitlang$core$immut$array$$Tree$left_child$27$(right), right_shift - 5 | 0, false);
        const _c = _bind._0;
        const _c_shift = _bind._1;
        return _c_shift === left_shift ? (_c_shift === right_shift ? moonbitlang$core$immut$array$$rebalance$27$(left, _c, right, left_shift, top) : $panic()) : $panic();
      }
    }
  }
}
function moonbitlang$core$immut$array$$new$68$() {
  return { tree: $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$5$, size: 0, shift: 0 };
}
function moonbitlang$core$immut$array$$new$27$() {
  return { tree: $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$6$, size: 0, shift: 0 };
}
function moonbitlang$core$immut$array$$from_leaves$29$(leaves, cap) {
  if (cap === 32) {
    return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$8$(moonbitlang$core$array$$ArrayView$op_get$30$(leaves, 0));
  } else {
    if (leaves.len <= 32) {
      const arr = $make_array_len_and_init(leaves.len, $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$8$);
      const _end30 = leaves.len;
      let _tmp = 0;
      while (true) {
        const i = _tmp;
        if (i < _end30) {
          $bound_check(arr, i);
          arr[i] = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$8$(moonbitlang$core$array$$ArrayView$op_get$30$(leaves, i));
          _tmp = i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$8$(arr, undefined);
    } else {
      const len = Math.imul(leaves.len, 32) | 0;
      const child_cap = cap / 32 | 0;
      const quot = len / child_cap | 0;
      const rem = len % child_cap | 0;
      const times = child_cap / 32 | 0;
      let arr;
      if (rem === 0) {
        arr = moonbitlang$core$array$$FixedArray$makei$40$(quot, (i) => moonbitlang$core$immut$array$$from_leaves$29$(moonbitlang$core$array$$ArrayView$op_as_view$30$(leaves, Math.imul(i, times) | 0, Math.imul(i + 1 | 0, times) | 0), child_cap));
      } else {
        const arr$2 = $make_array_len_and_init(quot + 1 | 0, $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$8$);
        let _tmp = 0;
        while (true) {
          const i = _tmp;
          if (i < quot) {
            $bound_check(arr$2, i);
            arr$2[i] = moonbitlang$core$immut$array$$from_leaves$29$(moonbitlang$core$array$$ArrayView$op_as_view$30$(leaves, Math.imul(i, times) | 0, Math.imul(i + 1 | 0, times) | 0), child_cap);
            _tmp = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        $bound_check(arr$2, quot);
        arr$2[quot] = moonbitlang$core$immut$array$$from_leaves$29$(moonbitlang$core$array$$ArrayView$op_as_view$30$(leaves, Math.imul(times, quot) | 0, undefined), child_cap);
        arr = arr$2;
      }
      return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$8$(arr, undefined);
    }
  }
}
function moonbitlang$core$immut$array$$from_leaves$28$(leaves, cap) {
  if (cap === 32) {
    return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$7$(moonbitlang$core$array$$ArrayView$op_get$32$(leaves, 0));
  } else {
    if (leaves.len <= 32) {
      const arr = $make_array_len_and_init(leaves.len, $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$7$);
      const _end30 = leaves.len;
      let _tmp = 0;
      while (true) {
        const i = _tmp;
        if (i < _end30) {
          $bound_check(arr, i);
          arr[i] = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$7$(moonbitlang$core$array$$ArrayView$op_get$32$(leaves, i));
          _tmp = i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$7$(arr, undefined);
    } else {
      const len = Math.imul(leaves.len, 32) | 0;
      const child_cap = cap / 32 | 0;
      const quot = len / child_cap | 0;
      const rem = len % child_cap | 0;
      const times = child_cap / 32 | 0;
      let arr;
      if (rem === 0) {
        arr = moonbitlang$core$array$$FixedArray$makei$22$(quot, (i) => moonbitlang$core$immut$array$$from_leaves$28$(moonbitlang$core$array$$ArrayView$op_as_view$32$(leaves, Math.imul(i, times) | 0, Math.imul(i + 1 | 0, times) | 0), child_cap));
      } else {
        const arr$2 = $make_array_len_and_init(quot + 1 | 0, $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$7$);
        let _tmp = 0;
        while (true) {
          const i = _tmp;
          if (i < quot) {
            $bound_check(arr$2, i);
            arr$2[i] = moonbitlang$core$immut$array$$from_leaves$28$(moonbitlang$core$array$$ArrayView$op_as_view$32$(leaves, Math.imul(i, times) | 0, Math.imul(i + 1 | 0, times) | 0), child_cap);
            _tmp = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        $bound_check(arr$2, quot);
        arr$2[quot] = moonbitlang$core$immut$array$$from_leaves$28$(moonbitlang$core$array$$ArrayView$op_as_view$32$(leaves, Math.imul(times, quot) | 0, undefined), child_cap);
        arr = arr$2;
      }
      return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$7$(arr, undefined);
    }
  }
}
function moonbitlang$core$immut$array$$from_leaves$27$(leaves, cap) {
  if (cap === 32) {
    return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$6$(moonbitlang$core$array$$ArrayView$op_get$35$(leaves, 0));
  } else {
    if (leaves.len <= 32) {
      const arr = $make_array_len_and_init(leaves.len, $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$6$);
      const _end30 = leaves.len;
      let _tmp = 0;
      while (true) {
        const i = _tmp;
        if (i < _end30) {
          $bound_check(arr, i);
          arr[i] = new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Leaf$6$(moonbitlang$core$array$$ArrayView$op_get$35$(leaves, i));
          _tmp = i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$(arr, undefined);
    } else {
      const len = Math.imul(leaves.len, 32) | 0;
      const child_cap = cap / 32 | 0;
      const quot = len / child_cap | 0;
      const rem = len % child_cap | 0;
      const times = child_cap / 32 | 0;
      let arr;
      if (rem === 0) {
        arr = moonbitlang$core$array$$FixedArray$makei$21$(quot, (i) => moonbitlang$core$immut$array$$from_leaves$27$(moonbitlang$core$array$$ArrayView$op_as_view$35$(leaves, Math.imul(i, times) | 0, Math.imul(i + 1 | 0, times) | 0), child_cap));
      } else {
        const arr$2 = $make_array_len_and_init(quot + 1 | 0, $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$6$);
        let _tmp = 0;
        while (true) {
          const i = _tmp;
          if (i < quot) {
            $bound_check(arr$2, i);
            arr$2[i] = moonbitlang$core$immut$array$$from_leaves$27$(moonbitlang$core$array$$ArrayView$op_as_view$35$(leaves, Math.imul(i, times) | 0, Math.imul(i + 1 | 0, times) | 0), child_cap);
            _tmp = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        $bound_check(arr$2, quot);
        arr$2[quot] = moonbitlang$core$immut$array$$from_leaves$27$(moonbitlang$core$array$$ArrayView$op_as_view$35$(leaves, Math.imul(times, quot) | 0, undefined), child_cap);
        arr = arr$2;
      }
      return new $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Node$6$(arr, undefined);
    }
  }
}
function moonbitlang$core$immut$array$$shift_cap_of_size(size) {
  let cap = 32;
  let depth = 0;
  while (true) {
    if (cap < size) {
      cap = Math.imul(cap, 32) | 0;
      depth = depth + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const shift = Math.imul(5, depth) | 0;
  return { _0: shift, _1: cap };
}
function moonbitlang$core$immut$array$$makei$29$(len, f) {
  const quot = len / 32 | 0;
  const rem = len % 32 | 0;
  let leaves;
  if (rem === 0) {
    leaves = moonbitlang$core$array$$Array$makei$30$(quot, (k) => moonbitlang$core$array$$FixedArray$makei$29$(32, (i) => f((Math.imul(k, 32) | 0) + i | 0)));
  } else {
    const arr = moonbitlang$core$array$$Array$make$30$(quot + 1 | 0, []);
    let _tmp = 0;
    while (true) {
      const k = _tmp;
      if (k < quot) {
        moonbitlang$core$array$$Array$op_set$30$(arr, k, moonbitlang$core$array$$FixedArray$makei$29$(32, (i) => f((Math.imul(k, 32) | 0) + i | 0)));
        _tmp = k + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    moonbitlang$core$array$$Array$op_set$30$(arr, quot, moonbitlang$core$array$$FixedArray$makei$29$(rem, (i) => f((Math.imul(quot, 32) | 0) + i | 0)));
    leaves = arr;
  }
  const _bind = moonbitlang$core$immut$array$$shift_cap_of_size(len);
  const _shift = _bind._0;
  const _cap = _bind._1;
  const tree = len === 0 ? $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$8$ : moonbitlang$core$immut$array$$from_leaves$29$({ buf: leaves, start: 0, len: leaves.length }, _cap);
  return { tree: tree, size: len, shift: _shift };
}
function moonbitlang$core$immut$array$$makei$28$(len, f) {
  const quot = len / 32 | 0;
  const rem = len % 32 | 0;
  let leaves;
  if (rem === 0) {
    leaves = moonbitlang$core$array$$Array$makei$32$(quot, (k) => moonbitlang$core$array$$FixedArray$makei$28$(32, (i) => f((Math.imul(k, 32) | 0) + i | 0)));
  } else {
    const arr = moonbitlang$core$array$$Array$make$32$(quot + 1 | 0, []);
    let _tmp = 0;
    while (true) {
      const k = _tmp;
      if (k < quot) {
        moonbitlang$core$array$$Array$op_set$32$(arr, k, moonbitlang$core$array$$FixedArray$makei$28$(32, (i) => f((Math.imul(k, 32) | 0) + i | 0)));
        _tmp = k + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    moonbitlang$core$array$$Array$op_set$32$(arr, quot, moonbitlang$core$array$$FixedArray$makei$28$(rem, (i) => f((Math.imul(quot, 32) | 0) + i | 0)));
    leaves = arr;
  }
  const _bind = moonbitlang$core$immut$array$$shift_cap_of_size(len);
  const _shift = _bind._0;
  const _cap = _bind._1;
  const tree = len === 0 ? $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$7$ : moonbitlang$core$immut$array$$from_leaves$28$({ buf: leaves, start: 0, len: leaves.length }, _cap);
  return { tree: tree, size: len, shift: _shift };
}
function moonbitlang$core$immut$array$$makei$27$(len, f) {
  const quot = len / 32 | 0;
  const rem = len % 32 | 0;
  let leaves;
  if (rem === 0) {
    leaves = moonbitlang$core$array$$Array$makei$35$(quot, (k) => moonbitlang$core$array$$FixedArray$makei$27$(32, (i) => f((Math.imul(k, 32) | 0) + i | 0)));
  } else {
    const arr = moonbitlang$core$array$$Array$make$35$(quot + 1 | 0, []);
    let _tmp = 0;
    while (true) {
      const k = _tmp;
      if (k < quot) {
        moonbitlang$core$array$$Array$op_set$35$(arr, k, moonbitlang$core$array$$FixedArray$makei$27$(32, (i) => f((Math.imul(k, 32) | 0) + i | 0)));
        _tmp = k + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    moonbitlang$core$array$$Array$op_set$35$(arr, quot, moonbitlang$core$array$$FixedArray$makei$27$(rem, (i) => f((Math.imul(quot, 32) | 0) + i | 0)));
    leaves = arr;
  }
  const _bind = moonbitlang$core$immut$array$$shift_cap_of_size(len);
  const _shift = _bind._0;
  const _cap = _bind._1;
  const tree = len === 0 ? $64$moonbitlang$47$core$47$immut$47$array$46$Tree$Empty$6$ : moonbitlang$core$immut$array$$from_leaves$27$({ buf: leaves, start: 0, len: leaves.length }, _cap);
  return { tree: tree, size: len, shift: _shift };
}
function moonbitlang$core$immut$array$$from_array$29$(arr) {
  return moonbitlang$core$immut$array$$makei$29$(arr.length, (i) => moonbitlang$core$array$$Array$op_get$29$(arr, i));
}
function moonbitlang$core$immut$array$$from_array$28$(arr) {
  return moonbitlang$core$immut$array$$makei$28$(arr.length, (i) => moonbitlang$core$array$$Array$op_get$28$(arr, i));
}
function moonbitlang$core$immut$array$$from_array$27$(arr) {
  return moonbitlang$core$immut$array$$makei$27$(arr.length, (i) => moonbitlang$core$array$$Array$op_get$27$(arr, i));
}
function moonbitlang$core$immut$array$$T$eachi$27$(self, f) {
  moonbitlang$core$immut$array$$Tree$eachi$27$(self.tree, f, self.shift, 0);
}
function moonbitlang$core$immut$array$$T$eachi$28$(self, f) {
  moonbitlang$core$immut$array$$Tree$eachi$28$(self.tree, f, self.shift, 0);
}
function moonbitlang$core$immut$array$$T$eachi$29$(self, f) {
  moonbitlang$core$immut$array$$Tree$eachi$29$(self.tree, f, self.shift, 0);
}
function moonbitlang$core$immut$array$$T$op_get$27$(self, index) {
  return index === 0 ? moonbitlang$core$immut$array$$Tree$get_first$27$(self.tree) : index === (self.size - 1 | 0) ? moonbitlang$core$immut$array$$Tree$get_last$27$(self.tree) : moonbitlang$core$immut$array$$Tree$get$27$(self.tree, index, self.shift);
}
function moonbitlang$core$immut$array$$T$op_get$28$(self, index) {
  return index === 0 ? moonbitlang$core$immut$array$$Tree$get_first$28$(self.tree) : index === (self.size - 1 | 0) ? moonbitlang$core$immut$array$$Tree$get_last$28$(self.tree) : moonbitlang$core$immut$array$$Tree$get$28$(self.tree, index, self.shift);
}
function moonbitlang$core$immut$array$$T$op_get$29$(self, index) {
  return index === 0 ? moonbitlang$core$immut$array$$Tree$get_first$29$(self.tree) : index === (self.size - 1 | 0) ? moonbitlang$core$immut$array$$Tree$get_last$29$(self.tree) : moonbitlang$core$immut$array$$Tree$get$29$(self.tree, index, self.shift);
}
function moonbitlang$core$immut$array$$T$to_array$27$(self) {
  if (self.size === 0) {
    return [];
  } else {
    const arr = moonbitlang$core$array$$Array$make$27$(self.size, moonbitlang$core$immut$array$$T$op_get$27$(self, 0));
    moonbitlang$core$immut$array$$T$eachi$27$(self, (i, v) => {
      moonbitlang$core$array$$Array$op_set$27$(arr, i, v);
    });
    return arr;
  }
}
function moonbitlang$core$immut$array$$T$to_array$28$(self) {
  if (self.size === 0) {
    return [];
  } else {
    const arr = moonbitlang$core$array$$Array$make$28$(self.size, moonbitlang$core$immut$array$$T$op_get$28$(self, 0));
    moonbitlang$core$immut$array$$T$eachi$28$(self, (i, v) => {
      moonbitlang$core$array$$Array$op_set$28$(arr, i, v);
    });
    return arr;
  }
}
function moonbitlang$core$immut$array$$T$to_array$29$(self) {
  if (self.size === 0) {
    return [];
  } else {
    const arr = moonbitlang$core$array$$Array$make$29$(self.size, moonbitlang$core$immut$array$$T$op_get$29$(self, 0));
    moonbitlang$core$immut$array$$T$eachi$29$(self, (i, v) => {
      moonbitlang$core$array$$Array$op_set$29$(arr, i, v);
    });
    return arr;
  }
}
function moonbitlang$core$immut$array$$T$push$68$(self, value) {
  const _bind = moonbitlang$core$immut$array$$Tree$push_end$68$(self.tree, self.shift, value);
  const _tree = _bind._0;
  const _shift = _bind._1;
  return { tree: _tree, size: self.size + 1 | 0, shift: _shift };
}
function moonbitlang$core$immut$array$$T$push$27$(self, value) {
  const _bind = moonbitlang$core$immut$array$$Tree$push_end$27$(self.tree, self.shift, value);
  const _tree = _bind._0;
  const _shift = _bind._1;
  return { tree: _tree, size: self.size + 1 | 0, shift: _shift };
}
function moonbitlang$core$immut$array$$T$push$28$(self, value) {
  const _bind = moonbitlang$core$immut$array$$Tree$push_end$28$(self.tree, self.shift, value);
  const _tree = _bind._0;
  const _shift = _bind._1;
  return { tree: _tree, size: self.size + 1 | 0, shift: _shift };
}
function moonbitlang$core$immut$array$$T$concat$27$(self, other) {
  if (self.size === 0) {
    return other;
  }
  if (other.size === 0) {
    return self;
  }
  const _bind = moonbitlang$core$immut$array$$Tree$concat$27$(self.tree, self.shift, other.tree, other.shift, true);
  const _tree = _bind._0;
  const _shift = _bind._1;
  return { tree: _tree, size: self.size + other.size | 0, shift: _shift };
}
function moonbitlang$core$builtin$$Add$op_add$72$(self, other) {
  return moonbitlang$core$immut$array$$T$concat$27$(self, other);
}
function moonbitlang$core$immut$array$$T$iter$68$(self) {
  return moonbitlang$core$immut$array$$Tree$iter$68$(self.tree);
}
function moonbitlang$core$immut$array$$T$map$69$(self, f) {
  return { tree: moonbitlang$core$immut$array$$Tree$map$69$(self.tree, f), size: self.size, shift: self.shift };
}
function moonbitlang$core$immut$sorted_map$$T$size$73$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$74$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$make_tree$73$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$73$(l) + moonbitlang$core$immut$sorted_map$$T$size$73$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$9$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$74$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$74$(l) + moonbitlang$core$immut$sorted_map$$T$size$74$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$10$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$balance$73$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$73$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$73$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$73$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$73$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$73$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$73$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$73$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$73$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$73$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$73$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$73$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$73$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$73$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$73$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$73$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$73$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$73$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$73$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$74$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$74$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$74$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$74$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$74$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$74$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$74$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$74$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$74$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$74$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$74$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$74$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$74$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$74$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$74$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$74$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$74$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$74$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$74$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$73$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$9$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$9$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$9$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = $compare_int(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$73$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$73$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$73$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$73$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$73$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$74$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$10$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$10$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$10$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = moonbitlang$core$builtin$$Compare$compare$6$(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$74$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$74$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$74$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$74$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$74$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$73$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = $compare_int(key, _k);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$74$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = moonbitlang$core$builtin$$Compare$compare$6$(key, _k);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$op_get$73$(self, key) {
  return moonbitlang$core$immut$sorted_map$$T$get$73$(self, key);
}
function moonbitlang$core$builtin$$Eq$op_equal$75$(_x_376, _x_377) {
  let _tmp = _x_376;
  let _tmp$2 = _x_377;
  while (true) {
    const _x_376$2 = _tmp;
    const _x_377$2 = _tmp$2;
    if (_x_376$2.$tag === 0) {
      if (_x_377$2.$tag === 0) {
        return true;
      } else {
        return false;
      }
    } else {
      const _Cons = _x_376$2;
      const _$42$x0_378 = _Cons._0;
      const _$42$x1_379 = _Cons._1;
      if (_x_377$2.$tag === 1) {
        const _Cons$2 = _x_377$2;
        const _$42$y0_380 = _Cons$2._0;
        const _$42$y1_381 = _Cons$2._1;
        if (moonbitlang$core$builtin$$Eq$op_equal$76$(_$42$x0_378, _$42$y0_380)) {
          _tmp = _$42$x1_379;
          _tmp$2 = _$42$y1_381;
          continue;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }
}
function moonbitlang$core$immut$list$$T$iter$76$(self) {
  const _p = (yield_) => {
    let _tmp = self;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        return 1;
      } else {
        const _Cons = _param;
        const _head = _Cons._0;
        const _tail = _Cons._1;
        if (moonbitlang$core$builtin$$Eq$op_equal$77$(yield_(_head), 0)) {
          return 0;
        }
        _tmp = _tail;
        continue;
      }
    }
  };
  return _p;
}
function moonbitlang$core$immut$list$$T$iter$78$(self) {
  const _p = (yield_) => {
    let _tmp = self;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        return 1;
      } else {
        const _Cons = _param;
        const _head = _Cons._0;
        const _tail = _Cons._1;
        if (moonbitlang$core$builtin$$Eq$op_equal$77$(yield_(_head), 0)) {
          return 0;
        }
        _tmp = _tail;
        continue;
      }
    }
  };
  return _p;
}
function moonbitlang$core$immut$list$$T$iter$79$(self) {
  const _p = (yield_) => {
    let _tmp = self;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        return 1;
      } else {
        const _Cons = _param;
        const _head = _Cons._0;
        const _tail = _Cons._1;
        if (moonbitlang$core$builtin$$Eq$op_equal$77$(yield_(_head), 0)) {
          return 0;
        }
        _tmp = _tail;
        continue;
      }
    }
  };
  return _p;
}
function moonbitlang$core$immut$list$$T$to_array$80$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$80$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$6$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$6$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$81$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$81$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$82$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$82$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$83$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$83$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$84$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$84$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$85$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$85$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$86$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$86$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$87$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$87$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$tail$10$(self) {
  if (self.$tag === 0) {
    return $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$11$;
  } else {
    const _Cons = self;
    const _tail = _Cons._1;
    return _tail;
  }
}
function moonbitlang$core$immut$list$$T$tail$34$(self) {
  if (self.$tag === 0) {
    return $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$12$;
  } else {
    const _Cons = self;
    const _tail = _Cons._1;
    return _tail;
  }
}
function moonbitlang$core$immut$list$$T$unsafe_head$10$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$10$("head of empty list");
  } else {
    const _Cons = self;
    const _head = _Cons._0;
    return _head;
  }
}
function moonbitlang$core$immut$list$$T$unsafe_head$34$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$34$("head of empty list");
  } else {
    const _Cons = self;
    const _head = _Cons._0;
    return _head;
  }
}
function moonbitlang$core$immut$list$$T$contains$76$(self, value) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return false;
    } else {
      const _Cons = _param;
      const _x = _Cons._0;
      const _xs = _Cons._1;
      if (moonbitlang$core$builtin$$Eq$op_equal$76$(_x, value)) {
        return true;
      } else {
        _tmp = _xs;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$list$$T$drop$10$(self, n) {
  if (n <= 0) {
    return self;
  } else {
    let _tmp = n;
    let _tmp$2 = self;
    while (true) {
      const _param_0 = _tmp;
      const _param_1 = _tmp$2;
      if (_param_1.$tag === 0) {
        return $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$11$;
      } else {
        if (_param_0 === 1) {
          const _Cons = _param_1;
          const _xs = _Cons._1;
          return _xs;
        } else {
          const _Cons = _param_1;
          const _xs = _Cons._1;
          const _tmp$3 = _param_0 - 1 | 0;
          _tmp = _tmp$3;
          _tmp$2 = _xs;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$list$$T$drop$34$(self, n) {
  if (n <= 0) {
    return self;
  } else {
    let _tmp = n;
    let _tmp$2 = self;
    while (true) {
      const _param_0 = _tmp;
      const _param_1 = _tmp$2;
      if (_param_1.$tag === 0) {
        return $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$12$;
      } else {
        if (_param_0 === 1) {
          const _Cons = _param_1;
          const _xs = _Cons._1;
          return _xs;
        } else {
          const _Cons = _param_1;
          const _xs = _Cons._1;
          const _tmp$3 = _param_0 - 1 | 0;
          _tmp = _tmp$3;
          _tmp$2 = _xs;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$list$$T$iter2$78$(self) {
  const _p = (yield_) => {
    let _tmp = self;
    let _tmp$2 = 0;
    while (true) {
      const _param_0 = _tmp;
      const _param_1 = _tmp$2;
      if (_param_0.$tag === 0) {
        return 0;
      } else {
        const _Cons = _param_0;
        const _head = _Cons._0;
        const _tail = _Cons._1;
        if (moonbitlang$core$builtin$$Eq$op_equal$77$(yield_(_param_1, _head), 0)) {
          return 0;
        }
        const _tmp$3 = _param_1 + 1 | 0;
        _tmp = _tail;
        _tmp$2 = _tmp$3;
        continue;
      }
    }
  };
  return _p;
}
function moonbitlang$core$sorted_map$$new_node$88$(key, value) {
  return { key: key, value: value, left: undefined, right: undefined, height: 1 };
}
function moonbitlang$core$sorted_map$$new_node$89$(key, value) {
  return { key: key, value: value, left: undefined, right: undefined, height: 1 };
}
function moonbitlang$core$sorted_map$$new_node$90$(key, value) {
  return { key: key, value: value, left: undefined, right: undefined, height: 1 };
}
function moonbitlang$core$sorted_map$$new_node$91$(key, value) {
  return { key: key, value: value, left: undefined, right: undefined, height: 1 };
}
function moonbitlang$core$builtin$$Eq$op_equal$92$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$93$(self.key, other.key);
}
function moonbitlang$core$builtin$$Eq$op_equal$94$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$95$(self.key, other.key);
}
function moonbitlang$core$builtin$$Eq$op_equal$96$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$97$(self.key, other.key);
}
function moonbitlang$core$sorted_map$$max(x, y) {
  return x > y ? x : y;
}
function moonbitlang$core$sorted_map$$height$88$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_map$$height$89$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_map$$height$90$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_map$$height$91$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_map$$height_ge$88$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_map$$height_ge$89$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_map$$height_ge$90$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_map$$height_ge$91$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_map$$Node$update_height$88$(self) {
  self.height = 1 + moonbitlang$core$sorted_map$$max(moonbitlang$core$sorted_map$$height$88$(self.left), moonbitlang$core$sorted_map$$height$88$(self.right)) | 0;
}
function moonbitlang$core$sorted_map$$Node$update_height$89$(self) {
  self.height = 1 + moonbitlang$core$sorted_map$$max(moonbitlang$core$sorted_map$$height$89$(self.left), moonbitlang$core$sorted_map$$height$89$(self.right)) | 0;
}
function moonbitlang$core$sorted_map$$Node$update_height$90$(self) {
  self.height = 1 + moonbitlang$core$sorted_map$$max(moonbitlang$core$sorted_map$$height$90$(self.left), moonbitlang$core$sorted_map$$height$90$(self.right)) | 0;
}
function moonbitlang$core$sorted_map$$Node$update_height$91$(self) {
  self.height = 1 + moonbitlang$core$sorted_map$$max(moonbitlang$core$sorted_map$$height$91$(self.left), moonbitlang$core$sorted_map$$height$91$(self.right)) | 0;
}
function moonbitlang$core$sorted_map$$rotate_l$88$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$98$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_map$$Node$update_height$88$(n);
  moonbitlang$core$sorted_map$$Node$update_height$88$(r);
  return r;
}
function moonbitlang$core$sorted_map$$rotate_l$89$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$99$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_map$$Node$update_height$89$(n);
  moonbitlang$core$sorted_map$$Node$update_height$89$(r);
  return r;
}
function moonbitlang$core$sorted_map$$rotate_l$90$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$100$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_map$$Node$update_height$90$(n);
  moonbitlang$core$sorted_map$$Node$update_height$90$(r);
  return r;
}
function moonbitlang$core$sorted_map$$rotate_l$91$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$101$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_map$$Node$update_height$91$(n);
  moonbitlang$core$sorted_map$$Node$update_height$91$(r);
  return r;
}
function moonbitlang$core$sorted_map$$rotate_r$88$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$98$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_map$$Node$update_height$88$(n);
  moonbitlang$core$sorted_map$$Node$update_height$88$(l);
  return l;
}
function moonbitlang$core$sorted_map$$rotate_r$89$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$99$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_map$$Node$update_height$89$(n);
  moonbitlang$core$sorted_map$$Node$update_height$89$(l);
  return l;
}
function moonbitlang$core$sorted_map$$rotate_r$90$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$100$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_map$$Node$update_height$90$(n);
  moonbitlang$core$sorted_map$$Node$update_height$90$(l);
  return l;
}
function moonbitlang$core$sorted_map$$rotate_r$91$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$101$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_map$$Node$update_height$91$(n);
  moonbitlang$core$sorted_map$$Node$update_height$91$(l);
  return l;
}
function moonbitlang$core$sorted_map$$rotate_lr$88$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$98$(n.left);
  const v = moonbitlang$core$sorted_map$$rotate_l$88$(l);
  n.left = v;
  return moonbitlang$core$sorted_map$$rotate_r$88$(n);
}
function moonbitlang$core$sorted_map$$rotate_lr$89$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$99$(n.left);
  const v = moonbitlang$core$sorted_map$$rotate_l$89$(l);
  n.left = v;
  return moonbitlang$core$sorted_map$$rotate_r$89$(n);
}
function moonbitlang$core$sorted_map$$rotate_lr$90$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$100$(n.left);
  const v = moonbitlang$core$sorted_map$$rotate_l$90$(l);
  n.left = v;
  return moonbitlang$core$sorted_map$$rotate_r$90$(n);
}
function moonbitlang$core$sorted_map$$rotate_lr$91$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$101$(n.left);
  const v = moonbitlang$core$sorted_map$$rotate_l$91$(l);
  n.left = v;
  return moonbitlang$core$sorted_map$$rotate_r$91$(n);
}
function moonbitlang$core$sorted_map$$rotate_rl$88$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$98$(n.right);
  const v = moonbitlang$core$sorted_map$$rotate_r$88$(r);
  n.right = v;
  return moonbitlang$core$sorted_map$$rotate_l$88$(n);
}
function moonbitlang$core$sorted_map$$rotate_rl$89$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$99$(n.right);
  const v = moonbitlang$core$sorted_map$$rotate_r$89$(r);
  n.right = v;
  return moonbitlang$core$sorted_map$$rotate_l$89$(n);
}
function moonbitlang$core$sorted_map$$rotate_rl$90$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$100$(n.right);
  const v = moonbitlang$core$sorted_map$$rotate_r$90$(r);
  n.right = v;
  return moonbitlang$core$sorted_map$$rotate_l$90$(n);
}
function moonbitlang$core$sorted_map$$rotate_rl$91$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$101$(n.right);
  const v = moonbitlang$core$sorted_map$$rotate_r$91$(r);
  n.right = v;
  return moonbitlang$core$sorted_map$$rotate_l$91$(n);
}
function moonbitlang$core$sorted_map$$balance$88$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_map$$height$88$(l);
  const hr = moonbitlang$core$sorted_map$$height$88$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$98$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_map$$height_ge$88$(_ll, _lr) ? moonbitlang$core$sorted_map$$rotate_r$88$(root) : moonbitlang$core$sorted_map$$rotate_lr$88$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$98$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_map$$height_ge$88$(_rr, _rl) ? moonbitlang$core$sorted_map$$rotate_l$88$(root) : moonbitlang$core$sorted_map$$rotate_rl$88$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_map$$Node$update_height$88$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_map$$balance$89$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_map$$height$89$(l);
  const hr = moonbitlang$core$sorted_map$$height$89$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$99$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_map$$height_ge$89$(_ll, _lr) ? moonbitlang$core$sorted_map$$rotate_r$89$(root) : moonbitlang$core$sorted_map$$rotate_lr$89$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$99$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_map$$height_ge$89$(_rr, _rl) ? moonbitlang$core$sorted_map$$rotate_l$89$(root) : moonbitlang$core$sorted_map$$rotate_rl$89$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_map$$Node$update_height$89$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_map$$balance$90$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_map$$height$90$(l);
  const hr = moonbitlang$core$sorted_map$$height$90$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$100$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_map$$height_ge$90$(_ll, _lr) ? moonbitlang$core$sorted_map$$rotate_r$90$(root) : moonbitlang$core$sorted_map$$rotate_lr$90$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$100$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_map$$height_ge$90$(_rr, _rl) ? moonbitlang$core$sorted_map$$rotate_l$90$(root) : moonbitlang$core$sorted_map$$rotate_rl$90$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_map$$Node$update_height$90$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_map$$balance$91$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_map$$height$91$(l);
  const hr = moonbitlang$core$sorted_map$$height$91$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$101$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_map$$height_ge$91$(_ll, _lr) ? moonbitlang$core$sorted_map$$rotate_r$91$(root) : moonbitlang$core$sorted_map$$rotate_lr$91$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$101$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_map$$height_ge$91$(_rr, _rl) ? moonbitlang$core$sorted_map$$rotate_l$91$(root) : moonbitlang$core$sorted_map$$rotate_rl$91$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_map$$Node$update_height$91$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_map$$add_node$88$(root, key, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_map$$new_node$88$(key, value), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    if (moonbitlang$core$builtin$$Eq$op_equal$93$(key, _n.key)) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (moonbitlang$core$builtin$$op_lt$93$(key, _n.key)) {
        const _bind = moonbitlang$core$sorted_map$$add_node$88$(l, key, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_map$$balance$88$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_map$$add_node$88$(r, key, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_map$$balance$88$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_map$$add_node$89$(root, key, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_map$$new_node$89$(key, value), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    if (moonbitlang$core$builtin$$Eq$op_equal$95$(key, _n.key)) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (moonbitlang$core$builtin$$op_lt$95$(key, _n.key)) {
        const _bind = moonbitlang$core$sorted_map$$add_node$89$(l, key, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_map$$balance$89$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_map$$add_node$89$(r, key, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_map$$balance$89$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_map$$add_node$90$(root, key, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_map$$new_node$90$(key, value), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    if (key === _n.key) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (moonbitlang$core$builtin$$op_lt$6$(key, _n.key)) {
        const _bind = moonbitlang$core$sorted_map$$add_node$90$(l, key, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_map$$balance$90$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_map$$add_node$90$(r, key, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_map$$balance$90$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_map$$add_node$91$(root, key, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_map$$new_node$91$(key, value), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    if (moonbitlang$core$builtin$$Eq$op_equal$97$(key, _n.key)) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (moonbitlang$core$builtin$$op_lt$97$(key, _n.key)) {
        const _bind = moonbitlang$core$sorted_map$$add_node$91$(l, key, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_map$$balance$91$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_map$$add_node$91$(r, key, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_map$$balance$91$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$add$88$(self, key, value) {
  const _bind = moonbitlang$core$sorted_map$$add_node$88$(self.root, key, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$102$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_map$$T$add$89$(self, key, value) {
  const _bind = moonbitlang$core$sorted_map$$add_node$89$(self.root, key, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$103$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_map$$T$add$90$(self, key, value) {
  const _bind = moonbitlang$core$sorted_map$$add_node$90$(self.root, key, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$104$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_map$$T$add$91$(self, key, value) {
  const _bind = moonbitlang$core$sorted_map$$add_node$91$(self.root, key, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$105$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_map$$T$op_set$88$(self, key, value) {
  moonbitlang$core$sorted_map$$T$add$88$(self, key, value);
}
function moonbitlang$core$sorted_map$$T$op_set$89$(self, key, value) {
  moonbitlang$core$sorted_map$$T$add$89$(self, key, value);
}
function moonbitlang$core$sorted_map$$T$op_set$90$(self, key, value) {
  moonbitlang$core$sorted_map$$T$add$90$(self, key, value);
}
function moonbitlang$core$sorted_map$$T$op_set$91$(self, key, value) {
  moonbitlang$core$sorted_map$$T$add$91$(self, key, value);
}
function moonbitlang$core$sorted_map$$T$get$88$(self, key) {
  let _tmp = self.root;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return undefined;
    } else {
      const _Some = _param;
      const _node = _Some;
      const cmp = moonbitlang$core$builtin$$Compare$compare$93$(key, _node.key);
      if (cmp === 0) {
        return _node.value;
      } else {
        if (cmp > 0) {
          _tmp = _node.right;
          continue;
        } else {
          _tmp = _node.left;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$get$90$(self, key) {
  let _tmp = self.root;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return undefined;
    } else {
      const _Some = _param;
      const _node = _Some;
      const cmp = moonbitlang$core$builtin$$Compare$compare$6$(key, _node.key);
      if (cmp === 0) {
        return _node.value;
      } else {
        if (cmp > 0) {
          _tmp = _node.right;
          continue;
        } else {
          _tmp = _node.left;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$get$89$(self, key) {
  let _tmp = self.root;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return undefined;
    } else {
      const _Some = _param;
      const _node = _Some;
      const cmp = moonbitlang$core$builtin$$Compare$compare$95$(key, _node.key);
      if (cmp === 0) {
        return _node.value;
      } else {
        if (cmp > 0) {
          _tmp = _node.right;
          continue;
        } else {
          _tmp = _node.left;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$get$91$(self, key) {
  let _tmp = self.root;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return undefined;
    } else {
      const _Some = _param;
      const _node = _Some;
      const cmp = moonbitlang$core$builtin$$Compare$compare$97$(key, _node.key);
      if (cmp === 0) {
        return _node.value;
      } else {
        if (cmp > 0) {
          _tmp = _node.right;
          continue;
        } else {
          _tmp = _node.left;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$each$46$dfs$47$2078(f, root) {
  let _tmp = root;
  while (true) {
    const root$2 = _tmp;
    if (root$2 === undefined) {
      return;
    } else {
      const _Some = root$2;
      const _root = _Some;
      moonbitlang$core$sorted_map$$each$46$dfs$47$2078(f, _root.left);
      f(_root.key, _root.value);
      _tmp = _root.right;
      continue;
    }
  }
}
function moonbitlang$core$sorted_map$$T$each$106$(self, f) {
  moonbitlang$core$sorted_map$$each$46$dfs$47$2078(f, self.root);
}
function moonbitlang$core$sorted_map$$new$90$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_map$$new$88$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_map$$new$89$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_map$$new$91$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_map$$T$keys$91$(self) {
  const keys = moonbitlang$core$array$$Array$new$97$(self.size);
  moonbitlang$core$sorted_map$$T$each$106$(self, (k, _v) => {
    moonbitlang$core$array$$Array$push$97$(keys, k);
  });
  return keys;
}
function moonbitlang$core$sorted_map$$iter2$46$go$47$2092(yield_, x) {
  let _tmp = x;
  while (true) {
    const x$2 = _tmp;
    if (x$2 === undefined) {
      return 1;
    } else {
      const _Some = x$2;
      const _x = _Some;
      const _left = _x.left;
      const _right = _x.right;
      const _key = _x.key;
      const _value = _x.value;
      const _bind = moonbitlang$core$sorted_map$$iter2$46$go$47$2092(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_key, _value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$iter2$89$(self) {
  const _p = (yield_) => moonbitlang$core$sorted_map$$iter2$46$go$47$2092(yield_, self.root);
  return _p;
}
function moonbitlang$core$sorted_map$$iter2$46$go$47$2107(yield_, x) {
  let _tmp = x;
  while (true) {
    const x$2 = _tmp;
    if (x$2 === undefined) {
      return 1;
    } else {
      const _Some = x$2;
      const _x = _Some;
      const _left = _x.left;
      const _right = _x.right;
      const _key = _x.key;
      const _value = _x.value;
      const _bind = moonbitlang$core$sorted_map$$iter2$46$go$47$2107(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_key, _value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$iter2$88$(self) {
  const _p = (yield_) => moonbitlang$core$sorted_map$$iter2$46$go$47$2107(yield_, self.root);
  return _p;
}
function moonbitlang$core$sorted_map$$iter2$46$go$47$2122(yield_, x) {
  let _tmp = x;
  while (true) {
    const x$2 = _tmp;
    if (x$2 === undefined) {
      return 1;
    } else {
      const _Some = x$2;
      const _x = _Some;
      const _left = _x.left;
      const _right = _x.right;
      const _key = _x.key;
      const _value = _x.value;
      const _bind = moonbitlang$core$sorted_map$$iter2$46$go$47$2122(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_key, _value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$iter2$91$(self) {
  const _p = (yield_) => moonbitlang$core$sorted_map$$iter2$46$go$47$2122(yield_, self.root);
  return _p;
}
function moonbitlang$core$option$$Option$or$6$(self, default_) {
  if (self === undefined) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$option$$Option$or$107$(self, default_) {
  if (self === undefined) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$option$$Option$or$108$(self, default_) {
  if (self.$tag === 0) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some._0;
    return _t;
  }
}
function moonbitlang$core$option$$Option$or$25$(self, default_) {
  if (self === undefined) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$option$$Option$or$8$(self, default_) {
  if (self === undefined) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$builtin$$Compare$compare$109$(self, other) {
  if (self === undefined) {
    return other === undefined ? 0 : -1;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return 1;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Compare$compare$6$(_x, _y);
    }
  }
}
function moonbitlang$core$hashmap$$power_2_above(x, n) {
  let _tmp = x;
  while (true) {
    const i = _tmp;
    if (i >= n) {
      return i;
    }
    const next = i << 1;
    if (next < 0) {
      return i;
    }
    _tmp = next;
    continue;
  }
}
function moonbitlang$core$hashmap$$new$110$(capacity) {
  const capacity$2 = moonbitlang$core$hashmap$$power_2_above(8, capacity);
  const _bind = $make_array_len_and_init(capacity$2, undefined);
  const _bind$2 = capacity$2 - 1 | 0;
  return { entries: _bind, capacity: capacity$2, capacity_mask: _bind$2, size: 0 };
}
function moonbitlang$core$hashmap$$new$111$(capacity) {
  const capacity$2 = moonbitlang$core$hashmap$$power_2_above(8, capacity);
  const _bind = $make_array_len_and_init(capacity$2, undefined);
  const _bind$2 = capacity$2 - 1 | 0;
  return { entries: _bind, capacity: capacity$2, capacity_mask: _bind$2, size: 0 };
}
function moonbitlang$core$hashmap$$new$112$(capacity) {
  const capacity$2 = moonbitlang$core$hashmap$$power_2_above(8, capacity);
  const _bind = $make_array_len_and_init(capacity$2, undefined);
  const _bind$2 = capacity$2 - 1 | 0;
  return { entries: _bind, capacity: capacity$2, capacity_mask: _bind$2, size: 0 };
}
function moonbitlang$core$hashmap$$T$set_with_hash$110$(self, key, value, hash) {
  if (self.size >= (self.capacity / 2 | 0)) {
    moonbitlang$core$hashmap$$T$grow$110$(self);
  }
  let _tmp = hash & self.capacity_mask;
  let _tmp$2 = { psl: 0, hash: hash, key: key, value: value };
  while (true) {
    const idx = _tmp;
    const entry = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      const _tmp$4 = self.entries;
      $bound_check(_tmp$4, idx);
      _tmp$4[idx] = entry;
      self.size = self.size + 1 | 0;
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      let _tmp$4;
      if (_curr_entry.hash === entry.hash) {
        const _p = _curr_entry.key;
        const _p$2 = entry.key;
        _tmp$4 = _p === _p$2;
      } else {
        _tmp$4 = false;
      }
      if (_tmp$4) {
        _curr_entry.value = entry.value;
        break;
      }
      let curr_entry;
      if (entry.psl > _curr_entry.psl) {
        const _tmp$5 = self.entries;
        $bound_check(_tmp$5, idx);
        _tmp$5[idx] = entry;
        curr_entry = _curr_entry;
      } else {
        curr_entry = entry;
      }
      curr_entry.psl = curr_entry.psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$5;
      _tmp$2 = curr_entry;
      continue;
    }
  }
}
function moonbitlang$core$hashmap$$T$set_with_hash$111$(self, key, value, hash) {
  if (self.size >= (self.capacity / 2 | 0)) {
    moonbitlang$core$hashmap$$T$grow$111$(self);
  }
  let _tmp = hash & self.capacity_mask;
  let _tmp$2 = { psl: 0, hash: hash, key: key, value: value };
  while (true) {
    const idx = _tmp;
    const entry = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      const _tmp$4 = self.entries;
      $bound_check(_tmp$4, idx);
      _tmp$4[idx] = entry;
      self.size = self.size + 1 | 0;
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      let _tmp$4;
      if (_curr_entry.hash === entry.hash) {
        const _p = _curr_entry.key;
        const _p$2 = entry.key;
        _tmp$4 = _p === _p$2;
      } else {
        _tmp$4 = false;
      }
      if (_tmp$4) {
        _curr_entry.value = entry.value;
        break;
      }
      let curr_entry;
      if (entry.psl > _curr_entry.psl) {
        const _tmp$5 = self.entries;
        $bound_check(_tmp$5, idx);
        _tmp$5[idx] = entry;
        curr_entry = _curr_entry;
      } else {
        curr_entry = entry;
      }
      curr_entry.psl = curr_entry.psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$5;
      _tmp$2 = curr_entry;
      continue;
    }
  }
}
function moonbitlang$core$hashmap$$T$set_with_hash$112$(self, key, value, hash) {
  if (self.size >= (self.capacity / 2 | 0)) {
    moonbitlang$core$hashmap$$T$grow$112$(self);
  }
  let _tmp = hash & self.capacity_mask;
  let _tmp$2 = { psl: 0, hash: hash, key: key, value: value };
  while (true) {
    const idx = _tmp;
    const entry = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      const _tmp$4 = self.entries;
      $bound_check(_tmp$4, idx);
      _tmp$4[idx] = entry;
      self.size = self.size + 1 | 0;
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      let _tmp$4;
      if (_curr_entry.hash === entry.hash) {
        const _p = _curr_entry.key;
        const _p$2 = entry.key;
        _tmp$4 = _p === _p$2;
      } else {
        _tmp$4 = false;
      }
      if (_tmp$4) {
        _curr_entry.value = entry.value;
        break;
      }
      let curr_entry;
      if (entry.psl > _curr_entry.psl) {
        const _tmp$5 = self.entries;
        $bound_check(_tmp$5, idx);
        _tmp$5[idx] = entry;
        curr_entry = _curr_entry;
      } else {
        curr_entry = entry;
      }
      curr_entry.psl = curr_entry.psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$5;
      _tmp$2 = curr_entry;
      continue;
    }
  }
}
function moonbitlang$core$hashmap$$T$grow$110$(self) {
  const old_entries = self.entries;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.size = 0;
  const _end99 = old_entries.length;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end99) {
      $bound_check(old_entries, i);
      const _bind = old_entries[i];
      if (_bind === undefined) {
      } else {
        const _Some = _bind;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _hash = _x.hash;
        moonbitlang$core$hashmap$$T$set_with_hash$110$(self, _key, _value, _hash);
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$hashmap$$T$grow$111$(self) {
  const old_entries = self.entries;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.size = 0;
  const _end99 = old_entries.length;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end99) {
      $bound_check(old_entries, i);
      const _bind = old_entries[i];
      if (_bind === undefined) {
      } else {
        const _Some = _bind;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _hash = _x.hash;
        moonbitlang$core$hashmap$$T$set_with_hash$111$(self, _key, _value, _hash);
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$hashmap$$T$grow$112$(self) {
  const old_entries = self.entries;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.size = 0;
  const _end99 = old_entries.length;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end99) {
      $bound_check(old_entries, i);
      const _bind = old_entries[i];
      if (_bind === undefined) {
      } else {
        const _Some = _bind;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _hash = _x.hash;
        moonbitlang$core$hashmap$$T$set_with_hash$112$(self, _key, _value, _hash);
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$hashmap$$T$set$110$(self, key, value) {
  moonbitlang$core$hashmap$$T$set_with_hash$110$(self, key, value, moonbitlang$core$builtin$$Hash$hash$113$(key));
}
function moonbitlang$core$hashmap$$T$set$111$(self, key, value) {
  moonbitlang$core$hashmap$$T$set_with_hash$111$(self, key, value, moonbitlang$core$builtin$$Hash$hash$57$(key));
}
function moonbitlang$core$hashmap$$T$op_set$110$(self, key, value) {
  moonbitlang$core$hashmap$$T$set$110$(self, key, value);
}
function moonbitlang$core$hashmap$$T$op_set$111$(self, key, value) {
  moonbitlang$core$hashmap$$T$set$111$(self, key, value);
}
function moonbitlang$core$hashmap$$T$get$110$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$113$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      let _tmp$4;
      if (_entry.hash === hash) {
        const _p = _entry.key;
        _tmp$4 = _p === key;
      } else {
        _tmp$4 = false;
      }
      if (_tmp$4) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$5 = i + 1 | 0;
      const _tmp$6 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$5;
      _tmp$2 = _tmp$6;
      continue;
    }
  }
}
function moonbitlang$core$hashmap$$T$get_with_hash$112$(self, key, hash) {
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      let _tmp$4;
      if (_entry.hash === hash) {
        const _p = _entry.key;
        _tmp$4 = _p === key;
      } else {
        _tmp$4 = false;
      }
      if (_tmp$4) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$5 = i + 1 | 0;
      const _tmp$6 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$5;
      _tmp$2 = _tmp$6;
      continue;
    }
  }
}
function moonbitlang$core$hashmap$$T$get_or_init$112$(self, key, init) {
  const hash = moonbitlang$core$builtin$$Hash$hash$57$(key);
  const _bind = moonbitlang$core$hashmap$$T$get_with_hash$112$(self, key, hash);
  if (_bind === undefined) {
    const v = init();
    moonbitlang$core$hashmap$$T$set_with_hash$112$(self, key, v, hash);
    return v;
  } else {
    const _Some = _bind;
    const _v = _Some;
    return _v;
  }
}
function moonbitlang$core$hashmap$$T$contains$111$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$57$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return false;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      let _tmp$4;
      if (_entry.hash === hash) {
        const _p = _entry.key;
        _tmp$4 = _p === key;
      } else {
        _tmp$4 = false;
      }
      if (_tmp$4) {
        return true;
      }
      if (i > _entry.psl) {
        return false;
      }
      const _tmp$5 = i + 1 | 0;
      const _tmp$6 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$5;
      _tmp$2 = _tmp$6;
      continue;
    }
  }
}
function moonbitlang$core$hashmap$$T$iter2$111$(self) {
  const _p = (yield_) => {
    const _arr = self.entries;
    const _len = _arr.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const entry = _arr[_i];
        if (entry === undefined) {
        } else {
          const _Some = entry;
          const _x = _Some;
          const _key = _x.key;
          const _value = _x.value;
          const _bind = yield_(_key, _value);
          if (_bind === 1) {
          } else {
            return 0;
          }
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$hashmap$$T$iter$110$(self) {
  const _p = (yield_) => {
    const _arr = self.entries;
    const _len = _arr.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const entry = _arr[_i];
        if (entry === undefined) {
        } else {
          const _Some = entry;
          const _x = _Some;
          const _key = _x.key;
          const _value = _x.value;
          const _bind = yield_({ _0: _key, _1: _value });
          if (_bind === 1) {
          } else {
            return 0;
          }
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$json$$indent_str(level, indent) {
  return indent === 0 ? "" : `\n${moonbitlang$core$string$$String$repeat(" ", Math.imul(indent, level) | 0)}`;
}
function moonbitlang$core$json$$escape$46$to_hex_digit$124$134(i) {
  return i < 10 ? 48 + i | 0 : 97 + (i - 10 | 0) | 0;
}
function moonbitlang$core$json$$escape(str, escape_slash) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(str.length);
  const _bind = moonbitlang$core$string$$String$iter(str);
  _bind((c) => {
    switch (c) {
      case 34: {
        moonbitlang$core$builtin$$Logger$write_string$38$(buf, "\\\"");
        break;
      }
      case 92: {
        moonbitlang$core$builtin$$Logger$write_string$38$(buf, "\\\\");
        break;
      }
      case 47: {
        if (escape_slash) {
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, "\\/");
        } else {
          moonbitlang$core$builtin$$Logger$write_char$38$(buf, c);
        }
        break;
      }
      case 10: {
        moonbitlang$core$builtin$$Logger$write_string$38$(buf, "\\n");
        break;
      }
      case 13: {
        moonbitlang$core$builtin$$Logger$write_string$38$(buf, "\\r");
        break;
      }
      case 8: {
        moonbitlang$core$builtin$$Logger$write_string$38$(buf, "\\b");
        break;
      }
      case 9: {
        moonbitlang$core$builtin$$Logger$write_string$38$(buf, "\\t");
        break;
      }
      default: {
        const code = c;
        if (code === 12) {
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, "\\f");
        } else {
          if (code < 32) {
            moonbitlang$core$builtin$$Logger$write_string$38$(buf, "\\u00");
            moonbitlang$core$builtin$$Logger$write_char$38$(buf, moonbitlang$core$json$$escape$46$to_hex_digit$124$134(code / 16 | 0));
            moonbitlang$core$builtin$$Logger$write_char$38$(buf, moonbitlang$core$json$$escape$46$to_hex_digit$124$134(code % 16 | 0));
          } else {
            moonbitlang$core$builtin$$Logger$write_char$38$(buf, c);
          }
        }
      }
    }
    return 1;
  });
  return buf.val;
}
function moonbitlang$core$json$$stringify$46$stringify_inner$124$142(_env, value, level) {
  const escape_slash = _env._1;
  const indent = _env._0;
  switch (value.$tag) {
    case 6: {
      const _Object = value;
      const _members = _Object._0;
      if (_members.size === 0) {
        return "{}";
      }
      const buf = moonbitlang$core$builtin$$StringBuilder$new(0);
      moonbitlang$core$builtin$$Logger$write_char$38$(buf, 123);
      moonbitlang$core$builtin$$Logger$write_string$38$(buf, moonbitlang$core$json$$indent_str(level + 1 | 0, indent));
      const first = { val: true };
      const _bind = moonbitlang$core$builtin$$Map$iter2$114$(_members);
      _bind((k, v) => {
        if (first.val) {
          first.val = false;
        } else {
          moonbitlang$core$builtin$$Logger$write_char$38$(buf, 44);
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, moonbitlang$core$json$$indent_str(level + 1 | 0, indent));
        }
        moonbitlang$core$builtin$$Logger$write_char$38$(buf, 34);
        moonbitlang$core$builtin$$Logger$write_string$38$(buf, moonbitlang$core$json$$escape(k, escape_slash));
        moonbitlang$core$builtin$$Logger$write_char$38$(buf, 34);
        if (indent === 0) {
          moonbitlang$core$builtin$$Logger$write_char$38$(buf, 58);
        } else {
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, ": ");
        }
        moonbitlang$core$builtin$$Logger$write_string$38$(buf, moonbitlang$core$json$$stringify$46$stringify_inner$124$142(_env, v, level + 1 | 0));
        return 1;
      });
      moonbitlang$core$builtin$$Logger$write_string$38$(buf, moonbitlang$core$json$$indent_str(level, indent));
      moonbitlang$core$builtin$$Logger$write_char$38$(buf, 125);
      const _p = buf;
      return _p.val;
    }
    case 5: {
      const _Array = value;
      const _arr = _Array._0;
      if (_arr.length === 0) {
        return "[]";
      }
      const buf$2 = moonbitlang$core$builtin$$StringBuilder$new(0);
      moonbitlang$core$builtin$$Logger$write_char$38$(buf$2, 91);
      moonbitlang$core$builtin$$Logger$write_string$38$(buf$2, moonbitlang$core$json$$indent_str(level + 1 | 0, indent));
      const _len = _arr.length;
      let _tmp = 0;
      while (true) {
        const _i = _tmp;
        if (_i < _len) {
          const v = _arr[_i];
          if (_i > 0) {
            moonbitlang$core$builtin$$Logger$write_char$38$(buf$2, 44);
            moonbitlang$core$builtin$$Logger$write_string$38$(buf$2, moonbitlang$core$json$$indent_str(level + 1 | 0, indent));
          }
          moonbitlang$core$builtin$$Logger$write_string$38$(buf$2, moonbitlang$core$json$$stringify$46$stringify_inner$124$142(_env, v, level + 1 | 0));
          _tmp = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      moonbitlang$core$builtin$$Logger$write_string$38$(buf$2, moonbitlang$core$json$$indent_str(level, indent));
      moonbitlang$core$builtin$$Logger$write_char$38$(buf$2, 93);
      const _p$2 = buf$2;
      return _p$2.val;
    }
    case 4: {
      const _String = value;
      const _s = _String._0;
      const buf$3 = moonbitlang$core$builtin$$StringBuilder$new(0);
      moonbitlang$core$builtin$$Logger$write_char$38$(buf$3, 34);
      moonbitlang$core$builtin$$Logger$write_string$38$(buf$3, moonbitlang$core$json$$escape(_s, escape_slash));
      moonbitlang$core$builtin$$Logger$write_char$38$(buf$3, 34);
      const _p$3 = buf$3;
      return _p$3.val;
    }
    case 3: {
      const _Number = value;
      const _n = _Number._0;
      return String(_n);
    }
    case 1: {
      return "true";
    }
    case 2: {
      return "false";
    }
    default: {
      return "null";
    }
  }
}
function moonbitlang$core$json$$Json$stringify(self, escape_slash, indent) {
  const _env = { _0: indent, _1: escape_slash };
  return moonbitlang$core$json$$stringify$46$stringify_inner$124$142(_env, self, 0);
}
function moonbitlang$core$builtin$$Logger$write_object$6$(self, obj) {
  moonbitlang$core$builtin$$Show$output$6$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$115$(self, obj) {
  moonbitlang$core$builtin$$Show$output$109$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$116$(self, obj) {
  moonbitlang$core$builtin$$Show$output$117$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$85$(self, obj) {
  moonbitlang$core$builtin$$Show$output$85$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$8$(self, obj) {
  moonbitlang$core$builtin$$Show$output$8$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$95$(self, obj) {
  moonbitlang$core$builtin$$Show$output$95$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$118$(self, obj) {
  self.method_0(self.self, obj.name);
}
function moonbitlang$core$builtin$$Logger$write_object$93$(self, obj) {
  moonbitlang$core$builtin$$Show$output$93$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$119$(self, obj) {
  self.method_0(self.self, obj.name);
}
function moonbitlang$core$builtin$$Logger$write_object$66$(self, obj) {
  moonbitlang$core$builtin$$Show$output$66$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$120$(self, obj) {
  moonbitlang$core$builtin$$Show$output$120$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$121$(self, obj) {
  moonbitlang$core$builtin$$Show$output$121$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$122$(self, obj) {
  moonbitlang$core$builtin$$Show$output$122$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$123$(self, obj) {
  moonbitlang$core$builtin$$Show$output$124$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$125$(self, obj) {
  moonbitlang$core$builtin$$Show$output$125$(obj, self);
}
function moonbitlang$core$builtin$$Eq$op_equal$77$(_x_2382, _x_2383) {
  if (_x_2382 === 0) {
    if (_x_2383 === 0) {
      return true;
    } else {
      return false;
    }
  } else {
    if (_x_2383 === 1) {
      return true;
    } else {
      return false;
    }
  }
}
function moonbitlang$core$builtin$$StringBuilder$new(size_hint) {
  return { val: "" };
}
function moonbitlang$core$builtin$$op_notequal$55$(x, y) {
  return !(x === y);
}
function moonbitlang$core$builtin$$op_notequal$76$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$76$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$77$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$77$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$102$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$126$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$103$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$127$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$50$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$128$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$51$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$129$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$104$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$130$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$52$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$131$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$105$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$132$(x, y);
}
function moonbitlang$core$builtin$$println$6$(input) {
  console.log(input);
}
function moonbitlang$core$builtin$$op_lt$60$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$60$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$93$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$93$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$95$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$95$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$6$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$6$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$97$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$97$(self_, other) < 0;
}
function moonbitlang$core$builtin$$Logger$write_char$38$(self, ch) {
  const _bind = self;
  _bind.val = `${_bind.val}${String.fromCodePoint(ch)}`;
}
function moonbitlang$core$builtin$$op_gt$60$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$60$(self_, other) > 0;
}
function moonbitlang$core$builtin$$op_le$60$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$60$(self_, other) <= 0;
}
function moonbitlang$core$builtin$$op_ge$60$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$60$(self_, other) >= 0;
}
function moonbitlang$core$string$$String$char_length(self, start_offset, end_offset) {
  let end_offset$2;
  if (end_offset === undefined) {
    end_offset$2 = self.length;
  } else {
    const _Some = end_offset;
    const _o = _Some;
    end_offset$2 = _o;
  }
  if (start_offset >= 0 && (start_offset <= end_offset$2 && end_offset$2 <= self.length)) {
    let _tmp = start_offset;
    let _tmp$2 = 0;
    while (true) {
      const utf16_index = _tmp;
      const char_count = _tmp$2;
      if (utf16_index < end_offset$2) {
        const c1 = self.charCodeAt(utf16_index);
        if (55296 <= c1 && c1 <= 56319 && (utf16_index + 1 | 0) < end_offset$2) {
          const _tmp$3 = utf16_index + 1 | 0;
          const c2 = self.charCodeAt(_tmp$3);
          if (56320 <= c2 && c2 <= 57343) {
            const _tmp$4 = utf16_index + 2 | 0;
            const _tmp$5 = char_count + 1 | 0;
            _tmp = _tmp$4;
            _tmp$2 = _tmp$5;
            continue;
          } else {
            moonbitlang$core$abort$$abort$7$("invalid surrogate pair");
          }
        }
        const _tmp$3 = utf16_index + 1 | 0;
        const _tmp$4 = char_count + 1 | 0;
        _tmp = _tmp$3;
        _tmp$2 = _tmp$4;
        continue;
      } else {
        return char_count;
      }
    }
  } else {
    return moonbitlang$core$abort$$abort$8$("invalid start or end index for String::codepoint_length");
  }
}
function moonbitlang$core$builtin$$code_point_of_surrogate_pair(leading, trailing) {
  return (((Math.imul(leading - 55296 | 0, 1024) | 0) + trailing | 0) - 56320 | 0) + 65536 | 0;
}
function moonbitlang$core$string$$String$unsafe_char_at(self, index) {
  const c1 = self.charCodeAt(index);
  if (55296 <= c1 && c1 <= 56319) {
    const _tmp = index + 1 | 0;
    const c2 = self.charCodeAt(_tmp);
    return moonbitlang$core$builtin$$code_point_of_surrogate_pair(c1, c2);
  } else {
    return c1;
  }
}
function moonbitlang$core$string$$String$escape(self) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$6$(self, { self: buf, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return buf.val;
}
function moonbitlang$core$array$$Array$op_get$133$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$27$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$134$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$135$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$136$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$18$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$137$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$138$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$119$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$97$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$45$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$29$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$28$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$139$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$8$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$67$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$140$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$21$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$builtin$$Logger$write_string$38$(self, str) {
  const _bind = self;
  _bind.val = `${_bind.val}${str}`;
}
function moonbitlang$core$bytes$$Bytes$makei(length, value) {
  if (length <= 0) {
    return $bytes_literal$0;
  }
  const arr = $make_array_len_and_init(length, value(0));
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < length) {
      $bound_check(arr, i);
      arr[i] = value(i);
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$builtin$$StringBuilder$write_iter(self, iter) {
  iter((ch) => {
    moonbitlang$core$builtin$$Logger$write_char$38$(self, ch);
    return 1;
  });
}
function moonbitlang$core$builtin$$MyInt64$from_int(value) {
  return { hi: value >> 31 & -1, lo: value | 0 };
}
function moonbitlang$core$int$$Int$to_int64(self) {
  return moonbitlang$core$builtin$$MyInt64$from_int(self);
}
function moonbitlang$core$int64$$Int64$to_int(self) {
  const _p = self;
  return _p.lo;
}
function moonbitlang$core$builtin$$output$46$abs$124$2118(n) {
  return n < 0 ? 0 - n | 0 : n;
}
function moonbitlang$core$builtin$$output$46$write_digits$124$2120(_env, num) {
  const radix = _env._1;
  const logger = _env._0;
  const num2 = num / radix | 0;
  if (num2 !== 0) {
    moonbitlang$core$builtin$$output$46$write_digits$124$2120(_env, num2);
  }
  const _tmp = moonbitlang$core$builtin$$output$46$abs$124$2118(num % radix | 0);
  $bound_check("0123456789abcdefghijklmnopqrstuvwxyz", _tmp);
  logger.method_2(logger.self, "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(_tmp));
}
function moonbitlang$core$int$$Int$output(self, logger, radix) {
  if (self < 0) {
    logger.method_2(logger.self, 45);
  }
  const _env = { _0: logger, _1: radix };
  moonbitlang$core$builtin$$output$46$write_digits$124$2120(_env, moonbitlang$core$builtin$$output$46$abs$124$2118(self));
}
function moonbitlang$core$int$$Int$output_size_hint(radix) {
  return radix >= 2 && radix < 7 ? 36 : radix >= 8 && radix < 15 ? 18 : radix >= 16 && radix <= 36 ? 10 : moonbitlang$core$abort$$abort$8$("radix must be between 2 and 36");
}
function moonbitlang$core$builtin$$unsafe_make_string(_tmp, _tmp$2) {
  return $unsafe_make_string(_tmp, _tmp$2);
}
function moonbitlang$core$string$$String$make(length, value) {
  if (length >= 0) {
    if (value <= 65535) {
      return moonbitlang$core$builtin$$unsafe_make_string(length, value);
    } else {
      const buf = moonbitlang$core$builtin$$StringBuilder$new(Math.imul(2, length) | 0);
      let _tmp = 0;
      while (true) {
        const _ = _tmp;
        if (_ < length) {
          moonbitlang$core$builtin$$Logger$write_char$38$(buf, value);
          _tmp = _ + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      return buf.val;
    }
  } else {
    return moonbitlang$core$abort$$abort$6$("invalid length");
  }
}
function moonbitlang$core$string$$String$substring(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end;
  }
  return start >= 0 && (start <= end$2 && end$2 <= len) ? self.substring(start, end$2) : $panic();
}
function moonbitlang$core$builtin$$Logger$write_substring$38$(self, str, start, len) {
  const _bind = self;
  _bind.val = `${_bind.val}${moonbitlang$core$string$$String$substring(str, start, start + len | 0)}`;
}
function moonbitlang$core$builtin$$Hasher$combine$6$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$6$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$141$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$141$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$93$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$93$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$142$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$142$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$55$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$55$(value, self);
}
function moonbitlang$core$builtin$$power_2_above(x, n) {
  let _tmp = x;
  while (true) {
    const i = _tmp;
    if (i >= n) {
      return i;
    }
    const next = i << 1;
    if (next < 0) {
      return i;
    }
    _tmp = next;
    continue;
  }
}
function moonbitlang$core$builtin$$Map$new$143$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$144$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$145$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$146$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$147$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$148$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$149$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$114$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$150$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$151$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$152$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$option$$Option$unwrap$153$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$154$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$155$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$119$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$118$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$16$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$156$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$157$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$158$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$159$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$134$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$45$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$79$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$160$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$161$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$162$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$163$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$164$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$165$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$8$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$166$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$167$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$168$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$169$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$98$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$99$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$47$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$48$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$100$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$170$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$171$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$49$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$101$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$143$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$160$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$144$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$161$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$145$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$162$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$146$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$163$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$147$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$164$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$114$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$165$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$148$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$166$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$149$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$167$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$150$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$168$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$151$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$169$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$152$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$171$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$set_entry$143$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$144$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$145$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$146$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$147$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$114$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$148$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$149$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$150$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$151$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$152$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$push_away$143$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$143$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$143$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$144$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$144$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$144$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$145$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$145$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$145$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$146$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$146$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$146$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$147$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$147$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$147$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$114$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$114$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$114$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$148$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$148$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$148$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$149$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$149$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$149$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$150$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$150$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$150$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$151$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$151$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$151$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$152$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$152$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$152$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$set$143$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$143$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$143$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$143$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$144$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$144$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$144$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$144$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$145$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$145$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$145$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$145$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$146$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$146$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$146$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$146$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$147$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$147$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$147$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$147$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$114$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$114$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$114$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$114$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$148$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$148$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$148$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$148$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$149$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$149$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$149$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$149$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$150$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$150$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$150$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$150$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$151$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$151$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$151$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$151$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$152$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$152$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$152$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$152$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$grow$143$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$143$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$144$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$144$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$145$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$145$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$146$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$146$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$147$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$147$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$114$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$114$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$148$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$148$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$149$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$149$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$150$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$150$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$151$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$151$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$152$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$152$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$from_array$143$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$143$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$143$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$144$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$144$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$144$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$145$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$145$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$145$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$146$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$146$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$146$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$147$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$147$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$147$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$148$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$148$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$148$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$149$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$149$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$149$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$114$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$114$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$114$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$150$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$150$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$150$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$151$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$151$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$151$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$152$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$152$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$152$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$op_set$143$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$143$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$144$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$144$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$146$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$146$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$147$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$147$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$145$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$145$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$148$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$148$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$150$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$150$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$149$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$149$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$152$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$152$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$151$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$151$(self, key, value);
}
function moonbitlang$core$builtin$$Map$get$147$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$145$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$148$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$143$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$146$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$8$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$144$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$150$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$151$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$152$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get_or_init$146$(self, key, default_) {
  const _bind = moonbitlang$core$builtin$$Map$get$146$(self, key);
  if (_bind === undefined) {
    const v = default_();
    moonbitlang$core$builtin$$Map$set$146$(self, key, v);
    return v;
  } else {
    const _Some = _bind;
    const _v = _Some;
    return _v;
  }
}
function moonbitlang$core$builtin$$Map$contains$148$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return false;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return true;
      }
      if (i > _entry.psl) {
        return false;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$iter$148$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_({ _0: _key, _1: _value });
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter2$148$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_(_key, _value);
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter2$114$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_(_key, _value);
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$values$149$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_(_value);
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$ArrayView$op_get$11$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$11$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$8$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$op_get$18$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$18$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$8$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$op_get$23$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$23$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$8$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$op_get$30$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$30$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$8$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$op_get$32$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$32$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$8$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$op_get$35$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$35$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$8$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$swap$18$(self, i, j) {
  if (i >= 0 && (i < self.len && (j >= 0 && j < self.len))) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + i | 0;
    $bound_check(_tmp, _tmp$2);
    const temp = _tmp[_tmp$2];
    const _tmp$3 = self.buf;
    const _tmp$4 = self.start + i | 0;
    const _tmp$5 = self.buf;
    const _tmp$6 = self.start + j | 0;
    $bound_check(_tmp$5, _tmp$6);
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4] = _tmp$5[_tmp$6];
    const _tmp$7 = self.buf;
    const _tmp$8 = self.start + j | 0;
    $bound_check(_tmp$7, _tmp$8);
    _tmp$7[_tmp$8] = temp;
    return;
  } else {
    moonbitlang$core$abort$$abort$7$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is (${moonbitlang$core$builtin$$Show$to_string$8$(i)}, ${moonbitlang$core$builtin$$Show$to_string$8$(j)})`);
    return;
  }
}
function moonbitlang$core$array$$ArrayView$swap$23$(self, i, j) {
  if (i >= 0 && (i < self.len && (j >= 0 && j < self.len))) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + i | 0;
    $bound_check(_tmp, _tmp$2);
    const temp = _tmp[_tmp$2];
    const _tmp$3 = self.buf;
    const _tmp$4 = self.start + i | 0;
    const _tmp$5 = self.buf;
    const _tmp$6 = self.start + j | 0;
    $bound_check(_tmp$5, _tmp$6);
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4] = _tmp$5[_tmp$6];
    const _tmp$7 = self.buf;
    const _tmp$8 = self.start + j | 0;
    $bound_check(_tmp$7, _tmp$8);
    _tmp$7[_tmp$8] = temp;
    return;
  } else {
    moonbitlang$core$abort$$abort$7$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.len)} but the index is (${moonbitlang$core$builtin$$Show$to_string$8$(i)}, ${moonbitlang$core$builtin$$Show$to_string$8$(j)})`);
    return;
  }
}
function moonbitlang$core$array$$Array$op_as_view$11$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$9$("View index out of bounds");
}
function moonbitlang$core$array$$Array$op_as_view$93$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$15$("View index out of bounds");
}
function moonbitlang$core$array$$ArrayView$op_as_view$18$(self, start, end) {
  const len = self.len;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self.buf, start: self.start + start$2 | 0, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$19$("View index out of bounds");
}
function moonbitlang$core$array$$ArrayView$op_as_view$23$(self, start, end) {
  const len = self.len;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self.buf, start: self.start + start$2 | 0, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$24$("View index out of bounds");
}
function moonbitlang$core$array$$ArrayView$op_as_view$30$(self, start, end) {
  const len = self.len;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self.buf, start: self.start + start$2 | 0, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$31$("View index out of bounds");
}
function moonbitlang$core$array$$ArrayView$op_as_view$32$(self, start, end) {
  const len = self.len;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self.buf, start: self.start + start$2 | 0, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$33$("View index out of bounds");
}
function moonbitlang$core$array$$ArrayView$op_as_view$35$(self, start, end) {
  const len = self.len;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self.buf, start: self.start + start$2 | 0, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$36$("View index out of bounds");
}
function moonbitlang$core$array$$ArrayView$op_as_view$11$(self, start, end) {
  const len = self.len;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self.buf, start: self.start + start$2 | 0, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$9$("View index out of bounds");
}
function moonbitlang$core$array$$Array$new$66$(capacity) {
  return [];
}
function moonbitlang$core$array$$Array$new$97$(capacity) {
  return [];
}
function moonbitlang$core$array$$Array$push$119$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$118$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$18$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$172$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$81$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$173$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$16$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$174$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$156$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$175$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$176$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$66$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$6$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$11$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$177$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$178$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$79$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$136$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$179$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$135$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$141$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$180$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$67$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$181$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$182$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$158$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$27$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$29$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$68$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$20$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$97$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$140$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$134$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$45$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$80$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$125$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$82$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$83$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$84$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$85$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$86$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$87$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$unsafe_pop$16$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$156$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$11$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$remove$16$(self, index) {
  if (index >= 0 && index < self.length) {
    $bound_check(self, index);
    const value = self[index];
    moonbitlang$core$builtin$$JSArray$splice(self, index, 1);
    return value;
  } else {
    return moonbitlang$core$abort$$abort$16$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$8$(self.length)} but the index is ${moonbitlang$core$builtin$$Show$to_string$8$(index)}`);
  }
}
function moonbitlang$core$builtin$$Hasher$new(seed) {
  return { acc: (seed >>> 0) + (374761393 >>> 0) | 0 };
}
function moonbitlang$core$builtin$$Hasher$consume4(self, input) {
  const _p = (self.acc >>> 0) + ((Math.imul(input, -1028477379) | 0) >>> 0) | 0;
  const _p$2 = 17;
  self.acc = Math.imul(_p << _p$2 | (_p >>> (32 - _p$2 | 0) | 0), 668265263) | 0;
}
function moonbitlang$core$builtin$$Hasher$combine_uint(self, value) {
  self.acc = (self.acc >>> 0) + (4 >>> 0) | 0;
  moonbitlang$core$builtin$$Hasher$consume4(self, value);
}
function moonbitlang$core$builtin$$Hasher$combine_int(self, value) {
  moonbitlang$core$builtin$$Hasher$combine_uint(self, value);
}
function moonbitlang$core$builtin$$Hasher$combine_string(self, value) {
  const _end1474 = value.length;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end1474) {
      moonbitlang$core$builtin$$Hasher$combine_uint(self, value.charCodeAt(i));
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$builtin$$Hasher$avalanche(self) {
  let acc = self.acc;
  acc = acc ^ (acc >>> 15 | 0);
  acc = Math.imul(acc, -2048144777) | 0;
  acc = acc ^ (acc >>> 13 | 0);
  acc = Math.imul(acc, -1028477379) | 0;
  acc = acc ^ (acc >>> 16 | 0);
  return acc;
}
function moonbitlang$core$builtin$$Hasher$finalize(self) {
  return moonbitlang$core$builtin$$Hasher$avalanche(self);
}
function moonbitlang$core$builtin$$Hash$hash_combine$6$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_string(hasher, self);
}
function moonbitlang$core$builtin$$Hash$hash$8$(self) {
  const self$2 = self;
  let x = self$2 ^ (self$2 >>> 17 | 0);
  x = Math.imul(x, -312814405) | 0;
  x = x ^ (x >>> 11 | 0);
  x = Math.imul(x, -1404298415) | 0;
  x = x ^ (x >>> 15 | 0);
  x = Math.imul(x, 830770091) | 0;
  x = x ^ (x >>> 14 | 0);
  return x;
}
function moonbitlang$core$builtin$$Hash$hash_combine$8$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_int(hasher, self);
}
function moonbitlang$core$array$$FixedArray$unsafe_blit$68$(dst, dst_offset, src, src_offset, len) {
  if (dst === src && dst_offset < src_offset) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i + 1 | 0;
        continue;
      } else {
        return;
      }
    }
  } else {
    let _tmp = len - 1 | 0;
    while (true) {
      const i = _tmp;
      if (i >= 0) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i - 1 | 0;
        continue;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$core$array$$FixedArray$unsafe_blit$8$(dst, dst_offset, src, src_offset, len) {
  if (dst === src && dst_offset < src_offset) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i + 1 | 0;
        continue;
      } else {
        return;
      }
    }
  } else {
    let _tmp = len - 1 | 0;
    while (true) {
      const i = _tmp;
      if (i >= 0) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i - 1 | 0;
        continue;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$core$array$$FixedArray$unsafe_blit$17$(dst, dst_offset, src, src_offset, len) {
  if (dst === src && dst_offset < src_offset) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i + 1 | 0;
        continue;
      } else {
        return;
      }
    }
  } else {
    let _tmp = len - 1 | 0;
    while (true) {
      const i = _tmp;
      if (i >= 0) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i - 1 | 0;
        continue;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$core$array$$FixedArray$unsafe_blit$27$(dst, dst_offset, src, src_offset, len) {
  if (dst === src && dst_offset < src_offset) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i + 1 | 0;
        continue;
      } else {
        return;
      }
    }
  } else {
    let _tmp = len - 1 | 0;
    while (true) {
      const i = _tmp;
      if (i >= 0) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i - 1 | 0;
        continue;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$core$array$$FixedArray$unsafe_blit$21$(dst, dst_offset, src, src_offset, len) {
  if (dst === src && dst_offset < src_offset) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i + 1 | 0;
        continue;
      } else {
        return;
      }
    }
  } else {
    let _tmp = len - 1 | 0;
    while (true) {
      const i = _tmp;
      if (i >= 0) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i - 1 | 0;
        continue;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$core$array$$FixedArray$unsafe_blit$28$(dst, dst_offset, src, src_offset, len) {
  if (dst === src && dst_offset < src_offset) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i + 1 | 0;
        continue;
      } else {
        return;
      }
    }
  } else {
    let _tmp = len - 1 | 0;
    while (true) {
      const i = _tmp;
      if (i >= 0) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i - 1 | 0;
        continue;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$core$array$$FixedArray$unsafe_blit$22$(dst, dst_offset, src, src_offset, len) {
  if (dst === src && dst_offset < src_offset) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i + 1 | 0;
        continue;
      } else {
        return;
      }
    }
  } else {
    let _tmp = len - 1 | 0;
    while (true) {
      const i = _tmp;
      if (i >= 0) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i - 1 | 0;
        continue;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$core$array$$FixedArray$blit_to$68$(self, dst, len, src_offset, dst_offset) {
  if (dst_offset >= 0 && (src_offset >= 0 && ((dst_offset + len | 0) <= dst.length && (src_offset + len | 0) <= self.length))) {
    moonbitlang$core$array$$FixedArray$unsafe_blit$68$(dst, dst_offset, self, src_offset, len);
    return;
  } else {
    moonbitlang$core$abort$$abort$7$(`bounds check failed: dst_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(dst_offset)}, src_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(src_offset)}, len = ${moonbitlang$core$builtin$$Show$to_string$8$(len)}, dst.length = ${moonbitlang$core$builtin$$Show$to_string$8$(dst.length)}, self.length = ${moonbitlang$core$builtin$$Show$to_string$8$(self.length)}`);
    return;
  }
}
function moonbitlang$core$array$$FixedArray$blit_to$8$(self, dst, len, src_offset, dst_offset) {
  if (dst_offset >= 0 && (src_offset >= 0 && ((dst_offset + len | 0) <= dst.length && (src_offset + len | 0) <= self.length))) {
    moonbitlang$core$array$$FixedArray$unsafe_blit$8$(dst, dst_offset, self, src_offset, len);
    return;
  } else {
    moonbitlang$core$abort$$abort$7$(`bounds check failed: dst_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(dst_offset)}, src_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(src_offset)}, len = ${moonbitlang$core$builtin$$Show$to_string$8$(len)}, dst.length = ${moonbitlang$core$builtin$$Show$to_string$8$(dst.length)}, self.length = ${moonbitlang$core$builtin$$Show$to_string$8$(self.length)}`);
    return;
  }
}
function moonbitlang$core$array$$FixedArray$blit_to$17$(self, dst, len, src_offset, dst_offset) {
  if (dst_offset >= 0 && (src_offset >= 0 && ((dst_offset + len | 0) <= dst.length && (src_offset + len | 0) <= self.length))) {
    moonbitlang$core$array$$FixedArray$unsafe_blit$17$(dst, dst_offset, self, src_offset, len);
    return;
  } else {
    moonbitlang$core$abort$$abort$7$(`bounds check failed: dst_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(dst_offset)}, src_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(src_offset)}, len = ${moonbitlang$core$builtin$$Show$to_string$8$(len)}, dst.length = ${moonbitlang$core$builtin$$Show$to_string$8$(dst.length)}, self.length = ${moonbitlang$core$builtin$$Show$to_string$8$(self.length)}`);
    return;
  }
}
function moonbitlang$core$array$$FixedArray$blit_to$27$(self, dst, len, src_offset, dst_offset) {
  if (dst_offset >= 0 && (src_offset >= 0 && ((dst_offset + len | 0) <= dst.length && (src_offset + len | 0) <= self.length))) {
    moonbitlang$core$array$$FixedArray$unsafe_blit$27$(dst, dst_offset, self, src_offset, len);
    return;
  } else {
    moonbitlang$core$abort$$abort$7$(`bounds check failed: dst_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(dst_offset)}, src_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(src_offset)}, len = ${moonbitlang$core$builtin$$Show$to_string$8$(len)}, dst.length = ${moonbitlang$core$builtin$$Show$to_string$8$(dst.length)}, self.length = ${moonbitlang$core$builtin$$Show$to_string$8$(self.length)}`);
    return;
  }
}
function moonbitlang$core$array$$FixedArray$blit_to$21$(self, dst, len, src_offset, dst_offset) {
  if (dst_offset >= 0 && (src_offset >= 0 && ((dst_offset + len | 0) <= dst.length && (src_offset + len | 0) <= self.length))) {
    moonbitlang$core$array$$FixedArray$unsafe_blit$21$(dst, dst_offset, self, src_offset, len);
    return;
  } else {
    moonbitlang$core$abort$$abort$7$(`bounds check failed: dst_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(dst_offset)}, src_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(src_offset)}, len = ${moonbitlang$core$builtin$$Show$to_string$8$(len)}, dst.length = ${moonbitlang$core$builtin$$Show$to_string$8$(dst.length)}, self.length = ${moonbitlang$core$builtin$$Show$to_string$8$(self.length)}`);
    return;
  }
}
function moonbitlang$core$array$$FixedArray$blit_to$28$(self, dst, len, src_offset, dst_offset) {
  if (dst_offset >= 0 && (src_offset >= 0 && ((dst_offset + len | 0) <= dst.length && (src_offset + len | 0) <= self.length))) {
    moonbitlang$core$array$$FixedArray$unsafe_blit$28$(dst, dst_offset, self, src_offset, len);
    return;
  } else {
    moonbitlang$core$abort$$abort$7$(`bounds check failed: dst_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(dst_offset)}, src_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(src_offset)}, len = ${moonbitlang$core$builtin$$Show$to_string$8$(len)}, dst.length = ${moonbitlang$core$builtin$$Show$to_string$8$(dst.length)}, self.length = ${moonbitlang$core$builtin$$Show$to_string$8$(self.length)}`);
    return;
  }
}
function moonbitlang$core$array$$FixedArray$blit_to$22$(self, dst, len, src_offset, dst_offset) {
  if (dst_offset >= 0 && (src_offset >= 0 && ((dst_offset + len | 0) <= dst.length && (src_offset + len | 0) <= self.length))) {
    moonbitlang$core$array$$FixedArray$unsafe_blit$22$(dst, dst_offset, self, src_offset, len);
    return;
  } else {
    moonbitlang$core$abort$$abort$7$(`bounds check failed: dst_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(dst_offset)}, src_offset = ${moonbitlang$core$builtin$$Show$to_string$8$(src_offset)}, len = ${moonbitlang$core$builtin$$Show$to_string$8$(len)}, dst.length = ${moonbitlang$core$builtin$$Show$to_string$8$(dst.length)}, self.length = ${moonbitlang$core$builtin$$Show$to_string$8$(self.length)}`);
    return;
  }
}
function moonbitlang$core$int$$Int$to_string(self, radix) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$int$$Int$output_size_hint(radix));
  moonbitlang$core$int$$Int$output(self, { self: buf, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ }, radix);
  return buf.val;
}
function moonbitlang$core$builtin$$Show$to_string$8$(self) {
  return moonbitlang$core$int$$Int$to_string(self, 10);
}
function moonbitlang$core$builtin$$ToJson$to_json$183$(self) {
  const _p = new Array(self.length);
  const _p$2 = self.length;
  let _tmp = 0;
  while (true) {
    const _p$3 = _tmp;
    if (_p$3 < _p$2) {
      const _p$4 = self[_p$3];
      _p[_p$3] = moonbitlang$core$builtin$$ToJson$to_json$172$(_p$4);
      _tmp = _p$3 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return new $64$moonbitlang$47$core$47$builtin$46$Json$Array(_p);
}
function moonbitlang$core$array$$Array$make$139$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$make$8$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$make$27$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$make$28$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$make$29$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$make$30$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$make$32$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$make$35$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$builtin$$Show$output$8$(self, logger) {
  moonbitlang$core$int$$Int$output(self, logger, 10);
}
function moonbitlang$core$builtin$$to_hex_digit(i) {
  return i < 10 ? i + 48 | 0 : (i + 97 | 0) - 10 | 0;
}
function moonbitlang$core$builtin$$output$46$flush_segment$124$1064(_env, i) {
  const logger = _env._2;
  const self = _env._1;
  const segment_start = _env._0;
  if (i > segment_start.val) {
    logger.method_1(logger.self, self, segment_start.val, i - segment_start.val | 0);
  }
  segment_start.val = i + 1 | 0;
}
function moonbitlang$core$builtin$$Show$output$6$(self, logger) {
  logger.method_2(logger.self, 34);
  const segment_start = { val: 0 };
  const _env = { _0: segment_start, _1: self, _2: logger };
  const _end1067 = self.length;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end1067) {
      let c;
      _L: {
        _L$2: {
          const _bind = self.charCodeAt(i);
          switch (_bind) {
            case 34: {
              c = _bind;
              break _L$2;
            }
            case 92: {
              c = _bind;
              break _L$2;
            }
            case 10: {
              moonbitlang$core$builtin$$output$46$flush_segment$124$1064(_env, i);
              logger.method_0(logger.self, "\\n");
              break;
            }
            case 13: {
              moonbitlang$core$builtin$$output$46$flush_segment$124$1064(_env, i);
              logger.method_0(logger.self, "\\r");
              break;
            }
            case 8: {
              moonbitlang$core$builtin$$output$46$flush_segment$124$1064(_env, i);
              logger.method_0(logger.self, "\\b");
              break;
            }
            case 9: {
              moonbitlang$core$builtin$$output$46$flush_segment$124$1064(_env, i);
              logger.method_0(logger.self, "\\t");
              break;
            }
            default: {
              if (_bind < 32) {
                moonbitlang$core$builtin$$output$46$flush_segment$124$1064(_env, i);
                logger.method_0(logger.self, "\\u{");
                logger.method_2(logger.self, moonbitlang$core$builtin$$to_hex_digit(_bind / 16 | 0));
                logger.method_2(logger.self, moonbitlang$core$builtin$$to_hex_digit(_bind % 16 | 0));
                logger.method_2(logger.self, 125);
              }
            }
          }
          break _L;
        }
        moonbitlang$core$builtin$$output$46$flush_segment$124$1064(_env, i);
        logger.method_2(logger.self, 92);
        logger.method_2(logger.self, c);
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$output$46$flush_segment$124$1064(_env, self.length);
  logger.method_2(logger.self, 34);
}
function moonbitlang$core$builtin$$Show$output$109$(self, logger) {
  if (self === undefined) {
    logger.method_0(logger.self, "None");
    return;
  } else {
    const _Some = self;
    const _arg = _Some;
    logger.method_0(logger.self, "Some(");
    moonbitlang$core$builtin$$Logger$write_object$6$(logger, _arg);
    logger.method_0(logger.self, ")");
    return;
  }
}
function moonbitlang$core$builtin$$Logger$write_iter$85$(self, iter, prefix, suffix, sep, trailing) {
  self.method_0(self.self, prefix);
  if (trailing) {
    iter((x) => {
      moonbitlang$core$builtin$$Logger$write_object$85$(self, x);
      self.method_0(self.self, sep);
      return 1;
    });
  } else {
    const first = { val: true };
    iter((x) => {
      if (first.val) {
        first.val = false;
      } else {
        self.method_0(self.self, sep);
      }
      moonbitlang$core$builtin$$Logger$write_object$85$(self, x);
      return 1;
    });
  }
  self.method_0(self.self, suffix);
}
function moonbitlang$core$builtin$$Logger$write_iter$125$(self, iter, prefix, suffix, sep, trailing) {
  self.method_0(self.self, prefix);
  if (trailing) {
    iter((x) => {
      moonbitlang$core$builtin$$Logger$write_object$125$(self, x);
      self.method_0(self.self, sep);
      return 1;
    });
  } else {
    const first = { val: true };
    iter((x) => {
      if (first.val) {
        first.val = false;
      } else {
        self.method_0(self.self, sep);
      }
      moonbitlang$core$builtin$$Logger$write_object$125$(self, x);
      return 1;
    });
  }
  self.method_0(self.self, suffix);
}
function moonbitlang$core$array$$Array$iter$16$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$86$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$84$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$177$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$27$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$23$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$45$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$18$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$134$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$85$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$125$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Show$output$117$(self, logger) {
  moonbitlang$core$builtin$$Logger$write_iter$85$(logger, moonbitlang$core$array$$Array$iter$85$(self), "[", "]", ", ", false);
}
function moonbitlang$core$builtin$$Show$output$124$(self, logger) {
  moonbitlang$core$builtin$$Logger$write_iter$125$(logger, moonbitlang$core$array$$Array$iter$125$(self), "[", "]", ", ", false);
}
function moonbitlang$core$builtin$$Hash$hash$56$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$6$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Hash$hash$113$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$141$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Hash$hash$184$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$93$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Hash$hash$185$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$142$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Hash$hash$57$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$55$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Show$to_string$186$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$187$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$188$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$182$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$189$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$109$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$190$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$85$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$191$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$45$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$192$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$193$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$4$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$61$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$3$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$121$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$1$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$194$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$2$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$195$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$0$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$120$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ });
  return logger.val;
}
function moonbitlang$core$builtin$$MyInt64$add_hi_lo(self, bhi, blo) {
  const _ahi = self.hi;
  const _alo = self.lo;
  const lo = _alo + blo | 0;
  const s = lo >> 31;
  const as_ = _alo >> 31;
  const bs = blo >> 31;
  const c = (as_ & bs | ~s & (as_ ^ bs)) & 1;
  const hi = (_ahi + bhi | 0) + c | 0;
  return { hi: hi, lo: lo };
}
function moonbitlang$core$builtin$$Add$op_add$196$(self, other) {
  return moonbitlang$core$builtin$$MyInt64$add_hi_lo(self, other.hi, other.lo);
}
function moonbitlang$core$builtin$$Sub$op_sub$196$(self, other) {
  return other.lo === 0 ? { hi: self.hi - other.hi | 0, lo: self.lo } : moonbitlang$core$builtin$$MyInt64$add_hi_lo(self, ~other.hi, ~other.lo + 1 | 0);
}
function moonbitlang$core$builtin$$Mul$op_mul$196$(self, other) {
  const _ahi = self.hi;
  const _alo = self.lo;
  const _bhi = other.hi;
  const _blo = other.lo;
  const ahi = _ahi;
  const alo = _alo;
  const bhi = _bhi;
  const blo = _blo;
  const a48 = ahi >>> 16 | 0;
  const a32 = ahi & 65535;
  const a16 = alo >>> 16 | 0;
  const a00 = alo & 65535;
  const b48 = bhi >>> 16 | 0;
  const b32 = bhi & 65535;
  const b16 = blo >>> 16 | 0;
  const b00 = blo & 65535;
  const c00 = Math.imul(a00, b00) | 0;
  const c16 = c00 >>> 16 | 0;
  const c00$2 = c00 & 65535;
  const c16$2 = (c16 >>> 0) + ((Math.imul(a16, b00) | 0) >>> 0) | 0;
  const c32 = c16$2 >>> 16 | 0;
  const c16$3 = c16$2 & 65535;
  const c16$4 = (c16$3 >>> 0) + ((Math.imul(a00, b16) | 0) >>> 0) | 0;
  const c32$2 = (c32 >>> 0) + ((c16$4 >>> 16 | 0) >>> 0) | 0;
  const c16$5 = c16$4 & 65535;
  const c32$3 = (c32$2 >>> 0) + ((Math.imul(a32, b00) | 0) >>> 0) | 0;
  const c48 = c32$3 >>> 16 | 0;
  const c32$4 = c32$3 & 65535;
  const c32$5 = (c32$4 >>> 0) + ((Math.imul(a16, b16) | 0) >>> 0) | 0;
  const c48$2 = (c48 >>> 0) + ((c32$5 >>> 16 | 0) >>> 0) | 0;
  const c32$6 = c32$5 & 65535;
  const c32$7 = (c32$6 >>> 0) + ((Math.imul(a00, b32) | 0) >>> 0) | 0;
  const c48$3 = (c48$2 >>> 0) + ((c32$7 >>> 16 | 0) >>> 0) | 0;
  const c32$8 = c32$7 & 65535;
  const c48$4 = (((((((c48$3 >>> 0) + ((Math.imul(a48, b00) | 0) >>> 0) | 0) >>> 0) + ((Math.imul(a32, b16) | 0) >>> 0) | 0) >>> 0) + ((Math.imul(a16, b32) | 0) >>> 0) | 0) >>> 0) + ((Math.imul(a00, b48) | 0) >>> 0) | 0;
  const c48$5 = c48$4 & 65535;
  return { hi: c48$5 << 16 | c32$8, lo: c16$5 << 16 | c00$2 };
}
function moonbitlang$core$builtin$$Div$op_div$196$(self, other) {
  const exports = moonbitlang$core$builtin$$get_int64_wasm_helper();
  const _ahi = self.hi;
  const _alo = self.lo;
  const _bhi = other.hi;
  const _blo = other.lo;
  const _func = exports.div_s;
  const lo = _func(_alo, _ahi, _blo, _bhi);
  const _func$2 = exports.get_high;
  const hi = _func$2();
  return { hi: hi, lo: lo };
}
function moonbitlang$core$builtin$$Add$op_add$60$(self, other) {
  return moonbitlang$core$builtin$$Add$op_add$196$(self, other);
}
function moonbitlang$core$builtin$$Sub$op_sub$60$(self, other) {
  return moonbitlang$core$builtin$$Sub$op_sub$196$(self, other);
}
function moonbitlang$core$builtin$$Mul$op_mul$60$(self, other) {
  return moonbitlang$core$builtin$$Mul$op_mul$196$(self, other);
}
function moonbitlang$core$builtin$$Div$op_div$60$(self, other) {
  return moonbitlang$core$builtin$$Div$op_div$196$(self, other);
}
function moonbitlang$core$builtin$$Compare$compare$60$(self, other) {
  return moonbitlang$core$builtin$$MyInt64$compare(self, other);
}
function moonbitlang$core$builtin$$Default$default$70$() {
  return [];
}
function moonbitlang$core$builtin$$Default$default$71$() {
  return [];
}
function moonbitlang$core$builtin$$Eq$op_equal$109$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return _x === _y;
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$126$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$92$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$127$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$94$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$128$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$53$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$129$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return _x.value === _y.value;
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$130$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return _x.key === _y.key;
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$131$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$54$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$132$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$96$(_x, _y);
    }
  }
}
function moonbitlang$core$array$$Array$get$93$(self, index) {
  const len = self.length;
  return index >= 0 && index < len ? self[index] : undefined;
}
function moonbitlang$core$array$$Array$op_set$139$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$8$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$27$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$28$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$29$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$30$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$32$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$35$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$197$(self, other) {
  const self_len = self.length;
  const other_len = other.length;
  if (self_len === other_len) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < self_len) {
        const _p = self[i];
        const _p$2 = other[i];
        if (_p === _p$2) {
        } else {
          return false;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return true;
      }
    }
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$198$(self, other) {
  const self_len = self.length;
  const other_len = other.length;
  if (self_len === other_len) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < self_len) {
        if (moonbitlang$core$builtin$$Eq$op_equal$45$(self[i], other[i])) {
        } else {
          return false;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return true;
      }
    }
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$199$(self, other) {
  const self_len = self.length;
  const other_len = other.length;
  if (self_len === other_len) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < self_len) {
        if (self[i] === other[i]) {
        } else {
          return false;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return true;
      }
    }
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Compare$compare$198$(self, other) {
  const len_self = self.length;
  const len_other = other.length;
  const cmp = $compare_int(len_self, len_other);
  if (cmp === 0) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len_self) {
        const cmp$2 = moonbitlang$core$builtin$$Compare$compare$45$(self[i], other[i]);
        if (cmp$2 === 0) {
        } else {
          return cmp$2;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return 0;
      }
    }
  } else {
    return cmp;
  }
}
function moonbitlang$core$array$$Array$contains$18$(self, value) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      if (v.num === value.num) {
        return true;
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return false;
    }
  }
}
function moonbitlang$core$array$$Array$contains$45$(self, value) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      if (moonbitlang$core$builtin$$Eq$op_equal$45$(v, value)) {
        return true;
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return false;
    }
  }
}
function moonbitlang$core$array$$Array$rev_iter$93$(self) {
  const _p = (yield_) => {
    let _tmp = self.length - 1 | 0;
    while (true) {
      const i = _tmp;
      if (i >= 0) {
        const _bind = yield_(self[i]);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = i - 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Iter$run$177$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$run$27$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$run$68$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$any$27$(self, f) {
  return moonbitlang$core$builtin$$op_notequal$77$(moonbitlang$core$builtin$$Iter$run$27$(self, (k) => f(k) ? 0 : 1), 1);
}
function moonbitlang$core$builtin$$Iter$all$177$(self, f) {
  return moonbitlang$core$builtin$$Eq$op_equal$77$(moonbitlang$core$builtin$$Iter$run$177$(self, (k) => !f(k) ? 0 : 1), 1);
}
function moonbitlang$core$builtin$$Iter$all$27$(self, f) {
  return moonbitlang$core$builtin$$Eq$op_equal$77$(moonbitlang$core$builtin$$Iter$run$27$(self, (k) => !f(k) ? 0 : 1), 1);
}
function moonbitlang$core$builtin$$Iter$find_first$93$(self, f) {
  const _foreach_result = { val: $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$13$ };
  self((a) => {
    if (f(a)) {
      _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$13$(a);
      return 0;
    }
    return 1;
  });
  const _tmp = _foreach_result.val;
  switch (_tmp.$tag) {
    case 0: {
      return undefined;
    }
    case 1: {
      const _break = _tmp;
      return _break._0;
    }
    case 2: {
      const _return = _tmp;
      return _return._0;
    }
    case 3: {
      return $panic();
    }
    default: {
      return $panic();
    }
  }
}
function moonbitlang$core$builtin$$Iter$find_first$16$(self, f) {
  const _foreach_result = { val: $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$14$ };
  self((a) => {
    if (f(a)) {
      _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$14$(a);
      return 0;
    }
    return 1;
  });
  const _tmp = _foreach_result.val;
  switch (_tmp.$tag) {
    case 0: {
      return undefined;
    }
    case 1: {
      const _break = _tmp;
      return _break._0;
    }
    case 2: {
      const _return = _tmp;
      return _return._0;
    }
    case 3: {
      return $panic();
    }
    default: {
      return $panic();
    }
  }
}
function moonbitlang$core$builtin$$Iter$to_array$178$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$178$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$20$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$20$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$6$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$6$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$join(self, sep) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(0);
  const first = { val: true };
  self((str) => {
    if (first.val) {
      first.val = false;
    } else {
      moonbitlang$core$builtin$$Logger$write_string$38$(buf, sep);
    }
    moonbitlang$core$builtin$$Logger$write_string$38$(buf, str);
    return 1;
  });
  return buf.val;
}
function moonbitlang$core$builtin$$Iter$contains$118$(self, value) {
  const _foreach_result = { val: $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$15$ };
  self((v) => {
    if (v.num === value.num) {
      _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$15$(true);
      return 0;
    }
    return 1;
  });
  const _tmp = _foreach_result.val;
  switch (_tmp.$tag) {
    case 0: {
      return false;
    }
    case 1: {
      const _break = _tmp;
      return _break._0;
    }
    case 2: {
      const _return = _tmp;
      return _return._0;
    }
    case 3: {
      return $panic();
    }
    default: {
      return $panic();
    }
  }
}
function moonbitlang$core$string$$String$view(self, start_offset, end_offset) {
  let end_offset$2;
  if (end_offset === undefined) {
    end_offset$2 = self.length;
  } else {
    const _Some = end_offset;
    const _o = _Some;
    end_offset$2 = _o;
  }
  return start_offset >= 0 && (start_offset <= end_offset$2 && end_offset$2 <= self.length) ? { str: self, start: start_offset, end: end_offset$2 } : moonbitlang$core$abort$$abort$20$("Invalid index for View");
}
function moonbitlang$core$string$$StringView$view(self, start_offset, end_offset) {
  let end_offset$2;
  if (end_offset === undefined) {
    end_offset$2 = self.end - self.start | 0;
  } else {
    const _Some = end_offset;
    const _o = _Some;
    end_offset$2 = _o;
  }
  return start_offset >= 0 && (start_offset <= end_offset$2 && end_offset$2 <= (self.end - self.start | 0)) ? { str: self.str, start: self.start + start_offset | 0, end: self.start + end_offset$2 | 0 } : moonbitlang$core$abort$$abort$20$("Invalid index for View");
}
function moonbitlang$core$string$$String$offset_of_nth_char_backward(self, n, start_offset, end_offset) {
  let char_count = 0;
  let utf16_offset = end_offset;
  while (true) {
    if ((utf16_offset - 1 | 0) >= start_offset && char_count < n) {
      const _tmp = utf16_offset - 1 | 0;
      const c = self.charCodeAt(_tmp);
      if (56320 <= c && c <= 57343) {
        utf16_offset = utf16_offset - 2 | 0;
      } else {
        utf16_offset = utf16_offset - 1 | 0;
      }
      char_count = char_count + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return char_count < n || utf16_offset < start_offset ? undefined : utf16_offset;
}
function moonbitlang$core$string$$String$offset_of_nth_char_forward(self, n, start_offset, end_offset) {
  if (start_offset >= 0 && start_offset <= end_offset) {
    let utf16_offset = start_offset;
    let char_count = 0;
    while (true) {
      if (utf16_offset < end_offset && char_count < n) {
        const _tmp = utf16_offset;
        const c = self.charCodeAt(_tmp);
        if (55296 <= c && c <= 56319) {
          utf16_offset = utf16_offset + 2 | 0;
        } else {
          utf16_offset = utf16_offset + 1 | 0;
        }
        char_count = char_count + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return char_count < n || utf16_offset >= end_offset ? undefined : utf16_offset;
  } else {
    return moonbitlang$core$abort$$abort$26$("Invalid start index");
  }
}
function moonbitlang$core$string$$String$offset_of_nth_char(self, i, start_offset, end_offset) {
  let end_offset$2;
  if (end_offset === undefined) {
    end_offset$2 = self.length;
  } else {
    const _Some = end_offset;
    const _o = _Some;
    end_offset$2 = _o;
  }
  return i >= 0 ? moonbitlang$core$string$$String$offset_of_nth_char_forward(self, i, start_offset, end_offset$2) : moonbitlang$core$string$$String$offset_of_nth_char_backward(self, -i, start_offset, end_offset$2);
}
function moonbitlang$core$string$$StringView$char_length(self) {
  return moonbitlang$core$string$$String$char_length(self.str, self.start, self.end);
}
function moonbitlang$core$string$$String$char_length_eq(self, len, start_offset, end_offset) {
  let end_offset$2;
  if (end_offset === undefined) {
    end_offset$2 = self.length;
  } else {
    const _Some = end_offset;
    const _o = _Some;
    end_offset$2 = _o;
  }
  let _tmp = start_offset;
  let _tmp$2 = 0;
  while (true) {
    const index = _tmp;
    const count = _tmp$2;
    if (index < end_offset$2 && count < len) {
      const c1 = self.charCodeAt(index);
      if (55296 <= c1 && c1 <= 56319 && (index + 1 | 0) < end_offset$2) {
        const _tmp$3 = index + 1 | 0;
        const c2 = self.charCodeAt(_tmp$3);
        if (56320 <= c2 && c2 <= 57343) {
          const _tmp$4 = index + 2 | 0;
          const _tmp$5 = count + 1 | 0;
          _tmp = _tmp$4;
          _tmp$2 = _tmp$5;
          continue;
        } else {
          moonbitlang$core$abort$$abort$7$("invalid surrogate pair");
        }
      }
      const _tmp$3 = index + 1 | 0;
      const _tmp$4 = count + 1 | 0;
      _tmp = _tmp$3;
      _tmp$2 = _tmp$4;
      continue;
    } else {
      return count === len && index === end_offset$2;
    }
  }
}
function moonbitlang$core$string$$String$char_length_ge(self, len, start_offset, end_offset) {
  let end_offset$2;
  if (end_offset === undefined) {
    end_offset$2 = self.length;
  } else {
    const _Some = end_offset;
    const _o = _Some;
    end_offset$2 = _o;
  }
  let _tmp = start_offset;
  let _tmp$2 = 0;
  while (true) {
    const index = _tmp;
    const count = _tmp$2;
    if (index < end_offset$2 && count < len) {
      const c1 = self.charCodeAt(index);
      if (55296 <= c1 && c1 <= 56319 && (index + 1 | 0) < end_offset$2) {
        const _tmp$3 = index + 1 | 0;
        const c2 = self.charCodeAt(_tmp$3);
        if (56320 <= c2 && c2 <= 57343) {
          const _tmp$4 = index + 2 | 0;
          const _tmp$5 = count + 1 | 0;
          _tmp = _tmp$4;
          _tmp$2 = _tmp$5;
          continue;
        } else {
          moonbitlang$core$abort$$abort$7$("invalid surrogate pair");
        }
      }
      const _tmp$3 = index + 1 | 0;
      const _tmp$4 = count + 1 | 0;
      _tmp = _tmp$3;
      _tmp$2 = _tmp$4;
      continue;
    } else {
      return count >= len;
    }
  }
}
function moonbitlang$core$builtin$$Show$to_string$20$(self) {
  return moonbitlang$core$string$$String$substring(self.str, self.start, self.end);
}
function moonbitlang$core$string$$code_point_of_surrogate_pair(leading, trailing) {
  return (((Math.imul(leading - 55296 | 0, 1024) | 0) + trailing | 0) - 56320 | 0) + 65536 | 0;
}
function moonbitlang$core$string$$StringView$iter(self) {
  const _p = (yield_) => {
    const _start461 = self.start;
    const _end462 = self.end;
    let _tmp = _start461;
    while (true) {
      const index = _tmp;
      if (index < _end462) {
        const _tmp$2 = self.str;
        const c1 = _tmp$2.charCodeAt(index);
        if (55296 <= c1 && c1 <= 56319 && (index + 1 | 0) < self.end) {
          const _tmp$3 = self.str;
          const _tmp$4 = index + 1 | 0;
          const c2 = _tmp$3.charCodeAt(_tmp$4);
          if (56320 <= c2 && c2 <= 57343) {
            const c = moonbitlang$core$string$$code_point_of_surrogate_pair(c1, c2);
            const _bind = yield_(c);
            if (_bind === 1) {
              _tmp = index + 2 | 0;
              continue;
            } else {
              return 0;
            }
          }
        }
        const _bind = yield_(c1);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = index + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$string$$String$from_array(chars) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(Math.imul(chars.length, 4) | 0);
  const _len = chars.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const c = chars[_i];
      moonbitlang$core$builtin$$Logger$write_char$38$(buf, c);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return buf.val;
}
function moonbitlang$core$builtin$$Compare$compare$6$(self, other) {
  const len = self.length;
  const _bind = $compare_int(len, other.length);
  if (_bind === 0) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const order = $compare_int(self.charCodeAt(i), other.charCodeAt(i));
        if (order !== 0) {
          return order;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return 0;
  } else {
    return _bind;
  }
}
function moonbitlang$core$string$$String$iter(self) {
  const _p = (yield_) => {
    const len = self.length;
    let _tmp = 0;
    while (true) {
      const index = _tmp;
      if (index < len) {
        const c1 = self.charCodeAt(index);
        if (55296 <= c1 && c1 <= 56319 && (index + 1 | 0) < len) {
          const _tmp$2 = index + 1 | 0;
          const c2 = self.charCodeAt(_tmp$2);
          if (56320 <= c2 && c2 <= 57343) {
            const c = moonbitlang$core$string$$code_point_of_surrogate_pair(c1, c2);
            const _bind = yield_(c);
            if (_bind === 1) {
              _tmp = index + 2 | 0;
              continue;
            } else {
              return 0;
            }
          }
        }
        const _bind = yield_(c1);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = index + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$string$$String$to_array(self) {
  const _bind = moonbitlang$core$string$$String$iter(self);
  const _bind$2 = moonbitlang$core$array$$Array$new$66$(self.length);
  const _acc = { val: _bind$2 };
  _bind((_p) => {
    const rv = _acc.val;
    moonbitlang$core$array$$Array$push$66$(rv, _p);
    _acc.val = rv;
    return 1;
  });
  return _acc.val;
}
function moonbitlang$core$string$$StringView$find(self, str) {
  const len = self.end - self.start | 0;
  const sub_len = str.end - str.start | 0;
  if (sub_len > 0) {
    if (sub_len <= len) {
      const max_idx = len - sub_len | 0;
      const _p = 0;
      const _tmp = str.str;
      const _tmp$2 = str.start + _p | 0;
      const first = _tmp.charCodeAt(_tmp$2);
      let i = 0;
      while (true) {
        if (i <= max_idx) {
          while (true) {
            let _tmp$3;
            if (i < len) {
              const _p$2 = i;
              const _tmp$4 = self.str;
              const _tmp$5 = self.start + _p$2 | 0;
              _tmp$3 = _tmp$4.charCodeAt(_tmp$5) !== first;
            } else {
              _tmp$3 = false;
            }
            if (_tmp$3) {
              i = i + 1 | 0;
              continue;
            } else {
              break;
            }
          }
          if (i <= max_idx) {
            let _tmp$3 = 1;
            while (true) {
              const j = _tmp$3;
              if (j < sub_len) {
                const _p$2 = i + j | 0;
                const _tmp$4 = self.str;
                const _tmp$5 = self.start + _p$2 | 0;
                const _tmp$6 = _tmp$4.charCodeAt(_tmp$5);
                const _tmp$7 = str.str;
                const _tmp$8 = str.start + j | 0;
                if (_tmp$6 !== _tmp$7.charCodeAt(_tmp$8)) {
                  break;
                }
                _tmp$3 = j + 1 | 0;
                continue;
              } else {
                return i;
              }
            }
          }
          i = i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      return undefined;
    } else {
      return undefined;
    }
  } else {
    return 0;
  }
}
function moonbitlang$core$string$$String$find(self, str) {
  return moonbitlang$core$string$$StringView$find({ str: self, start: 0, end: self.length }, str);
}
function moonbitlang$core$string$$StringView$rev_find(self, str) {
  const len = self.end - self.start | 0;
  const sub_len = str.end - str.start | 0;
  if (sub_len > 0) {
    if (sub_len <= len) {
      const min_idx = sub_len - 1 | 0;
      const _p = sub_len - 1 | 0;
      const _tmp = str.str;
      const _tmp$2 = str.start + _p | 0;
      const last = _tmp.charCodeAt(_tmp$2);
      let i = len - 1 | 0;
      while (true) {
        if (i >= min_idx) {
          while (true) {
            let _tmp$3;
            if (i >= 0) {
              const _p$2 = i;
              const _tmp$4 = self.str;
              const _tmp$5 = self.start + _p$2 | 0;
              _tmp$3 = _tmp$4.charCodeAt(_tmp$5) !== last;
            } else {
              _tmp$3 = false;
            }
            if (_tmp$3) {
              i = i - 1 | 0;
              continue;
            } else {
              break;
            }
          }
          if (i >= min_idx) {
            let _tmp$3 = 1;
            while (true) {
              const j = _tmp$3;
              if (j < sub_len) {
                const _p$2 = i - j | 0;
                const _tmp$4 = self.str;
                const _tmp$5 = self.start + _p$2 | 0;
                const _tmp$6 = _tmp$4.charCodeAt(_tmp$5);
                const _p$3 = (sub_len - 1 | 0) - j | 0;
                const _tmp$7 = str.str;
                const _tmp$8 = str.start + _p$3 | 0;
                if (_tmp$6 !== _tmp$7.charCodeAt(_tmp$8)) {
                  break;
                }
                _tmp$3 = j + 1 | 0;
                continue;
              } else {
                return (i - sub_len | 0) + 1 | 0;
              }
            }
          }
          i = i - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      return undefined;
    } else {
      return undefined;
    }
  } else {
    return len;
  }
}
function moonbitlang$core$string$$String$rev_find(self, str) {
  return moonbitlang$core$string$$StringView$rev_find({ str: self, start: 0, end: self.length }, str);
}
function moonbitlang$core$string$$StringView$has_prefix(self, str) {
  const _bind = moonbitlang$core$string$$StringView$find(self, str);
  if (_bind === undefined) {
    return false;
  } else {
    const _Some = _bind;
    const _i = _Some;
    return _i === 0;
  }
}
function moonbitlang$core$string$$String$has_prefix(self, str) {
  return moonbitlang$core$string$$StringView$has_prefix({ str: self, start: 0, end: self.length }, str);
}
function moonbitlang$core$string$$StringView$contains(self, str) {
  const _bind = moonbitlang$core$string$$StringView$find(self, str);
  return !(_bind === undefined);
}
function moonbitlang$core$string$$String$contains(self, str) {
  return moonbitlang$core$string$$StringView$contains({ str: self, start: 0, end: self.length }, str);
}
function moonbitlang$core$string$$StringView$contains_char(self, c) {
  const len = self.end - self.start | 0;
  if (len > 0) {
    const c$2 = c;
    if (c$2 <= 65535) {
      let _tmp = 0;
      while (true) {
        const i = _tmp;
        if (i < len) {
          const _tmp$2 = self.str;
          const _tmp$3 = self.start + i | 0;
          if (_tmp$2.charCodeAt(_tmp$3) === c$2) {
            return true;
          }
          _tmp = i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
    } else {
      if (len >= 2) {
        const adj = c$2 - 65536 | 0;
        const high = 55296 + (adj >> 10) | 0;
        const low = 56320 + (adj & 1023) | 0;
        let i = 0;
        while (true) {
          if (i < (len - 1 | 0)) {
            const _p = i;
            const _tmp = self.str;
            const _tmp$2 = self.start + _p | 0;
            if (_tmp.charCodeAt(_tmp$2) === high) {
              i = i + 1 | 0;
              const _p$2 = i;
              const _tmp$3 = self.str;
              const _tmp$4 = self.start + _p$2 | 0;
              if (_tmp$3.charCodeAt(_tmp$4) === low) {
                return true;
              }
            }
            i = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
      } else {
        return false;
      }
    }
    return false;
  } else {
    return false;
  }
}
function moonbitlang$core$string$$StringView$trim_start(self, char_set) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (moonbitlang$core$string$$String$char_length_eq(_param.str, 0, _param.start, _param.end)) {
      return _param;
    } else {
      const _c = moonbitlang$core$string$$String$unsafe_char_at(_param.str, moonbitlang$core$string$$String$offset_of_nth_char(_param.str, 0, _param.start, _param.end));
      const _tmp$2 = _param.str;
      const _bind = moonbitlang$core$string$$String$offset_of_nth_char(_param.str, 1, _param.start, _param.end);
      let _tmp$3;
      if (_bind === undefined) {
        _tmp$3 = _param.end;
      } else {
        const _Some = _bind;
        _tmp$3 = _Some;
      }
      const _tmp$4 = _tmp$3;
      const _x = { str: _tmp$2, start: _tmp$4, end: _param.end };
      if (moonbitlang$core$string$$StringView$contains_char(char_set, _c)) {
        _tmp = _x;
        continue;
      } else {
        return _param;
      }
    }
  }
}
function moonbitlang$core$string$$StringView$trim_end(self, char_set) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (moonbitlang$core$string$$String$char_length_eq(_param.str, 0, _param.start, _param.end)) {
      return _param;
    } else {
      const _c = moonbitlang$core$string$$String$unsafe_char_at(_param.str, moonbitlang$core$string$$String$offset_of_nth_char(_param.str, -1, _param.start, _param.end));
      const _x = { str: _param.str, start: _param.start, end: moonbitlang$core$string$$String$offset_of_nth_char(_param.str, -1, _param.start, _param.end) };
      if (moonbitlang$core$string$$StringView$contains_char(char_set, _c)) {
        _tmp = _x;
        continue;
      } else {
        return _param;
      }
    }
  }
}
function moonbitlang$core$string$$StringView$trim(self, char_set) {
  return moonbitlang$core$string$$StringView$trim_end(moonbitlang$core$string$$StringView$trim_start(self, char_set), char_set);
}
function moonbitlang$core$string$$StringView$pad_start(self, total_width, padding_char) {
  const len = moonbitlang$core$string$$StringView$char_length(self);
  if (len < total_width) {
    const padding = moonbitlang$core$string$$String$make(total_width - len | 0, padding_char);
    const _self = moonbitlang$core$builtin$$StringBuilder$new(0);
    moonbitlang$core$builtin$$StringBuilder$write_iter(_self, moonbitlang$core$string$$String$iter(padding));
    moonbitlang$core$builtin$$StringBuilder$write_iter(_self, moonbitlang$core$string$$StringView$iter(self));
    const _p = _self;
    return _p.val;
  } else {
    return moonbitlang$core$builtin$$Show$to_string$20$(self);
  }
}
function moonbitlang$core$string$$String$pad_start(self, total_width, padding_char) {
  return moonbitlang$core$string$$StringView$pad_start({ str: self, start: 0, end: self.length }, total_width, padding_char);
}
function moonbitlang$core$string$$String$repeat(self, n) {
  if (n <= 0) {
    return "";
  } else {
    if (n === 1) {
      return self;
    } else {
      const len = self.length;
      const buf = moonbitlang$core$builtin$$StringBuilder$new(Math.imul(len, n) | 0);
      const str = self;
      let _tmp = 0;
      while (true) {
        const _ = _tmp;
        if (_ < n) {
          moonbitlang$core$builtin$$Logger$write_string$38$(buf, str);
          _tmp = _ + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      return buf.val;
    }
  }
}
function moonbitlang$core$string$$StringView$split(self, sep) {
  const sep_len = sep.end - sep.start | 0;
  if (sep_len === 0) {
    const _bind = moonbitlang$core$string$$StringView$iter(self);
    return (_p) => _bind((_p$2) => _p(moonbitlang$core$string$$String$view(moonbitlang$core$builtin$$Show$to_string$66$(_p$2), 0, undefined)));
  }
  const _p = (yield_) => {
    let view = self;
    while (true) {
      const _bind = moonbitlang$core$string$$StringView$find(view, sep);
      if (_bind === undefined) {
        return yield_(view);
      } else {
        const _Some = _bind;
        const _end = _Some;
        const _bind$2 = yield_(moonbitlang$core$string$$StringView$view(view, 0, _end));
        if (_bind$2 === 1) {
          view = moonbitlang$core$string$$StringView$view(view, _end + sep_len | 0, undefined);
        } else {
          return 0;
        }
        continue;
      }
    }
  };
  return _p;
}
function moonbitlang$core$string$$String$split(self, sep) {
  return moonbitlang$core$string$$StringView$split({ str: self, start: 0, end: self.length }, sep);
}
function moonbitlang$core$string$$String$replace_all(self, old, new_) {
  const len = self.length;
  const buf = moonbitlang$core$builtin$$StringBuilder$new(len);
  const old_len = old.end - old.start | 0;
  const new$2 = moonbitlang$core$builtin$$Show$to_string$20$(new_);
  if (old_len === 0) {
    moonbitlang$core$builtin$$Logger$write_string$38$(buf, new$2);
    const _bind = moonbitlang$core$string$$String$iter(self);
    _bind((c) => {
      moonbitlang$core$builtin$$Logger$write_char$38$(buf, c);
      moonbitlang$core$builtin$$Logger$write_string$38$(buf, new$2);
      return 1;
    });
    return buf.val;
  } else {
    const first_end = moonbitlang$core$string$$String$find(self, old);
    if (first_end === undefined) {
      return self;
    } else {
      const _Some = first_end;
      const _end = _Some;
      let _tmp = { str: self, start: 0, end: self.length };
      let _tmp$2 = _end;
      while (true) {
        const view = _tmp;
        const end = _tmp$2;
        moonbitlang$core$builtin$$Logger$write_string$38$(buf, moonbitlang$core$builtin$$Show$to_string$20$(moonbitlang$core$string$$StringView$view(view, 0, end)));
        moonbitlang$core$builtin$$Logger$write_string$38$(buf, new$2);
        if ((end + old_len | 0) <= len) {
          const next_view = moonbitlang$core$string$$StringView$view(view, end + old_len | 0, undefined);
          const _bind = moonbitlang$core$string$$StringView$find(next_view, old);
          if (_bind === undefined) {
            moonbitlang$core$builtin$$Logger$write_string$38$(buf, moonbitlang$core$builtin$$Show$to_string$20$(next_view));
            break;
          } else {
            const _Some$2 = _bind;
            const _next_end = _Some$2;
            _tmp = next_view;
            _tmp$2 = _next_end;
            continue;
          }
        } else {
          break;
        }
      }
      return buf.val;
    }
  }
}
function moonbitlang$core$builtin$$Show$output$187$(self, logger) {
  logger.method_0(logger.self, Error$$to_string(self));
}
function moonbitlang$x$internal$ffi$$mbt_string_to_utf8_bytes(str, is_filename) {
  const res = [];
  const len = str.length;
  let i = 0;
  while (true) {
    if (i < len) {
      const _tmp = i;
      $bound_check(str, _tmp);
      let c = str.charCodeAt(_tmp);
      if (55296 <= c && c <= 56319) {
        c = c - 55296 | 0;
        i = i + 1 | 0;
        const _tmp$2 = i;
        $bound_check(str, _tmp$2);
        const l = str.charCodeAt(_tmp$2) - 56320 | 0;
        c = ((c << 10) + l | 0) + 65536 | 0;
      }
      if (c < 128) {
        moonbitlang$core$array$$Array$push$67$(res, c & 255);
      } else {
        if (c < 2048) {
          moonbitlang$core$array$$Array$push$67$(res, (192 + (c >> 6) | 0) & 255);
          moonbitlang$core$array$$Array$push$67$(res, (128 + (c & 63) | 0) & 255);
        } else {
          if (c < 65536) {
            moonbitlang$core$array$$Array$push$67$(res, (224 + (c >> 12) | 0) & 255);
            moonbitlang$core$array$$Array$push$67$(res, (128 + (c >> 6 & 63) | 0) & 255);
            moonbitlang$core$array$$Array$push$67$(res, (128 + (c & 63) | 0) & 255);
          } else {
            moonbitlang$core$array$$Array$push$67$(res, (240 + (c >> 18) | 0) & 255);
            moonbitlang$core$array$$Array$push$67$(res, (128 + (c >> 12 & 63) | 0) & 255);
            moonbitlang$core$array$$Array$push$67$(res, (128 + (c >> 6 & 63) | 0) & 255);
            moonbitlang$core$array$$Array$push$67$(res, (128 + (c & 63) | 0) & 255);
          }
        }
      }
      i = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (is_filename) {
    moonbitlang$core$array$$Array$push$67$(res, 0 & 255);
  }
  return moonbitlang$core$bytes$$Bytes$from_array(res);
}
function moonbitlang$x$internal$ffi$$utf8_bytes_to_mbt_string(bytes) {
  const res = [];
  const len = bytes.length;
  let i = 0;
  while (true) {
    if (i < len) {
      const _tmp = i;
      $bound_check(bytes, _tmp);
      let c = bytes[_tmp];
      if (c < 128) {
        moonbitlang$core$array$$Array$push$66$(res, c);
        i = i + 1 | 0;
      } else {
        if (c < 224) {
          if ((i + 1 | 0) >= len) {
            break;
          }
          const _tmp$2 = (c & 31) << 6;
          const _tmp$3 = i + 1 | 0;
          $bound_check(bytes, _tmp$3);
          c = _tmp$2 | bytes[_tmp$3] & 63;
          moonbitlang$core$array$$Array$push$66$(res, c);
          i = i + 2 | 0;
        } else {
          if (c < 240) {
            if ((i + 2 | 0) >= len) {
              break;
            }
            const _tmp$2 = (c & 15) << 12;
            const _tmp$3 = i + 1 | 0;
            $bound_check(bytes, _tmp$3);
            const _tmp$4 = _tmp$2 | (bytes[_tmp$3] & 63) << 6;
            const _tmp$5 = i + 2 | 0;
            $bound_check(bytes, _tmp$5);
            c = _tmp$4 | bytes[_tmp$5] & 63;
            moonbitlang$core$array$$Array$push$66$(res, c);
            i = i + 3 | 0;
          } else {
            if ((i + 3 | 0) >= len) {
              break;
            }
            const _tmp$2 = (c & 7) << 18;
            const _tmp$3 = i + 1 | 0;
            $bound_check(bytes, _tmp$3);
            const _tmp$4 = _tmp$2 | (bytes[_tmp$3] & 63) << 12;
            const _tmp$5 = i + 2 | 0;
            $bound_check(bytes, _tmp$5);
            const _tmp$6 = _tmp$4 | (bytes[_tmp$5] & 63) << 6;
            const _tmp$7 = i + 3 | 0;
            $bound_check(bytes, _tmp$7);
            c = _tmp$6 | bytes[_tmp$7] & 63;
            c = c - 65536 | 0;
            moonbitlang$core$array$$Array$push$66$(res, (c >> 10) + 55296 | 0);
            moonbitlang$core$array$$Array$push$66$(res, (c & 1023) + 56320 | 0);
            i = i + 4 | 0;
          }
        }
      }
      continue;
    } else {
      break;
    }
  }
  return moonbitlang$core$string$$String$from_array(res);
}
function moonbitlang$core$builtin$$Show$output$195$(_x_51, _x_52) {
  const _IOError = _x_51;
  const _$42$err_payload_53 = _IOError._0;
  _x_52.method_0(_x_52.self, "IOError(");
  moonbitlang$core$builtin$$Logger$write_object$6$(_x_52, _$42$err_payload_53);
  _x_52.method_0(_x_52.self, ")");
}
function moonbitlang$x$fs$$read_file_to_bytes_internal(path) {
  const res = moonbitlang$x$fs$$read_file_ffi(path);
  if (res === -1) {
    return new Result$Err$16$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(moonbitlang$x$fs$$get_error_message_ffi()));
  }
  return new Result$Ok$17$(moonbitlang$x$fs$$get_file_content_ffi());
}
function moonbitlang$x$fs$$read_file_to_string_internal(path, encoding) {
  if (encoding === "utf8") {
    const _bind = moonbitlang$x$fs$$read_file_to_bytes_internal(path);
    let bytes;
    if (_bind.$tag === 1) {
      const _ok = _bind;
      bytes = _ok._0;
    } else {
      return _bind;
    }
    return new Result$Ok$19$(moonbitlang$x$internal$ffi$$utf8_bytes_to_mbt_string(bytes));
  } else {
    return new Result$Err$18$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(`Unsupported encoding: ${encoding}, only utf8 is supported for now`));
  }
}
function moonbitlang$x$fs$$write_bytes_to_file_internal(path, content) {
  const res = moonbitlang$x$fs$$write_file_ffi(path, content);
  if (res === -1) {
    return new Result$Err$21$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(moonbitlang$x$fs$$get_error_message_ffi()));
  } else {
    return new Result$Ok$20$(undefined);
  }
}
function moonbitlang$x$fs$$write_string_to_file_internal(path, content, encoding) {
  if (encoding === "utf8") {
    const bytes = moonbitlang$x$internal$ffi$$mbt_string_to_utf8_bytes(content, false);
    return moonbitlang$x$fs$$write_bytes_to_file_internal(path, bytes);
  } else {
    return new Result$Err$21$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(`Unsupported encoding: ${encoding}, only utf8 is supported for now`));
  }
}
function moonbitlang$x$fs$$read_file_to_string(path, encoding) {
  return moonbitlang$x$fs$$read_file_to_string_internal(path, encoding);
}
function moonbitlang$x$fs$$write_string_to_file(path, content, encoding) {
  return moonbitlang$x$fs$$write_string_to_file_internal(path, content, encoding);
}
function moonbitlang$x$sys$internal$ffi$$get_cli_args() {
  return moonbitlang$x$sys$internal$ffi$$get_cli_args_internal();
}
function moonbitlang$x$sys$$get_cli_args() {
  return moonbitlang$x$sys$internal$ffi$$get_cli_args();
}
function Yoorkin$trie$$T$lookup$200$(self, path) {
  const _bind = moonbitlang$core$string$$String$to_array(path);
  let _tmp = { buf: _bind, start: 0, len: _bind.length };
  let _tmp$2 = self;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param.len === 0) {
      return _param$2.value;
    } else {
      const _x = _param.buf[_param.start];
      const _tmp$3 = _param.buf;
      const _tmp$4 = 1 + _param.start | 0;
      const _some = _param.len;
      const _x$2 = { buf: _tmp$3, start: _tmp$4, len: _some - 1 | 0 };
      const _bind$2 = moonbitlang$core$immut$sorted_map$$T$op_get$73$(_param$2.forks, _x);
      if (_bind$2 === undefined) {
        return undefined;
      } else {
        const _Some = _bind$2;
        const _subtree = _Some;
        _tmp = _x$2;
        _tmp$2 = _subtree;
        continue;
      }
    }
  }
}
function Yoorkin$trie$$add$46$aux$47$5246(value, _param18, _param19) {
  if (_param18.len === 0) {
    return { value: value, forks: _param19.forks };
  } else {
    const _x = _param18.buf[_param18.start];
    const _tmp = _param18.buf;
    const _tmp$2 = 1 + _param18.start | 0;
    const _some = _param18.len;
    const _x$2 = { buf: _tmp, start: _tmp$2, len: _some - 1 | 0 };
    const subtree = moonbitlang$core$option$$Option$or$107$(moonbitlang$core$immut$sorted_map$$T$op_get$73$(_param19.forks, _x), { value: undefined, forks: $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$9$ });
    return { value: _param19.value, forks: moonbitlang$core$immut$sorted_map$$T$add$73$(_param19.forks, _x, Yoorkin$trie$$add$46$aux$47$5246(value, _x$2, subtree)) };
  }
}
function Yoorkin$trie$$T$add$200$(self, path, value) {
  const _bind = moonbitlang$core$string$$String$to_array(path);
  return Yoorkin$trie$$add$46$aux$47$5246(value, { buf: _bind, start: 0, len: _bind.length }, self);
}
function Yoorkin$trie$$empty$200$() {
  return { value: undefined, forks: $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$9$ };
}
function Yoorkin$ArgParser$$interpret(trie, xs, fallback) {
  const _bind = xs.length;
  let _tmp = xs;
  let _tmp$2 = 0;
  let _tmp$3 = _bind;
  _L: while (true) {
    const _param_buf = _tmp;
    const _param_start = _tmp$2;
    const _param_len = _tmp$3;
    if (_param_len === 0) {
      return;
    } else {
      const _x = _param_buf[_param_start];
      const _bind$2 = 1 + _param_start | 0;
      const _some = _param_len;
      const _bind$3 = _some - 1 | 0;
      const _bind$4 = Yoorkin$trie$$T$lookup$200$(trie, _x);
      if (_bind$4 === undefined) {
        fallback(_x);
        _tmp$2 = _bind$2;
        _tmp$3 = _bind$3;
        continue;
      } else {
        const _Some = _bind$4;
        const _spec = _Some;
        _L$2: {
          switch (_spec.$tag) {
            case 1: {
              const _String = _spec;
              const _f = _String._0;
              if (_bind$3 >= 1) {
                const _y = _param_buf[_bind$2];
                const _bind$5 = 1 + _bind$2 | 0;
                const _some$2 = _bind$3;
                const _bind$6 = _some$2 - 1 | 0;
                _f(_y);
                _tmp$2 = _bind$5;
                _tmp$3 = _bind$6;
                continue _L;
              } else {
                break _L$2;
              }
            }
            case 2: {
              const _Set_string = _spec;
              const _r = _Set_string._0;
              if (_bind$3 >= 1) {
                const _y = _param_buf[_bind$2];
                const _bind$5 = 1 + _bind$2 | 0;
                const _some$2 = _bind$3;
                const _bind$6 = _some$2 - 1 | 0;
                _r.val = _y;
                _tmp$2 = _bind$5;
                _tmp$3 = _bind$6;
                continue _L;
              } else {
                break _L$2;
              }
            }
            case 3: {
              const _Set = _spec;
              const _r$2 = _Set._0;
              _r$2.val = true;
              _tmp$2 = _bind$2;
              _tmp$3 = _bind$3;
              continue _L;
            }
            case 4: {
              const _Clear = _spec;
              const _r$3 = _Clear._0;
              _r$3.val = false;
              _tmp$2 = _bind$2;
              _tmp$3 = _bind$3;
              continue _L;
            }
            default: {
              const _Unit = _spec;
              const _f$2 = _Unit._0;
              _f$2();
              _tmp$2 = _bind$2;
              _tmp$3 = _bind$3;
              continue _L;
            }
          }
        }
        moonbitlang$core$builtin$$println$6$(`missing argument for ${_x}`);
        return;
      }
    }
  }
}
function Yoorkin$ArgParser$$parse$46$aux$124$7(_param5, _param6) {
  const _x = _param5._0;
  const _help_msg = _param5._1;
  const _a = _param6._0;
  const _b = _param6._1;
  const _spec = _param6._2;
  const _help = _param6._3;
  const trie = Yoorkin$trie$$T$add$200$(Yoorkin$trie$$T$add$200$(_x, _a, _spec), _b, _spec);
  const help_msg = `${_help_msg}  ${_a}\t${_b}\t${_help}\n`;
  return { _0: trie, _1: help_msg };
}
function Yoorkin$ArgParser$$parse(speclist, rest, usage_msg, argv) {
  const _p = { _0: Yoorkin$trie$$empty$200$(), _1: `${usage_msg}\n options:\n` };
  let _bind;
  let _tmp = 0;
  let _tmp$2 = _p;
  while (true) {
    const _p$2 = _tmp;
    const _p$3 = _tmp$2;
    if (_p$2 < speclist.length) {
      const _tmp$3 = _p$2 + 1 | 0;
      const _tmp$4 = Yoorkin$ArgParser$$parse$46$aux$124$7(_p$3, moonbitlang$core$array$$Array$op_get$133$(speclist, _p$2));
      _tmp = _tmp$3;
      _tmp$2 = _tmp$4;
      continue;
    } else {
      _bind = _p$3;
      break;
    }
  }
  const _trie = _bind._0;
  const _help_msg = _bind._1;
  const help_spec = new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    moonbitlang$core$builtin$$println$6$(_help_msg);
  });
  const trie = Yoorkin$trie$$T$add$200$(Yoorkin$trie$$T$add$200$(_trie, "--help", help_spec), "-h", help_spec);
  Yoorkin$ArgParser$$interpret(trie, argv, rest);
}
function moonbitlang$core$builtin$$Eq$op_equal$93$(_x_119, _x_120) {
  if (_x_119.$tag === 0) {
    const _T = _x_119;
    const _$42$x0_121 = _T._0;
    if (_x_120.$tag === 0) {
      const _T$2 = _x_120;
      const _$42$y0_122 = _T$2._0;
      return _$42$x0_121.num === _$42$y0_122.num;
    } else {
      return false;
    }
  } else {
    const _NT = _x_119;
    const _$42$x0_123 = _NT._0;
    if (_x_120.$tag === 1) {
      const _NT$2 = _x_120;
      const _$42$y0_124 = _NT$2._0;
      return _$42$x0_123.num === _$42$y0_124.num;
    } else {
      return false;
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$93$(_x_107, _x_108) {
  if (_x_107.$tag === 0) {
    const _T = _x_107;
    const _$42$x0_109 = _T._0;
    if (_x_108.$tag === 0) {
      const _T$2 = _x_108;
      const _$42$y0_110 = _T$2._0;
      return $compare_int(_$42$x0_109.num, _$42$y0_110.num);
    } else {
      return -1;
    }
  } else {
    const _NT = _x_107;
    const _$42$x0_111 = _NT._0;
    if (_x_108.$tag === 0) {
      return 1;
    } else {
      const _NT$2 = _x_108;
      const _$42$y0_112 = _NT$2._0;
      return $compare_int(_$42$x0_111.num, _$42$y0_112.num);
    }
  }
}
function moonbitlang$core$builtin$$Hash$hash_combine$93$(_x_99, _x_100) {
  if (_x_99.$tag === 0) {
    const _T = _x_99;
    const _$42$arg_101 = _T._0;
    moonbitlang$core$builtin$$Hasher$combine_int(_x_100, 0);
    moonbitlang$core$builtin$$Hash$hash_combine$119$(_$42$arg_101, _x_100);
    return;
  } else {
    const _NT = _x_99;
    const _$42$arg_102 = _NT._0;
    moonbitlang$core$builtin$$Hasher$combine_int(_x_100, 1);
    moonbitlang$core$builtin$$Hash$hash_combine$118$(_$42$arg_102, _x_100);
    return;
  }
}
function moonbitlang$core$builtin$$Hash$hash_combine$119$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_int(hasher, self.num);
}
function moonbitlang$core$builtin$$Hash$hash_combine$118$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_int(hasher, self.num);
}
function moonbitlang$core$builtin$$Show$output$93$(self, logger) {
  if (self.$tag === 0) {
    const _T = self;
    const _t = _T._0;
    moonbitlang$core$builtin$$Logger$write_object$119$(logger, _t);
    return;
  } else {
    const _NT = self;
    const _nt = _NT._0;
    moonbitlang$core$builtin$$Logger$write_object$118$(logger, _nt);
    return;
  }
}
function moonbitlang$yacc$lib$grm$$Production$output_with_opt_dot$201$(self, logger, dot) {
  moonbitlang$core$builtin$$Logger$write_object$118$({ self: logger, method_0: (_x, _x$2) => {
    _x.method_0(_x.self, _x$2);
  }, method_1: (_x, _x$2, _x$3, _x$4) => {
    _x.method_1(_x.self, _x$2, _x$3, _x$4);
  }, method_2: (_x, _x$2) => {
    _x.method_2(_x.self, _x$2);
  } }, self.lhs);
  logger.method_0(logger.self, " →");
  const _arr = self.rhs;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const symbol = _arr[_i];
      if (dot === undefined) {
      } else {
        const _Some = dot;
        const _d = _Some;
        if (_i === _d) {
          logger.method_0(logger.self, " •");
        }
      }
      logger.method_0(logger.self, " ");
      moonbitlang$core$builtin$$Logger$write_object$93$({ self: logger, method_0: (_x, _x$2) => {
        _x.method_0(_x.self, _x$2);
      }, method_1: (_x, _x$2, _x$3, _x$4) => {
        _x.method_1(_x.self, _x$2, _x$3, _x$4);
      }, method_2: (_x, _x$2) => {
        _x.method_2(_x.self, _x$2);
      } }, symbol);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (dot === undefined) {
    return;
  } else {
    const _Some = dot;
    const _d = _Some;
    if (_d === self.rhs.length) {
      logger.method_0(logger.self, " •");
      return;
    } else {
      return;
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$46$(_x_351, _x_352) {
  switch (_x_351.$tag) {
    case 0: {
      const _Dollar = _x_351;
      const _$42$x0_353 = _Dollar._0;
      if (_x_352.$tag === 0) {
        const _Dollar$2 = _x_352;
        const _$42$y0_354 = _Dollar$2._0;
        return _$42$x0_353 === _$42$y0_354;
      } else {
        return false;
      }
    }
    case 1: {
      if (_x_352.$tag === 1) {
        return true;
      } else {
        return false;
      }
    }
    case 2: {
      if (_x_352.$tag === 2) {
        return true;
      } else {
        return false;
      }
    }
    case 3: {
      if (_x_352.$tag === 3) {
        return true;
      } else {
        return false;
      }
    }
    case 4: {
      const _StartPosOf = _x_351;
      const _$42$x0_355 = _StartPosOf._0;
      if (_x_352.$tag === 4) {
        const _StartPosOf$2 = _x_352;
        const _$42$y0_356 = _StartPosOf$2._0;
        return moonbitlang$core$builtin$$Eq$op_equal$202$(_$42$x0_355, _$42$y0_356);
      } else {
        return false;
      }
    }
    case 5: {
      const _EndPosOf = _x_351;
      const _$42$x0_357 = _EndPosOf._0;
      if (_x_352.$tag === 5) {
        const _EndPosOf$2 = _x_352;
        const _$42$y0_358 = _EndPosOf$2._0;
        return moonbitlang$core$builtin$$Eq$op_equal$202$(_$42$x0_357, _$42$y0_358);
      } else {
        return false;
      }
    }
    case 6: {
      const _LocOf = _x_351;
      const _$42$x0_359 = _LocOf._0;
      if (_x_352.$tag === 6) {
        const _LocOf$2 = _x_352;
        const _$42$y0_360 = _LocOf$2._0;
        return moonbitlang$core$builtin$$Eq$op_equal$202$(_$42$x0_359, _$42$y0_360);
      } else {
        return false;
      }
    }
    case 7: {
      if (_x_352.$tag === 7) {
        return true;
      } else {
        return false;
      }
    }
    default: {
      if (_x_352.$tag === 8) {
        return true;
      } else {
        return false;
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$46$(_x_331, _x_332) {
  switch (_x_331.$tag) {
    case 0: {
      const _Dollar = _x_331;
      const _$42$x0_333 = _Dollar._0;
      if (_x_332.$tag === 0) {
        const _Dollar$2 = _x_332;
        const _$42$y0_334 = _Dollar$2._0;
        return $compare_int(_$42$x0_333, _$42$y0_334);
      } else {
        return -1;
      }
    }
    case 1: {
      switch (_x_332.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 0;
        }
        default: {
          return -1;
        }
      }
    }
    case 2: {
      switch (_x_332.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 0;
        }
        default: {
          return -1;
        }
      }
    }
    case 3: {
      switch (_x_332.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 1;
        }
        case 3: {
          return 0;
        }
        default: {
          return -1;
        }
      }
    }
    case 4: {
      const _StartPosOf = _x_331;
      const _$42$x0_335 = _StartPosOf._0;
      switch (_x_332.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 1;
        }
        case 3: {
          return 1;
        }
        case 4: {
          const _StartPosOf$2 = _x_332;
          const _$42$y0_336 = _StartPosOf$2._0;
          return moonbitlang$core$builtin$$Compare$compare$202$(_$42$x0_335, _$42$y0_336);
        }
        default: {
          return -1;
        }
      }
    }
    case 5: {
      const _EndPosOf = _x_331;
      const _$42$x0_337 = _EndPosOf._0;
      switch (_x_332.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 1;
        }
        case 3: {
          return 1;
        }
        case 4: {
          return 1;
        }
        case 5: {
          const _EndPosOf$2 = _x_332;
          const _$42$y0_338 = _EndPosOf$2._0;
          return moonbitlang$core$builtin$$Compare$compare$202$(_$42$x0_337, _$42$y0_338);
        }
        default: {
          return -1;
        }
      }
    }
    case 6: {
      const _LocOf = _x_331;
      const _$42$x0_339 = _LocOf._0;
      switch (_x_332.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 1;
        }
        case 3: {
          return 1;
        }
        case 4: {
          return 1;
        }
        case 5: {
          return 1;
        }
        case 6: {
          const _LocOf$2 = _x_332;
          const _$42$y0_340 = _LocOf$2._0;
          return moonbitlang$core$builtin$$Compare$compare$202$(_$42$x0_339, _$42$y0_340);
        }
        default: {
          return -1;
        }
      }
    }
    case 7: {
      switch (_x_332.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 1;
        }
        case 3: {
          return 1;
        }
        case 4: {
          return 1;
        }
        case 5: {
          return 1;
        }
        case 6: {
          return 1;
        }
        case 7: {
          return 0;
        }
        default: {
          return -1;
        }
      }
    }
    default: {
      switch (_x_332.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 1;
        }
        case 3: {
          return 1;
        }
        case 4: {
          return 1;
        }
        case 5: {
          return 1;
        }
        case 6: {
          return 1;
        }
        case 7: {
          return 1;
        }
        default: {
          return 0;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$202$(_x_288, _x_289) {
  if (_x_288.$tag === 0) {
    const _Dollar = _x_288;
    const _$42$x0_290 = _Dollar._0;
    if (_x_289.$tag === 0) {
      const _Dollar$2 = _x_289;
      const _$42$y0_291 = _Dollar$2._0;
      return _$42$x0_290 === _$42$y0_291;
    } else {
      return false;
    }
  } else {
    const _Name = _x_288;
    const _$42$x0_292 = _Name._0;
    if (_x_289.$tag === 1) {
      const _Name$2 = _x_289;
      const _$42$y0_293 = _Name$2._0;
      return _$42$x0_292 === _$42$y0_293;
    } else {
      return false;
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$202$(_x_276, _x_277) {
  if (_x_276.$tag === 0) {
    const _Dollar = _x_276;
    const _$42$x0_278 = _Dollar._0;
    if (_x_277.$tag === 0) {
      const _Dollar$2 = _x_277;
      const _$42$y0_279 = _Dollar$2._0;
      return $compare_int(_$42$x0_278, _$42$y0_279);
    } else {
      return -1;
    }
  } else {
    const _Name = _x_276;
    const _$42$x0_280 = _Name._0;
    if (_x_277.$tag === 0) {
      return 1;
    } else {
      const _Name$2 = _x_277;
      const _$42$y0_281 = _Name$2._0;
      return moonbitlang$core$builtin$$Compare$compare$6$(_$42$x0_280, _$42$y0_281);
    }
  }
}
function moonbitlang$core$builtin$$Show$output$85$(_x_212, _x_213) {
  switch (_x_212.$tag) {
    case 0: {
      const _Constr = _x_212;
      const _$42$arg_214 = _Constr._0;
      const _$42$arg_215 = _Constr._1;
      const _$42$arg_216 = _Constr._2;
      _x_213.method_0(_x_213.self, "Constr(");
      _x_213.method_0(_x_213.self, "pkg=");
      moonbitlang$core$builtin$$Logger$write_object$115$(_x_213, _$42$arg_214);
      _x_213.method_0(_x_213.self, ", ");
      moonbitlang$core$builtin$$Logger$write_object$6$(_x_213, _$42$arg_215);
      _x_213.method_0(_x_213.self, ", ");
      moonbitlang$core$builtin$$Logger$write_object$116$(_x_213, _$42$arg_216);
      _x_213.method_0(_x_213.self, ")");
      return;
    }
    case 1: {
      const _Option = _x_212;
      const _$42$arg_217 = _Option._0;
      _x_213.method_0(_x_213.self, "Option(");
      moonbitlang$core$builtin$$Logger$write_object$85$(_x_213, _$42$arg_217);
      _x_213.method_0(_x_213.self, ")");
      return;
    }
    case 2: {
      const _Tuple = _x_212;
      const _$42$arg_218 = _Tuple._0;
      _x_213.method_0(_x_213.self, "Tuple(");
      moonbitlang$core$builtin$$Logger$write_object$116$(_x_213, _$42$arg_218);
      _x_213.method_0(_x_213.self, ")");
      return;
    }
    default: {
      const _Arrow = _x_212;
      const _$42$arg_219 = _Arrow._0;
      const _$42$arg_220 = _Arrow._1;
      _x_213.method_0(_x_213.self, "Arrow(");
      moonbitlang$core$builtin$$Logger$write_object$116$(_x_213, _$42$arg_219);
      _x_213.method_0(_x_213.self, ", ");
      moonbitlang$core$builtin$$Logger$write_object$85$(_x_213, _$42$arg_220);
      _x_213.method_0(_x_213.self, ")");
      return;
    }
  }
}
function moonbitlang$yacc$lib$ast$$print_spec$46$term_to_string$124$82(term) {
  switch (term.$tag) {
    case 0: {
      const _Symbol = term;
      const _symbol = _Symbol._0;
      return _symbol;
    }
    case 1: {
      const _Image = term;
      const _image = _Image._0;
      return _image;
    }
    default: {
      const _RuleCall = term;
      const _symbol$2 = _RuleCall._0;
      const _args = _RuleCall._2;
      const _bind = moonbitlang$core$array$$Array$iter$86$(_args);
      const args = moonbitlang$core$builtin$$Iter$join((_p) => _bind((_p$2) => _p(moonbitlang$yacc$lib$ast$$print_spec$46$term_to_string$124$82(_p$2))), ", ");
      return `${_symbol$2}(${args})`;
    }
  }
}
function moonbitlang$yacc$lib$ast$$print_spec(spec, out, actions) {
  let header = undefined;
  let trailer = undefined;
  const start_decls = [];
  const normal_decls = [];
  const prec_decls = [];
  const _arr = spec.decls;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const decl = _arr[_i];
      let decl$2;
      _L: {
        _L$2: {
          switch (decl.$tag) {
            case 2: {
              const _Start = decl;
              moonbitlang$core$array$$Array$push$81$(start_decls, _Start);
              break;
            }
            case 0: {
              const _Header = decl;
              const _code = _Header._0;
              header = _code;
              break;
            }
            case 1: {
              const _Trailer = decl;
              const _code$2 = _Trailer._0;
              trailer = _code$2;
              break;
            }
            case 8: {
              decl$2 = decl;
              break _L$2;
            }
            case 9: {
              decl$2 = decl;
              break _L$2;
            }
            case 10: {
              decl$2 = decl;
              break _L$2;
            }
            default: {
              moonbitlang$core$array$$Array$push$81$(normal_decls, decl);
            }
          }
          break _L;
        }
        moonbitlang$core$array$$Array$push$81$(prec_decls, decl$2);
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _len$2 = start_decls.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len$2) {
      const decl = start_decls[_i];
      if (decl.$tag === 2) {
        const _Start = decl;
        const _symbols = _Start._0;
        const _type_ = _Start._1;
        moonbitlang$core$builtin$$Logger$write_string$38$(out, "%start");
        if (!actions) {
          moonbitlang$core$builtin$$Logger$write_string$38$(out, "<unit>");
        } else {
          moonbitlang$core$builtin$$Logger$write_string$38$(out, `<${moonbitlang$core$builtin$$Show$to_string$189$(_type_)}>`);
        }
        const _len$3 = _symbols.length;
        let _tmp$3 = 0;
        while (true) {
          const _i$2 = _tmp$3;
          if (_i$2 < _len$3) {
            const symbol = _symbols[_i$2];
            moonbitlang$core$builtin$$Logger$write_string$38$(out, " ");
            moonbitlang$core$builtin$$Logger$write_string$38$(out, symbol);
            _tmp$3 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$38$(out, "\n");
      } else {
        $panic();
      }
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (!(start_decls.length === 0)) {
    moonbitlang$core$builtin$$Logger$write_string$38$(out, "\n");
  }
  const _len$3 = normal_decls.length;
  let _tmp$3 = 0;
  while (true) {
    const _i = _tmp$3;
    if (_i < _len$3) {
      const decl = normal_decls[_i];
      _L: {
        _L$2: {
          switch (decl.$tag) {
            case 2: {
              break _L$2;
            }
            case 0: {
              break _L$2;
            }
            case 1: {
              break _L$2;
            }
            case 8: {
              break _L$2;
            }
            case 9: {
              break _L$2;
            }
            case 10: {
              break _L$2;
            }
            case 3: {
              const _Token = decl;
              const _symbols = _Token._0;
              const _type_ = _Token._1;
              moonbitlang$core$builtin$$Logger$write_string$38$(out, "%token");
              if (actions) {
                if (_type_ === undefined) {
                } else {
                  const _Some = _type_;
                  const _type_$2 = _Some;
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `<${_type_$2}>`);
                }
              }
              const _len$4 = _symbols.length;
              let _tmp$4 = 0;
              while (true) {
                const _i$2 = _tmp$4;
                if (_i$2 < _len$4) {
                  const symbol = _symbols[_i$2];
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, " ");
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, symbol);
                  _tmp$4 = _i$2 + 1 | 0;
                  continue;
                } else {
                  break;
                }
              }
              moonbitlang$core$builtin$$Logger$write_string$38$(out, "\n");
              break;
            }
            case 4: {
              const _Token1 = decl;
              const _symbol = _Token1._0;
              const _type_$2 = _Token1._1;
              const _image = _Token1._2;
              moonbitlang$core$builtin$$Logger$write_string$38$(out, "%token");
              if (actions) {
                if (_type_$2 === undefined) {
                } else {
                  const _Some = _type_$2;
                  const _type_$3 = _Some;
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, `<${_type_$3}>`);
                }
              }
              moonbitlang$core$builtin$$Logger$write_string$38$(out, " ");
              moonbitlang$core$builtin$$Logger$write_string$38$(out, _symbol);
              moonbitlang$core$builtin$$Logger$write_string$38$(out, " ");
              moonbitlang$core$builtin$$Logger$write_string$38$(out, _image);
              moonbitlang$core$builtin$$Logger$write_string$38$(out, "\n");
              break;
            }
            case 5: {
              const _Type = decl;
              const _symbols$2 = _Type._0;
              const _type_$3 = _Type._1;
              if (actions) {
                moonbitlang$core$builtin$$Logger$write_string$38$(out, "%type");
                moonbitlang$core$builtin$$Logger$write_string$38$(out, `<${_type_$3}>`);
                const _len$5 = _symbols$2.length;
                let _tmp$5 = 0;
                while (true) {
                  const _i$2 = _tmp$5;
                  if (_i$2 < _len$5) {
                    const symbol = _symbols$2[_i$2];
                    moonbitlang$core$builtin$$Logger$write_string$38$(out, " ");
                    moonbitlang$core$builtin$$Logger$write_string$38$(out, symbol);
                    _tmp$5 = _i$2 + 1 | 0;
                    continue;
                  } else {
                    break;
                  }
                }
                moonbitlang$core$builtin$$Logger$write_string$38$(out, "\n");
              }
              break;
            }
            case 6: {
              const _Derive = decl;
              const _traits = _Derive._0;
              const _type_$4 = _Derive._1;
              if (actions) {
                moonbitlang$core$builtin$$Logger$write_string$38$(out, "%derive");
                moonbitlang$core$builtin$$Logger$write_string$38$(out, `<${_type_$4}>`);
                moonbitlang$core$builtin$$Logger$write_string$38$(out, " ");
                moonbitlang$core$builtin$$Logger$write_string$38$(out, _traits);
                moonbitlang$core$builtin$$Logger$write_string$38$(out, "\n");
              }
              break;
            }
            default: {
              const _Position = decl;
              const _type_$5 = _Position._0;
              if (actions) {
                moonbitlang$core$builtin$$Logger$write_string$38$(out, "%position");
                moonbitlang$core$builtin$$Logger$write_string$38$(out, `<${_type_$5}>`);
                moonbitlang$core$builtin$$Logger$write_string$38$(out, "\n");
              }
            }
          }
          break _L;
        }
        $panic();
      }
      _tmp$3 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (!(prec_decls.length === 0)) {
    moonbitlang$core$builtin$$Logger$write_string$38$(out, "\n");
  }
  const _len$4 = prec_decls.length;
  let _tmp$4 = 0;
  while (true) {
    const _i = _tmp$4;
    if (_i < _len$4) {
      const decl = prec_decls[_i];
      let symbols;
      _L: {
        _L$2: {
          switch (decl.$tag) {
            case 8: {
              const _Left = decl;
              const _symbols = _Left._0;
              symbols = _symbols;
              break _L$2;
            }
            case 9: {
              const _Right = decl;
              const _symbols$2 = _Right._0;
              symbols = _symbols$2;
              break _L$2;
            }
            case 10: {
              const _Nonassoc = decl;
              const _symbols$3 = _Nonassoc._0;
              symbols = _symbols$3;
              break _L$2;
            }
            default: {
              $panic();
            }
          }
          break _L;
        }
        let _tmp$5;
        switch (decl.$tag) {
          case 8: {
            _tmp$5 = "%left";
            break;
          }
          case 9: {
            _tmp$5 = "%right";
            break;
          }
          case 10: {
            _tmp$5 = "%nonassoc";
            break;
          }
          default: {
            _tmp$5 = $panic();
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$38$(out, _tmp$5);
        const _len$5 = symbols.length;
        let _tmp$6 = 0;
        while (true) {
          const _i$2 = _tmp$6;
          if (_i$2 < _len$5) {
            const symbol = symbols[_i$2];
            moonbitlang$core$builtin$$Logger$write_string$38$(out, " ");
            if (symbol.$tag === 0) {
              const _Symbol = symbol;
              const _symbol = _Symbol._0;
              moonbitlang$core$builtin$$Logger$write_string$38$(out, _symbol);
            } else {
              const _Image = symbol;
              const _image = _Image._0;
              moonbitlang$core$builtin$$Logger$write_string$38$(out, _image);
            }
            _tmp$6 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$38$(out, "\n");
      }
      _tmp$4 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (actions) {
    const _bind = header;
    if (_bind === undefined) {
    } else {
      const _Some = _bind;
      const _code = _Some;
      moonbitlang$core$builtin$$Logger$write_string$38$(out, `\n\n%{${_code}%}\n`);
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$38$(out, "\n%%\n\n");
  const _arr$2 = spec.rules;
  const _len$5 = _arr$2.length;
  let _tmp$5 = 0;
  while (true) {
    const _i = _tmp$5;
    if (_i < _len$5) {
      const rule = _arr$2[_i];
      if (rule.inline) {
        moonbitlang$core$builtin$$Logger$write_string$38$(out, "%inline ");
      }
      moonbitlang$core$builtin$$Logger$write_string$38$(out, rule.nonterminal);
      let _tmp$6;
      if (actions) {
        const _p = rule.generic_params;
        _tmp$6 = !(_p.length === 0);
      } else {
        _tmp$6 = false;
      }
      if (_tmp$6) {
        moonbitlang$core$builtin$$Logger$write_string$38$(out, "[");
        const _arr$3 = rule.generic_params;
        const _len$6 = _arr$3.length;
        let _tmp$7 = 0;
        while (true) {
          const _i$2 = _tmp$7;
          if (_i$2 < _len$6) {
            const param = _arr$3[_i$2];
            if (_i$2 > 0) {
              moonbitlang$core$builtin$$Logger$write_string$38$(out, ", ");
            }
            moonbitlang$core$builtin$$Logger$write_string$38$(out, param);
            _tmp$7 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$38$(out, "]");
      }
      const _p = rule.params;
      if (!(_p.length === 0)) {
        moonbitlang$core$builtin$$Logger$write_string$38$(out, "(");
        const _arr$3 = rule.params;
        const _len$6 = _arr$3.length;
        let _tmp$7 = 0;
        while (true) {
          const _i$2 = _tmp$7;
          if (_i$2 < _len$6) {
            const param = _arr$3[_i$2];
            if (_i$2 > 0) {
              moonbitlang$core$builtin$$Logger$write_string$38$(out, ", ");
            }
            moonbitlang$core$builtin$$Logger$write_string$38$(out, param._0);
            if (actions) {
              const _bind = param._1;
              if (_bind === undefined) {
              } else {
                const _Some = _bind;
                const _type_ = _Some;
                moonbitlang$core$builtin$$Logger$write_string$38$(out, ` : ${moonbitlang$core$builtin$$Show$to_string$190$(_type_)}`);
              }
            }
            _tmp$7 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$38$(out, ")");
      }
      if (actions) {
        const _bind = rule.type_;
        if (_bind === undefined) {
        } else {
          const _Some = _bind;
          const _type_ = _Some;
          moonbitlang$core$builtin$$Logger$write_string$38$(out, ` -> ${moonbitlang$core$builtin$$Show$to_string$190$(_type_)}`);
        }
      }
      const _arr$3 = rule.clauses;
      const _len$6 = _arr$3.length;
      let _tmp$7 = 0;
      while (true) {
        const _i$2 = _tmp$7;
        if (_i$2 < _len$6) {
          const clause = _arr$3[_i$2];
          if (_i$2 === 0) {
            moonbitlang$core$builtin$$Logger$write_string$38$(out, "\n  : ");
          } else {
            moonbitlang$core$builtin$$Logger$write_string$38$(out, "\n  | ");
          }
          const _bind = moonbitlang$core$immut$list$$T$iter2$78$(clause._0);
          _bind((index, clause_no_action) => {
            if (index > 0) {
              moonbitlang$core$builtin$$Logger$write_string$38$(out, "\n | ");
            }
            const _arr$4 = clause_no_action.items;
            const _len$7 = _arr$4.length;
            let _tmp$8 = 0;
            while (true) {
              const _i$3 = _tmp$8;
              if (_i$3 < _len$7) {
                const item = _arr$4[_i$3];
                if (_i$3 > 0) {
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, " ");
                }
                _L: {
                  _L$2: {
                    if (actions) {
                      const _bind$2 = item.binder;
                      if (_bind$2 === undefined) {
                        break _L$2;
                      } else {
                        const _Some = _bind$2;
                        const _binder = _Some;
                        const _p$2 = moonbitlang$yacc$lib$ast$$print_spec$46$term_to_string$124$82(item.term);
                        moonbitlang$core$builtin$$Logger$write_string$38$(out, `${_binder}=${_p$2}`);
                      }
                    } else {
                      break _L$2;
                    }
                    break _L;
                  }
                  moonbitlang$core$builtin$$Logger$write_string$38$(out, moonbitlang$yacc$lib$ast$$print_spec$46$term_to_string$124$82(item.term));
                }
                _tmp$8 = _i$3 + 1 | 0;
                continue;
              } else {
                break;
              }
            }
            const _bind$2 = clause_no_action.prec;
            if (_bind$2 === undefined) {
            } else {
              const _Some = _bind$2;
              const _prec = _Some;
              if (_prec.$tag === 0) {
                const _Symbol = _prec;
                const _symbol = _Symbol._0;
                moonbitlang$core$builtin$$Logger$write_string$38$(out, ` %prec ${_symbol}`);
              } else {
                const _Image = _prec;
                const _image = _Image._0;
                moonbitlang$core$builtin$$Logger$write_string$38$(out, ` %prec ${_image}`);
              }
            }
            if (!actions) {
              moonbitlang$core$builtin$$Logger$write_string$38$(out, " {}");
            }
            return 1;
          });
          if (actions) {
            const _bind$2 = clause._1.code;
            if (_bind$2 === undefined) {
              moonbitlang$core$builtin$$Logger$write_string$38$(out, " {}");
            } else {
              const _Some = _bind$2;
              const _code = _Some;
              const _p$2 = _code.code;
              moonbitlang$core$builtin$$Logger$write_string$38$(out, ` {${_p$2}}`);
            }
          }
          _tmp$7 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      moonbitlang$core$builtin$$Logger$write_string$38$(out, "\n  ;\n\n");
      _tmp$5 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (actions) {
    const _bind = trailer;
    if (_bind === undefined) {
      return;
    } else {
      const _Some = _bind;
      const _code = _Some;
      moonbitlang$core$builtin$$Logger$write_string$38$(out, `%{${_code}%}\n`);
      return;
    }
  } else {
    return;
  }
}
function moonbitlang$ulex$45$runtime$lexbuf$$StringLexbuf$from_string(string) {
  return { data: string, end: string.length, pos: 0 };
}
function moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(self) {
  const pos = self.pos;
  const end = self.end;
  if (self.pos < end) {
    const _tmp = self.data;
    const c = _tmp.charCodeAt(pos);
    if (c >= 55296 && c <= 56319) {
      const pos2 = pos + 1 | 0;
      if (pos2 < end) {
        const _tmp$2 = self.data;
        const c2 = _tmp$2.charCodeAt(pos2);
        if (c2 >= 56320 && c2 <= 57343) {
          self.pos = pos2 + 1 | 0;
          return (((Math.imul(c - 55296 | 0, 1024) | 0) + c2 | 0) - 56320 | 0) + 65536 | 0;
        }
      }
    }
    self.pos = pos + 1 | 0;
    return c;
  }
  return -1;
}
function moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$203$(self, pos) {
  self.pos = pos;
}
function moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(self, start, _end) {
  return moonbitlang$core$string$$String$unsafe_char_at(self.data, start);
}
function moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(self, start, end) {
  return moonbitlang$core$string$$String$substring(self.data, start, end);
}
function moonbitlang$yacc$lib$parser$$code_eof(sb, lexbuf) {
  let _tmp = sb;
  let _tmp$2 = lexbuf;
  _L: while (true) {
    const sb$2 = _tmp;
    const lexbuf$2 = _tmp$2;
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf$2.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _tmp$3 = 0;
    _L$2: while (true) {
      const _param = _tmp$3;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$4;
          if (_bind === -1) {
            _tmp$4 = 1;
          } else {
            if (_bind >= 0 && _bind <= 1114111) {
              _tmp$4 = 2;
            } else {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$4;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 1) {
      moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$203$(lexbuf$2, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          const t = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_char$38$(sb$2, t);
          continue _L;
        }
        case 1: {
          return;
        }
        default: {
          $panic();
          return;
        }
      }
    } else {
      $panic();
      return;
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_percent_rbrace(sb, lexbuf) {
  let _tmp = sb;
  let _tmp$2 = lexbuf;
  _L: while (true) {
    const sb$2 = _tmp;
    const lexbuf$2 = _tmp$2;
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf$2.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _tmp$3 = 0;
    _L$2: while (true) {
      const _param = _tmp$3;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$4;
          if (_bind === -1) {
            _tmp$4 = 1;
          } else {
            if (_bind >= 0 && _bind <= 36) {
              _tmp$4 = 2;
            } else {
              if (_bind === 37) {
                _tmp$4 = 3;
              } else {
                if (_bind >= 38 && _bind <= 1114111) {
                  _tmp$4 = 2;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$3 = _tmp$4;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 3: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          const _bind$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$5;
          if (_bind$2 === 125) {
            _tmp$5 = 4;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$5;
          continue _L$2;
        }
        case 4: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 2) {
      moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$203$(lexbuf$2, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          return new Result$Ok$22$(undefined);
        }
        case 1: {
          const t = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_char$38$(sb$2, t);
          continue _L;
        }
        case 2: {
          return new Result$Err$22$(Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$UnexpectedEndOfFile);
        }
        default: {
          return new Result$Ok$22$($panic());
        }
      }
    } else {
      return new Result$Ok$22$($panic());
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rangle(sb, lexbuf) {
  let _tmp = sb;
  let _tmp$2 = lexbuf;
  _L: while (true) {
    const sb$2 = _tmp;
    const lexbuf$2 = _tmp$2;
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf$2.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _tmp$3 = 0;
    _L$2: while (true) {
      const _param = _tmp$3;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$4;
          if (_bind === -1) {
            _tmp$4 = 1;
          } else {
            if (_bind >= 0 && _bind <= 61) {
              _tmp$4 = 2;
            } else {
              if (_bind === 62) {
                _tmp$4 = 3;
              } else {
                if (_bind >= 63 && _bind <= 1114111) {
                  _tmp$4 = 2;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$3 = _tmp$4;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 3: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 2) {
      moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$203$(lexbuf$2, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          return new Result$Ok$22$(undefined);
        }
        case 1: {
          const t = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_char$38$(sb$2, t);
          continue _L;
        }
        case 2: {
          return new Result$Err$22$(Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$UnexpectedEndOfFile);
        }
        default: {
          return new Result$Ok$22$($panic());
        }
      }
    } else {
      return new Result$Ok$22$($panic());
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace(sb, subst, base, lexbuf) {
  let _tmp = sb;
  let _tmp$2 = subst;
  let _tmp$3 = base;
  let _tmp$4 = lexbuf;
  _L: while (true) {
    const sb$2 = _tmp;
    const subst$2 = _tmp$2;
    const base$2 = _tmp$3;
    const lexbuf$2 = _tmp$4;
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf$2.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _capture_1_start = -1;
    let _capture_1_end = -1;
    let _capture_2_start = -1;
    let _capture_2_end = -1;
    let _tag_0 = -1;
    let _tag_1 = -1;
    let _tag_2 = -1;
    let _tmp$5 = 0;
    _L$2: while (true) {
      const _param = _tmp$5;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$6;
          if (_bind === -1) {
            _tmp$6 = 1;
          } else {
            if (_bind >= 0 && _bind <= 35) {
              _tmp$6 = 2;
            } else {
              if (_bind === 36) {
                _tmp$6 = 3;
              } else {
                if (_bind >= 37 && _bind <= 122) {
                  _tmp$6 = 2;
                } else {
                  if (_bind === 123) {
                    _tmp$6 = 4;
                  } else {
                    if (_bind === 124) {
                      _tmp$6 = 2;
                    } else {
                      if (_bind === 125) {
                        _tmp$6 = 5;
                      } else {
                        if (_bind >= 126 && _bind <= 1114111) {
                          _tmp$6 = 2;
                        } else {
                          break _L$2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$6;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 7) {
            _match_pattern = 7;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 6) {
            _match_pattern = 6;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 3: {
          if (_match_pattern >= 6) {
            _match_pattern = 6;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          const _bind$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$7;
          if (_bind$2 >= 48 && _bind$2 <= 57) {
            _tmp$7 = 6;
          } else {
            if (_bind$2 >= 65 && _bind$2 <= 90) {
              _tmp$7 = 7;
            } else {
              if (_bind$2 === 95) {
                _tmp$7 = 7;
              } else {
                if (_bind$2 >= 97 && _bind$2 <= 100) {
                  _tmp$7 = 7;
                } else {
                  if (_bind$2 === 101) {
                    _tmp$7 = 8;
                  } else {
                    if (_bind$2 >= 102 && _bind$2 <= 107) {
                      _tmp$7 = 7;
                    } else {
                      if (_bind$2 === 108) {
                        _tmp$7 = 9;
                      } else {
                        if (_bind$2 >= 109 && _bind$2 <= 114) {
                          _tmp$7 = 7;
                        } else {
                          if (_bind$2 === 115) {
                            _tmp$7 = 10;
                          } else {
                            if (_bind$2 >= 116 && _bind$2 <= 122) {
                              _tmp$7 = 7;
                            } else {
                              break _L$2;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$7;
          continue _L$2;
        }
        case 4: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 5: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 6: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
            _capture_1_start = _match_start + 1 | 0;
            _capture_1_end = _match_end;
          }
          const _bind$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$8;
          if (_bind$3 >= 48 && _bind$3 <= 57) {
            _tmp$8 = 6;
          } else {
            break _L$2;
          }
          _tmp$5 = _tmp$8;
          continue _L$2;
        }
        case 7: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$4 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$9;
          if (_bind$4 >= 48 && _bind$4 <= 57) {
            _tmp$9 = 7;
          } else {
            if (_bind$4 >= 65 && _bind$4 <= 90) {
              _tmp$9 = 7;
            } else {
              if (_bind$4 === 95) {
                _tmp$9 = 7;
              } else {
                if (_bind$4 >= 97 && _bind$4 <= 122) {
                  _tmp$9 = 7;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$5 = _tmp$9;
          continue _L$2;
        }
        case 8: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$5 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$10;
          if (_bind$5 >= 48 && _bind$5 <= 57) {
            _tmp$10 = 7;
          } else {
            if (_bind$5 >= 65 && _bind$5 <= 90) {
              _tmp$10 = 7;
            } else {
              if (_bind$5 === 95) {
                _tmp$10 = 7;
              } else {
                if (_bind$5 >= 97 && _bind$5 <= 109) {
                  _tmp$10 = 7;
                } else {
                  if (_bind$5 === 110) {
                    _tmp$10 = 12;
                  } else {
                    if (_bind$5 >= 111 && _bind$5 <= 122) {
                      _tmp$10 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$10;
          continue _L$2;
        }
        case 9: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$6 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$11;
          if (_bind$6 >= 48 && _bind$6 <= 57) {
            _tmp$11 = 7;
          } else {
            if (_bind$6 >= 65 && _bind$6 <= 90) {
              _tmp$11 = 7;
            } else {
              if (_bind$6 === 95) {
                _tmp$11 = 7;
              } else {
                if (_bind$6 >= 97 && _bind$6 <= 110) {
                  _tmp$11 = 7;
                } else {
                  if (_bind$6 === 111) {
                    _tmp$11 = 11;
                  } else {
                    if (_bind$6 >= 112 && _bind$6 <= 122) {
                      _tmp$11 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$11;
          continue _L$2;
        }
        case 10: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$7 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$12;
          if (_bind$7 >= 48 && _bind$7 <= 57) {
            _tmp$12 = 7;
          } else {
            if (_bind$7 >= 65 && _bind$7 <= 90) {
              _tmp$12 = 7;
            } else {
              if (_bind$7 === 95) {
                _tmp$12 = 7;
              } else {
                if (_bind$7 >= 97 && _bind$7 <= 107) {
                  _tmp$12 = 7;
                } else {
                  if (_bind$7 === 108) {
                    _tmp$12 = 13;
                  } else {
                    if (_bind$7 >= 109 && _bind$7 <= 115) {
                      _tmp$12 = 7;
                    } else {
                      if (_bind$7 === 116) {
                        _tmp$12 = 14;
                      } else {
                        if (_bind$7 >= 117 && _bind$7 <= 120) {
                          _tmp$12 = 7;
                        } else {
                          if (_bind$7 === 121) {
                            _tmp$12 = 15;
                          } else {
                            if (_bind$7 === 122) {
                              _tmp$12 = 7;
                            } else {
                              break _L$2;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$12;
          continue _L$2;
        }
        case 11: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$8 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$13;
          if (_bind$8 >= 48 && _bind$8 <= 57) {
            _tmp$13 = 7;
          } else {
            if (_bind$8 >= 65 && _bind$8 <= 90) {
              _tmp$13 = 7;
            } else {
              if (_bind$8 === 95) {
                _tmp$13 = 7;
              } else {
                if (_bind$8 >= 97 && _bind$8 <= 98) {
                  _tmp$13 = 7;
                } else {
                  if (_bind$8 === 99) {
                    _tmp$13 = 16;
                  } else {
                    if (_bind$8 >= 100 && _bind$8 <= 122) {
                      _tmp$13 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$13;
          continue _L$2;
        }
        case 12: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$9 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$14;
          if (_bind$9 >= 48 && _bind$9 <= 57) {
            _tmp$14 = 7;
          } else {
            if (_bind$9 >= 65 && _bind$9 <= 90) {
              _tmp$14 = 7;
            } else {
              if (_bind$9 === 95) {
                _tmp$14 = 7;
              } else {
                if (_bind$9 >= 97 && _bind$9 <= 99) {
                  _tmp$14 = 7;
                } else {
                  if (_bind$9 === 100) {
                    _tmp$14 = 17;
                  } else {
                    if (_bind$9 >= 101 && _bind$9 <= 122) {
                      _tmp$14 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$14;
          continue _L$2;
        }
        case 13: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$10 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$15;
          if (_bind$10 >= 48 && _bind$10 <= 57) {
            _tmp$15 = 7;
          } else {
            if (_bind$10 >= 65 && _bind$10 <= 90) {
              _tmp$15 = 7;
            } else {
              if (_bind$10 === 95) {
                _tmp$15 = 7;
              } else {
                if (_bind$10 >= 97 && _bind$10 <= 110) {
                  _tmp$15 = 7;
                } else {
                  if (_bind$10 === 111) {
                    _tmp$15 = 18;
                  } else {
                    if (_bind$10 >= 112 && _bind$10 <= 122) {
                      _tmp$15 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$15;
          continue _L$2;
        }
        case 14: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$11 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$16;
          if (_bind$11 >= 48 && _bind$11 <= 57) {
            _tmp$16 = 7;
          } else {
            if (_bind$11 >= 65 && _bind$11 <= 90) {
              _tmp$16 = 7;
            } else {
              if (_bind$11 === 95) {
                _tmp$16 = 7;
              } else {
                if (_bind$11 === 97) {
                  _tmp$16 = 20;
                } else {
                  if (_bind$11 >= 98 && _bind$11 <= 122) {
                    _tmp$16 = 7;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$16;
          continue _L$2;
        }
        case 15: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$12 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$17;
          if (_bind$12 >= 48 && _bind$12 <= 57) {
            _tmp$17 = 7;
          } else {
            if (_bind$12 >= 65 && _bind$12 <= 90) {
              _tmp$17 = 7;
            } else {
              if (_bind$12 === 95) {
                _tmp$17 = 7;
              } else {
                if (_bind$12 >= 97 && _bind$12 <= 108) {
                  _tmp$17 = 7;
                } else {
                  if (_bind$12 === 109) {
                    _tmp$17 = 19;
                  } else {
                    if (_bind$12 >= 110 && _bind$12 <= 122) {
                      _tmp$17 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$17;
          continue _L$2;
        }
        case 16: {
          _tag_0 = lexbuf$2.pos;
          if (_match_pattern >= 4) {
            _match_pattern = 4;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
            _capture_1_start = _match_start + 1 | 0;
            _capture_1_end = _match_end;
          }
          const _bind$13 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$18;
          if (_bind$13 === 40) {
            _tmp$18 = 21;
          } else {
            if (_bind$13 >= 48 && _bind$13 <= 57) {
              _tmp$18 = 7;
            } else {
              if (_bind$13 >= 65 && _bind$13 <= 90) {
                _tmp$18 = 7;
              } else {
                if (_bind$13 === 95) {
                  _tmp$18 = 7;
                } else {
                  if (_bind$13 >= 97 && _bind$13 <= 122) {
                    _tmp$18 = 7;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$18;
          continue _L$2;
        }
        case 17: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$14 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$19;
          if (_bind$14 >= 48 && _bind$14 <= 57) {
            _tmp$19 = 7;
          } else {
            if (_bind$14 >= 65 && _bind$14 <= 90) {
              _tmp$19 = 7;
            } else {
              if (_bind$14 === 95) {
                _tmp$19 = 7;
              } else {
                if (_bind$14 >= 97 && _bind$14 <= 111) {
                  _tmp$19 = 7;
                } else {
                  if (_bind$14 === 112) {
                    _tmp$19 = 22;
                  } else {
                    if (_bind$14 >= 113 && _bind$14 <= 122) {
                      _tmp$19 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$19;
          continue _L$2;
        }
        case 18: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$15 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$20;
          if (_bind$15 >= 48 && _bind$15 <= 57) {
            _tmp$20 = 7;
          } else {
            if (_bind$15 >= 65 && _bind$15 <= 90) {
              _tmp$20 = 7;
            } else {
              if (_bind$15 === 95) {
                _tmp$20 = 7;
              } else {
                if (_bind$15 >= 97 && _bind$15 <= 98) {
                  _tmp$20 = 7;
                } else {
                  if (_bind$15 === 99) {
                    _tmp$20 = 23;
                  } else {
                    if (_bind$15 >= 100 && _bind$15 <= 122) {
                      _tmp$20 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$20;
          continue _L$2;
        }
        case 19: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$16 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$21;
          if (_bind$16 >= 48 && _bind$16 <= 57) {
            _tmp$21 = 7;
          } else {
            if (_bind$16 >= 65 && _bind$16 <= 90) {
              _tmp$21 = 7;
            } else {
              if (_bind$16 === 95) {
                _tmp$21 = 7;
              } else {
                if (_bind$16 === 97) {
                  _tmp$21 = 7;
                } else {
                  if (_bind$16 === 98) {
                    _tmp$21 = 24;
                  } else {
                    if (_bind$16 >= 99 && _bind$16 <= 122) {
                      _tmp$21 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$21;
          continue _L$2;
        }
        case 20: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$17 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$22;
          if (_bind$17 >= 48 && _bind$17 <= 57) {
            _tmp$22 = 7;
          } else {
            if (_bind$17 >= 65 && _bind$17 <= 90) {
              _tmp$22 = 7;
            } else {
              if (_bind$17 === 95) {
                _tmp$22 = 7;
              } else {
                if (_bind$17 >= 97 && _bind$17 <= 113) {
                  _tmp$22 = 7;
                } else {
                  if (_bind$17 === 114) {
                    _tmp$22 = 25;
                  } else {
                    if (_bind$17 >= 115 && _bind$17 <= 122) {
                      _tmp$22 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$22;
          continue _L$2;
        }
        case 21: {
          _tag_1 = lexbuf$2.pos;
          const _bind$18 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$23;
          if (_bind$18 === 9) {
            _tmp$23 = 21;
          } else {
            if (_bind$18 === 32) {
              _tmp$23 = 21;
            } else {
              if (_bind$18 === 36) {
                _tmp$23 = 26;
              } else {
                if (_bind$18 >= 65 && _bind$18 <= 90) {
                  _tmp$23 = 27;
                } else {
                  if (_bind$18 === 95) {
                    _tmp$23 = 27;
                  } else {
                    if (_bind$18 >= 97 && _bind$18 <= 122) {
                      _tmp$23 = 27;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$23;
          continue _L$2;
        }
        case 22: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$19 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$24;
          if (_bind$19 >= 48 && _bind$19 <= 57) {
            _tmp$24 = 7;
          } else {
            if (_bind$19 >= 65 && _bind$19 <= 90) {
              _tmp$24 = 7;
            } else {
              if (_bind$19 === 95) {
                _tmp$24 = 7;
              } else {
                if (_bind$19 >= 97 && _bind$19 <= 110) {
                  _tmp$24 = 7;
                } else {
                  if (_bind$19 === 111) {
                    _tmp$24 = 28;
                  } else {
                    if (_bind$19 >= 112 && _bind$19 <= 122) {
                      _tmp$24 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$24;
          continue _L$2;
        }
        case 23: {
          if (_match_pattern >= 4) {
            _match_pattern = 4;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
            _capture_1_start = _match_start + 1 | 0;
            _capture_1_end = _match_end;
          }
          const _bind$20 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$25;
          if (_bind$20 >= 48 && _bind$20 <= 57) {
            _tmp$25 = 7;
          } else {
            if (_bind$20 >= 65 && _bind$20 <= 90) {
              _tmp$25 = 7;
            } else {
              if (_bind$20 === 95) {
                _tmp$25 = 7;
              } else {
                if (_bind$20 >= 97 && _bind$20 <= 122) {
                  _tmp$25 = 7;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$5 = _tmp$25;
          continue _L$2;
        }
        case 24: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$21 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$26;
          if (_bind$21 >= 48 && _bind$21 <= 57) {
            _tmp$26 = 7;
          } else {
            if (_bind$21 >= 65 && _bind$21 <= 90) {
              _tmp$26 = 7;
            } else {
              if (_bind$21 === 95) {
                _tmp$26 = 7;
              } else {
                if (_bind$21 >= 97 && _bind$21 <= 110) {
                  _tmp$26 = 7;
                } else {
                  if (_bind$21 === 111) {
                    _tmp$26 = 29;
                  } else {
                    if (_bind$21 >= 112 && _bind$21 <= 122) {
                      _tmp$26 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$26;
          continue _L$2;
        }
        case 25: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$22 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$27;
          if (_bind$22 >= 48 && _bind$22 <= 57) {
            _tmp$27 = 7;
          } else {
            if (_bind$22 >= 65 && _bind$22 <= 90) {
              _tmp$27 = 7;
            } else {
              if (_bind$22 === 95) {
                _tmp$27 = 7;
              } else {
                if (_bind$22 >= 97 && _bind$22 <= 115) {
                  _tmp$27 = 7;
                } else {
                  if (_bind$22 === 116) {
                    _tmp$27 = 17;
                  } else {
                    if (_bind$22 >= 117 && _bind$22 <= 122) {
                      _tmp$27 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$27;
          continue _L$2;
        }
        case 26: {
          const _bind$23 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$28;
          if (_bind$23 >= 48 && _bind$23 <= 57) {
            _tmp$28 = 32;
          } else {
            break _L$2;
          }
          _tmp$5 = _tmp$28;
          continue _L$2;
        }
        case 27: {
          _tag_2 = lexbuf$2.pos;
          const _bind$24 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$29;
          if (_bind$24 === 9) {
            _tmp$29 = 30;
          } else {
            if (_bind$24 === 32) {
              _tmp$29 = 30;
            } else {
              if (_bind$24 === 41) {
                _tmp$29 = 31;
              } else {
                if (_bind$24 >= 48 && _bind$24 <= 57) {
                  _tmp$29 = 27;
                } else {
                  if (_bind$24 >= 65 && _bind$24 <= 90) {
                    _tmp$29 = 27;
                  } else {
                    if (_bind$24 === 95) {
                      _tmp$29 = 27;
                    } else {
                      if (_bind$24 >= 97 && _bind$24 <= 122) {
                        _tmp$29 = 27;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$29;
          continue _L$2;
        }
        case 28: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$25 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$30;
          if (_bind$25 >= 48 && _bind$25 <= 57) {
            _tmp$30 = 7;
          } else {
            if (_bind$25 >= 65 && _bind$25 <= 90) {
              _tmp$30 = 7;
            } else {
              if (_bind$25 === 95) {
                _tmp$30 = 7;
              } else {
                if (_bind$25 >= 97 && _bind$25 <= 114) {
                  _tmp$30 = 7;
                } else {
                  if (_bind$25 === 115) {
                    _tmp$30 = 16;
                  } else {
                    if (_bind$25 >= 116 && _bind$25 <= 122) {
                      _tmp$30 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$30;
          continue _L$2;
        }
        case 29: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$26 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$31;
          if (_bind$26 >= 48 && _bind$26 <= 57) {
            _tmp$31 = 7;
          } else {
            if (_bind$26 >= 65 && _bind$26 <= 90) {
              _tmp$31 = 7;
            } else {
              if (_bind$26 === 95) {
                _tmp$31 = 7;
              } else {
                if (_bind$26 >= 97 && _bind$26 <= 107) {
                  _tmp$31 = 7;
                } else {
                  if (_bind$26 === 108) {
                    _tmp$31 = 33;
                  } else {
                    if (_bind$26 >= 109 && _bind$26 <= 122) {
                      _tmp$31 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$31;
          continue _L$2;
        }
        case 30: {
          const _bind$27 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$32;
          switch (_bind$27) {
            case 9: {
              _tmp$32 = 30;
              break;
            }
            case 32: {
              _tmp$32 = 30;
              break;
            }
            case 41: {
              _tmp$32 = 31;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$5 = _tmp$32;
          continue _L$2;
        }
        case 31: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
            _capture_1_start = _match_start + 1 | 0;
            _capture_1_end = _tag_0;
            _capture_2_start = _tag_1;
            _capture_2_end = _tag_2;
          }
          break _L$2;
        }
        case 32: {
          _tag_2 = lexbuf$2.pos;
          const _bind$28 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$33;
          if (_bind$28 === 9) {
            _tmp$33 = 30;
          } else {
            if (_bind$28 === 32) {
              _tmp$33 = 30;
            } else {
              if (_bind$28 === 41) {
                _tmp$33 = 31;
              } else {
                if (_bind$28 >= 48 && _bind$28 <= 57) {
                  _tmp$33 = 32;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$5 = _tmp$33;
          continue _L$2;
        }
        case 33: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$29 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$34;
          if (_bind$29 >= 48 && _bind$29 <= 57) {
            _tmp$34 = 7;
          } else {
            if (_bind$29 >= 65 && _bind$29 <= 90) {
              _tmp$34 = 7;
            } else {
              if (_bind$29 === 95) {
                _tmp$34 = 7;
              } else {
                if (_bind$29 >= 97 && _bind$29 <= 114) {
                  _tmp$34 = 7;
                } else {
                  if (_bind$29 === 115) {
                    _tmp$34 = 34;
                  } else {
                    if (_bind$29 >= 116 && _bind$29 <= 122) {
                      _tmp$34 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$34;
          continue _L$2;
        }
        case 34: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$30 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$35;
          if (_bind$30 >= 48 && _bind$30 <= 57) {
            _tmp$35 = 7;
          } else {
            if (_bind$30 >= 65 && _bind$30 <= 90) {
              _tmp$35 = 7;
            } else {
              if (_bind$30 === 95) {
                _tmp$35 = 7;
              } else {
                if (_bind$30 >= 97 && _bind$30 <= 115) {
                  _tmp$35 = 7;
                } else {
                  if (_bind$30 === 116) {
                    _tmp$35 = 35;
                  } else {
                    if (_bind$30 >= 117 && _bind$30 <= 122) {
                      _tmp$35 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$35;
          continue _L$2;
        }
        case 35: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$31 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$36;
          if (_bind$31 >= 48 && _bind$31 <= 57) {
            _tmp$36 = 7;
          } else {
            if (_bind$31 >= 65 && _bind$31 <= 90) {
              _tmp$36 = 7;
            } else {
              if (_bind$31 === 95) {
                _tmp$36 = 7;
              } else {
                if (_bind$31 === 97) {
                  _tmp$36 = 36;
                } else {
                  if (_bind$31 >= 98 && _bind$31 <= 122) {
                    _tmp$36 = 7;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$36;
          continue _L$2;
        }
        case 36: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$32 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$37;
          if (_bind$32 >= 48 && _bind$32 <= 57) {
            _tmp$37 = 7;
          } else {
            if (_bind$32 >= 65 && _bind$32 <= 90) {
              _tmp$37 = 7;
            } else {
              if (_bind$32 === 95) {
                _tmp$37 = 7;
              } else {
                if (_bind$32 >= 97 && _bind$32 <= 113) {
                  _tmp$37 = 7;
                } else {
                  if (_bind$32 === 114) {
                    _tmp$37 = 37;
                  } else {
                    if (_bind$32 >= 115 && _bind$32 <= 122) {
                      _tmp$37 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$37;
          continue _L$2;
        }
        case 37: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$33 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$38;
          if (_bind$33 >= 48 && _bind$33 <= 57) {
            _tmp$38 = 7;
          } else {
            if (_bind$33 >= 65 && _bind$33 <= 90) {
              _tmp$38 = 7;
            } else {
              if (_bind$33 === 95) {
                _tmp$38 = 7;
              } else {
                if (_bind$33 >= 97 && _bind$33 <= 115) {
                  _tmp$38 = 7;
                } else {
                  if (_bind$33 === 116) {
                    _tmp$38 = 38;
                  } else {
                    if (_bind$33 >= 117 && _bind$33 <= 122) {
                      _tmp$38 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$38;
          continue _L$2;
        }
        case 38: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$34 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$39;
          if (_bind$34 >= 48 && _bind$34 <= 57) {
            _tmp$39 = 7;
          } else {
            if (_bind$34 >= 65 && _bind$34 <= 90) {
              _tmp$39 = 7;
            } else {
              if (_bind$34 === 95) {
                _tmp$39 = 7;
              } else {
                if (_bind$34 >= 97 && _bind$34 <= 111) {
                  _tmp$39 = 7;
                } else {
                  if (_bind$34 === 112) {
                    _tmp$39 = 39;
                  } else {
                    if (_bind$34 >= 113 && _bind$34 <= 122) {
                      _tmp$39 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$39;
          continue _L$2;
        }
        case 39: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$35 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$40;
          if (_bind$35 >= 48 && _bind$35 <= 57) {
            _tmp$40 = 7;
          } else {
            if (_bind$35 >= 65 && _bind$35 <= 90) {
              _tmp$40 = 7;
            } else {
              if (_bind$35 === 95) {
                _tmp$40 = 7;
              } else {
                if (_bind$35 >= 97 && _bind$35 <= 110) {
                  _tmp$40 = 7;
                } else {
                  if (_bind$35 === 111) {
                    _tmp$40 = 40;
                  } else {
                    if (_bind$35 >= 112 && _bind$35 <= 122) {
                      _tmp$40 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$40;
          continue _L$2;
        }
        case 40: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$36 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$41;
          if (_bind$36 >= 48 && _bind$36 <= 57) {
            _tmp$41 = 7;
          } else {
            if (_bind$36 >= 65 && _bind$36 <= 90) {
              _tmp$41 = 7;
            } else {
              if (_bind$36 === 95) {
                _tmp$41 = 7;
              } else {
                if (_bind$36 >= 97 && _bind$36 <= 114) {
                  _tmp$41 = 7;
                } else {
                  if (_bind$36 === 115) {
                    _tmp$41 = 23;
                  } else {
                    if (_bind$36 >= 116 && _bind$36 <= 122) {
                      _tmp$41 = 7;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$5 = _tmp$41;
          continue _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 7) {
      moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$203$(lexbuf$2, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          moonbitlang$core$builtin$$Logger$write_string$38$(sb$2, "{");
          const _bind$2 = moonbitlang$yacc$lib$parser$$code_rbrace(sb$2, subst$2, base$2, lexbuf$2);
          if (_bind$2.$tag === 1) {
            const _ok = _bind$2;
            _ok._0;
          } else {
            return _bind$2;
          }
          moonbitlang$core$builtin$$Logger$write_string$38$(sb$2, "}");
          continue _L;
        }
        case 1: {
          return new Result$Ok$22$(undefined);
        }
        case 2: {
          const t = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          const t1 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_1_start, _capture_1_end);
          moonbitlang$core$builtin$$Logger$write_string$38$(sb$2, t);
          let index;
          let _try_err;
          _L$3: {
            _L$4: {
              const _bind$3 = moonbitlang$core$strconv$$parse_int(t1, 10);
              if (_bind$3.$tag === 1) {
                const _ok = _bind$3;
                index = _ok._0;
              } else {
                const _err = _bind$3;
                const _tmp$6 = _err._0;
                _try_err = _tmp$6;
                break _L$4;
              }
              break _L$3;
            }
            index = moonbitlang$core$abort$$abort$8$(moonbitlang$core$builtin$$Show$to_string$4$(_try_err));
          }
          moonbitlang$core$array$$Array$push$181$(subst$2, { start: _capture_0_start - base$2 | 0, end: _capture_0_end - base$2 | 0, desc: new $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$Dollar(index) });
          continue _L;
        }
        case 3: {
          const t$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          const t1$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_1_start, _capture_1_end);
          const t2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_2_start, _capture_2_end);
          moonbitlang$core$builtin$$Logger$write_string$38$(sb$2, t$2);
          let arg;
          if (moonbitlang$core$string$$String$has_prefix(t2, { str: moonbitlang$yacc$lib$parser$$code_rbrace$46$42$bind$124$1167, start: 0, end: moonbitlang$yacc$lib$parser$$code_rbrace$46$42$bind$124$1167.length })) {
            let index$2;
            let _try_err$2;
            _L$4: {
              _L$5: {
                const _bind$3 = moonbitlang$core$strconv$$parse_int(moonbitlang$core$string$$String$substring(t2, 1, undefined), 10);
                if (_bind$3.$tag === 1) {
                  const _ok = _bind$3;
                  index$2 = _ok._0;
                } else {
                  const _err = _bind$3;
                  const _tmp$6 = _err._0;
                  _try_err$2 = _tmp$6;
                  break _L$5;
                }
                break _L$4;
              }
              index$2 = moonbitlang$core$abort$$abort$8$(moonbitlang$core$builtin$$Show$to_string$4$(_try_err$2));
            }
            arg = new $64$moonbitlang$47$yacc$47$lib$47$ast$46$ClauseItemIdent$Dollar(index$2);
          } else {
            arg = new $64$moonbitlang$47$yacc$47$lib$47$ast$46$ClauseItemIdent$Name(t2);
          }
          const _tmp$6 = _capture_0_start - base$2 | 0;
          const _tmp$7 = _capture_0_end - base$2 | 0;
          let _tmp$8;
          switch (t1$2) {
            case "startpos": {
              _tmp$8 = new $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$StartPosOf(arg);
              break;
            }
            case "endpos": {
              _tmp$8 = new $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$EndPosOf(arg);
              break;
            }
            case "loc": {
              _tmp$8 = new $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$LocOf(arg);
              break;
            }
            default: {
              _tmp$8 = $panic();
            }
          }
          moonbitlang$core$array$$Array$push$181$(subst$2, { start: _tmp$6, end: _tmp$7, desc: _tmp$8 });
          continue _L;
        }
        case 4: {
          const t$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          const t1$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_1_start, _capture_1_end);
          moonbitlang$core$builtin$$Logger$write_string$38$(sb$2, t$3);
          const _tmp$9 = _capture_0_start - base$2 | 0;
          const _tmp$10 = _capture_0_end - base$2 | 0;
          let _tmp$11;
          switch (t1$3) {
            case "startpos": {
              _tmp$11 = $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$StartPos;
              break;
            }
            case "endpos": {
              _tmp$11 = $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$EndPos;
              break;
            }
            case "loc": {
              _tmp$11 = $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$Loc;
              break;
            }
            case "symbolstartpos": {
              _tmp$11 = $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$SymbolStartPos;
              break;
            }
            case "sloc": {
              _tmp$11 = $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$Sloc;
              break;
            }
            default: {
              _tmp$11 = $panic();
            }
          }
          moonbitlang$core$array$$Array$push$181$(subst$2, { start: _tmp$9, end: _tmp$10, desc: _tmp$11 });
          continue _L;
        }
        case 5: {
          const t$4 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_string$38$(sb$2, t$4);
          continue _L;
        }
        case 6: {
          const t$5 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_char$38$(sb$2, t$5);
          continue _L;
        }
        case 7: {
          return new Result$Err$22$(Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$UnexpectedEndOfFile);
        }
        default: {
          return new Result$Ok$22$($panic());
        }
      }
    } else {
      return new Result$Ok$22$($panic());
    }
  }
}
function moonbitlang$yacc$lib$parser$$comment_star_rparen(lexbuf) {
  let _tmp = lexbuf;
  _L: while (true) {
    const lexbuf$2 = _tmp;
    let _match_pattern = moonbitlang$core$int$$max_value;
    lexbuf$2.pos;
    let _match_end = -1;
    let _tmp$2 = 0;
    _L$2: while (true) {
      const _param = _tmp$2;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$3;
          if (_bind === -1) {
            _tmp$3 = 1;
          } else {
            if (_bind >= 0 && _bind <= 39) {
              _tmp$3 = 2;
            } else {
              if (_bind === 40) {
                _tmp$3 = 3;
              } else {
                if (_bind === 41) {
                  _tmp$3 = 2;
                } else {
                  if (_bind === 42) {
                    _tmp$3 = 4;
                  } else {
                    if (_bind >= 43 && _bind <= 1114111) {
                      _tmp$3 = 2;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$3;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 3: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
          }
          const _bind$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$4;
          if (_bind$2 === 42) {
            _tmp$4 = 6;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$4;
          continue _L$2;
        }
        case 4: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
          }
          const _bind$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$5;
          if (_bind$3 === 41) {
            _tmp$5 = 5;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$5;
          continue _L$2;
        }
        case 5: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 6: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 3) {
      moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$203$(lexbuf$2, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          const _bind$2 = moonbitlang$yacc$lib$parser$$comment_star_rparen(lexbuf$2);
          if (_bind$2.$tag === 1) {
            const _ok = _bind$2;
            _ok._0;
          } else {
            return _bind$2;
          }
          continue _L;
        }
        case 1: {
          return new Result$Ok$22$(undefined);
        }
        case 2: {
          continue _L;
        }
        case 3: {
          return new Result$Err$22$(Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$UnexpectedEndOfFile);
        }
        default: {
          return new Result$Ok$22$($panic());
        }
      }
    } else {
      return new Result$Ok$22$($panic());
    }
  }
}
function moonbitlang$yacc$lib$parser$$token(phase, lexbuf) {
  let _tmp = phase;
  let _tmp$2 = lexbuf;
  _L: while (true) {
    const phase$2 = _tmp;
    const lexbuf$2 = _tmp$2;
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf$2.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _capture_1_start = -1;
    let _capture_1_end = -1;
    let _capture_2_start = -1;
    let _capture_2_end = -1;
    let _tag_0 = -1;
    let _tag_1 = -1;
    let _tmp$3 = 0;
    _L$2: while (true) {
      const _param = _tmp$3;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$4;
          if (_bind === -1) {
            _tmp$4 = 1;
          } else {
            if (_bind >= 0 && _bind <= 8) {
              _tmp$4 = 2;
            } else {
              if (_bind >= 9 && _bind <= 10) {
                _tmp$4 = 3;
              } else {
                if (_bind >= 11 && _bind <= 31) {
                  _tmp$4 = 2;
                } else {
                  if (_bind === 32) {
                    _tmp$4 = 3;
                  } else {
                    if (_bind === 33) {
                      _tmp$4 = 2;
                    } else {
                      if (_bind === 34) {
                        _tmp$4 = 4;
                      } else {
                        if (_bind >= 35 && _bind <= 36) {
                          _tmp$4 = 2;
                        } else {
                          if (_bind === 37) {
                            _tmp$4 = 5;
                          } else {
                            if (_bind >= 38 && _bind <= 39) {
                              _tmp$4 = 2;
                            } else {
                              if (_bind === 40) {
                                _tmp$4 = 6;
                              } else {
                                if (_bind === 41) {
                                  _tmp$4 = 7;
                                } else {
                                  if (_bind >= 42 && _bind <= 43) {
                                    _tmp$4 = 2;
                                  } else {
                                    if (_bind === 44) {
                                      _tmp$4 = 8;
                                    } else {
                                      if (_bind === 45) {
                                        _tmp$4 = 9;
                                      } else {
                                        if (_bind === 46) {
                                          _tmp$4 = 2;
                                        } else {
                                          if (_bind === 47) {
                                            _tmp$4 = 10;
                                          } else {
                                            if (_bind >= 48 && _bind <= 57) {
                                              _tmp$4 = 2;
                                            } else {
                                              if (_bind === 58) {
                                                _tmp$4 = 11;
                                              } else {
                                                if (_bind === 59) {
                                                  _tmp$4 = 12;
                                                } else {
                                                  if (_bind === 60) {
                                                    _tmp$4 = 13;
                                                  } else {
                                                    if (_bind === 61) {
                                                      _tmp$4 = 14;
                                                    } else {
                                                      if (_bind === 62) {
                                                        _tmp$4 = 2;
                                                      } else {
                                                        if (_bind === 63) {
                                                          _tmp$4 = 15;
                                                        } else {
                                                          if (_bind === 64) {
                                                            _tmp$4 = 16;
                                                          } else {
                                                            if (_bind >= 65 && _bind <= 90) {
                                                              _tmp$4 = 17;
                                                            } else {
                                                              if (_bind === 91) {
                                                                _tmp$4 = 18;
                                                              } else {
                                                                if (_bind === 92) {
                                                                  _tmp$4 = 2;
                                                                } else {
                                                                  if (_bind === 93) {
                                                                    _tmp$4 = 19;
                                                                  } else {
                                                                    if (_bind === 94) {
                                                                      _tmp$4 = 2;
                                                                    } else {
                                                                      if (_bind === 95) {
                                                                        _tmp$4 = 17;
                                                                      } else {
                                                                        if (_bind === 96) {
                                                                          _tmp$4 = 2;
                                                                        } else {
                                                                          if (_bind >= 97 && _bind <= 122) {
                                                                            _tmp$4 = 17;
                                                                          } else {
                                                                            if (_bind === 123) {
                                                                              _tmp$4 = 20;
                                                                            } else {
                                                                              if (_bind === 124) {
                                                                                _tmp$4 = 21;
                                                                              } else {
                                                                                if (_bind >= 125 && _bind <= 1114111) {
                                                                                  _tmp$4 = 2;
                                                                                } else {
                                                                                  break _L$2;
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$4;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 34) {
            _match_pattern = 34;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 33) {
            _match_pattern = 33;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 3: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
          }
          const _bind$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$5;
          if (_bind$2 >= 9 && _bind$2 <= 10) {
            _tmp$5 = 3;
          } else {
            if (_bind$2 === 32) {
              _tmp$5 = 3;
            } else {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$5;
          continue _L$2;
        }
        case 4: {
          if (_match_pattern >= 33) {
            _match_pattern = 33;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          const _bind$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$6;
          if (_bind$3 >= 0 && _bind$3 <= 33) {
            _tmp$6 = 22;
          } else {
            if (_bind$3 >= 35 && _bind$3 <= 1114111) {
              _tmp$6 = 22;
            } else {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$6;
          continue _L$2;
        }
        case 5: {
          if (_match_pattern >= 33) {
            _match_pattern = 33;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          const _bind$4 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$7;
          switch (_bind$4) {
            case 37: {
              _tmp$7 = 24;
              break;
            }
            case 100: {
              _tmp$7 = 25;
              break;
            }
            case 105: {
              _tmp$7 = 26;
              break;
            }
            case 108: {
              _tmp$7 = 27;
              break;
            }
            case 110: {
              _tmp$7 = 28;
              break;
            }
            case 112: {
              _tmp$7 = 29;
              break;
            }
            case 114: {
              _tmp$7 = 30;
              break;
            }
            case 115: {
              _tmp$7 = 31;
              break;
            }
            case 116: {
              _tmp$7 = 32;
              break;
            }
            case 123: {
              _tmp$7 = 33;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$7;
          continue _L$2;
        }
        case 6: {
          if (_match_pattern >= 27) {
            _match_pattern = 27;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          const _bind$5 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$8;
          if (_bind$5 === 42) {
            _tmp$8 = 37;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$8;
          continue _L$2;
        }
        case 7: {
          if (_match_pattern >= 28) {
            _match_pattern = 28;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 8: {
          if (_match_pattern >= 29) {
            _match_pattern = 29;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 9: {
          if (_match_pattern >= 33) {
            _match_pattern = 33;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          const _bind$6 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$9;
          if (_bind$6 === 62) {
            _tmp$9 = 23;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$9;
          continue _L$2;
        }
        case 10: {
          if (_match_pattern >= 33) {
            _match_pattern = 33;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          const _bind$7 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$10;
          switch (_bind$7) {
            case 42: {
              _tmp$10 = 35;
              break;
            }
            case 47: {
              _tmp$10 = 36;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$10;
          continue _L$2;
        }
        case 11: {
          if (_match_pattern >= 19) {
            _match_pattern = 19;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 12: {
          if (_match_pattern >= 22) {
            _match_pattern = 22;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 13: {
          if (_match_pattern >= 24) {
            _match_pattern = 24;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 14: {
          if (_match_pattern >= 21) {
            _match_pattern = 21;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 15: {
          if (_match_pattern >= 30) {
            _match_pattern = 30;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 16: {
          if (_match_pattern >= 33) {
            _match_pattern = 33;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          const _bind$8 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$11;
          if (_bind$8 >= 65 && _bind$8 <= 90) {
            _tmp$11 = 34;
          } else {
            if (_bind$8 === 95) {
              _tmp$11 = 34;
            } else {
              if (_bind$8 >= 97 && _bind$8 <= 122) {
                _tmp$11 = 34;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$11;
          continue _L$2;
        }
        case 17: {
          if (_match_pattern >= 6) {
            _match_pattern = 6;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$9 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$12;
          if (_bind$9 >= 48 && _bind$9 <= 57) {
            _tmp$12 = 17;
          } else {
            if (_bind$9 >= 65 && _bind$9 <= 90) {
              _tmp$12 = 17;
            } else {
              if (_bind$9 === 95) {
                _tmp$12 = 17;
              } else {
                if (_bind$9 >= 97 && _bind$9 <= 122) {
                  _tmp$12 = 17;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$3 = _tmp$12;
          continue _L$2;
        }
        case 18: {
          if (_match_pattern >= 25) {
            _match_pattern = 25;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 19: {
          if (_match_pattern >= 26) {
            _match_pattern = 26;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 20: {
          if (_match_pattern >= 31) {
            _match_pattern = 31;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 21: {
          if (_match_pattern >= 20) {
            _match_pattern = 20;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 22: {
          const _bind$10 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$13;
          if (_bind$10 >= 0 && _bind$10 <= 33) {
            _tmp$13 = 22;
          } else {
            if (_bind$10 === 34) {
              _tmp$13 = 38;
            } else {
              if (_bind$10 >= 35 && _bind$10 <= 1114111) {
                _tmp$13 = 22;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$13;
          continue _L$2;
        }
        case 23: {
          if (_match_pattern >= 18) {
            _match_pattern = 18;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 2 | 0;
          }
          break _L$2;
        }
        case 24: {
          if (_match_pattern >= 17) {
            _match_pattern = 17;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 2 | 0;
          }
          break _L$2;
        }
        case 25: {
          const _bind$11 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$14;
          if (_bind$11 === 101) {
            _tmp$14 = 40;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$14;
          continue _L$2;
        }
        case 26: {
          const _bind$12 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$15;
          if (_bind$12 === 110) {
            _tmp$15 = 39;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$15;
          continue _L$2;
        }
        case 27: {
          const _bind$13 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$16;
          if (_bind$13 === 101) {
            _tmp$16 = 43;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$16;
          continue _L$2;
        }
        case 28: {
          const _bind$14 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$17;
          if (_bind$14 === 111) {
            _tmp$17 = 41;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$17;
          continue _L$2;
        }
        case 29: {
          const _bind$15 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$18;
          switch (_bind$15) {
            case 111: {
              _tmp$18 = 44;
              break;
            }
            case 114: {
              _tmp$18 = 45;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$18;
          continue _L$2;
        }
        case 30: {
          const _bind$16 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$19;
          if (_bind$16 === 105) {
            _tmp$19 = 42;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$19;
          continue _L$2;
        }
        case 31: {
          const _bind$17 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$20;
          if (_bind$17 === 116) {
            _tmp$20 = 48;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$20;
          continue _L$2;
        }
        case 32: {
          const _bind$18 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$21;
          switch (_bind$18) {
            case 111: {
              _tmp$21 = 46;
              break;
            }
            case 121: {
              _tmp$21 = 47;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$21;
          continue _L$2;
        }
        case 33: {
          if (_match_pattern >= 23) {
            _match_pattern = 23;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 2 | 0;
          }
          break _L$2;
        }
        case 34: {
          _tag_0 = lexbuf$2.pos;
          const _bind$19 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$22;
          if (_bind$19 === 46) {
            _tmp$22 = 49;
          } else {
            if (_bind$19 === 47) {
              _tmp$22 = 50;
            } else {
              if (_bind$19 >= 48 && _bind$19 <= 57) {
                _tmp$22 = 34;
              } else {
                if (_bind$19 >= 65 && _bind$19 <= 90) {
                  _tmp$22 = 34;
                } else {
                  if (_bind$19 === 95) {
                    _tmp$22 = 34;
                  } else {
                    if (_bind$19 >= 97 && _bind$19 <= 122) {
                      _tmp$22 = 34;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$22;
          continue _L$2;
        }
        case 35: {
          const _bind$20 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$23;
          if (_bind$20 >= 0 && _bind$20 <= 41) {
            _tmp$23 = 35;
          } else {
            if (_bind$20 === 42) {
              _tmp$23 = 52;
            } else {
              if (_bind$20 >= 43 && _bind$20 <= 46) {
                _tmp$23 = 35;
              } else {
                if (_bind$20 === 47) {
                  _tmp$23 = 53;
                } else {
                  if (_bind$20 >= 48 && _bind$20 <= 1114111) {
                    _tmp$23 = 35;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$23;
          continue _L$2;
        }
        case 36: {
          if (_match_pattern >= 4) {
            _match_pattern = 4;
            _match_end = lexbuf$2.pos;
          }
          const _bind$21 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$24;
          if (_bind$21 >= 0 && _bind$21 <= 9) {
            _tmp$24 = 36;
          } else {
            if (_bind$21 === 10) {
              _tmp$24 = 51;
            } else {
              if (_bind$21 >= 11 && _bind$21 <= 1114111) {
                _tmp$24 = 36;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$24;
          continue _L$2;
        }
        case 37: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
          }
          const _bind$22 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$25;
          if (_bind$22 === 41) {
            _tmp$25 = 54;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$25;
          continue _L$2;
        }
        case 38: {
          if (_match_pattern >= 32) {
            _match_pattern = 32;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          break _L$2;
        }
        case 39: {
          const _bind$23 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$26;
          if (_bind$23 === 108) {
            _tmp$26 = 55;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$26;
          continue _L$2;
        }
        case 40: {
          const _bind$24 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$27;
          if (_bind$24 === 114) {
            _tmp$27 = 56;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$27;
          continue _L$2;
        }
        case 41: {
          const _bind$25 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$28;
          if (_bind$25 === 110) {
            _tmp$28 = 57;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$28;
          continue _L$2;
        }
        case 42: {
          const _bind$26 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$29;
          if (_bind$26 === 103) {
            _tmp$29 = 58;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$29;
          continue _L$2;
        }
        case 43: {
          const _bind$27 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$30;
          if (_bind$27 === 102) {
            _tmp$30 = 59;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$30;
          continue _L$2;
        }
        case 44: {
          const _bind$28 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$31;
          if (_bind$28 === 115) {
            _tmp$31 = 61;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$31;
          continue _L$2;
        }
        case 45: {
          const _bind$29 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$32;
          if (_bind$29 === 101) {
            _tmp$32 = 60;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$32;
          continue _L$2;
        }
        case 46: {
          const _bind$30 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$33;
          if (_bind$30 === 107) {
            _tmp$33 = 63;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$33;
          continue _L$2;
        }
        case 47: {
          const _bind$31 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$34;
          if (_bind$31 === 112) {
            _tmp$34 = 62;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$34;
          continue _L$2;
        }
        case 48: {
          const _bind$32 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$35;
          if (_bind$32 === 97) {
            _tmp$35 = 64;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$35;
          continue _L$2;
        }
        case 49: {
          _tag_1 = lexbuf$2.pos;
          const _bind$33 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$36;
          if (_bind$33 >= 65 && _bind$33 <= 90) {
            _tmp$36 = 65;
          } else {
            if (_bind$33 === 95) {
              _tmp$36 = 65;
            } else {
              if (_bind$33 >= 97 && _bind$33 <= 122) {
                _tmp$36 = 65;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$36;
          continue _L$2;
        }
        case 50: {
          const _bind$34 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$37;
          if (_bind$34 >= 65 && _bind$34 <= 90) {
            _tmp$37 = 34;
          } else {
            if (_bind$34 === 95) {
              _tmp$37 = 34;
            } else {
              if (_bind$34 >= 97 && _bind$34 <= 122) {
                _tmp$37 = 34;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$37;
          continue _L$2;
        }
        case 51: {
          if (_match_pattern >= 4) {
            _match_pattern = 4;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 52: {
          const _bind$35 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$38;
          if (_bind$35 >= 0 && _bind$35 <= 41) {
            _tmp$38 = 35;
          } else {
            if (_bind$35 === 42) {
              _tmp$38 = 52;
            } else {
              if (_bind$35 >= 43 && _bind$35 <= 46) {
                _tmp$38 = 35;
              } else {
                if (_bind$35 === 47) {
                  _tmp$38 = 66;
                } else {
                  if (_bind$35 >= 48 && _bind$35 <= 1114111) {
                    _tmp$38 = 35;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$38;
          continue _L$2;
        }
        case 53: {
          const _bind$36 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$39;
          if (_bind$36 >= 0 && _bind$36 <= 41) {
            _tmp$39 = 35;
          } else {
            if (_bind$36 >= 43 && _bind$36 <= 1114111) {
              _tmp$39 = 35;
            } else {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$39;
          continue _L$2;
        }
        case 54: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 55: {
          const _bind$37 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$40;
          if (_bind$37 === 105) {
            _tmp$40 = 67;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$40;
          continue _L$2;
        }
        case 56: {
          const _bind$38 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$41;
          if (_bind$38 === 105) {
            _tmp$41 = 68;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$41;
          continue _L$2;
        }
        case 57: {
          const _bind$39 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$42;
          if (_bind$39 === 97) {
            _tmp$42 = 69;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$42;
          continue _L$2;
        }
        case 58: {
          const _bind$40 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$43;
          if (_bind$40 === 104) {
            _tmp$43 = 70;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$43;
          continue _L$2;
        }
        case 59: {
          const _bind$41 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$44;
          if (_bind$41 === 116) {
            _tmp$44 = 71;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$44;
          continue _L$2;
        }
        case 60: {
          const _bind$42 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$45;
          if (_bind$42 === 99) {
            _tmp$45 = 72;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$45;
          continue _L$2;
        }
        case 61: {
          const _bind$43 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$46;
          if (_bind$43 === 105) {
            _tmp$46 = 73;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$46;
          continue _L$2;
        }
        case 62: {
          const _bind$44 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$47;
          if (_bind$44 === 101) {
            _tmp$47 = 74;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$47;
          continue _L$2;
        }
        case 63: {
          const _bind$45 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$48;
          if (_bind$45 === 101) {
            _tmp$48 = 75;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$48;
          continue _L$2;
        }
        case 64: {
          const _bind$46 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$49;
          if (_bind$46 === 114) {
            _tmp$49 = 76;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$49;
          continue _L$2;
        }
        case 65: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
            _capture_1_start = _tag_1;
            _capture_1_end = _match_end;
            _capture_2_start = _match_start + 1 | 0;
            _capture_2_end = _tag_0;
          }
          const _bind$47 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$50;
          if (_bind$47 >= 48 && _bind$47 <= 57) {
            _tmp$50 = 65;
          } else {
            if (_bind$47 >= 65 && _bind$47 <= 90) {
              _tmp$50 = 65;
            } else {
              if (_bind$47 === 95) {
                _tmp$50 = 65;
              } else {
                if (_bind$47 >= 97 && _bind$47 <= 122) {
                  _tmp$50 = 65;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$3 = _tmp$50;
          continue _L$2;
        }
        case 66: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end = lexbuf$2.pos;
          }
          const _bind$48 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$51;
          if (_bind$48 >= 0 && _bind$48 <= 41) {
            _tmp$51 = 35;
          } else {
            if (_bind$48 >= 43 && _bind$48 <= 1114111) {
              _tmp$51 = 35;
            } else {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$51;
          continue _L$2;
        }
        case 67: {
          const _bind$49 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$52;
          if (_bind$49 === 110) {
            _tmp$52 = 77;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$52;
          continue _L$2;
        }
        case 68: {
          const _bind$50 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$53;
          if (_bind$50 === 118) {
            _tmp$53 = 78;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$53;
          continue _L$2;
        }
        case 69: {
          const _bind$51 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$54;
          if (_bind$51 === 115) {
            _tmp$54 = 79;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$54;
          continue _L$2;
        }
        case 70: {
          const _bind$52 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$55;
          if (_bind$52 === 116) {
            _tmp$55 = 80;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$55;
          continue _L$2;
        }
        case 71: {
          if (_match_pattern >= 11) {
            _match_pattern = 11;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 5 | 0;
          }
          break _L$2;
        }
        case 72: {
          if (_match_pattern >= 14) {
            _match_pattern = 14;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 5 | 0;
          }
          break _L$2;
        }
        case 73: {
          const _bind$53 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$56;
          if (_bind$53 === 116) {
            _tmp$56 = 81;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$56;
          continue _L$2;
        }
        case 74: {
          if (_match_pattern >= 9) {
            _match_pattern = 9;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 5 | 0;
          }
          break _L$2;
        }
        case 75: {
          const _bind$54 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$57;
          if (_bind$54 === 110) {
            _tmp$57 = 82;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$57;
          continue _L$2;
        }
        case 76: {
          const _bind$55 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$58;
          if (_bind$55 === 116) {
            _tmp$58 = 83;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$58;
          continue _L$2;
        }
        case 77: {
          const _bind$56 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$59;
          if (_bind$56 === 101) {
            _tmp$59 = 84;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$59;
          continue _L$2;
        }
        case 78: {
          const _bind$57 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$60;
          if (_bind$57 === 101) {
            _tmp$60 = 85;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$60;
          continue _L$2;
        }
        case 79: {
          const _bind$58 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$61;
          if (_bind$58 === 115) {
            _tmp$61 = 86;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$61;
          continue _L$2;
        }
        case 80: {
          if (_match_pattern >= 12) {
            _match_pattern = 12;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 6 | 0;
          }
          break _L$2;
        }
        case 81: {
          const _bind$59 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$62;
          if (_bind$59 === 105) {
            _tmp$62 = 87;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$62;
          continue _L$2;
        }
        case 82: {
          if (_match_pattern >= 8) {
            _match_pattern = 8;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 6 | 0;
          }
          break _L$2;
        }
        case 83: {
          if (_match_pattern >= 7) {
            _match_pattern = 7;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 6 | 0;
          }
          break _L$2;
        }
        case 84: {
          if (_match_pattern >= 16) {
            _match_pattern = 16;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 7 | 0;
          }
          break _L$2;
        }
        case 85: {
          if (_match_pattern >= 15) {
            _match_pattern = 15;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 7 | 0;
          }
          break _L$2;
        }
        case 86: {
          const _bind$60 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$63;
          if (_bind$60 === 111) {
            _tmp$63 = 88;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$63;
          continue _L$2;
        }
        case 87: {
          const _bind$61 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$64;
          if (_bind$61 === 111) {
            _tmp$64 = 89;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$64;
          continue _L$2;
        }
        case 88: {
          const _bind$62 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$65;
          if (_bind$62 === 99) {
            _tmp$65 = 90;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$65;
          continue _L$2;
        }
        case 89: {
          const _bind$63 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$66;
          if (_bind$63 === 110) {
            _tmp$66 = 91;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$66;
          continue _L$2;
        }
        case 90: {
          if (_match_pattern >= 13) {
            _match_pattern = 13;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 9 | 0;
          }
          break _L$2;
        }
        case 91: {
          if (_match_pattern >= 10) {
            _match_pattern = 10;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 9 | 0;
          }
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 34) {
      moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$203$(lexbuf$2, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          continue _L;
        }
        case 1: {
          continue _L;
        }
        case 2: {
          const _bind$2 = moonbitlang$yacc$lib$parser$$comment_star_rparen(lexbuf$2);
          if (_bind$2.$tag === 1) {
            const _ok = _bind$2;
            _ok._0;
          } else {
            return _bind$2;
          }
          continue _L;
        }
        case 3: {
          continue _L;
        }
        case 4: {
          continue _L;
        }
        case 5: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          const id = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_1_start, _capture_1_end);
          const pkg = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_2_start, _capture_2_end);
          return new Result$Ok$23$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PKG_AND_IDENT({ _0: pkg, _1: id }), _1: _capture_0_start, _2: _capture_0_end });
        }
        case 6: {
          const t = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$IDENT(t), _1: _capture_0_start, _2: _capture_0_end });
        }
        case 7: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_START, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 8: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_TOKEN, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 9: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_TYPE, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 10: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_POSITION, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 11: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_LEFT, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 12: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_RIGHT, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 13: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_NONASSOC, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 14: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_PREC, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 15: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_DERIVE, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 16: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_INLINE, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 17: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          if (phase$2.val <= 0) {
            phase$2.val = phase$2.val + 1 | 0;
            return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_PERCENT, _1: _capture_0_start, _2: _capture_0_end });
          } else {
            phase$2.val = phase$2.val + 1 | 0;
            const sb = moonbitlang$core$builtin$$StringBuilder$new(0);
            moonbitlang$yacc$lib$parser$$code_eof(sb, lexbuf$2);
            return new Result$Ok$23$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_PERCENT_CODE_EOF({ _0: sb.val, _1: _capture_0_end, _2: lexbuf$2.pos - _capture_0_end | 0 }), _1: _capture_0_start, _2: lexbuf$2.pos });
          }
        }
        case 18: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$ARROW, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 19: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$COLON, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 20: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$BAR, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 21: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$EQ, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 22: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$SEMI, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 23: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          const sb = moonbitlang$core$builtin$$StringBuilder$new(0);
          const _bind$3 = moonbitlang$yacc$lib$parser$$code_percent_rbrace(sb, lexbuf$2);
          if (_bind$3.$tag === 1) {
            const _ok = _bind$3;
            _ok._0;
          } else {
            return _bind$3;
          }
          return new Result$Ok$23$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_LBRACE_CODE_PERCENT_RBRACE({ _0: sb.val, _1: _capture_0_end, _2: lexbuf$2.pos - _capture_0_end | 0 }), _1: _capture_0_start, _2: lexbuf$2.pos });
        }
        case 24: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          const sb$2 = moonbitlang$core$builtin$$StringBuilder$new(0);
          const _bind$4 = moonbitlang$yacc$lib$parser$$code_rangle(sb$2, lexbuf$2);
          if (_bind$4.$tag === 1) {
            const _ok = _bind$4;
            _ok._0;
          } else {
            return _bind$4;
          }
          return new Result$Ok$23$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LANGLE_CODE_RANGLE(sb$2.val), _1: _capture_0_start, _2: lexbuf$2.pos });
        }
        case 25: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LBRACKET, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 26: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$RBRACKET, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 27: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LPAREN, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 28: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$RPAREN, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 29: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$COMMA, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 30: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$QUESTION, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 31: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          const sb$3 = moonbitlang$core$builtin$$StringBuilder$new(0);
          const subst = [];
          const base = lexbuf$2.pos;
          const _bind$5 = moonbitlang$yacc$lib$parser$$code_rbrace(sb$3, subst, base, lexbuf$2);
          if (_bind$5.$tag === 1) {
            const _ok = _bind$5;
            _ok._0;
          } else {
            return _bind$5;
          }
          return new Result$Ok$23$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LBRACE_CODE_RBRACE({ _0: sb$3.val, _1: base, _2: subst }), _1: _capture_0_start, _2: lexbuf$2.pos });
        }
        case 32: {
          const t$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$STRING(t$2), _1: _capture_0_start, _2: _capture_0_end });
        }
        case 33: {
          const t$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Err$23$(new Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$Unrecognized(t$3, _capture_0_start));
        }
        case 34: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$23$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$EOF, _1: _capture_0_start, _2: _capture_0_end });
        }
        default: {
          return new Result$Ok$23$($panic());
        }
      }
    } else {
      return new Result$Ok$23$($panic());
    }
  }
}
function moonbitlang$yacc$lib$parser$$new_lexer(input) {
  return { buf: moonbitlang$ulex$45$runtime$lexbuf$$StringLexbuf$from_string(input), phase: { val: 0 } };
}
function moonbitlang$yacc$lib$parser$$Lexer$next_token(self) {
  return moonbitlang$yacc$lib$parser$$token(self.phase, self.buf);
}
function moonbitlang$yacc$lib$parser$$Token$kind(self) {
  switch (self.$tag) {
    case 0: {
      return 0;
    }
    case 1: {
      return 1;
    }
    case 2: {
      return 2;
    }
    case 3: {
      return 3;
    }
    case 4: {
      return 4;
    }
    case 5: {
      return 5;
    }
    case 6: {
      return 6;
    }
    case 7: {
      return 7;
    }
    case 8: {
      return 8;
    }
    case 9: {
      return 9;
    }
    case 10: {
      return 10;
    }
    case 11: {
      return 11;
    }
    case 12: {
      return 12;
    }
    case 13: {
      return 13;
    }
    case 14: {
      return 14;
    }
    case 15: {
      return 15;
    }
    case 16: {
      return 16;
    }
    case 17: {
      return 17;
    }
    case 18: {
      return 18;
    }
    case 19: {
      return 19;
    }
    case 20: {
      return 20;
    }
    case 21: {
      return 21;
    }
    case 22: {
      return 22;
    }
    case 23: {
      return 23;
    }
    case 24: {
      return 24;
    }
    case 25: {
      return 25;
    }
    case 26: {
      return 26;
    }
    case 27: {
      return 27;
    }
    case 28: {
      return 28;
    }
    default: {
      return 29;
    }
  }
}
function moonbitlang$core$builtin$$Show$output$182$(self, logger) {
  let _tmp;
  switch (self) {
    case 0: {
      _tmp = "EOF";
      break;
    }
    case 1: {
      _tmp = "IDENT";
      break;
    }
    case 2: {
      _tmp = "STRING";
      break;
    }
    case 3: {
      _tmp = "LANGLE_CODE_RANGLE";
      break;
    }
    case 4: {
      _tmp = "LBRACE_CODE_RBRACE";
      break;
    }
    case 5: {
      _tmp = "PERCENT_LBRACE_CODE_PERCENT_RBRACE";
      break;
    }
    case 6: {
      _tmp = "PERCENT_PERCENT_CODE_EOF";
      break;
    }
    case 7: {
      _tmp = "PKG_AND_IDENT";
      break;
    }
    case 8: {
      _tmp = "\"%%\"";
      break;
    }
    case 9: {
      _tmp = "\"%start\"";
      break;
    }
    case 10: {
      _tmp = "\"%token\"";
      break;
    }
    case 11: {
      _tmp = "\"%type\"";
      break;
    }
    case 12: {
      _tmp = "\"%position\"";
      break;
    }
    case 13: {
      _tmp = "\"%left\"";
      break;
    }
    case 14: {
      _tmp = "\"%right\"";
      break;
    }
    case 15: {
      _tmp = "\"%nonassoc\"";
      break;
    }
    case 16: {
      _tmp = "\"%prec\"";
      break;
    }
    case 17: {
      _tmp = "\"%derive\"";
      break;
    }
    case 18: {
      _tmp = "\"%inline\"";
      break;
    }
    case 19: {
      _tmp = "\"[\"";
      break;
    }
    case 20: {
      _tmp = "\"]\"";
      break;
    }
    case 21: {
      _tmp = "\"(\"";
      break;
    }
    case 22: {
      _tmp = "\")\"";
      break;
    }
    case 23: {
      _tmp = "\",\"";
      break;
    }
    case 24: {
      _tmp = "\"->\"";
      break;
    }
    case 25: {
      _tmp = "\"?\"";
      break;
    }
    case 26: {
      _tmp = "\":\"";
      break;
    }
    case 27: {
      _tmp = "\"|\"";
      break;
    }
    case 28: {
      _tmp = "\"=\"";
      break;
    }
    default: {
      _tmp = "\";\"";
    }
  }
  logger.method_0(logger.self, _tmp);
}
(() => {
})();
function moonbitlang$yacc$lib$parser$$yy_action_0(_last_pos, _args) {
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Array_String_$46$YYObj_Array_String_([]);
}
function moonbitlang$yacc$lib$parser$$yy_action_1(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 14) {
      const _YYObj__immut_list_T_String_ = _bind$2;
      const __dollar3 = _YYObj__immut_list_T_String_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_String_$46$YYObj__immut_list_T_String_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$(__dollar1, __dollar3));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_2(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 15) {
    const _YYObj__ast_ClauseWithoutAction = _bind;
    const _clause_woa = _YYObj__ast_ClauseWithoutAction._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 16) {
      const _YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__ = _bind$2;
      const _clause_list = _YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__._0;
      let _tmp;
      if (_clause_list.$tag === 1) {
        const _Cons = _clause_list;
        const _x = _Cons._0;
        const _clause_woa_list = _x._0;
        const _action = _x._1;
        const _tail_clause_list = _Cons._1;
        _tmp = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$25$({ _0: new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$26$(_clause_woa, _clause_woa_list), _1: _action }, _tail_clause_list);
      } else {
        _tmp = $panic();
      }
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__(_tmp);
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_3(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 17) {
    const _YYObj__ast_Rule = _bind;
    const _rule = _YYObj__ast_Rule._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
    if (_bind$2.$tag === 18) {
      const _YYObj__immut_list_T__ast_Rule_ = _bind$2;
      const _rule_list = _YYObj__immut_list_T__ast_Rule_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Rule_$46$YYObj__immut_list_T__ast_Rule_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$27$(_rule, _rule_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_4(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 3)._0;
  if (_bind.$tag === 19) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar4 = _YYObj__ast_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Arrow([], __dollar4));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_5(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 16) {
    const _YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__ = _bind;
    const __dollar1 = _YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_6(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 20) {
    const _YYObj__ast_Symbol = _bind;
    const _symbol = _YYObj__ast_Symbol._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_PrecSymbol$46$YYObj__ast_PrecSymbol(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$PrecSymbol$Symbol(_symbol));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_7(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 22) {
      const _YYObj__immut_list_T__String___ast_TypeExpr___ = _bind$2;
      const __dollar3 = _YYObj__immut_list_T__String___ast_TypeExpr___._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__String___ast_TypeExpr___$46$YYObj__immut_list_T__String___ast_TypeExpr___(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$28$({ _0: __dollar1, _1: undefined }, __dollar3));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_8(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 23) {
    const _YYObj__String__Int__Int_ = _bind;
    const __dollar1 = _YYObj__String__Int__Int_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Header(__dollar1._0, __dollar1._1, __dollar1._2));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_9(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 25) {
    const _YYObj__immut_list_T__ast_PrecSymbol_ = _bind;
    const _symbol_list = _YYObj__immut_list_T__ast_PrecSymbol_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Left(moonbitlang$core$immut$list$$T$to_array$80$(_symbol_list)));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_11(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 15) {
    const _YYObj__ast_ClauseWithoutAction = _bind;
    const __dollar1 = _YYObj__ast_ClauseWithoutAction._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ClauseWithoutAction$46$YYObj__ast_ClauseWithoutAction(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_10(_last_pos, _args) {
  const _sub_action_0_result = moonbitlang$yacc$lib$parser$$yy_action_11(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$11$(_args, 0, 1));
  if (_sub_action_0_result.$tag === 15) {
    const _YYObj__ast_ClauseWithoutAction = _sub_action_0_result;
    const _clause_woa = _YYObj__ast_ClauseWithoutAction._0;
    const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
    if (_bind.$tag === 26) {
      const _YYObj__ast_ClauseAction = _bind;
      const _action = _YYObj__ast_ClauseAction._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$25$({ _0: new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$26$(_clause_woa, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$26$), _1: _action }, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$25$));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_12(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 25) {
    const _YYObj__immut_list_T__ast_PrecSymbol_ = _bind;
    const _symbol_list = _YYObj__immut_list_T__ast_PrecSymbol_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Nonassoc(moonbitlang$core$immut$list$$T$to_array$80$(_symbol_list)));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_13(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 19) {
    const _YYObj__ast_TypeExpr = _bind;
    const _type_ = _YYObj__ast_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr_$46$YYObj__ast_TypeExpr_(_type_);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_14(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 19) {
    const _YYObj__ast_TypeExpr = _bind;
    const _type_expr = _YYObj__ast_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 28) {
      const _YYObj__immut_list_T__ast_TypeExpr_ = _bind$2;
      const _type_expr_list = _YYObj__immut_list_T__ast_TypeExpr_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_TypeExpr_$46$YYObj__immut_list_T__ast_TypeExpr_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$29$(_type_expr, _type_expr_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_15(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 29) {
    const _YYObj__ast_Term = _bind;
    const _term = _YYObj__ast_Term._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Term_$46$YYObj__immut_list_T__ast_Term_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$30$(_term, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$30$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_16(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 17) {
    const _YYObj__ast_Rule = _bind;
    const __dollar1 = _YYObj__ast_Rule._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Rule$46$YYObj__ast_Rule(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_17(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 19) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar2 = _YYObj__ast_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 4)._0;
    if (_bind$2.$tag === 19) {
      const _YYObj__ast_TypeExpr$2 = _bind$2;
      const __dollar5 = _YYObj__ast_TypeExpr$2._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Arrow([__dollar2], __dollar5));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_18(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 19) {
      const _YYObj__ast_TypeExpr = _bind$2;
      const __dollar3 = _YYObj__ast_TypeExpr._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 4)._0;
      if (_bind$3.$tag === 22) {
        const _YYObj__immut_list_T__String___ast_TypeExpr___ = _bind$3;
        const __dollar5 = _YYObj__immut_list_T__String___ast_TypeExpr___._0;
        return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__String___ast_TypeExpr___$46$YYObj__immut_list_T__String___ast_TypeExpr___(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$28$({ _0: __dollar1, _1: __dollar3 }, __dollar5));
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_19(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 14) {
    const _YYObj__immut_list_T_String_ = _bind;
    const __dollar2 = _YYObj__immut_list_T_String_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Array_String_$46$YYObj_Array_String_(moonbitlang$core$immut$list$$T$to_array$6$(__dollar2));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_20(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const _ident = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Symbol$46$YYObj__ast_Symbol(_ident);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_21(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 31) {
    const _YYObj__immut_list_T__ast_ClauseItem_ = _bind;
    const _item_list = _YYObj__immut_list_T__ast_ClauseItem_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
    if (_bind$2.$tag === 32) {
      const _YYObj__ast_PrecSymbol_ = _bind$2;
      const _prec = _YYObj__ast_PrecSymbol_._0;
      const _start_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._1;
      const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$11$(_args, _args.len - 1 | 0)._2;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ClauseWithoutAction$46$YYObj__ast_ClauseWithoutAction({ items: moonbitlang$core$immut$list$$T$to_array$83$(_item_list), prec: _prec, loc: { _0: _start_pos, _1: _end_pos - _start_pos | 0 } });
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_22(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 19) {
    const _YYObj__ast_TypeExpr = _bind;
    const _type_expr = _YYObj__ast_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_TypeExpr_$46$YYObj__immut_list_T__ast_TypeExpr_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$29$(_type_expr, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$29$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_23(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 33) {
    const _YYObj__String__Int__Array__ast_SubstItem__ = _bind;
    const _code = _YYObj__String__Int__Array__ast_SubstItem__._0;
    const _start_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._1;
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$11$(_args, _args.len - 1 | 0)._2;
    const _code$2 = _code._0;
    const _utf8_pos = _code._1;
    const _subst = _code._2;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ClauseAction$46$YYObj__ast_ClauseAction({ code: { code: _code$2, utf8_pos: _utf8_pos, subst: _subst }, loc: { _0: _start_pos, _1: _end_pos - _start_pos | 0 } });
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_24(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 34) {
    const _YYObj__ast_ClauseItem = _bind;
    const _item = _YYObj__ast_ClauseItem._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
    if (_bind$2.$tag === 31) {
      const _YYObj__immut_list_T__ast_ClauseItem_ = _bind$2;
      const _item_list = _YYObj__immut_list_T__ast_ClauseItem_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_ClauseItem_$46$YYObj__immut_list_T__ast_ClauseItem_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$31$(_item, _item_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_25(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 35) {
    const _YYObj__immut_list_T__ast_Symbol_ = _bind;
    const _symbol_list = _YYObj__immut_list_T__ast_Symbol_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Start(moonbitlang$core$immut$list$$T$to_array$6$(_symbol_list), undefined));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_26(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 17) {
    const _YYObj__ast_Rule = _bind;
    const _rule = _YYObj__ast_Rule._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Rule_$46$YYObj__immut_list_T__ast_Rule_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$27$(_rule, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$27$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_27(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 19) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar2 = _YYObj__ast_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 3)._0;
    if (_bind$2.$tag === 28) {
      const _YYObj__immut_list_T__ast_TypeExpr_ = _bind$2;
      const __dollar4 = _YYObj__immut_list_T__ast_TypeExpr_._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 6)._0;
      if (_bind$3.$tag === 19) {
        const _YYObj__ast_TypeExpr$2 = _bind$3;
        const __dollar7 = _YYObj__ast_TypeExpr$2._0;
        return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Arrow(moonbitlang$core$immut$list$$T$to_array$85$(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$29$(__dollar2, __dollar4)), __dollar7));
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_28(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 19) {
      const _YYObj__ast_TypeExpr = _bind$2;
      const __dollar3 = _YYObj__ast_TypeExpr._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__String___ast_TypeExpr___$46$YYObj__immut_list_T__String___ast_TypeExpr___(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$28$({ _0: __dollar1, _1: __dollar3 }, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$28$));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_29(_last_pos, _args) {
  const _dollar1 = undefined;
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Option_Unit_$46$YYObj_Option_Unit_(_dollar1);
}
function moonbitlang$yacc$lib$parser$$yy_action_30(_last_pos, _args) {
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj___ast_Code__Int__Int__$46$YYObj___ast_Code__Int__Int__(undefined);
}
function moonbitlang$yacc$lib$parser$$yy_action_32(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 15) {
    const _YYObj__ast_ClauseWithoutAction = _bind;
    const __dollar1 = _YYObj__ast_ClauseWithoutAction._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ClauseWithoutAction$46$YYObj__ast_ClauseWithoutAction(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_31(_last_pos, _args) {
  const _sub_action_0_result = moonbitlang$yacc$lib$parser$$yy_action_32(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$11$(_args, 0, 1));
  if (_sub_action_0_result.$tag === 15) {
    const _YYObj__ast_ClauseWithoutAction = _sub_action_0_result;
    const _clause_woa = _YYObj__ast_ClauseWithoutAction._0;
    const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
    if (_bind.$tag === 26) {
      const _YYObj__ast_ClauseAction = _bind;
      const _action = _YYObj__ast_ClauseAction._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$25$({ _0: new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$26$(_clause_woa, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$26$), _1: _action }, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$25$));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_33(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 20) {
    const _YYObj__ast_Symbol = _bind;
    const _symbol = _YYObj__ast_Symbol._0;
    const _start_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._1;
    const _end_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._2;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 30) {
      const _YYObj__immut_list_T__ast_Term_ = _bind$2;
      const __dollar3 = _YYObj__immut_list_T__ast_Term_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Term$RuleCall(_symbol, { _0: _start_pos_of_item0, _1: _end_pos_of_item0 }, moonbitlang$core$immut$list$$T$to_array$86$(__dollar3)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_34(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 19) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar2 = _YYObj__ast_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 5)._0;
    if (_bind$2.$tag === 19) {
      const _YYObj__ast_TypeExpr$2 = _bind$2;
      const __dollar6 = _YYObj__ast_TypeExpr$2._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Arrow([__dollar2], __dollar6));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_35(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 20) {
    const _YYObj__ast_Symbol = _bind;
    const _nonterminal = _YYObj__ast_Symbol._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
    if (_bind$2.$tag === 12) {
      const _YYObj_Array_String_ = _bind$2;
      const _generic_params = _YYObj_Array_String_._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 3)._0;
      if (_bind$3.$tag === 22) {
        const _YYObj__immut_list_T__String___ast_TypeExpr___ = _bind$3;
        const _param_list = _YYObj__immut_list_T__String___ast_TypeExpr___._0;
        const _bind$4 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 5)._0;
        if (_bind$4.$tag === 27) {
          const _YYObj__ast_TypeExpr_ = _bind$4;
          const _type_ = _YYObj__ast_TypeExpr_._0;
          const _bind$5 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 7)._0;
          if (_bind$5.$tag === 16) {
            const _YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__ = _bind$5;
            const _clause_list = _YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__._0;
            return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Rule$46$YYObj__ast_Rule({ inline: false, nonterminal: _nonterminal, generic_params: _generic_params, params: moonbitlang$core$immut$list$$T$to_array$87$(_param_list), type_: _type_, clauses: moonbitlang$core$immut$list$$T$to_array$84$(_clause_list) });
          } else {
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_36(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 19) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar1 = _YYObj__ast_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Option(__dollar1));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_37(_last_pos, _args) {
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Declaration_$46$YYObj__immut_list_T__ast_Declaration_($64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$32$);
}
function moonbitlang$yacc$lib$parser$$yy_action_38(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 19) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar2 = _YYObj__ast_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(__dollar2);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_39(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 29) {
    const _YYObj__ast_Term = _bind;
    const _term = _YYObj__ast_Term._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 30) {
      const _YYObj__immut_list_T__ast_Term_ = _bind$2;
      const _term_list = _YYObj__immut_list_T__ast_Term_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Term_$46$YYObj__immut_list_T__ast_Term_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$30$(_term, _term_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_40(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Constr(undefined, __dollar1, []));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_41(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 16) {
    const _YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__ = _bind;
    const __dollar2 = _YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__(__dollar2);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_42(_last_pos, _args) {
  const _sub_action_0_result = moonbitlang$yacc$lib$parser$$yy_action_11(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$11$(_args, 0, 1));
  if (_sub_action_0_result.$tag === 15) {
    const _YYObj__ast_ClauseWithoutAction = _sub_action_0_result;
    const _clause_woa = _YYObj__ast_ClauseWithoutAction._0;
    const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
    if (_bind.$tag === 26) {
      const _YYObj__ast_ClauseAction = _bind;
      const _action = _YYObj__ast_ClauseAction._0;
      const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 3)._0;
      if (_bind$2.$tag === 16) {
        const _YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__ = _bind$2;
        const _clause_list = _YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__._0;
        return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$25$({ _0: new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$26$(_clause_woa, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$26$), _1: _action }, _clause_list));
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_43(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const _type_ = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 35) {
      const _YYObj__immut_list_T__ast_Symbol_ = _bind$2;
      const _symbol_list = _YYObj__immut_list_T__ast_Symbol_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Start(moonbitlang$core$immut$list$$T$to_array$6$(_symbol_list), _type_));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_44(_last_pos, _args) {
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Option_Unit_$46$YYObj_Option_Unit_(-1);
}
function moonbitlang$yacc$lib$parser$$yy_action_45(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 39) {
    const _YYObj__String__String_ = _bind;
    const __dollar1 = _YYObj__String__String_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Constr(__dollar1._0, __dollar1._1, []));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_46(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 24) {
    const _YYObj__ast_Declaration = _bind;
    const _decl = _YYObj__ast_Declaration._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
    if (_bind$2.$tag === 38) {
      const _YYObj__immut_list_T__ast_Declaration_ = _bind$2;
      const _decl_list = _YYObj__immut_list_T__ast_Declaration_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Declaration_$46$YYObj__immut_list_T__ast_Declaration_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$32$(_decl, _decl_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_47(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const _binder = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 29) {
      const _YYObj__ast_Term = _bind$2;
      const _term = _YYObj__ast_Term._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ClauseItem$46$YYObj__ast_ClauseItem({ binder: _binder, term: _term });
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_48(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 20) {
    const _YYObj__ast_Symbol = _bind;
    const _symbol = _YYObj__ast_Symbol._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 13) {
      const _YYObj_String = _bind$2;
      const _image = _YYObj_String._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Token1(_symbol, undefined, _image));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_49(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 17) {
    const _YYObj__ast_Rule = _bind;
    const __dollar2 = _YYObj__ast_Rule._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Rule$46$YYObj__ast_Rule({ inline: true, nonterminal: __dollar2.nonterminal, generic_params: __dollar2.generic_params, params: __dollar2.params, type_: __dollar2.type_, clauses: __dollar2.clauses });
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_50(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 34) {
    const _YYObj__ast_ClauseItem = _bind;
    const _item = _YYObj__ast_ClauseItem._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_ClauseItem_$46$YYObj__immut_list_T__ast_ClauseItem_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$31$(_item, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$31$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_51(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 19) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar2 = _YYObj__ast_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 3)._0;
    if (_bind$2.$tag === 28) {
      const _YYObj__immut_list_T__ast_TypeExpr_ = _bind$2;
      const __dollar4 = _YYObj__immut_list_T__ast_TypeExpr_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Tuple(moonbitlang$core$immut$list$$T$to_array$85$(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$29$(__dollar2, __dollar4))));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_52(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 21) {
    const _YYObj__ast_PrecSymbol = _bind;
    const _symbol = _YYObj__ast_PrecSymbol._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_PrecSymbol_$46$YYObj__ast_PrecSymbol_(_symbol);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_53(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 39) {
    const _YYObj__String__String_ = _bind;
    const __dollar1 = _YYObj__String__String_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 28) {
      const _YYObj__immut_list_T__ast_TypeExpr_ = _bind$2;
      const __dollar3 = _YYObj__immut_list_T__ast_TypeExpr_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Constr(__dollar1._0, __dollar1._1, moonbitlang$core$immut$list$$T$to_array$85$(__dollar3)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_54(_last_pos, _args) {
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr_$46$YYObj__ast_TypeExpr_(undefined);
}
function moonbitlang$yacc$lib$parser$$yy_action_55(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 23) {
    const _YYObj__String__Int__Int_ = _bind;
    const _code = _YYObj__String__Int__Int_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj___ast_Code__Int__Int__$46$YYObj___ast_Code__Int__Int__(_code);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_56(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 20) {
    const _YYObj__ast_Symbol = _bind;
    const _symbol = _YYObj__ast_Symbol._0;
    const _start_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._1;
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$11$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Term$Symbol(_symbol, { _0: _start_pos, _1: _end_pos }));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_57(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 20) {
    const _YYObj__ast_Symbol = _bind;
    const _symbol = _YYObj__ast_Symbol._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
    if (_bind$2.$tag === 35) {
      const _YYObj__immut_list_T__ast_Symbol_ = _bind$2;
      const _symbol_list = _YYObj__immut_list_T__ast_Symbol_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Symbol_$46$YYObj__immut_list_T__ast_Symbol_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$(_symbol, _symbol_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_58(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 19) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar1 = _YYObj__ast_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_59(_last_pos, _args) {
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_PrecSymbol_$46$YYObj__ast_PrecSymbol_(undefined);
}
function moonbitlang$yacc$lib$parser$$yy_action_60(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const _image = _YYObj_String._0;
    const _start_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._1;
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$11$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Term$Image(_image, { _0: _start_pos, _1: _end_pos }));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_61(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 23) {
    const _YYObj__String__Int__Int_ = _bind;
    const _code = _YYObj__String__Int__Int_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj___ast_Code__Int__Int__$46$YYObj___ast_Code__Int__Int__(_code);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_62(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 20) {
    const _YYObj__ast_Symbol = _bind;
    const _symbol = _YYObj__ast_Symbol._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_Symbol_$46$YYObj__immut_list_T__ast_Symbol_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$(_symbol, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$24$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_63(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__String___ast_TypeExpr___$46$YYObj__immut_list_T__String___ast_TypeExpr___(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$28$({ _0: __dollar1, _1: undefined }, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$28$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_64(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 29) {
    const _YYObj__ast_Term = _bind;
    const _term = _YYObj__ast_Term._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ClauseItem$46$YYObj__ast_ClauseItem({ binder: undefined, term: _term });
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_65(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const _traits = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 13) {
      const _YYObj_String$2 = _bind$2;
      const _type_ = _YYObj_String$2._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Derive(_traits, _type_));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_66(_last_pos, _args) {
  const _sub_action_0_result = moonbitlang$yacc$lib$parser$$yy_action_32(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$11$(_args, 0, 1));
  if (_sub_action_0_result.$tag === 15) {
    const _YYObj__ast_ClauseWithoutAction = _sub_action_0_result;
    const _clause_woa = _YYObj__ast_ClauseWithoutAction._0;
    const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
    if (_bind.$tag === 26) {
      const _YYObj__ast_ClauseAction = _bind;
      const _action = _YYObj__ast_ClauseAction._0;
      const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 3)._0;
      if (_bind$2.$tag === 16) {
        const _YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__ = _bind$2;
        const _clause_list = _YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__._0;
        return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__$46$YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$25$({ _0: new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$26$(_clause_woa, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$26$), _1: _action }, _clause_list));
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_67(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const _type_ = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 35) {
      const _YYObj__immut_list_T__ast_Symbol_ = _bind$2;
      const _symbol_list = _YYObj__immut_list_T__ast_Symbol_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Type(moonbitlang$core$immut$list$$T$to_array$6$(_symbol_list), _type_));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_68(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_String_$46$YYObj__immut_list_T_String_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$(__dollar1, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$24$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_69(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 21) {
    const _YYObj__ast_PrecSymbol = _bind;
    const _symbol = _YYObj__ast_PrecSymbol._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
    if (_bind$2.$tag === 25) {
      const _YYObj__immut_list_T__ast_PrecSymbol_ = _bind$2;
      const _symbol_list = _YYObj__immut_list_T__ast_PrecSymbol_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_PrecSymbol_$46$YYObj__immut_list_T__ast_PrecSymbol_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$33$(_symbol, _symbol_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_70(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 28) {
      const _YYObj__immut_list_T__ast_TypeExpr_ = _bind$2;
      const __dollar3 = _YYObj__immut_list_T__ast_TypeExpr_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Constr(undefined, __dollar1, moonbitlang$core$immut$list$$T$to_array$85$(__dollar3)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_71(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 35) {
    const _YYObj__immut_list_T__ast_Symbol_ = _bind;
    const _symbol_list = _YYObj__immut_list_T__ast_Symbol_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Token(moonbitlang$core$immut$list$$T$to_array$6$(_symbol_list), undefined));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_72(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const _image = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_PrecSymbol$46$YYObj__ast_PrecSymbol(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$PrecSymbol$Image(_image));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_73(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 25) {
    const _YYObj__immut_list_T__ast_PrecSymbol_ = _bind;
    const _symbol_list = _YYObj__immut_list_T__ast_PrecSymbol_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Right(moonbitlang$core$immut$list$$T$to_array$80$(_symbol_list)));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_74(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 20) {
    const _YYObj__ast_Symbol = _bind;
    const _nonterminal = _YYObj__ast_Symbol._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
    if (_bind$2.$tag === 27) {
      const _YYObj__ast_TypeExpr_ = _bind$2;
      const _type_ = _YYObj__ast_TypeExpr_._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 3)._0;
      if (_bind$3.$tag === 16) {
        const _YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__ = _bind$3;
        const _clause_list = _YYObj__immut_list_T___immut_list_T__ast_ClauseWithoutAction____ast_ClauseAction__._0;
        return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Rule$46$YYObj__ast_Rule({ inline: false, nonterminal: _nonterminal, generic_params: [], params: [], type_: _type_, clauses: moonbitlang$core$immut$list$$T$to_array$84$(_clause_list) });
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_75(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const _type_ = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Position(_type_));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_76(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const _type_ = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 20) {
      const _YYObj__ast_Symbol = _bind$2;
      const _symbol = _YYObj__ast_Symbol._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 3)._0;
      if (_bind$3.$tag === 13) {
        const _YYObj_String$2 = _bind$3;
        const _image = _YYObj_String$2._0;
        return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Token1(_symbol, _type_, _image));
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_77(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 19) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar1 = _YYObj__ast_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_78(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 21) {
    const _YYObj__ast_PrecSymbol = _bind;
    const _symbol = _YYObj__ast_PrecSymbol._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__ast_PrecSymbol_$46$YYObj__immut_list_T__ast_PrecSymbol_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$33$(_symbol, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$33$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_79(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 38) {
    const _YYObj__immut_list_T__ast_Declaration_ = _bind;
    const _decl_list = _YYObj__immut_list_T__ast_Declaration_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 18) {
      const _YYObj__immut_list_T__ast_Rule_ = _bind$2;
      const _rule_list = _YYObj__immut_list_T__ast_Rule_._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 3)._0;
      if (_bind$3.$tag === 37) {
        const _YYObj___ast_Code__Int__Int__ = _bind$3;
        const _trailer = _YYObj___ast_Code__Int__Int__._0;
        const decls = moonbitlang$core$immut$list$$T$to_array$81$(_decl_list);
        if (_trailer === undefined) {
        } else {
          const _Some = _trailer;
          const _x = _Some;
          const _code = _x._0;
          const _utf8_pos = _x._1;
          const _subst = _x._2;
          moonbitlang$core$array$$Array$push$81$(decls, new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Trailer(_code, _utf8_pos, _subst));
        }
        return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ParserSpec$46$YYObj__ast_ParserSpec({ decls: decls, rules: moonbitlang$core$immut$list$$T$to_array$82$(_rule_list) });
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_80(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 13) {
    const _YYObj_String = _bind;
    const _type_ = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 35) {
      const _YYObj__immut_list_T__ast_Symbol_ = _bind$2;
      const _symbol_list = _YYObj__immut_list_T__ast_Symbol_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_Declaration$46$YYObj__ast_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$Declaration$Token(moonbitlang$core$immut$list$$T$to_array$6$(_symbol_list), _type_));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_81(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 32) {
    const _YYObj__ast_PrecSymbol_ = _bind;
    const _prec = _YYObj__ast_PrecSymbol_._0;
    const _start_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._1;
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$11$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__ast_ClauseWithoutAction$46$YYObj__ast_ClauseWithoutAction({ items: [], prec: _prec, loc: { _0: _start_pos, _1: _end_pos - _start_pos | 0 } });
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_input(token, _start_pos, _end_pos) {
  switch (token.$tag) {
    case 0: {
      return { _0: 0, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 1: {
      const _IDENT = token;
      const _data = _IDENT._0;
      return { _0: 1, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_String$46$YYObj_String(_data) };
    }
    case 2: {
      const _STRING = token;
      const _data$2 = _STRING._0;
      return { _0: 2, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_String$46$YYObj_String(_data$2) };
    }
    case 3: {
      const _LANGLE_CODE_RANGLE = token;
      const _data$3 = _LANGLE_CODE_RANGLE._0;
      return { _0: 3, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_String$46$YYObj_String(_data$3) };
    }
    case 4: {
      const _LBRACE_CODE_RBRACE = token;
      const _data$4 = _LBRACE_CODE_RBRACE._0;
      return { _0: 4, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__Int__Array__ast_SubstItem__$46$YYObj__String__Int__Array__ast_SubstItem__(_data$4) };
    }
    case 5: {
      const _PERCENT_LBRACE_CODE_PERCENT_RBRACE = token;
      const _data$5 = _PERCENT_LBRACE_CODE_PERCENT_RBRACE._0;
      return { _0: 5, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__Int__Int_$46$YYObj__String__Int__Int_(_data$5) };
    }
    case 6: {
      const _PERCENT_PERCENT_CODE_EOF = token;
      const _data$6 = _PERCENT_PERCENT_CODE_EOF._0;
      return { _0: 6, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__Int__Int_$46$YYObj__String__Int__Int_(_data$6) };
    }
    case 7: {
      const _PKG_AND_IDENT = token;
      const _data$7 = _PKG_AND_IDENT._0;
      return { _0: 7, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__String_$46$YYObj__String__String_(_data$7) };
    }
    case 8: {
      return { _0: 8, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 9: {
      return { _0: 9, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 10: {
      return { _0: 10, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 11: {
      return { _0: 11, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 12: {
      return { _0: 12, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 13: {
      return { _0: 13, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 14: {
      return { _0: 14, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 15: {
      return { _0: 15, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 16: {
      return { _0: 16, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 17: {
      return { _0: 17, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 18: {
      return { _0: 18, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 19: {
      return { _0: 19, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 20: {
      return { _0: 20, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 21: {
      return { _0: 21, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 22: {
      return { _0: 22, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 23: {
      return { _0: 23, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 24: {
      return { _0: 24, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 25: {
      return { _0: 25, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 26: {
      return { _0: 26, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 27: {
      return { _0: 27, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 28: {
      return { _0: 28, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    default: {
      return { _0: 29, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_1(_lookahead) {
  return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Accept;
}
function moonbitlang$yacc$lib$parser$$yy_state_13(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 32, moonbitlang$yacc$lib$parser$$yy_action_73);
}
function moonbitlang$yacc$lib$parser$$yy_state_6(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 58, moonbitlang$yacc$lib$parser$$yy_action_20);
}
function moonbitlang$yacc$lib$parser$$yy_state_7(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 57, moonbitlang$yacc$lib$parser$$yy_action_72);
}
function moonbitlang$yacc$lib$parser$$yy_state_8(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 57, moonbitlang$yacc$lib$parser$$yy_action_6);
}
function moonbitlang$yacc$lib$parser$$yy_state_10(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 56, moonbitlang$yacc$lib$parser$$yy_action_69);
}
function moonbitlang$yacc$lib$parser$$yy_state_9(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 1: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
      }
      case 2: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_7);
      }
      case 58: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_8);
      }
      case 57: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
      }
      case 56: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_10);
      }
      case 5: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 9: {
        break _L;
      }
      case 10: {
        break _L;
      }
      case 11: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 17: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 56, moonbitlang$yacc$lib$parser$$yy_action_78);
}
function moonbitlang$yacc$lib$parser$$yy_state_12(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_7);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_8);
    }
    case 57: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 56: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_15(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 32, moonbitlang$yacc$lib$parser$$yy_action_9);
}
function moonbitlang$yacc$lib$parser$$yy_state_14(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_7);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_8);
    }
    case 57: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 56: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_15);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_17(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 32, moonbitlang$yacc$lib$parser$$yy_action_75);
}
function moonbitlang$yacc$lib$parser$$yy_state_16(_lookahead) {
  if (_lookahead === 3) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_21(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 55, moonbitlang$yacc$lib$parser$$yy_action_57);
}
function moonbitlang$yacc$lib$parser$$yy_state_20(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 1: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
      }
      case 58: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_20);
      }
      case 55: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_21);
      }
      case 5: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 9: {
        break _L;
      }
      case 10: {
        break _L;
      }
      case 11: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 17: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 55, moonbitlang$yacc$lib$parser$$yy_action_62);
}
function moonbitlang$yacc$lib$parser$$yy_state_22(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 32, moonbitlang$yacc$lib$parser$$yy_action_67);
}
function moonbitlang$yacc$lib$parser$$yy_state_19(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_20);
    }
    case 55: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_22);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_18(_lookahead) {
  if (_lookahead === 3) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_19);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_4(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 32, moonbitlang$yacc$lib$parser$$yy_action_65);
}
function moonbitlang$yacc$lib$parser$$yy_state_3(_lookahead) {
  if (_lookahead === 1) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_4);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_2(_lookahead) {
  if (_lookahead === 3) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_3);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_25(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 32, moonbitlang$yacc$lib$parser$$yy_action_48);
}
function moonbitlang$yacc$lib$parser$$yy_state_24(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 1: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
      }
      case 58: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_20);
      }
      case 55: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_21);
      }
      case 2: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_25);
      }
      case 5: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 9: {
        break _L;
      }
      case 10: {
        break _L;
      }
      case 11: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 17: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 55, moonbitlang$yacc$lib$parser$$yy_action_62);
}
function moonbitlang$yacc$lib$parser$$yy_state_28(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 32, moonbitlang$yacc$lib$parser$$yy_action_76);
}
function moonbitlang$yacc$lib$parser$$yy_state_27(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 1: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
      }
      case 58: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_20);
      }
      case 55: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_21);
      }
      case 2: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_28);
      }
      case 5: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 9: {
        break _L;
      }
      case 10: {
        break _L;
      }
      case 11: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 17: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 55, moonbitlang$yacc$lib$parser$$yy_action_62);
}
function moonbitlang$yacc$lib$parser$$yy_state_29(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 32, moonbitlang$yacc$lib$parser$$yy_action_80);
}
function moonbitlang$yacc$lib$parser$$yy_state_26(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_27);
    }
    case 55: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_29);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_30(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 32, moonbitlang$yacc$lib$parser$$yy_action_71);
}
function moonbitlang$yacc$lib$parser$$yy_state_23(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_24);
    }
    case 3: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_26);
    }
    case 55: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_30);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_33(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 32, moonbitlang$yacc$lib$parser$$yy_action_43);
}
function moonbitlang$yacc$lib$parser$$yy_state_32(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_20);
    }
    case 55: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_33);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_34(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 32, moonbitlang$yacc$lib$parser$$yy_action_25);
}
function moonbitlang$yacc$lib$parser$$yy_state_31(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_20);
    }
    case 3: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_32);
    }
    case 55: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_34);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_35(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 32, moonbitlang$yacc$lib$parser$$yy_action_8);
}
function moonbitlang$yacc$lib$parser$$yy_state_37(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 31, moonbitlang$yacc$lib$parser$$yy_action_46);
}
function moonbitlang$yacc$lib$parser$$yy_state_11(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 32, moonbitlang$yacc$lib$parser$$yy_action_12);
}
function moonbitlang$yacc$lib$parser$$yy_state_5(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_7);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_8);
    }
    case 57: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 56: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_11);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_36(_lookahead) {
  switch (_lookahead) {
    case 17: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_2);
    }
    case 15: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_5);
    }
    case 14: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_12);
    }
    case 13: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_14);
    }
    case 12: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_16);
    }
    case 11: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 10: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_23);
    }
    case 9: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_31);
    }
    case 5: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_35);
    }
    case 32: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_36);
    }
    case 31: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_37);
    }
    case 8: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 31, moonbitlang$yacc$lib$parser$$yy_action_37);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_133(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 35, moonbitlang$yacc$lib$parser$$yy_action_49);
}
function moonbitlang$yacc$lib$parser$$yy_state_102(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 52, moonbitlang$yacc$lib$parser$$yy_action_47);
}
function moonbitlang$yacc$lib$parser$$yy_state_92(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 53, moonbitlang$yacc$lib$parser$$yy_action_60);
}
function moonbitlang$yacc$lib$parser$$yy_state_97(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 54, moonbitlang$yacc$lib$parser$$yy_action_39);
}
function moonbitlang$yacc$lib$parser$$yy_state_99(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 53, moonbitlang$yacc$lib$parser$$yy_action_33);
}
function moonbitlang$yacc$lib$parser$$yy_state_98(_lookahead) {
  if (_lookahead === 22) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_99);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_93(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 21: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_94);
      }
      case 1: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 16: {
        break _L;
      }
      case 22: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 27: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 53, moonbitlang$yacc$lib$parser$$yy_action_56);
}
function moonbitlang$yacc$lib$parser$$yy_state_94(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_92);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_93);
    }
    case 53: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_95);
    }
    case 54: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_98);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_95(_lookahead) {
  switch (_lookahead) {
    case 23: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_96);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 54, moonbitlang$yacc$lib$parser$$yy_action_15);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_96(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_92);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_93);
    }
    case 53: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_95);
    }
    case 54: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_97);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_101(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_92);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_93);
    }
    case 53: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_102);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_100(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 28: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_101);
      }
      case 1: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 16: {
        break _L;
      }
      case 21: {
        break _L;
      }
      case 27: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 58, moonbitlang$yacc$lib$parser$$yy_action_20);
}
function moonbitlang$yacc$lib$parser$$yy_state_103(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 52, moonbitlang$yacc$lib$parser$$yy_action_64);
}
function moonbitlang$yacc$lib$parser$$yy_state_105(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 51, moonbitlang$yacc$lib$parser$$yy_action_24);
}
function moonbitlang$yacc$lib$parser$$yy_state_104(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 2: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_92);
      }
      case 58: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_93);
      }
      case 1: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_100);
      }
      case 53: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_103);
      }
      case 52: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_104);
      }
      case 51: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_105);
      }
      case 4: {
        break _L;
      }
      case 16: {
        break _L;
      }
      case 27: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 51, moonbitlang$yacc$lib$parser$$yy_action_50);
}
function moonbitlang$yacc$lib$parser$$yy_state_107(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 50, moonbitlang$yacc$lib$parser$$yy_action_52);
}
function moonbitlang$yacc$lib$parser$$yy_state_106(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_7);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_8);
    }
    case 57: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_107);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_109(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 48, moonbitlang$yacc$lib$parser$$yy_action_21);
}
function moonbitlang$yacc$lib$parser$$yy_state_108(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 16: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_106);
      }
      case 50: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_109);
      }
      case 4: {
        break _L;
      }
      case 27: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 50, moonbitlang$yacc$lib$parser$$yy_action_59);
}
function moonbitlang$yacc$lib$parser$$yy_state_110(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 47, moonbitlang$yacc$lib$parser$$yy_action_81);
}
function moonbitlang$yacc$lib$parser$$yy_state_112(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 49, moonbitlang$yacc$lib$parser$$yy_action_23);
}
function moonbitlang$yacc$lib$parser$$yy_state_114(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 46, moonbitlang$yacc$lib$parser$$yy_action_2);
}
function moonbitlang$yacc$lib$parser$$yy_state_118(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 46, moonbitlang$yacc$lib$parser$$yy_action_66);
}
function moonbitlang$yacc$lib$parser$$yy_state_121(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 46, moonbitlang$yacc$lib$parser$$yy_action_42);
}
function moonbitlang$yacc$lib$parser$$yy_state_111(_lookahead) {
  switch (_lookahead) {
    case 4: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_112);
    }
    case 27: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_113);
    }
    case 49: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_119);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_113(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_92);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_93);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_100);
    }
    case 53: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_103);
    }
    case 52: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_104);
    }
    case 16: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_106);
    }
    case 51: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_108);
    }
    case 50: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_110);
    }
    case 48: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_111);
    }
    case 46: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_114);
    }
    case 47: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_115);
    }
    case 4: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 50, moonbitlang$yacc$lib$parser$$yy_action_59);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_115(_lookahead) {
  switch (_lookahead) {
    case 4: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_112);
    }
    case 49: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_116);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_116(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 27: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_117);
      }
      case 0: {
        break _L;
      }
      case 1: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 6: {
        break _L;
      }
      case 18: {
        break _L;
      }
      case 29: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(2, 46, moonbitlang$yacc$lib$parser$$yy_action_31);
}
function moonbitlang$yacc$lib$parser$$yy_state_117(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_92);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_93);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_100);
    }
    case 53: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_103);
    }
    case 52: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_104);
    }
    case 16: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_106);
    }
    case 51: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_108);
    }
    case 50: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_110);
    }
    case 48: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_111);
    }
    case 47: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_115);
    }
    case 46: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_118);
    }
    case 4: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 50, moonbitlang$yacc$lib$parser$$yy_action_59);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_119(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 27: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_120);
      }
      case 0: {
        break _L;
      }
      case 1: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 6: {
        break _L;
      }
      case 18: {
        break _L;
      }
      case 29: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(2, 46, moonbitlang$yacc$lib$parser$$yy_action_10);
}
function moonbitlang$yacc$lib$parser$$yy_state_120(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_92);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_93);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_100);
    }
    case 53: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_103);
    }
    case 52: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_104);
    }
    case 16: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_106);
    }
    case 51: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_108);
    }
    case 50: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_110);
    }
    case 48: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_111);
    }
    case 47: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_115);
    }
    case 46: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_121);
    }
    case 4: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 50, moonbitlang$yacc$lib$parser$$yy_action_59);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_122(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 45, moonbitlang$yacc$lib$parser$$yy_action_5);
}
function moonbitlang$yacc$lib$parser$$yy_state_124(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 45, moonbitlang$yacc$lib$parser$$yy_action_41);
}
function moonbitlang$yacc$lib$parser$$yy_state_123(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_92);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_93);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_100);
    }
    case 53: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_103);
    }
    case 52: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_104);
    }
    case 16: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_106);
    }
    case 51: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_108);
    }
    case 50: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_110);
    }
    case 48: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_111);
    }
    case 47: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_115);
    }
    case 46: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_124);
    }
    case 4: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 50, moonbitlang$yacc$lib$parser$$yy_action_59);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_126(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 59, moonbitlang$yacc$lib$parser$$yy_action_29);
}
function moonbitlang$yacc$lib$parser$$yy_state_131(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(5, 36, moonbitlang$yacc$lib$parser$$yy_action_74);
}
function moonbitlang$yacc$lib$parser$$yy_state_130(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 29: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_126);
      }
      case 59: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_131);
      }
      case 0: {
        break _L;
      }
      case 1: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 6: {
        break _L;
      }
      case 18: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 59, moonbitlang$yacc$lib$parser$$yy_action_44);
}
function moonbitlang$yacc$lib$parser$$yy_state_129(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_92);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_93);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_100);
    }
    case 53: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_103);
    }
    case 52: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_104);
    }
    case 16: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_106);
    }
    case 51: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_108);
    }
    case 50: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_110);
    }
    case 48: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_111);
    }
    case 47: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_115);
    }
    case 46: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_122);
    }
    case 27: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_123);
    }
    case 45: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_130);
    }
    case 4: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 50, moonbitlang$yacc$lib$parser$$yy_action_59);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_128(_lookahead) {
  if (_lookahead === 26) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_129);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_44(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 40, moonbitlang$yacc$lib$parser$$yy_action_1);
}
function moonbitlang$yacc$lib$parser$$yy_state_42(_lookahead) {
  switch (_lookahead) {
    case 23: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_43);
    }
    case 20: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 40, moonbitlang$yacc$lib$parser$$yy_action_68);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_43(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_42);
    }
    case 40: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_44);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_46(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 39, moonbitlang$yacc$lib$parser$$yy_action_19);
}
function moonbitlang$yacc$lib$parser$$yy_state_45(_lookahead) {
  if (_lookahead === 20) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_41(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_42);
    }
    case 40: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_45);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_52(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 44, moonbitlang$yacc$lib$parser$$yy_action_14);
}
function moonbitlang$yacc$lib$parser$$yy_state_56(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 43, moonbitlang$yacc$lib$parser$$yy_action_70);
}
function moonbitlang$yacc$lib$parser$$yy_state_55(_lookahead) {
  if (_lookahead === 20) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_56);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_57(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 42, moonbitlang$yacc$lib$parser$$yy_action_58);
}
function moonbitlang$yacc$lib$parser$$yy_state_64(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(7, 41, moonbitlang$yacc$lib$parser$$yy_action_27);
}
function moonbitlang$yacc$lib$parser$$yy_state_66(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 42, moonbitlang$yacc$lib$parser$$yy_action_36);
}
function moonbitlang$yacc$lib$parser$$yy_state_65(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 25: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_66);
      }
      case 20: {
        break _L;
      }
      case 22: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 26: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 41, moonbitlang$yacc$lib$parser$$yy_action_77);
}
function moonbitlang$yacc$lib$parser$$yy_state_69(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(6, 41, moonbitlang$yacc$lib$parser$$yy_action_34);
}
function moonbitlang$yacc$lib$parser$$yy_state_72(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(5, 41, moonbitlang$yacc$lib$parser$$yy_action_17);
}
function moonbitlang$yacc$lib$parser$$yy_state_75(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 41, moonbitlang$yacc$lib$parser$$yy_action_4);
}
function moonbitlang$yacc$lib$parser$$yy_state_77(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 43, moonbitlang$yacc$lib$parser$$yy_action_53);
}
function moonbitlang$yacc$lib$parser$$yy_state_76(_lookahead) {
  if (_lookahead === 20) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_77);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_48(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 19: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_49);
      }
      case 20: {
        break _L;
      }
      case 22: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 25: {
        break _L;
      }
      case 26: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 43, moonbitlang$yacc$lib$parser$$yy_action_45);
}
function moonbitlang$yacc$lib$parser$$yy_state_49(_lookahead) {
  switch (_lookahead) {
    case 7: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_48);
    }
    case 41: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_50);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_53);
    }
    case 43: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_57);
    }
    case 21: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_58);
    }
    case 42: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_65);
    }
    case 44: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_76);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_50(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 23: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_51);
      }
      case 20: {
        break _L;
      }
      case 22: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 44, moonbitlang$yacc$lib$parser$$yy_action_22);
}
function moonbitlang$yacc$lib$parser$$yy_state_51(_lookahead) {
  switch (_lookahead) {
    case 7: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_48);
    }
    case 41: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_50);
    }
    case 44: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_52);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_53);
    }
    case 43: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_57);
    }
    case 21: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_58);
    }
    case 42: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_65);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_53(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 19: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_54);
      }
      case 20: {
        break _L;
      }
      case 22: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 25: {
        break _L;
      }
      case 26: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 43, moonbitlang$yacc$lib$parser$$yy_action_40);
}
function moonbitlang$yacc$lib$parser$$yy_state_54(_lookahead) {
  switch (_lookahead) {
    case 7: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_48);
    }
    case 41: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_50);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_53);
    }
    case 44: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_55);
    }
    case 43: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_57);
    }
    case 21: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_58);
    }
    case 42: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_65);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_58(_lookahead) {
  switch (_lookahead) {
    case 7: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_48);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_53);
    }
    case 43: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_57);
    }
    case 21: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_58);
    }
    case 41: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_59);
    }
    case 42: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_65);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_73);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_59(_lookahead) {
  switch (_lookahead) {
    case 23: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_60);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_70);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_60(_lookahead) {
  switch (_lookahead) {
    case 7: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_48);
    }
    case 41: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_50);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_53);
    }
    case 43: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_57);
    }
    case 21: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_58);
    }
    case 44: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_61);
    }
    case 42: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_65);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_67);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_61(_lookahead) {
  if (_lookahead === 22) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_62);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_62(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 24: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_63);
      }
      case 20: {
        break _L;
      }
      case 22: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 25: {
        break _L;
      }
      case 26: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(5, 43, moonbitlang$yacc$lib$parser$$yy_action_51);
}
function moonbitlang$yacc$lib$parser$$yy_state_63(_lookahead) {
  switch (_lookahead) {
    case 7: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_48);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_53);
    }
    case 43: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_57);
    }
    case 21: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_58);
    }
    case 41: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_64);
    }
    case 42: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_65);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_67(_lookahead) {
  if (_lookahead === 24) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_68);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_68(_lookahead) {
  switch (_lookahead) {
    case 7: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_48);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_53);
    }
    case 43: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_57);
    }
    case 21: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_58);
    }
    case 42: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_65);
    }
    case 41: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_69);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_70(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 24: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_71);
      }
      case 20: {
        break _L;
      }
      case 22: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 25: {
        break _L;
      }
      case 26: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(3, 43, moonbitlang$yacc$lib$parser$$yy_action_38);
}
function moonbitlang$yacc$lib$parser$$yy_state_71(_lookahead) {
  switch (_lookahead) {
    case 7: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_48);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_53);
    }
    case 43: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_57);
    }
    case 21: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_58);
    }
    case 42: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_65);
    }
    case 41: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_72);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_73(_lookahead) {
  if (_lookahead === 24) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_74);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_74(_lookahead) {
  switch (_lookahead) {
    case 7: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_48);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_53);
    }
    case 43: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_57);
    }
    case 21: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_58);
    }
    case 42: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_65);
    }
    case 41: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_75);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_78(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 37, moonbitlang$yacc$lib$parser$$yy_action_13);
}
function moonbitlang$yacc$lib$parser$$yy_state_47(_lookahead) {
  switch (_lookahead) {
    case 7: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_48);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_53);
    }
    case 43: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_57);
    }
    case 21: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_58);
    }
    case 42: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_65);
    }
    case 41: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_78);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_83(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 38, moonbitlang$yacc$lib$parser$$yy_action_7);
}
function moonbitlang$yacc$lib$parser$$yy_state_87(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(5, 38, moonbitlang$yacc$lib$parser$$yy_action_18);
}
function moonbitlang$yacc$lib$parser$$yy_state_81(_lookahead) {
  switch (_lookahead) {
    case 23: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_82);
    }
    case 26: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_84);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 38, moonbitlang$yacc$lib$parser$$yy_action_63);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_82(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_81);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_83);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_84(_lookahead) {
  switch (_lookahead) {
    case 7: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_48);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_53);
    }
    case 43: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_57);
    }
    case 21: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_58);
    }
    case 42: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_65);
    }
    case 41: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_85);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_85(_lookahead) {
  switch (_lookahead) {
    case 23: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_86);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(3, 38, moonbitlang$yacc$lib$parser$$yy_action_28);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_86(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_81);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_87);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_127(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(9, 36, moonbitlang$yacc$lib$parser$$yy_action_35);
}
function moonbitlang$yacc$lib$parser$$yy_state_125(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 29: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_126);
      }
      case 59: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_127);
      }
      case 0: {
        break _L;
      }
      case 1: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 6: {
        break _L;
      }
      case 18: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 59, moonbitlang$yacc$lib$parser$$yy_action_44);
}
function moonbitlang$yacc$lib$parser$$yy_state_91(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_92);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_93);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_100);
    }
    case 53: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_103);
    }
    case 52: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_104);
    }
    case 16: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_106);
    }
    case 51: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_108);
    }
    case 50: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_110);
    }
    case 48: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_111);
    }
    case 47: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_115);
    }
    case 46: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_122);
    }
    case 27: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_123);
    }
    case 45: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_125);
    }
    case 4: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 50, moonbitlang$yacc$lib$parser$$yy_action_59);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_90(_lookahead) {
  if (_lookahead === 26) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_91);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_89(_lookahead) {
  switch (_lookahead) {
    case 24: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_47);
    }
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_90);
    }
    case 26: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 37, moonbitlang$yacc$lib$parser$$yy_action_54);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_88(_lookahead) {
  if (_lookahead === 22) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_89);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_80(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_81);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_88);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_79(_lookahead) {
  if (_lookahead === 21) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_80);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_40(_lookahead) {
  switch (_lookahead) {
    case 19: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_41);
    }
    case 24: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_47);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_79);
    }
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_128);
    }
    case 26: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 37, moonbitlang$yacc$lib$parser$$yy_action_54);
    }
    case 21: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 39, moonbitlang$yacc$lib$parser$$yy_action_0);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_132(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_40);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_133);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_134(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 35, moonbitlang$yacc$lib$parser$$yy_action_16);
}
function moonbitlang$yacc$lib$parser$$yy_state_136(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 33, moonbitlang$yacc$lib$parser$$yy_action_3);
}
function moonbitlang$yacc$lib$parser$$yy_state_135(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 1: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
      }
      case 58: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_40);
      }
      case 18: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_132);
      }
      case 36: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_134);
      }
      case 35: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_135);
      }
      case 33: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_136);
      }
      case 0: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 6: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 33, moonbitlang$yacc$lib$parser$$yy_action_26);
}
function moonbitlang$yacc$lib$parser$$yy_state_138(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 34, moonbitlang$yacc$lib$parser$$yy_action_61);
}
function moonbitlang$yacc$lib$parser$$yy_state_139(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 34, moonbitlang$yacc$lib$parser$$yy_action_55);
}
function moonbitlang$yacc$lib$parser$$yy_state_141(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(5, 30, moonbitlang$yacc$lib$parser$$yy_action_79);
}
function moonbitlang$yacc$lib$parser$$yy_state_140(_lookahead) {
  if (_lookahead === 0) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_141);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_137(_lookahead) {
  switch (_lookahead) {
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_138);
    }
    case 5: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_139);
    }
    case 34: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_140);
    }
    case 0: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 34, moonbitlang$yacc$lib$parser$$yy_action_30);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_39(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 58: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_40);
    }
    case 18: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_132);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_134);
    }
    case 35: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_135);
    }
    case 33: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_137);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_38(_lookahead) {
  if (_lookahead === 8) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_39);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_0(_lookahead) {
  switch (_lookahead) {
    case 30: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_1);
    }
    case 17: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_2);
    }
    case 15: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_5);
    }
    case 14: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_12);
    }
    case 13: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_14);
    }
    case 12: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_16);
    }
    case 11: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 10: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_23);
    }
    case 9: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_31);
    }
    case 5: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_35);
    }
    case 32: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_36);
    }
    case 31: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_38);
    }
    case 8: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 31, moonbitlang$yacc$lib$parser$$yy_action_37);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$error(stack, token, loc) {
  const expected = [];
  const _arr = [{ _0: 0, _1: 0 }, { _0: 1, _1: 1 }, { _0: 2, _1: 2 }, { _0: 3, _1: 3 }, { _0: 4, _1: 4 }, { _0: 5, _1: 5 }, { _0: 6, _1: 6 }, { _0: 7, _1: 7 }, { _0: 8, _1: 8 }, { _0: 9, _1: 9 }, { _0: 10, _1: 10 }, { _0: 11, _1: 11 }, { _0: 12, _1: 12 }, { _0: 13, _1: 13 }, { _0: 14, _1: 14 }, { _0: 15, _1: 15 }, { _0: 16, _1: 16 }, { _0: 17, _1: 17 }, { _0: 18, _1: 18 }, { _0: 19, _1: 19 }, { _0: 20, _1: 20 }, { _0: 21, _1: 21 }, { _0: 22, _1: 22 }, { _0: 23, _1: 23 }, { _0: 24, _1: 24 }, { _0: 25, _1: 25 }, { _0: 26, _1: 26 }, { _0: 27, _1: 27 }, { _0: 28, _1: 28 }, { _0: 29, _1: 29 }];
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const term = _arr[_i];
      const kind = term._1;
      const symbol = term._0;
      let stack$2;
      _L: {
        stack$2 = stack;
        break _L;
      }
      let _tmp$2 = stack$2;
      _L$2: while (true) {
        const stack$3 = _tmp$2;
        if (stack$3.$tag === 0) {
          break;
        } else {
          const _Cons = stack$3;
          const _state = _Cons._0;
          let count;
          let symbol$2;
          _L$3: {
            _L$4: {
              const _bind = _state(symbol);
              switch (_bind.$tag) {
                case 0: {
                  break _L$4;
                }
                case 1: {
                  break _L$4;
                }
                case 2: {
                  const _Reduce = _bind;
                  const _count = _Reduce._0;
                  const _symbol = _Reduce._1;
                  count = _count;
                  symbol$2 = _symbol;
                  break _L$3;
                }
                case 3: {
                  const _ReduceNoLookahead = _bind;
                  const _count$2 = _ReduceNoLookahead._0;
                  const _symbol$2 = _ReduceNoLookahead._1;
                  count = _count$2;
                  symbol$2 = _symbol$2;
                  break _L$3;
                }
                default: {
                  break _L$2;
                }
              }
            }
            moonbitlang$core$array$$Array$push$182$(expected, kind);
            break;
          }
          let stack$4;
          let count$2;
          let symbol$3;
          _L$4: {
            stack$4 = stack$3;
            count$2 = count;
            symbol$3 = symbol$2;
            break _L$4;
          }
          let _tmp$3 = stack$4;
          let _tmp$4 = count$2;
          let _tmp$5 = symbol$3;
          _L$5: while (true) {
            const stack$5 = _tmp$3;
            const count$3 = _tmp$4;
            const symbol$4 = _tmp$5;
            const stack$6 = moonbitlang$core$immut$list$$T$drop$10$(stack$5, count$3);
            if (stack$6.$tag === 1) {
              const _Cons$2 = stack$6;
              const _state$2 = _Cons$2._0;
              let count$4;
              let symbol$5;
              _L$6: {
                const _bind = _state$2(symbol$4);
                switch (_bind.$tag) {
                  case 1: {
                    const _Shift = _bind;
                    const _state$3 = _Shift._0;
                    _tmp$2 = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$11$(_state$3, stack$6);
                    continue _L$2;
                  }
                  case 2: {
                    const _Reduce = _bind;
                    const _count = _Reduce._0;
                    const _symbol = _Reduce._1;
                    count$4 = _count;
                    symbol$5 = _symbol;
                    break _L$6;
                  }
                  case 3: {
                    const _ReduceNoLookahead = _bind;
                    const _count$2 = _ReduceNoLookahead._0;
                    const _symbol$2 = _ReduceNoLookahead._1;
                    count$4 = _count$2;
                    symbol$5 = _symbol$2;
                    break _L$6;
                  }
                  default: {
                    $panic();
                    break _L$2;
                  }
                }
              }
              _tmp$3 = stack$6;
              _tmp$4 = count$4;
              _tmp$5 = symbol$5;
              continue;
            } else {
              $panic();
              break _L$2;
            }
          }
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return new Result$Err$34$(new Error$moonbitlang$47$yacc$47$lib$47$parser$46$ParseError$46$UnexpectedToken(token, loc, expected));
}
function moonbitlang$yacc$lib$parser$$yy_parse$13$(read_token, start_pos, start, return_) {
  const state_stack = { val: new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$11$(start, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$11$) };
  const data_stack = [];
  const last_pos = { val: start_pos };
  const state = { val: start };
  let lookahead = undefined;
  let last_shifted_state_stack = state_stack.val;
  while (true) {
    let decision;
    const _func = state.val;
    const _bind = _func(60);
    switch (_bind.$tag) {
      case 3: {
        decision = _bind;
        break;
      }
      case 0: {
        decision = _bind;
        break;
      }
      default: {
        const _bind$2 = lookahead;
        if (_bind$2 === undefined) {
          const _bind$3 = read_token();
          const _token = _bind$3._0;
          const _start_pos = _bind$3._1;
          const _end_pos = _bind$3._2;
          const _bind$4 = moonbitlang$yacc$lib$parser$$yy_input(_token, _start_pos, _end_pos);
          const _symbol = _bind$4._0;
          const _data = _bind$4._1;
          lookahead = { _0: _symbol, _1: { _0: _data, _1: _start_pos, _2: _end_pos }, _2: _token };
          const _func$2 = state.val;
          decision = _func$2(_symbol);
        } else {
          const _Some = _bind$2;
          const _la = _Some;
          const _func$2 = state.val;
          decision = _func$2(_la._0);
        }
      }
    }
    let action;
    let count;
    let symbol;
    _L: {
      _L$2: {
        switch (decision.$tag) {
          case 0: {
            return new Result$Ok$35$(return_(moonbitlang$core$array$$Array$unsafe_pop$11$(data_stack)._0));
          }
          case 1: {
            const _Shift = decision;
            const _next_state = _Shift._0;
            const _bind$3 = lookahead;
            if (_bind$3 === undefined) {
              $panic();
            } else {
              const _Some = _bind$3;
              const _la = _Some;
              moonbitlang$core$array$$Array$push$11$(data_stack, _la._1);
              state_stack.val = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$11$(_next_state, state_stack.val);
              last_shifted_state_stack = state_stack.val;
              state.val = _next_state;
              last_pos.val = _la._1._2;
              lookahead = undefined;
            }
            break;
          }
          case 2: {
            const _Reduce = decision;
            const _count = _Reduce._0;
            const _symbol = _Reduce._1;
            const _action = _Reduce._2;
            action = _action;
            count = _count;
            symbol = _symbol;
            break _L$2;
          }
          case 3: {
            const _ReduceNoLookahead = decision;
            const _count$2 = _ReduceNoLookahead._0;
            const _symbol$2 = _ReduceNoLookahead._1;
            const _action$2 = _ReduceNoLookahead._2;
            action = _action$2;
            count = _count$2;
            symbol = _symbol$2;
            break _L$2;
          }
          default: {
            const _bind$4 = moonbitlang$core$option$$Option$unwrap$157$(lookahead);
            const _x = _bind$4._1;
            const _start_pos = _x._1;
            const _end_pos = _x._2;
            const _token = _bind$4._2;
            const _bind$5 = moonbitlang$yacc$lib$parser$$error(last_shifted_state_stack, _token, { _0: _start_pos, _1: _end_pos });
            if (_bind$5.$tag === 1) {
              const _ok = _bind$5;
              _ok._0;
            } else {
              return _bind$5;
            }
          }
        }
        break _L;
      }
      let _tmp = count;
      let _tmp$2 = symbol;
      let _tmp$3 = action;
      _L$3: while (true) {
        const args = moonbitlang$core$array$$Array$op_as_view$11$(data_stack, data_stack.length - count | 0, undefined);
        const data = action(last_pos.val, args);
        let start_pos$2;
        let end_pos;
        _L$4: {
          if (args.len === 0) {
            const _tmp$4 = last_pos.val;
            const _tmp$5 = last_pos.val;
            start_pos$2 = _tmp$4;
            end_pos = _tmp$5;
            break _L$4;
          } else {
            const _tmp$4 = moonbitlang$core$array$$ArrayView$op_get$11$(args, 0)._1;
            const _tmp$5 = moonbitlang$core$array$$ArrayView$op_get$11$(args, args.len - 1 | 0)._2;
            start_pos$2 = _tmp$4;
            end_pos = _tmp$5;
            break _L$4;
          }
        }
        let _tmp$4 = 0;
        while (true) {
          const i = _tmp$4;
          if (i < count) {
            moonbitlang$core$array$$Array$unsafe_pop$11$(data_stack);
            state_stack.val = moonbitlang$core$immut$list$$T$tail$10$(state_stack.val);
            _tmp$4 = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        state.val = moonbitlang$core$immut$list$$T$unsafe_head$10$(state_stack.val);
        moonbitlang$core$array$$Array$push$11$(data_stack, { _0: data, _1: start_pos$2, _2: end_pos });
        let action$2;
        let count$2;
        let symbol$2;
        _L$5: {
          const _func$2 = state.val;
          const _bind$3 = _func$2(symbol);
          switch (_bind$3.$tag) {
            case 0: {
              return new Result$Ok$35$(return_(moonbitlang$core$array$$Array$unsafe_pop$11$(data_stack)._0));
            }
            case 1: {
              const _Shift = _bind$3;
              const _next_state = _Shift._0;
              state_stack.val = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$11$(_next_state, state_stack.val);
              state.val = _next_state;
              break _L$3;
            }
            case 2: {
              const _Reduce = _bind$3;
              const _count = _Reduce._0;
              const _symbol = _Reduce._1;
              const _action = _Reduce._2;
              action$2 = _action;
              count$2 = _count;
              symbol$2 = _symbol;
              break _L$5;
            }
            case 3: {
              const _ReduceNoLookahead = _bind$3;
              const _count$2 = _ReduceNoLookahead._0;
              const _symbol$2 = _ReduceNoLookahead._1;
              const _action$2 = _ReduceNoLookahead._2;
              action$2 = _action$2;
              count$2 = _count$2;
              symbol$2 = _symbol$2;
              break _L$5;
            }
            default: {
              $panic();
              break _L$3;
            }
          }
        }
        _tmp = count$2;
        _tmp$2 = symbol$2;
        _tmp$3 = action$2;
        continue;
      }
    }
    continue;
  }
}
function moonbitlang$yacc$lib$parser$$spec(read_token, start_pos) {
  return moonbitlang$yacc$lib$parser$$yy_parse$13$(read_token, start_pos, moonbitlang$yacc$lib$parser$$yy_state_0, (_param4) => {
    if (_param4.$tag === 40) {
      const _YYObj__ast_ParserSpec = _param4;
      const _result = _YYObj__ast_ParserSpec._0;
      return _result;
    } else {
      return $panic();
    }
  });
}
function moonbitlang$core$builtin$$Hash$hash_combine$55$(_x_3, _x_4) {
  moonbitlang$core$builtin$$Hash$hash_combine$8$(_x_3, _x_4);
}
function moonbitlang$yacc$lib$util$stamp$$new() {
  const stamp = moonbitlang$yacc$lib$util$stamp$$next_stamp.val;
  moonbitlang$yacc$lib$util$stamp$$next_stamp.val = moonbitlang$yacc$lib$util$stamp$$next_stamp.val + 1 | 0;
  return stamp;
}
function moonbitlang$core$builtin$$Eq$op_equal$204$(_x_135, _x_136) {
  return moonbitlang$core$builtin$$Eq$op_equal$199$(_x_135, _x_136);
}
function moonbitlang$yacc$lib$util$small_int_set$$singleton(key) {
  const word_index = key >> 5;
  const result = moonbitlang$core$array$$Array$make$8$(2, 0);
  moonbitlang$core$array$$Array$op_set$8$(result, 0, 1 << word_index);
  moonbitlang$core$array$$Array$op_set$8$(result, 1, 1 << (key & 31));
  return result;
}
function moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$is_singleton(self, key) {
  return self.length === 2 && (moonbitlang$core$array$$Array$op_get$8$(self, 0) === 1 << (key >> 5) && moonbitlang$core$array$$Array$op_get$8$(self, 1) === 1 << (key & 31));
}
function moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$iter(self) {
  const _p = (yield_) => {
    let i = 0;
    let bitmask = moonbitlang$core$array$$Array$op_get$8$(self, 0);
    while (true) {
      if (bitmask === 0) {
        break;
      }
      const word_index = $i32_ctz(bitmask);
      let word = moonbitlang$core$array$$Array$op_get$8$(self, 1 + i | 0);
      while (true) {
        if (word === 0) {
          break;
        }
        const bit = $i32_ctz(word);
        const _bind = yield_((Math.imul(word_index, 32) | 0) + bit | 0);
        if (_bind === 0) {
          return 0;
        }
        word = word & ~(1 << bit);
        continue;
      }
      bitmask = bitmask & ~(1 << word_index);
      i = i + 1 | 0;
      continue;
    }
    return 1;
  };
  return _p;
}
function moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$union(self, other) {
  const bitmask1 = moonbitlang$core$array$$Array$op_get$8$(self, 0);
  if (bitmask1 === 0) {
    return other;
  }
  const bitmask2 = moonbitlang$core$array$$Array$op_get$8$(other, 0);
  if (bitmask2 === 0) {
    return self;
  }
  const bitmask = bitmask1 | bitmask2;
  if (bitmask === bitmask1) {
    if (self === other) {
      return self;
    }
    const result = moonbitlang$core$array$$Array$copy$8$(self);
    let bitmask2$2 = bitmask2;
    let j = 1;
    while (true) {
      const jb = $i32_ctz(bitmask2$2);
      if (jb === 32) {
        break;
      }
      const i = 1 + $i32_popcnt(bitmask1 & ((1 << jb) - 1 | 0)) | 0;
      moonbitlang$core$array$$Array$op_set$8$(result, i, moonbitlang$core$array$$Array$op_get$8$(result, i) | moonbitlang$core$array$$Array$op_get$8$(other, j));
      j = j + 1 | 0;
      bitmask2$2 = bitmask2$2 & (bitmask2$2 - 1 | 0);
      continue;
    }
    return result;
  } else {
    if (bitmask === bitmask2) {
      if (self === other) {
        return self;
      }
      const result = moonbitlang$core$array$$Array$copy$8$(other);
      let bitmask1$2 = bitmask1;
      let i = 1;
      while (true) {
        const ib = $i32_ctz(bitmask1$2);
        if (ib === 32) {
          break;
        }
        const j = 1 + $i32_popcnt(bitmask2 & ((1 << ib) - 1 | 0)) | 0;
        moonbitlang$core$array$$Array$op_set$8$(result, j, moonbitlang$core$array$$Array$op_get$8$(result, j) | moonbitlang$core$array$$Array$op_get$8$(self, i));
        i = i + 1 | 0;
        bitmask1$2 = bitmask1$2 & (bitmask1$2 - 1 | 0);
        continue;
      }
      return result;
    } else {
      const result = moonbitlang$core$array$$Array$make$8$(1 + $i32_popcnt(bitmask) | 0, 0);
      moonbitlang$core$array$$Array$op_set$8$(result, 0, bitmask);
      let i = 1;
      let j = 1;
      let k = 1;
      let bitmask1$2 = bitmask1;
      let bitmask2$2 = bitmask2;
      while (true) {
        const ib = $i32_ctz(bitmask1$2);
        const jb = $i32_ctz(bitmask2$2);
        if (ib < jb) {
          moonbitlang$core$array$$Array$op_set$8$(result, k, moonbitlang$core$array$$Array$op_get$8$(self, i));
          i = i + 1 | 0;
          bitmask1$2 = bitmask1$2 & (bitmask1$2 - 1 | 0);
        } else {
          if (ib > jb) {
            moonbitlang$core$array$$Array$op_set$8$(result, k, moonbitlang$core$array$$Array$op_get$8$(other, j));
            j = j + 1 | 0;
            bitmask2$2 = bitmask2$2 & (bitmask2$2 - 1 | 0);
          } else {
            if (ib === 32) {
              break;
            }
            moonbitlang$core$array$$Array$op_set$8$(result, k, moonbitlang$core$array$$Array$op_get$8$(self, i) | moonbitlang$core$array$$Array$op_get$8$(other, j));
            i = i + 1 | 0;
            j = j + 1 | 0;
            bitmask1$2 = bitmask1$2 & (bitmask1$2 - 1 | 0);
            bitmask2$2 = bitmask2$2 & (bitmask2$2 - 1 | 0);
          }
        }
        k = k + 1 | 0;
        continue;
      }
      return result;
    }
  }
}
function moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$disjoint(self, other) {
  const bitmask1 = moonbitlang$core$array$$Array$op_get$8$(self, 0);
  const bitmask2 = moonbitlang$core$array$$Array$op_get$8$(other, 0);
  if ((bitmask1 & bitmask2) !== 0) {
    return false;
  }
  let i = 1;
  let j = 1;
  let bitmask1$2 = bitmask1;
  let bitmask2$2 = bitmask2;
  while (true) {
    const ib = $i32_ctz(bitmask1$2);
    const jb = $i32_ctz(bitmask2$2);
    if (ib < jb) {
      i = i + 1 | 0;
      bitmask1$2 = bitmask1$2 & (bitmask1$2 - 1 | 0);
    } else {
      if (ib > jb) {
        j = j + 1 | 0;
        bitmask2$2 = bitmask2$2 & (bitmask2$2 - 1 | 0);
      } else {
        if (ib === 32) {
          break;
        }
        if ((moonbitlang$core$array$$Array$op_get$8$(self, i) & moonbitlang$core$array$$Array$op_get$8$(other, j)) !== 0) {
          return false;
        }
        i = i + 1 | 0;
        j = j + 1 | 0;
        bitmask1$2 = bitmask1$2 & (bitmask1$2 - 1 | 0);
        bitmask2$2 = bitmask2$2 & (bitmask2$2 - 1 | 0);
      }
    }
    continue;
  }
  return true;
}
function moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$subset(self, other) {
  const bitmask1 = moonbitlang$core$array$$Array$op_get$8$(self, 0);
  const bitmask2 = moonbitlang$core$array$$Array$op_get$8$(other, 0);
  if ((bitmask1 & bitmask2) !== bitmask1) {
    return false;
  }
  let i = 1;
  let j = 1;
  let bitmask1$2 = bitmask1;
  let bitmask2$2 = bitmask2;
  while (true) {
    const ib = $i32_ctz(bitmask1$2);
    const jb = $i32_ctz(bitmask2$2);
    if (ib < jb) {
      i = i + 1 | 0;
      bitmask1$2 = bitmask1$2 & (bitmask1$2 - 1 | 0);
    } else {
      if (ib > jb) {
        j = j + 1 | 0;
        bitmask2$2 = bitmask2$2 & (bitmask2$2 - 1 | 0);
      } else {
        if (ib === 32) {
          break;
        }
        if ((moonbitlang$core$array$$Array$op_get$8$(self, i) & moonbitlang$core$array$$Array$op_get$8$(other, j)) !== moonbitlang$core$array$$Array$op_get$8$(self, i)) {
          return false;
        }
        i = i + 1 | 0;
        j = j + 1 | 0;
        bitmask1$2 = bitmask1$2 & (bitmask1$2 - 1 | 0);
        bitmask2$2 = bitmask2$2 & (bitmask2$2 - 1 | 0);
      }
    }
    continue;
  }
  return true;
}
function moonbitlang$yacc$lib$util$hashmap2$$new$205$(capacity) {
  const bucket = $make_array_len_and_init(capacity, undefined);
  return { bucket: bucket, entry: undefined, bitmask: capacity - 1 | 0, size: 0 };
}
function moonbitlang$yacc$lib$util$hashmap2$$new$206$(capacity) {
  const bucket = $make_array_len_and_init(capacity, undefined);
  return { bucket: bucket, entry: undefined, bitmask: capacity - 1 | 0, size: 0 };
}
function moonbitlang$yacc$lib$util$hashmap2$$new$207$(capacity) {
  const bucket = $make_array_len_and_init(capacity, undefined);
  return { bucket: bucket, entry: undefined, bitmask: capacity - 1 | 0, size: 0 };
}
function moonbitlang$yacc$lib$util$hashmap2$$new$208$(capacity) {
  const bucket = $make_array_len_and_init(capacity, undefined);
  return { bucket: bucket, entry: undefined, bitmask: capacity - 1 | 0, size: 0 };
}
function moonbitlang$yacc$lib$util$hashmap2$$new$209$(capacity) {
  const bucket = $make_array_len_and_init(capacity, undefined);
  return { bucket: bucket, entry: undefined, bitmask: capacity - 1 | 0, size: 0 };
}
function moonbitlang$yacc$lib$util$hashmap2$$T$iter$207$(self) {
  const _p = (yield_) => {
    let _tmp = self.entry;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _entry = _Some;
        const _bind = yield_({ _0: _entry.key, _1: _entry.value });
        if (_bind === 0) {
          return 0;
        } else {
          _tmp = _entry.prev;
          continue;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$yacc$lib$util$hashmap2$$T$iter$208$(self) {
  const _p = (yield_) => {
    let _tmp = self.entry;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _entry = _Some;
        const _bind = yield_({ _0: _entry.key, _1: _entry.value });
        if (_bind === 0) {
          return 0;
        } else {
          _tmp = _entry.prev;
          continue;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$yacc$lib$util$hashmap2$$T$iter2$206$(self) {
  const _p = (yield_) => {
    let _tmp = self.entry;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _entry = _Some;
        const _bind = yield_(_entry.key, _entry.value);
        if (_bind === 0) {
          return 0;
        } else {
          _tmp = _entry.prev;
          continue;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$205$(self, key, hash) {
  const bucket = self.bucket;
  const bitmask = self.bitmask;
  const ideal_index = hash & bitmask;
  let _tmp = ideal_index;
  while (true) {
    const index = _tmp;
    $bound_check(bucket, index);
    const _bind = bucket[index];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$210$(_entry.key, key)) {
        return _entry;
      }
      if ((index - ideal_index | 0) > _entry.psl) {
        return undefined;
      }
      _tmp = index + 1 & bitmask;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$208$(self, key, hash) {
  const bucket = self.bucket;
  const bitmask = self.bitmask;
  const ideal_index = hash & bitmask;
  let _tmp = ideal_index;
  while (true) {
    const index = _tmp;
    $bound_check(bucket, index);
    const _bind = bucket[index];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$93$(_entry.key, key)) {
        return _entry;
      }
      if ((index - ideal_index | 0) > _entry.psl) {
        return undefined;
      }
      _tmp = index + 1 & bitmask;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$207$(self, key, hash) {
  const bucket = self.bucket;
  const bitmask = self.bitmask;
  const ideal_index = hash & bitmask;
  let _tmp = ideal_index;
  while (true) {
    const index = _tmp;
    $bound_check(bucket, index);
    const _bind = bucket[index];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$93$(_entry.key, key)) {
        return _entry;
      }
      if ((index - ideal_index | 0) > _entry.psl) {
        return undefined;
      }
      _tmp = index + 1 & bitmask;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$206$(self, key, hash) {
  const bucket = self.bucket;
  const bitmask = self.bitmask;
  const ideal_index = hash & bitmask;
  let _tmp = ideal_index;
  while (true) {
    const index = _tmp;
    $bound_check(bucket, index);
    const _bind = bucket[index];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$142$(_entry.key, key)) {
        return _entry;
      }
      if ((index - ideal_index | 0) > _entry.psl) {
        return undefined;
      }
      _tmp = index + 1 & bitmask;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$209$(self, key, hash) {
  const bucket = self.bucket;
  const bitmask = self.bitmask;
  const ideal_index = hash & bitmask;
  let _tmp = ideal_index;
  while (true) {
    const index = _tmp;
    $bound_check(bucket, index);
    const _bind = bucket[index];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry;
      }
      if ((index - ideal_index | 0) > _entry.psl) {
        return undefined;
      }
      _tmp = index + 1 & bitmask;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get$209$(self, key) {
  const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$209$(self, key, moonbitlang$core$builtin$$Hash$hash$56$(key));
  if (_bind === undefined) {
    return Option$None$36$;
  } else {
    const _Some = _bind;
    const _entry = _Some;
    return new Option$Some$36$(_entry.value);
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$205$(self, index, bitmask, entry) {
  const bucket = self.bucket;
  let _tmp = index;
  let _tmp$2 = entry;
  while (true) {
    const index$2 = _tmp;
    const entry$2 = _tmp$2;
    $bound_check(bucket, index$2);
    const _bind = bucket[index$2];
    if (_bind === undefined) {
      $bound_check(bucket, index$2);
      bucket[index$2] = entry$2;
      break;
    } else {
      const _Some = _bind;
      const _old_entry = _Some;
      let entry$3;
      if (entry$2.psl > _old_entry.psl) {
        $bound_check(bucket, index$2);
        bucket[index$2] = entry$2;
        entry$3 = _old_entry;
      } else {
        entry$3 = entry$2;
      }
      entry$3.psl = entry$3.psl + 1 | 0;
      const _tmp$3 = index$2 + 1 & bitmask;
      _tmp = _tmp$3;
      _tmp$2 = entry$3;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$208$(self, index, bitmask, entry) {
  const bucket = self.bucket;
  let _tmp = index;
  let _tmp$2 = entry;
  while (true) {
    const index$2 = _tmp;
    const entry$2 = _tmp$2;
    $bound_check(bucket, index$2);
    const _bind = bucket[index$2];
    if (_bind === undefined) {
      $bound_check(bucket, index$2);
      bucket[index$2] = entry$2;
      break;
    } else {
      const _Some = _bind;
      const _old_entry = _Some;
      let entry$3;
      if (entry$2.psl > _old_entry.psl) {
        $bound_check(bucket, index$2);
        bucket[index$2] = entry$2;
        entry$3 = _old_entry;
      } else {
        entry$3 = entry$2;
      }
      entry$3.psl = entry$3.psl + 1 | 0;
      const _tmp$3 = index$2 + 1 & bitmask;
      _tmp = _tmp$3;
      _tmp$2 = entry$3;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$207$(self, index, bitmask, entry) {
  const bucket = self.bucket;
  let _tmp = index;
  let _tmp$2 = entry;
  while (true) {
    const index$2 = _tmp;
    const entry$2 = _tmp$2;
    $bound_check(bucket, index$2);
    const _bind = bucket[index$2];
    if (_bind === undefined) {
      $bound_check(bucket, index$2);
      bucket[index$2] = entry$2;
      break;
    } else {
      const _Some = _bind;
      const _old_entry = _Some;
      let entry$3;
      if (entry$2.psl > _old_entry.psl) {
        $bound_check(bucket, index$2);
        bucket[index$2] = entry$2;
        entry$3 = _old_entry;
      } else {
        entry$3 = entry$2;
      }
      entry$3.psl = entry$3.psl + 1 | 0;
      const _tmp$3 = index$2 + 1 & bitmask;
      _tmp = _tmp$3;
      _tmp$2 = entry$3;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$206$(self, index, bitmask, entry) {
  const bucket = self.bucket;
  let _tmp = index;
  let _tmp$2 = entry;
  while (true) {
    const index$2 = _tmp;
    const entry$2 = _tmp$2;
    $bound_check(bucket, index$2);
    const _bind = bucket[index$2];
    if (_bind === undefined) {
      $bound_check(bucket, index$2);
      bucket[index$2] = entry$2;
      break;
    } else {
      const _Some = _bind;
      const _old_entry = _Some;
      let entry$3;
      if (entry$2.psl > _old_entry.psl) {
        $bound_check(bucket, index$2);
        bucket[index$2] = entry$2;
        entry$3 = _old_entry;
      } else {
        entry$3 = entry$2;
      }
      entry$3.psl = entry$3.psl + 1 | 0;
      const _tmp$3 = index$2 + 1 & bitmask;
      _tmp = _tmp$3;
      _tmp$2 = entry$3;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$209$(self, index, bitmask, entry) {
  const bucket = self.bucket;
  let _tmp = index;
  let _tmp$2 = entry;
  while (true) {
    const index$2 = _tmp;
    const entry$2 = _tmp$2;
    $bound_check(bucket, index$2);
    const _bind = bucket[index$2];
    if (_bind === undefined) {
      $bound_check(bucket, index$2);
      bucket[index$2] = entry$2;
      break;
    } else {
      const _Some = _bind;
      const _old_entry = _Some;
      let entry$3;
      if (entry$2.psl > _old_entry.psl) {
        $bound_check(bucket, index$2);
        bucket[index$2] = entry$2;
        entry$3 = _old_entry;
      } else {
        entry$3 = entry$2;
      }
      entry$3.psl = entry$3.psl + 1 | 0;
      const _tmp$3 = index$2 + 1 & bitmask;
      _tmp = _tmp$3;
      _tmp$2 = entry$3;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$grow$205$(self) {
  const capacity = Math.imul(self.bitmask + 1 | 0, 2) | 0;
  const bitmask = capacity - 1 | 0;
  const bucket = $make_array_len_and_init(capacity, undefined);
  self.bucket = bucket;
  self.bitmask = bitmask;
  let _tmp = self.entry;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _entry = _Some;
      _entry.psl = 0;
      moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$205$(self, _entry.hash & bitmask, bitmask, _entry);
      _tmp = _entry.prev;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$grow$208$(self) {
  const capacity = Math.imul(self.bitmask + 1 | 0, 2) | 0;
  const bitmask = capacity - 1 | 0;
  const bucket = $make_array_len_and_init(capacity, undefined);
  self.bucket = bucket;
  self.bitmask = bitmask;
  let _tmp = self.entry;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _entry = _Some;
      _entry.psl = 0;
      moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$208$(self, _entry.hash & bitmask, bitmask, _entry);
      _tmp = _entry.prev;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$grow$207$(self) {
  const capacity = Math.imul(self.bitmask + 1 | 0, 2) | 0;
  const bitmask = capacity - 1 | 0;
  const bucket = $make_array_len_and_init(capacity, undefined);
  self.bucket = bucket;
  self.bitmask = bitmask;
  let _tmp = self.entry;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _entry = _Some;
      _entry.psl = 0;
      moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$207$(self, _entry.hash & bitmask, bitmask, _entry);
      _tmp = _entry.prev;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$grow$206$(self) {
  const capacity = Math.imul(self.bitmask + 1 | 0, 2) | 0;
  const bitmask = capacity - 1 | 0;
  const bucket = $make_array_len_and_init(capacity, undefined);
  self.bucket = bucket;
  self.bitmask = bitmask;
  let _tmp = self.entry;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _entry = _Some;
      _entry.psl = 0;
      moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$206$(self, _entry.hash & bitmask, bitmask, _entry);
      _tmp = _entry.prev;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$grow$209$(self) {
  const capacity = Math.imul(self.bitmask + 1 | 0, 2) | 0;
  const bitmask = capacity - 1 | 0;
  const bucket = $make_array_len_and_init(capacity, undefined);
  self.bucket = bucket;
  self.bitmask = bitmask;
  let _tmp = self.entry;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _entry = _Some;
      _entry.psl = 0;
      moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$209$(self, _entry.hash & bitmask, bitmask, _entry);
      _tmp = _entry.prev;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_or_init$205$(self, key, init) {
  const hash = moonbitlang$core$builtin$$Hash$hash$210$(key);
  const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$205$(self, key, hash);
  if (_bind === undefined) {
    if (self.size > (self.bitmask / 2 | 0)) {
      moonbitlang$yacc$lib$util$hashmap2$$T$grow$205$(self);
    }
    const value = init(key);
    const entry = { value: value, psl: 0, key: key, hash: hash, prev: self.entry };
    self.entry = entry;
    self.size = self.size + 1 | 0;
    moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$205$(self, hash & self.bitmask, self.bitmask, entry);
    return value;
  } else {
    const _Some = _bind;
    const _entry = _Some;
    return _entry.value;
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_or_init$208$(self, key, init) {
  const hash = moonbitlang$core$builtin$$Hash$hash$184$(key);
  const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$208$(self, key, hash);
  if (_bind === undefined) {
    if (self.size > (self.bitmask / 2 | 0)) {
      moonbitlang$yacc$lib$util$hashmap2$$T$grow$208$(self);
    }
    const value = init(key);
    const entry = { value: value, psl: 0, key: key, hash: hash, prev: self.entry };
    self.entry = entry;
    self.size = self.size + 1 | 0;
    moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$208$(self, hash & self.bitmask, self.bitmask, entry);
    return value;
  } else {
    const _Some = _bind;
    const _entry = _Some;
    return _entry.value;
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_or_init$209$(self, key, init) {
  const hash = moonbitlang$core$builtin$$Hash$hash$56$(key);
  const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$209$(self, key, hash);
  if (_bind === undefined) {
    if (self.size > (self.bitmask / 2 | 0)) {
      moonbitlang$yacc$lib$util$hashmap2$$T$grow$209$(self);
    }
    const value = init(key);
    const entry = { value: value, psl: 0, key: key, hash: hash, prev: self.entry };
    self.entry = entry;
    self.size = self.size + 1 | 0;
    moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$209$(self, hash & self.bitmask, self.bitmask, entry);
    return value;
  } else {
    const _Some = _bind;
    const _entry = _Some;
    return _entry.value;
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$set$207$(self, key, value) {
  const hash = moonbitlang$core$builtin$$Hash$hash$184$(key);
  const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$207$(self, key, hash);
  if (_bind === undefined) {
    if (self.size > (self.bitmask / 2 | 0)) {
      moonbitlang$yacc$lib$util$hashmap2$$T$grow$207$(self);
    }
    const entry = { value: value, psl: 0, key: key, hash: hash, prev: self.entry };
    self.entry = entry;
    self.size = self.size + 1 | 0;
    moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$207$(self, hash & self.bitmask, self.bitmask, entry);
    return;
  } else {
    const _Some = _bind;
    const _entry = _Some;
    _entry.value = value;
    return;
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$set$206$(self, key, value) {
  const hash = moonbitlang$core$builtin$$Hash$hash$185$(key);
  const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$206$(self, key, hash);
  if (_bind === undefined) {
    if (self.size > (self.bitmask / 2 | 0)) {
      moonbitlang$yacc$lib$util$hashmap2$$T$grow$206$(self);
    }
    const entry = { value: value, psl: 0, key: key, hash: hash, prev: self.entry };
    self.entry = entry;
    self.size = self.size + 1 | 0;
    moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$206$(self, hash & self.bitmask, self.bitmask, entry);
    return;
  } else {
    const _Some = _bind;
    const _entry = _Some;
    _entry.value = value;
    return;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$142$(_x_501, _x_502) {
  const _p = _x_501.state;
  const _p$2 = _x_502.state;
  if (_p.num === _p$2.num) {
    return moonbitlang$core$builtin$$Eq$op_equal$95$(_x_501.input, _x_502.input);
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Hash$hash_combine$142$(_x_497, _x_498) {
  moonbitlang$core$builtin$$Hash$hash_combine$156$(_x_497.state, _x_498);
  moonbitlang$core$builtin$$Hash$hash_combine$95$(_x_497.input, _x_498);
}
function moonbitlang$core$builtin$$Hash$hash_combine$141$(_x_471, _x_472) {
  moonbitlang$core$builtin$$Hash$hash_combine$8$(_x_471, _x_472);
}
function moonbitlang$core$builtin$$Eq$op_equal$95$(_x_463, _x_464) {
  if (_x_463.$tag === 0) {
    if (_x_464.$tag === 0) {
      return true;
    } else {
      return false;
    }
  } else {
    const _Input = _x_463;
    const _$42$x0_465 = _Input._0;
    if (_x_464.$tag === 1) {
      const _Input$2 = _x_464;
      const _$42$y0_466 = _Input$2._0;
      return _$42$x0_465.num === _$42$y0_466.num;
    } else {
      return false;
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$95$(_x_455, _x_456) {
  if (_x_455.$tag === 0) {
    if (_x_456.$tag === 0) {
      return 0;
    } else {
      return -1;
    }
  } else {
    const _Input = _x_455;
    const _$42$x0_457 = _Input._0;
    if (_x_456.$tag === 0) {
      return 1;
    } else {
      const _Input$2 = _x_456;
      const _$42$y0_458 = _Input$2._0;
      return $compare_int(_$42$x0_457.num, _$42$y0_458.num);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$76$(_x_439, _x_440) {
  switch (_x_439.$tag) {
    case 0: {
      const _Shift = _x_439;
      const _$42$x0_441 = _Shift._0;
      if (_x_440.$tag === 0) {
        const _Shift$2 = _x_440;
        const _$42$y0_442 = _Shift$2._0;
        return _$42$x0_441.num === _$42$y0_442.num;
      } else {
        return false;
      }
    }
    case 1: {
      const _Reduce = _x_439;
      const _$42$x0_443 = _Reduce._0;
      if (_x_440.$tag === 1) {
        const _Reduce$2 = _x_440;
        const _$42$y0_444 = _Reduce$2._0;
        return _$42$x0_443.num === _$42$y0_444.num;
      } else {
        return false;
      }
    }
    case 2: {
      if (_x_440.$tag === 2) {
        return true;
      } else {
        return false;
      }
    }
    default: {
      const _Conflict = _x_439;
      const _$42$x0_445 = _Conflict._0;
      if (_x_440.$tag === 3) {
        const _Conflict$2 = _x_440;
        const _$42$y0_446 = _Conflict$2._0;
        return moonbitlang$core$builtin$$Eq$op_equal$75$(_$42$x0_445, _$42$y0_446);
      } else {
        return false;
      }
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$138$(_x_423, _x_424) {
  return moonbitlang$core$builtin$$Eq$op_equal$204$(_x_423, _x_424);
}
function moonbitlang$core$builtin$$Hash$hash_combine$95$(self, hasher) {
  if (self.$tag === 0) {
    moonbitlang$core$builtin$$Hasher$combine_int(hasher, -1);
    return;
  } else {
    const _Input = self;
    const _t = _Input._0;
    moonbitlang$core$builtin$$Hasher$combine_int(hasher, _t.num);
    return;
  }
}
function moonbitlang$core$builtin$$Show$output$95$(self, logger) {
  if (self.$tag === 1) {
    const _Input = self;
    const _t = _Input._0;
    moonbitlang$core$builtin$$Logger$write_object$119$(logger, _t);
    return;
  } else {
    logger.method_0(logger.self, "$");
    return;
  }
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$is_singleton(self, key) {
  let _tmp;
  if (key.$tag === 0) {
    _tmp = 0;
  } else {
    const _Input = key;
    const _key = _Input._0;
    _tmp = _key.num + 1 | 0;
  }
  return moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$is_singleton(self, _tmp);
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$empty() {
  return moonbitlang$yacc$lib$util$small_int_set$$_empty;
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$terminal(t) {
  return moonbitlang$yacc$lib$util$small_int_set$$singleton(t.num + 1 | 0);
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$end_of_input() {
  return moonbitlang$yacc$lib$util$small_int_set$$singleton(0);
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$singleton(input) {
  if (input.$tag === 1) {
    const _Input = input;
    const _t = _Input._0;
    return moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$terminal(_t);
  } else {
    return moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$end_of_input();
  }
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$decode_iter(self, grammar) {
  const _bind = moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$iter(self);
  return (_p) => _bind((_p$2) => _p(_p$2 === 0 ? $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$EndOfInput : new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$Input(moonbitlang$core$array$$Array$op_get$119$(grammar.terminals, _p$2 - 1 | 0))));
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$union(self, other) {
  return moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$union(self, other);
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$disjoint(self, other) {
  return moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$disjoint(self, other);
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$subset(self, other) {
  return moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$subset(self, other);
}
function moonbitlang$core$builtin$$Eq$op_equal$210$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$197$(self.items, other.items);
}
function moonbitlang$core$builtin$$Hash$hash$210$(self) {
  const _bind = self.hash;
  if (_bind === undefined) {
    const hasher = moonbitlang$core$builtin$$Hasher$new(0);
    const _arr = self.items;
    const _len = _arr.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const item = _arr[_i];
        moonbitlang$core$builtin$$Hasher$combine_int(hasher, item);
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const hash = moonbitlang$core$builtin$$Hasher$finalize(hasher);
    self.hash = hash;
    return hash;
  } else {
    const _Some = _bind;
    const _hash = _Some;
    return _hash;
  }
}
function moonbitlang$yacc$lib$lr1$$EncodedLR0ItemSet$from_sorted_array(items) {
  return { items: items, hash: undefined };
}
function moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode(self, grammar) {
  const production = moonbitlang$core$array$$Array$op_get$18$(grammar.productions, self >> 10);
  const dot = self & 1023;
  return { production: production, dot: dot };
}
function moonbitlang$yacc$lib$lr1$$EncodedLR0ItemSet$decode_iter(self, grammar) {
  const _p = (yield_) => {
    let index = 0;
    const _arr = self.items;
    const _len = _arr.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const item = _arr[_i];
        const _bind = yield_({ _0: index, _1: moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode(item, grammar) });
        if (_bind === 0) {
          return 0;
        }
        index = index + 1 | 0;
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return 1;
  };
  return _p;
}
function moonbitlang$yacc$lib$lr1$$EncodedSymbolicLookaheadSet$interpret(self, subst) {
  const _bind = moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$iter(self.vars);
  const _bind$2 = self.concrete_set;
  const _acc = { val: _bind$2 };
  _bind((_p) => {
    const _p$2 = moonbitlang$core$array$$Array$op_get$138$(subst, _p);
    _acc.val = moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$union(_acc.val, _p$2);
    return 1;
  });
  return _acc.val;
}
function moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$decode_item_groups(self, grammar) {
  const _p = (yield_) => {
    const _p$2 = self.core.closure_symbolic_lookahead_set;
    const _p$3 = new Array(_p$2.length);
    const _p$4 = _p$2.length;
    let _tmp = 0;
    while (true) {
      const _p$5 = _tmp;
      if (_p$5 < _p$4) {
        const _p$6 = _p$2[_p$5];
        const symbolic_lookahead_set = _p$6;
        _p$3[_p$5] = moonbitlang$yacc$lib$lr1$$EncodedSymbolicLookaheadSet$interpret(symbolic_lookahead_set, self.kernel_lookahead_set_table);
        _tmp = _p$5 + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const lookahead_set_array = _p$3;
    const _foreach_result = { val: $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$37$ };
    const _bind = moonbitlang$yacc$lib$lr1$$EncodedLR0ItemSet$decode_iter(self.core.closure_items, grammar);
    _bind((item) => {
      const _index = item._0;
      const _item = item._1;
      const lookahead_set = moonbitlang$core$array$$Array$op_get$138$(lookahead_set_array, _index);
      const _bind$2 = yield_({ core: _item, lookahead_set: moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$decode_iter(lookahead_set, grammar) });
      if (_bind$2 === 0) {
        _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$37$(0);
        return 0;
      }
      return 1;
    });
    const _tmp$2 = _foreach_result.val;
    switch (_tmp$2.$tag) {
      case 0: {
        break;
      }
      case 1: {
        const _break = _tmp$2;
        _break._0;
        break;
      }
      case 2: {
        const _return = _tmp$2;
        return _return._0;
      }
      case 3: {
        $panic();
        break;
      }
      default: {
        $panic();
      }
    }
    return 1;
  };
  return _p;
}
function moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$merge(self, other) {
  const _p = self.core;
  const _p$2 = other.core;
  if (_p.num === _p$2.num) {
    const _tmp = self.core;
    const _p$3 = self.kernel_lookahead_set_table;
    let _tmp$2;
    let _p$4;
    _L: {
      _L$2: {
        if (_p$3.length === 0) {
          const _tmp$3 = [];
          _p$4 = _tmp$3;
          break _L$2;
        }
        const _p$5 = new Array(_p$3.length);
        const _p$6 = _p$3.length;
        let _tmp$3 = 0;
        while (true) {
          const _p$7 = _tmp$3;
          if (_p$7 < _p$6) {
            const _p$8 = _p$3[_p$7];
            const i = _p$7;
            const lookahead_set = _p$8;
            _p$5[_p$7] = moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$union(lookahead_set, moonbitlang$core$array$$Array$op_get$138$(other.kernel_lookahead_set_table, i));
            _tmp$3 = _p$7 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        _tmp$2 = _p$5;
        break _L;
      }
      _tmp$2 = _p$4;
    }
    return { core: _tmp, kernel_lookahead_set_table: _tmp$2 };
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$subsume(self, other) {
  const _p = self.core;
  const _p$2 = other.core;
  if (_p.num === _p$2.num) {
    const len = self.kernel_lookahead_set_table.length;
    const self_table = self.kernel_lookahead_set_table;
    const other_table = other.kernel_lookahead_set_table;
    switch (len) {
      case 1: {
        return moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$subset(moonbitlang$core$array$$Array$op_get$138$(self_table, 0), moonbitlang$core$array$$Array$op_get$138$(other_table, 0));
      }
      case 2: {
        return moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$subset(moonbitlang$core$array$$Array$op_get$138$(self_table, 0), moonbitlang$core$array$$Array$op_get$138$(other_table, 0)) && moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$subset(moonbitlang$core$array$$Array$op_get$138$(self_table, 1), moonbitlang$core$array$$Array$op_get$138$(other_table, 1));
      }
      default: {
        let _tmp = 0;
        while (true) {
          const i = _tmp;
          if (i < len) {
            if (!moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$subset(moonbitlang$core$array$$Array$op_get$138$(self_table, i), moonbitlang$core$array$$Array$op_get$138$(other_table, i))) {
              return false;
            }
            _tmp = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        return true;
      }
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$weak_compat(self, other) {
  const _p = self.core;
  const _p$2 = other.core;
  if (_p.num === _p$2.num) {
    const len = self.kernel_lookahead_set_table.length;
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const la_set1i = moonbitlang$core$array$$Array$op_get$138$(self.kernel_lookahead_set_table, i);
        const la_set2i = moonbitlang$core$array$$Array$op_get$138$(other.kernel_lookahead_set_table, i);
        let _tmp$2 = i;
        while (true) {
          const j = _tmp$2;
          if (j < len) {
            _L: {
              if (i !== j) {
                const la_set1j = moonbitlang$core$array$$Array$op_get$138$(self.kernel_lookahead_set_table, j);
                const la_set2j = moonbitlang$core$array$$Array$op_get$138$(other.kernel_lookahead_set_table, j);
                const compat = moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$disjoint(la_set1i, la_set2j) && moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$disjoint(la_set2i, la_set1j) || (!moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$disjoint(la_set1i, la_set1j) || !moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$disjoint(la_set2i, la_set2j));
                if (!compat) {
                  return false;
                }
              } else {
                break _L;
              }
              break _L;
            }
            _tmp$2 = j + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return true;
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$eoi_compact(self, other) {
  const _p = self.core;
  const _p$2 = other.core;
  if (_p.num === _p$2.num) {
    const len = self.kernel_lookahead_set_table.length;
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const la_set1 = moonbitlang$core$array$$Array$op_get$138$(self.kernel_lookahead_set_table, i);
        const la_set2 = moonbitlang$core$array$$Array$op_get$138$(other.kernel_lookahead_set_table, i);
        if (moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$is_singleton(la_set1, $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$EndOfInput)) {
          if (!moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$is_singleton(la_set2, $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$EndOfInput)) {
            return false;
          }
        } else {
          if (moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$is_singleton(la_set2, $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$EndOfInput)) {
            if (!moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$is_singleton(la_set1, $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$EndOfInput)) {
              return false;
            }
          }
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return true;
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode_production(self, grammar) {
  return moonbitlang$core$array$$Array$op_get$18$(grammar.productions, self >> 10);
}
function moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode_postdot(self, grammar) {
  const production = moonbitlang$core$array$$Array$op_get$18$(grammar.productions, self >> 10);
  const dot = self & 1023;
  return moonbitlang$core$array$$Array$get$93$(production.rhs, dot);
}
function moonbitlang$yacc$lib$lr1$$EpsilonLookaheadSet$union$180$(set1, set2) {
  return { set: moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$union$180$(set1.set, set2.set), nullable: set1.nullable || set2.nullable };
}
function moonbitlang$yacc$lib$lr1$$compute_first_fn$180$(grammar) {
  const nt_first_map = moonbitlang$core$array$$Array$make$139$(grammar.nonterminals.length, { set: moonbitlang$yacc$lib$lr1$$_empty, nullable: false });
  const first = (symbols) => {
    if (symbols.len === 0) {
      return { set: moonbitlang$yacc$lib$lr1$$_empty, nullable: true };
    } else {
      const _symbol = symbols.buf[symbols.start];
      const _tmp = symbols.buf;
      const _tmp$2 = 1 + symbols.start | 0;
      const _some = symbols.len;
      const _x = { buf: _tmp, start: _tmp$2, len: _some - 1 | 0 };
      let _tmp$3;
      if (_symbol.$tag === 0) {
        const _T = _symbol;
        const _t = _T._0;
        _tmp$3 = { set: moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$singleton$180$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$Input(_t)), nullable: false };
      } else {
        const _NT = _symbol;
        const _nt = _NT._0;
        _tmp$3 = moonbitlang$core$array$$Array$op_get$139$(nt_first_map, _nt.num);
      }
      return moonbitlang$core$builtin$$Add$op_add$211$(_tmp$3, first(_x));
    }
  };
  let fixedpoint_reached = false;
  while (true) {
    if (!fixedpoint_reached) {
      fixedpoint_reached = true;
      const _arr = grammar.nonterminals;
      const _len = _arr.length;
      let _tmp = 0;
      while (true) {
        const _i = _tmp;
        if (_i < _len) {
          const nt = _arr[_i];
          const old_set = moonbitlang$core$array$$Array$op_get$139$(nt_first_map, nt.num);
          const _p = nt.productions;
          const _p$2 = { set: moonbitlang$yacc$lib$lr1$$_empty, nullable: false };
          let new_set;
          let _tmp$2 = 0;
          let _tmp$3 = _p$2;
          while (true) {
            const _p$3 = _tmp$2;
            const _p$4 = _tmp$3;
            if (_p$3 < _p.length) {
              const _tmp$4 = _p$3 + 1 | 0;
              const acc = _p$4;
              const p = moonbitlang$core$array$$Array$op_get$18$(_p, _p$3);
              const _bind = p.rhs;
              const _tmp$5 = moonbitlang$yacc$lib$lr1$$EpsilonLookaheadSet$union$180$(acc, first({ buf: _bind, start: 0, len: _bind.length }));
              _tmp$2 = _tmp$4;
              _tmp$3 = _tmp$5;
              continue;
            } else {
              new_set = _p$4;
              break;
            }
          }
          if (!moonbitlang$core$builtin$$Eq$op_equal$211$(old_set, new_set)) {
            fixedpoint_reached = false;
            moonbitlang$core$array$$Array$op_set$139$(nt_first_map, nt.num, new_set);
          }
          _tmp = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      continue;
    } else {
      break;
    }
  }
  return first;
}
function moonbitlang$yacc$lib$lr1$$build_closure_fn$46$visit$47$7211(_env, node, lookahead_set, parent) {
  const stamp = _env._0;
  if (lookahead_set.nullable) {
    node.predecessors = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$38$(parent, node.predecessors);
  }
  const _p = node.stamp;
  if (_p === stamp) {
    node.lookahead_set = moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$union$180$(node.lookahead_set, lookahead_set.set);
    return;
  } else {
    node.lookahead_set = lookahead_set.set;
    moonbitlang$yacc$lib$lr1$$build_closure_fn$46$follow$47$7212(_env, node);
    return;
  }
}
function moonbitlang$yacc$lib$lr1$$build_closure_fn$46$follow$47$7212(_env, node) {
  const nodes = _env._1;
  const stamp = _env._0;
  node.stamp = stamp;
  moonbitlang$core$array$$Array$push$79$(nodes, node);
  const _arr = node.epsilon_transitions;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const epsilon_transition = _arr[_i];
      moonbitlang$yacc$lib$lr1$$build_closure_fn$46$visit$47$7211(_env, epsilon_transition, node.partial_lookahead_set, node);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$yacc$lib$lr1$$build_closure_fn$46$walk$47$7213(stamp, node) {
  if (moonbitlang$core$builtin$$op_notequal$55$(node.stamp, stamp)) {
    node.stamp = stamp;
    const _bind = moonbitlang$core$immut$list$$T$iter$79$(node.predecessors);
    _bind((predecessor) => {
      moonbitlang$yacc$lib$lr1$$build_closure_fn$46$walk$47$7213(stamp, predecessor);
      node.lookahead_set = moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$union$180$(node.lookahead_set, predecessor.lookahead_set);
      return 1;
    });
    return;
  } else {
    return;
  }
}
function moonbitlang$yacc$lib$lr1$$build_closure_fn$180$(grammar) {
  const first = moonbitlang$yacc$lib$lr1$$compute_first_fn$180$(grammar);
  const node_by_item = moonbitlang$core$hashmap$$new$110$(8);
  const _arr = grammar.productions;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const production = _arr[_i];
      const _end219 = production.rhs.length;
      let _tmp$2 = 0;
      while (true) {
        const dot = _tmp$2;
        if (dot <= _end219) {
          const item = production.num << 10 | dot;
          const partial_lookahead_set = dot < production.rhs.length ? first(moonbitlang$core$array$$Array$op_as_view$93$(production.rhs, dot + 1 | 0, undefined)) : { set: moonbitlang$yacc$lib$lr1$$_empty, nullable: false };
          const node = { item: item, partial_lookahead_set: partial_lookahead_set, epsilon_transitions: [], stamp: moonbitlang$yacc$lib$util$stamp$$initial_stamp, predecessors: $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$38$, lookahead_set: moonbitlang$yacc$lib$lr1$$_empty };
          moonbitlang$core$hashmap$$T$op_set$110$(node_by_item, item, node);
          _tmp$2 = dot + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _bind = moonbitlang$core$hashmap$$T$iter$110$(node_by_item);
  _bind((pair) => {
    const node = pair._1;
    const _bind$2 = moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode_postdot(node.item, grammar);
    if (_bind$2 === undefined) {
    } else {
      const _Some = _bind$2;
      const _x = _Some;
      if (_x.$tag === 0) {
      } else {
        const _NT = _x;
        const _nt = _NT._0;
        const _arr$2 = _nt.productions;
        const _len$2 = _arr$2.length;
        let _tmp$2 = 0;
        while (true) {
          const _i = _tmp$2;
          if (_i < _len$2) {
            const production = _arr$2[_i];
            const _p = 0;
            const encoded_item = production.num << 10 | _p;
            moonbitlang$core$array$$Array$push$79$(node.epsilon_transitions, moonbitlang$core$option$$Option$unwrap$79$(moonbitlang$core$hashmap$$T$get$110$(node_by_item, encoded_item)));
            _tmp$2 = _i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
      }
    }
    return 1;
  });
  return (item_set) => {
    const stamp = moonbitlang$yacc$lib$util$stamp$$new();
    const nodes = [];
    const _env = { _0: stamp, _1: nodes };
    item_set((item) => {
      const _item = item._0;
      const _lookahead_set = item._1;
      const node = moonbitlang$core$option$$Option$unwrap$79$(moonbitlang$core$hashmap$$T$get$110$(node_by_item, _item));
      node.lookahead_set = _lookahead_set;
      moonbitlang$yacc$lib$lr1$$build_closure_fn$46$follow$47$7212(_env, node);
      return 1;
    });
    const stamp$2 = moonbitlang$yacc$lib$util$stamp$$new();
    const _len$2 = nodes.length;
    let _tmp$2 = 0;
    while (true) {
      const _i = _tmp$2;
      if (_i < _len$2) {
        const node = nodes[_i];
        moonbitlang$yacc$lib$lr1$$build_closure_fn$46$walk$47$7213(stamp$2, node);
        _tmp$2 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const _p = new Array(nodes.length);
    const _p$2 = nodes.length;
    let _tmp$3 = 0;
    while (true) {
      const _p$3 = _tmp$3;
      if (_p$3 < _p$2) {
        const _p$4 = nodes[_p$3];
        const node = _p$4;
        _p[_p$3] = { _0: node.item, _1: node.lookahead_set };
        _tmp$3 = _p$3 + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const closure = _p;
    const _len$3 = nodes.length;
    let _tmp$4 = 0;
    while (true) {
      const _i = _tmp$4;
      if (_i < _len$3) {
        const node = nodes[_i];
        node.predecessors = $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$38$;
        node.lookahead_set = moonbitlang$yacc$lib$lr1$$_empty;
        _tmp$4 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    moonbitlang$core$array$$Array$sort_by_key$42$(closure, (pair) => pair._0);
    return closure;
  };
}
function moonbitlang$core$builtin$$Eq$op_equal$211$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$180$(self.set, other.set) && self.nullable === other.nullable;
}
function moonbitlang$core$builtin$$Add$op_add$211$(set1, set2) {
  return set1.nullable ? { set: moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$union$180$(set1.set, set2.set), nullable: set2.nullable } : set1;
}
function moonbitlang$yacc$lib$lr1$$resolve_conflicts(conflicts) {
  const errors = [];
  const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$iter2$206$(conflicts);
  _bind((location, decisions) => {
    const _state = location.state;
    const _input = location.input;
    const shift = [];
    const reduce = [];
    const _bind$2 = moonbitlang$core$immut$list$$T$iter$76$(decisions);
    _bind$2((decision) => {
      switch (decision.$tag) {
        case 0: {
          const _Shift = decision;
          const _state$2 = _Shift._0;
          moonbitlang$core$array$$Array$push$175$(shift, { _0: _input, _1: _state$2 });
          break;
        }
        case 1: {
          const _Reduce = decision;
          const _production = _Reduce._0;
          moonbitlang$core$array$$Array$push$18$(reduce, _production);
          break;
        }
        case 2: {
          $panic();
          break;
        }
        default: {
          $panic();
        }
      }
      return 1;
    });
    if (shift.length <= 1) {
      if (reduce.length >= 1) {
        moonbitlang$core$array$$Array$sort_by_key$41$(reduce, (prod) => prod.num);
        const best_reduce = moonbitlang$core$array$$Array$op_get$18$(reduce, 0);
        let decision;
        if (shift.length === 0) {
          decision = new Result$Ok$39$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Reduce(best_reduce));
        } else {
          if (shift.length === 1) {
            const _x = shift[0];
            const _input$2 = _x._0;
            const _shift_state = _x._1;
            let term_prec;
            if (_input$2.$tag === 1) {
              const _Input = _input$2;
              const _term = _Input._0;
              term_prec = _term.prec;
            } else {
              term_prec = undefined;
            }
            const _bind$3 = best_reduce.prec;
            if (term_prec === undefined) {
              if (_bind$3 === undefined) {
                moonbitlang$core$array$$Array$push$176$(errors, new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Shift_reduce_conflict_resolved_without_precedence(_state, _input$2, _shift_state, best_reduce));
                decision = new Result$Ok$39$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Shift(_shift_state));
              } else {
                decision = new Result$Ok$39$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Reduce(best_reduce));
              }
            } else {
              const _Some = term_prec;
              if (_bind$3 === undefined) {
                decision = new Result$Ok$39$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Shift(_shift_state));
              } else {
                const _x$2 = _Some;
                const _prec1 = _x$2._0;
                const _assoc1 = _x$2._1;
                const _Some$2 = _bind$3;
                const _prec2 = _Some$2;
                if (_prec1 > _prec2) {
                  decision = new Result$Ok$39$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Shift(_shift_state));
                } else {
                  if (_prec2 > _prec1) {
                    decision = new Result$Ok$39$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Reduce(best_reduce));
                  } else {
                    switch (_assoc1) {
                      case 0: {
                        decision = new Result$Ok$39$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Reduce(best_reduce));
                        break;
                      }
                      case 1: {
                        decision = new Result$Ok$39$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Shift(_shift_state));
                        break;
                      }
                      default: {
                        decision = new Result$Err$39$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Shift_reduce_conflict_not_resolved_because_of_non_assoc(_state, _input$2, _shift_state, best_reduce));
                      }
                    }
                  }
                }
              }
            }
          } else {
            decision = $panic();
          }
        }
        if (reduce.length >= 2) {
          _L: {
            _L$2: {
              if (decision.$tag === 1) {
                const _Ok = decision;
                const _x = _Ok._0;
                if (_x.$tag === 1) {
                  const _Reduce = _x;
                  const _prod = _Reduce._0;
                  if (_prod.num === best_reduce.num) {
                    moonbitlang$core$array$$Array$push$176$(errors, new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Reduce_conflict_resolved_by_presentation_order(_state, _input, reduce, best_reduce));
                  }
                } else {
                  break _L$2;
                }
              } else {
                break _L$2;
              }
              break _L;
            }
          }
        }
        if (decision.$tag === 1) {
          const _Ok = decision;
          const _decision = _Ok._0;
          moonbitlang$core$sorted_map$$T$op_set$89$(_state.action, _input, _decision);
        } else {
          const _Err = decision;
          const _error = _Err._0;
          moonbitlang$core$array$$Array$push$176$(errors, _error);
        }
      } else {
        $panic();
      }
    } else {
      $panic();
    }
    return 1;
  });
  return errors;
}
function moonbitlang$core$builtin$$Eq$op_equal$180$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$138$(self.concrete_set, other.concrete_set) && moonbitlang$core$builtin$$Eq$op_equal$204$(self.vars, other.vars);
}
function moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$singleton$180$(lookahead) {
  return { concrete_set: moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$singleton(lookahead), vars: moonbitlang$yacc$lib$util$small_int_set$$_empty };
}
function moonbitlang$yacc$lib$lr1$$EncodedSymbolicLookaheadSet$variable(var_) {
  return { concrete_set: moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$empty(), vars: moonbitlang$yacc$lib$util$small_int_set$$singleton(var_) };
}
function moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$union$180$(self, other) {
  return { concrete_set: moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$union(self.concrete_set, other.concrete_set), vars: moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$union(self.vars, other.vars) };
}
function moonbitlang$core$builtin$$Show$output$193$(self, logger) {
  logger.method_0(logger.self, "[");
  moonbitlang$core$builtin$$Logger$write_object$8$(logger, self.core.production.num);
  logger.method_0(logger.self, ", ");
  moonbitlang$yacc$lib$grm$$Production$output_with_opt_dot$201$(self.core.production, logger, self.core.dot);
  logger.method_0(logger.self, ", ");
  const first = { val: true };
  const _bind = self.lookahead_set;
  _bind((lookahead) => {
    if (!first.val) {
      logger.method_0(logger.self, " / ");
    }
    moonbitlang$core$builtin$$Logger$write_object$95$(logger, lookahead);
    first.val = false;
    return 1;
  });
  logger.method_0(logger.self, "]");
}
function moonbitlang$core$builtin$$Hash$hash_combine$156$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_int(hasher, self.num);
}
function moonbitlang$yacc$lib$lr1$$LR1State$iter_item_groups(self) {
  return moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$decode_item_groups(self.items, self.grammar);
}
function moonbitlang$yacc$lib$lr1$$LR1State$set_action(self, input, decision) {
  const _bind = moonbitlang$core$sorted_map$$T$get$89$(self.action, input);
  if (_bind === undefined) {
    moonbitlang$core$sorted_map$$T$op_set$89$(self.action, input, decision);
    return;
  } else {
    const _Some = _bind;
    const _x = _Some;
    if (_x.$tag === 3) {
      const _Conflict = _x;
      const _decisions = _Conflict._0;
      if (!moonbitlang$core$immut$list$$T$contains$76$(_decisions, decision)) {
        moonbitlang$core$sorted_map$$T$op_set$89$(self.action, input, new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Conflict(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$40$(decision, _decisions)));
        return;
      } else {
        return;
      }
    } else {
      if (moonbitlang$core$builtin$$op_notequal$76$(_x, decision)) {
        moonbitlang$core$sorted_map$$T$op_set$89$(self.action, input, new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Conflict(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$40$(decision, new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$40$(_x, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$40$))));
        return;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$yacc$lib$lr1$$build$46$explore$124$10(_env, kernel_items) {
  const grammar = _env._4;
  const node_by_kernel_items = _env._3;
  const node_reductions = _env._2;
  const closure = _env._1;
  const node_transitions = _env._0;
  const defer = { val: Option$None$41$ };
  const node = moonbitlang$yacc$lib$util$hashmap2$$T$get_or_init$205$(node_by_kernel_items, kernel_items, (kernel_items$2) => {
    const _p = kernel_items$2.items;
    let _tmp;
    let _p$2;
    _L: {
      _L$2: {
        if (_p.length === 0) {
          const _tmp$2 = [];
          _p$2 = _tmp$2;
          break _L$2;
        }
        const _p$3 = new Array(_p.length);
        const _p$4 = _p.length;
        let _tmp$2 = 0;
        while (true) {
          const _p$5 = _tmp$2;
          if (_p$5 < _p$4) {
            const _p$6 = _p[_p$5];
            const index = _p$5;
            const item = _p$6;
            _p$3[_p$5] = { _0: item, _1: moonbitlang$yacc$lib$lr1$$EncodedSymbolicLookaheadSet$variable(index) };
            _tmp$2 = _p$5 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        _tmp = _p$3;
        break _L;
      }
      _tmp = _p$2;
    }
    const symbolic_items = closure(moonbitlang$core$array$$Array$iter$23$(_tmp));
    const _tmp$2 = node_by_kernel_items.size;
    const _p$3 = new Array(symbolic_items.length);
    const _p$4 = symbolic_items.length;
    let _tmp$3 = 0;
    while (true) {
      const _p$5 = _tmp$3;
      if (_p$5 < _p$4) {
        const _p$6 = symbolic_items[_p$5];
        const item = _p$6;
        _p$3[_p$5] = item._0;
        _tmp$3 = _p$5 + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const _tmp$4 = moonbitlang$yacc$lib$lr1$$EncodedLR0ItemSet$from_sorted_array(_p$3);
    const _p$5 = new Array(symbolic_items.length);
    const _p$6 = symbolic_items.length;
    let _tmp$5 = 0;
    while (true) {
      const _p$7 = _tmp$5;
      if (_p$7 < _p$6) {
        const _p$8 = symbolic_items[_p$7];
        const item = _p$8;
        _p$5[_p$7] = item._1;
        _tmp$5 = _p$7 + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const node$2 = { num: _tmp$2, closure_items: _tmp$4, closure_symbolic_lookahead_set: _p$5 };
    defer.val = new Option$Some$41$(symbolic_items);
    return node$2;
  });
  const _bind = defer.val;
  if (_bind.$tag === 1) {
    const _Some = _bind;
    const _symbolic_items = _Some._0;
    const result = [];
    const _len = _symbolic_items.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const symbolic_item = _symbolic_items[_i];
        const _item = symbolic_item._0;
        const _symbolic_lookahead_set = symbolic_item._1;
        const _bind$2 = moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode_postdot(_item, grammar);
        if (_bind$2 === undefined) {
          moonbitlang$core$array$$Array$push$179$(result, { _0: _symbolic_lookahead_set, _1: moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode_production(_item, grammar) });
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    moonbitlang$core$array$$Array$push$136$(node_reductions, result);
    moonbitlang$core$array$$Array$push$135$(node_transitions, moonbitlang$yacc$lib$util$hashmap2$$new$207$(16));
    const trans = moonbitlang$yacc$lib$util$hashmap2$$new$208$(16);
    const _len$2 = _symbolic_items.length;
    let _tmp$2 = 0;
    while (true) {
      const _i = _tmp$2;
      if (_i < _len$2) {
        const entry = _symbolic_items[_i];
        const _item = entry._0;
        const _symbolic_lookahead_set = entry._1;
        const _bind$2 = moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode_postdot(_item, grammar);
        if (_bind$2 === undefined) {
        } else {
          const _Some$2 = _bind$2;
          const _symbol = _Some$2;
          const next_item = _item + 1 | 0;
          const _bind$3 = moonbitlang$yacc$lib$util$hashmap2$$T$get_or_init$208$(trans, _symbol, (_arg) => ({ _0: [], _1: [] }));
          const _kernel_items = _bind$3._0;
          const _symbolic_lookahead_set_table = _bind$3._1;
          moonbitlang$core$array$$Array$push$141$(_kernel_items, next_item);
          moonbitlang$core$array$$Array$push$180$(_symbolic_lookahead_set_table, _symbolic_lookahead_set);
        }
        _tmp$2 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const _bind$2 = moonbitlang$yacc$lib$util$hashmap2$$T$iter$208$(trans);
    _bind$2((tran) => {
      const _symbol = tran._0;
      const _x = tran._1;
      const _kernel_items = _x._0;
      const _kernel_symbolic_lookahead_set_table = _x._1;
      const target = moonbitlang$yacc$lib$lr1$$build$46$explore$124$10(_env, moonbitlang$yacc$lib$lr1$$EncodedLR0ItemSet$from_sorted_array(_kernel_items));
      moonbitlang$yacc$lib$util$hashmap2$$T$set$207$(moonbitlang$core$array$$Array$op_get$135$(node_transitions, node.num), _symbol, { _0: target, _1: _kernel_symbolic_lookahead_set_table });
      return 1;
    });
  }
  return node;
}
function moonbitlang$yacc$lib$lr1$$build$46$fuse$124$65(_env, family, candidate) {
  const queue = _env._1;
  const user_eoi = _env._0;
  let _tmp = family;
  let _tmp$2 = candidate;
  _L: while (true) {
    const family$2 = _tmp;
    const candidate$2 = _tmp$2;
    const _len = family$2.length;
    let _tmp$3 = 0;
    while (true) {
      const _i = _tmp$3;
      if (_i < _len) {
        const state = family$2[_i];
        if (moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$weak_compat(state.items, candidate$2.items) && (user_eoi ? moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$eoi_compact(state.items, candidate$2.items) : true)) {
          const new_state = { items: moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$merge(candidate$2.items, state.items), state: undefined };
          const _p = family$2.length;
          let _bind;
          let _tmp$4 = 0;
          while (true) {
            const _p$2 = _tmp$4;
            if (_p$2 < _p) {
              const _p$3 = family$2[_p$2];
              const it = _p$3;
              if (it === state) {
                _bind = _p$2;
                break;
              }
              _tmp$4 = _p$2 + 1 | 0;
              continue;
            } else {
              _bind = undefined;
              break;
            }
          }
          if (_bind === undefined) {
          } else {
            const _Some = _bind;
            const _index = _Some;
            moonbitlang$core$array$$Array$remove$16$(family$2, _index);
          }
          _tmp$2 = new_state;
          continue _L;
        }
        _tmp$3 = _i + 1 | 0;
        continue;
      } else {
        moonbitlang$core$array$$Array$push$16$(family$2, candidate$2);
        moonbitlang$core$array$$Array$push$16$(queue, candidate$2);
        return;
      }
    }
  }
}
function moonbitlang$yacc$lib$lr1$$build$46$state_from_pre$124$91(_env, pre_state) {
  const grammar = _env._1;
  const next_state_num = _env._0;
  const _bind = pre_state.state;
  if (_bind === undefined) {
    const state = { grammar: grammar, num: next_state_num.val, items: pre_state.items, goto: moonbitlang$core$sorted_map$$new$88$(), action: moonbitlang$core$sorted_map$$new$89$(), stamp: moonbitlang$yacc$lib$util$stamp$$initial_stamp };
    next_state_num.val = next_state_num.val + 1 | 0;
    pre_state.state = state;
    return state;
  } else {
    const _Some = _bind;
    const _state = _Some;
    return _state;
  }
}
function moonbitlang$yacc$lib$lr1$$build$46$check_add_conflict$124$124(conflicts, state, input) {
  const _bind = moonbitlang$core$sorted_map$$T$get$89$(state.action, input);
  if (_bind === undefined) {
    return;
  } else {
    const _Some = _bind;
    const _x = _Some;
    if (_x.$tag === 3) {
      const _Conflict = _x;
      const _decisions = _Conflict._0;
      moonbitlang$yacc$lib$util$hashmap2$$T$set$206$(conflicts, { state: state, input: input }, _decisions);
      return;
    } else {
      return;
    }
  }
}
function moonbitlang$yacc$lib$lr1$$Automaton$build(grammar, user_eoi) {
  const closure = moonbitlang$yacc$lib$lr1$$build_closure_fn$180$(grammar);
  const node_by_kernel_items = moonbitlang$yacc$lib$util$hashmap2$$new$205$(65536);
  const node_transitions = [];
  const node_reductions = [];
  const node_starts = [];
  const _env = { _0: node_transitions, _1: closure, _2: node_reductions, _3: node_by_kernel_items, _4: grammar };
  const _arr = grammar.starts;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const start_production = _arr[_i];
      const _p = 0;
      moonbitlang$core$array$$Array$push$173$(node_starts, { _0: moonbitlang$yacc$lib$lr1$$build$46$explore$124$10(_env, moonbitlang$yacc$lib$lr1$$EncodedLR0ItemSet$from_sorted_array([start_production.num << 10 | _p])), _1: start_production });
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const next_state_num = { val: 0 };
  const starts = [];
  const families = moonbitlang$core$array$$FixedArray$makei$39$(node_by_kernel_items.size, (_i) => []);
  const queue = [];
  const _len$2 = node_starts.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len$2) {
      const entry = node_starts[_i];
      const _node = entry._0;
      const _start_production = entry._1;
      const start_state = { items: { core: _node, kernel_lookahead_set_table: [moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$end_of_input()] }, state: undefined };
      const _tmp$3 = start_state.items.core.num;
      $bound_check(families, _tmp$3);
      moonbitlang$core$array$$Array$push$16$(families[_tmp$3], start_state);
      moonbitlang$core$array$$Array$push$174$(starts, { _0: _start_production, _1: start_state });
      moonbitlang$core$array$$Array$push$16$(queue, start_state);
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _env$2 = { _0: user_eoi, _1: queue };
  while (true) {
    if (!(queue.length === 0)) {
      const state = moonbitlang$core$array$$Array$unsafe_pop$16$(queue);
      const trans = moonbitlang$core$array$$Array$op_get$135$(node_transitions, state.items.core.num);
      const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$iter$207$(trans);
      _bind((entry) => {
        const _x = entry._1;
        const _target_node = _x._0;
        const _kernel_symbolic_lookahead_set_array = _x._1;
        const _p = new Array(_kernel_symbolic_lookahead_set_array.length);
        const _p$2 = _kernel_symbolic_lookahead_set_array.length;
        let _tmp$3 = 0;
        while (true) {
          const _p$3 = _tmp$3;
          if (_p$3 < _p$2) {
            const _p$4 = _kernel_symbolic_lookahead_set_array[_p$3];
            const symbolic_lookahead_set = _p$4;
            _p[_p$3] = moonbitlang$yacc$lib$lr1$$EncodedSymbolicLookaheadSet$interpret(symbolic_lookahead_set, state.items.kernel_lookahead_set_table);
            _tmp$3 = _p$3 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        const kernel_lookahead_set_table = _p;
        const target_state = { items: { core: _target_node, kernel_lookahead_set_table: kernel_lookahead_set_table }, state: undefined };
        let _return_value;
        _L: {
          _L$2: {
            const _tmp$4 = target_state.items.core.num;
            $bound_check(families, _tmp$4);
            const family = families[_tmp$4];
            const _len$3 = family.length;
            let _tmp$5 = 0;
            while (true) {
              const _i = _tmp$5;
              if (_i < _len$3) {
                const state$2 = family[_i];
                if (moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$subsume(target_state.items, state$2.items)) {
                  _return_value = undefined;
                  break _L$2;
                }
                _tmp$5 = _i + 1 | 0;
                continue;
              } else {
                break;
              }
            }
            moonbitlang$yacc$lib$lr1$$build$46$fuse$124$65(_env$2, family, target_state);
            break _L;
          }
        }
        return 1;
      });
      continue;
    } else {
      break;
    }
  }
  const states = [];
  const _env$3 = { _0: next_state_num, _1: grammar };
  const queue$2 = [];
  const _len$3 = starts.length;
  let _tmp$3 = 0;
  while (true) {
    const _i = _tmp$3;
    if (_i < _len$3) {
      const entry = starts[_i];
      const _pre_state = entry._1;
      moonbitlang$core$array$$Array$push$156$(queue$2, moonbitlang$yacc$lib$lr1$$build$46$state_from_pre$124$91(_env$3, _pre_state));
      _tmp$3 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const stamp = moonbitlang$yacc$lib$util$stamp$$new();
  while (true) {
    if (!(queue$2.length === 0)) {
      const state = moonbitlang$core$array$$Array$unsafe_pop$156$(queue$2);
      const _p = state.stamp;
      if (_p === stamp) {
        continue;
      }
      state.stamp = stamp;
      moonbitlang$core$array$$Array$push$156$(states, state);
      const trans = moonbitlang$core$array$$Array$op_get$135$(node_transitions, state.items.core.num);
      const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$iter$207$(trans);
      _bind((entry) => {
        const _symbol = entry._0;
        const _x = entry._1;
        const _target_node = _x._0;
        const _symbolic_lookahead_set_array = _x._1;
        const _tmp$4 = _target_node.num;
        $bound_check(families, _tmp$4);
        const family = families[_tmp$4];
        let pre_state;
        if (family.length === 0) {
          pre_state = $panic();
        } else {
          if (family.length === 1) {
            const _target_state = family[0];
            pre_state = _target_state;
          } else {
            const _p$2 = new Array(_symbolic_lookahead_set_array.length);
            const _p$3 = _symbolic_lookahead_set_array.length;
            let _tmp$5 = 0;
            while (true) {
              const _p$4 = _tmp$5;
              if (_p$4 < _p$3) {
                const _p$5 = _symbolic_lookahead_set_array[_p$4];
                const symbolic_lookahead_set = _p$5;
                _p$2[_p$4] = moonbitlang$yacc$lib$lr1$$EncodedSymbolicLookaheadSet$interpret(symbolic_lookahead_set, state.items.kernel_lookahead_set_table);
                _tmp$5 = _p$4 + 1 | 0;
                continue;
              } else {
                break;
              }
            }
            const kernel_lookahead_set_table = _p$2;
            const next_items = { core: _target_node, kernel_lookahead_set_table: kernel_lookahead_set_table };
            pre_state = moonbitlang$core$option$$Option$unwrap$16$(moonbitlang$core$builtin$$Iter$find_first$16$(moonbitlang$core$array$$Array$iter$16$(family), (state$2) => moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$subsume(next_items, state$2.items)));
          }
        }
        const target_state = moonbitlang$yacc$lib$lr1$$build$46$state_from_pre$124$91(_env$3, pre_state);
        moonbitlang$core$sorted_map$$T$op_set$88$(state.goto, _symbol, target_state);
        if (moonbitlang$core$builtin$$op_notequal$55$(target_state.stamp, stamp)) {
          moonbitlang$core$array$$Array$push$156$(queue$2, target_state);
        }
        return 1;
      });
      continue;
    } else {
      break;
    }
  }
  const _len$4 = states.length;
  let _tmp$4 = 0;
  while (true) {
    const _i = _tmp$4;
    if (_i < _len$4) {
      const state = states[_i];
      state.num = _i;
      _tmp$4 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const conflicts = moonbitlang$yacc$lib$util$hashmap2$$new$206$(16);
  const _len$5 = states.length;
  let _tmp$5 = 0;
  while (true) {
    const _i = _tmp$5;
    if (_i < _len$5) {
      const state = states[_i];
      const core = state.items.core;
      const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$iter$207$(moonbitlang$core$array$$Array$op_get$135$(node_transitions, core.num));
      _bind((tran) => {
        const _symbol = tran._0;
        if (_symbol.$tag === 1) {
        } else {
          const _T = _symbol;
          const _term = _T._0;
          moonbitlang$yacc$lib$lr1$$LR1State$set_action(state, new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$Input(_term), new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Shift(moonbitlang$core$option$$Option$unwrap$156$(moonbitlang$core$sorted_map$$T$get$88$(state.goto, new $64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$T(_term)))));
          moonbitlang$yacc$lib$lr1$$build$46$check_add_conflict$124$124(conflicts, state, new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$Input(_term));
        }
        return 1;
      });
      const _arr$2 = moonbitlang$core$array$$Array$op_get$136$(node_reductions, core.num);
      const _len$6 = _arr$2.length;
      let _tmp$6 = 0;
      while (true) {
        const _i$2 = _tmp$6;
        if (_i$2 < _len$6) {
          const reduction = _arr$2[_i$2];
          const _symbolic_lookahead_set = reduction._0;
          const _production = reduction._1;
          const lookahead_set = moonbitlang$yacc$lib$lr1$$EncodedSymbolicLookaheadSet$interpret(_symbolic_lookahead_set, state.items.kernel_lookahead_set_table);
          const _bind$2 = moonbitlang$yacc$lib$lr1$$EncodedLR0ItemSet$decode_iter(core.closure_items, grammar);
          _bind$2((item) => {
            const _bind$3 = moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$decode_iter(lookahead_set, grammar);
            _bind$3((lookahead) => {
              if (moonbitlang$core$builtin$$Eq$op_equal$95$(lookahead, $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$EndOfInput) && (moonbitlang$core$array$$Array$contains$18$(grammar.starts, _production) && item._1.dot === 1)) {
                moonbitlang$yacc$lib$lr1$$LR1State$set_action(state, lookahead, $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Accept);
              } else {
                moonbitlang$yacc$lib$lr1$$LR1State$set_action(state, lookahead, new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Reduce(_production));
              }
              moonbitlang$yacc$lib$lr1$$build$46$check_add_conflict$124$124(conflicts, state, lookahead);
              return 1;
            });
            return 1;
          });
          _tmp$6 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp$5 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _p = new Array(starts.length);
  const _p$2 = starts.length;
  let _tmp$6 = 0;
  while (true) {
    const _p$3 = _tmp$6;
    if (_p$3 < _p$2) {
      const _p$4 = starts[_p$3];
      const entry = _p$4;
      const _production = entry._0;
      const _pre_state = entry._1;
      _p[_p$3] = { _0: _production, _1: moonbitlang$yacc$lib$lr1$$build$46$state_from_pre$124$91(_env$3, _pre_state) };
      _tmp$6 = _p$3 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const starts$2 = _p;
  return { states: states, starts: starts$2, conflicts: conflicts };
}
function moonbitlang$yacc$lib$util$logger_with_cursor$$new(logger, cursor) {
  return { logger: logger, cursor: cursor };
}
function moonbitlang$core$builtin$$Logger$write_char$212$(self, char) {
  const _tmp = self.logger;
  _tmp.method_2(_tmp.self, char);
  self.cursor = self.cursor + 1 | 0;
}
function moonbitlang$core$builtin$$Logger$write_string$212$(self, str) {
  const _tmp = self.logger;
  _tmp.method_0(_tmp.self, str);
  self.cursor = self.cursor + str.length | 0;
}
function moonbitlang$core$builtin$$Logger$write_substring$212$(self, str, start, len) {
  const _tmp = self.logger;
  _tmp.method_1(_tmp.self, str, start, len);
  self.cursor = self.cursor + len | 0;
}
function moonbitlang$yacc$lib$util$array_multimap$$new$151$() {
  return moonbitlang$yacc$lib$util$hashmap2$$new$209$(16);
}
function moonbitlang$yacc$lib$util$array_multimap$$T$add$151$(self, key, value) {
  const arr = moonbitlang$yacc$lib$util$hashmap2$$T$get_or_init$209$(self, key, (_discard_) => []);
  if (!moonbitlang$core$array$$Array$contains$45$(arr, value)) {
    moonbitlang$core$array$$Array$push$45$(arr, value);
    return;
  } else {
    return;
  }
}
function moonbitlang$yacc$lib$util$array_multimap$$T$get$151$(self, key) {
  return moonbitlang$core$option$$Option$or$108$(moonbitlang$yacc$lib$util$hashmap2$$T$get$209$(self, key), []);
}
function moonbitlang$core$builtin$$Show$output$194$(_x_254, _x_255) {
  if (_x_254.$tag === 10) {
    const _ParseError = _x_254;
    const _$42$arg_256 = _ParseError._0;
    _x_255.method_0(_x_255.self, "ParseError(");
    moonbitlang$core$builtin$$Logger$write_object$120$(_x_255, _$42$arg_256);
    _x_255.method_0(_x_255.self, ")");
    return;
  } else {
    const _LexError = _x_254;
    const _$42$arg_257 = _LexError._0;
    _x_255.method_0(_x_255.self, "LexError(");
    moonbitlang$core$builtin$$Logger$write_object$121$(_x_255, _$42$arg_257);
    _x_255.method_0(_x_255.self, ")");
    return;
  }
}
function moonbitlang$core$builtin$$Show$output$121$(_x_246, _x_247) {
  const _Unrecognized = _x_246;
  const _$42$arg_248 = _Unrecognized._0;
  const _$42$arg_249 = _Unrecognized._1;
  _x_247.method_0(_x_247.self, "Unrecognized(");
  moonbitlang$core$builtin$$Logger$write_object$66$(_x_247, _$42$arg_248);
  _x_247.method_0(_x_247.self, ", ");
  moonbitlang$core$builtin$$Logger$write_object$8$(_x_247, _$42$arg_249);
  _x_247.method_0(_x_247.self, ")");
}
function moonbitlang$core$builtin$$Show$output$120$(_x_228, _x_229) {
  if (_x_228.$tag === 7) {
    const _UnexpectedToken = _x_228;
    const _$42$arg_230 = _UnexpectedToken._0;
    const _$42$arg_231 = _UnexpectedToken._1;
    const _$42$arg_232 = _UnexpectedToken._2;
    _x_229.method_0(_x_229.self, "UnexpectedToken(");
    moonbitlang$core$builtin$$Logger$write_object$122$(_x_229, _$42$arg_230);
    _x_229.method_0(_x_229.self, ", ");
    const _$42$x0_233 = _$42$arg_231._0;
    const _$42$x1_234 = _$42$arg_231._1;
    _x_229.method_0(_x_229.self, "(");
    moonbitlang$core$builtin$$Logger$write_object$8$(_x_229, _$42$x0_233);
    _x_229.method_0(_x_229.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$8$(_x_229, _$42$x1_234);
    _x_229.method_0(_x_229.self, ")");
    const _self = _x_229;
    _self.method_0(_self.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$123$(_self, _$42$arg_232);
    _self.method_0(_self.self, ")");
    return;
  } else {
    const _UnexpectedEndOfInput = _x_228;
    const _$42$arg_235 = _UnexpectedEndOfInput._0;
    const _$42$arg_236 = _UnexpectedEndOfInput._1;
    _x_229.method_0(_x_229.self, "UnexpectedEndOfInput(");
    moonbitlang$core$builtin$$Logger$write_object$8$(_x_229, _$42$arg_235);
    _x_229.method_0(_x_229.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$123$(_x_229, _$42$arg_236);
    _x_229.method_0(_x_229.self, ")");
    return;
  }
}
function moonbitlang$core$builtin$$Show$output$122$(_x_216, _x_217) {
  switch (_x_216.$tag) {
    case 0: {
      _x_217.method_0(_x_217.self, "EOF");
      return;
    }
    case 1: {
      _x_217.method_0(_x_217.self, "LPAREN");
      return;
    }
    case 2: {
      _x_217.method_0(_x_217.self, "RPAREN");
      return;
    }
    case 3: {
      _x_217.method_0(_x_217.self, "LBRACKET");
      return;
    }
    case 4: {
      _x_217.method_0(_x_217.self, "RBRACKET");
      return;
    }
    case 5: {
      _x_217.method_0(_x_217.self, "COMMA");
      return;
    }
    case 6: {
      _x_217.method_0(_x_217.self, "ARROW");
      return;
    }
    case 7: {
      _x_217.method_0(_x_217.self, "QUESTION");
      return;
    }
    case 8: {
      const _IDENT = _x_216;
      const _$42$arg_218 = _IDENT._0;
      _x_217.method_0(_x_217.self, "IDENT(");
      moonbitlang$core$builtin$$Logger$write_object$6$(_x_217, _$42$arg_218);
      _x_217.method_0(_x_217.self, ")");
      return;
    }
    default: {
      const _PKG_AND_IDENT = _x_216;
      const _$42$arg_219 = _PKG_AND_IDENT._0;
      _x_217.method_0(_x_217.self, "PKG_AND_IDENT(");
      const _$42$x0_220 = _$42$arg_219._0;
      const _$42$x1_221 = _$42$arg_219._1;
      _x_217.method_0(_x_217.self, "(");
      moonbitlang$core$builtin$$Logger$write_object$6$(_x_217, _$42$x0_220);
      _x_217.method_0(_x_217.self, ", ");
      moonbitlang$core$builtin$$Logger$write_object$6$(_x_217, _$42$x1_221);
      _x_217.method_0(_x_217.self, ")");
      _x_217.method_0(_x_217.self, ")");
      return;
    }
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$token(lexbuf) {
  let _tmp = lexbuf;
  _L: while (true) {
    const lexbuf$2 = _tmp;
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf$2.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _capture_1_start = -1;
    let _capture_1_end = -1;
    let _capture_2_start = -1;
    let _capture_2_end = -1;
    let _tag_0 = -1;
    let _tag_1 = -1;
    let _tmp$2 = 0;
    _L$2: while (true) {
      const _param = _tmp$2;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$3;
          if (_bind === -1) {
            _tmp$3 = 1;
          } else {
            if (_bind >= 0 && _bind <= 8) {
              _tmp$3 = 2;
            } else {
              if (_bind >= 9 && _bind <= 10) {
                _tmp$3 = 3;
              } else {
                if (_bind >= 11 && _bind <= 31) {
                  _tmp$3 = 2;
                } else {
                  if (_bind === 32) {
                    _tmp$3 = 3;
                  } else {
                    if (_bind >= 33 && _bind <= 39) {
                      _tmp$3 = 2;
                    } else {
                      if (_bind === 40) {
                        _tmp$3 = 4;
                      } else {
                        if (_bind === 41) {
                          _tmp$3 = 5;
                        } else {
                          if (_bind >= 42 && _bind <= 43) {
                            _tmp$3 = 2;
                          } else {
                            if (_bind === 44) {
                              _tmp$3 = 6;
                            } else {
                              if (_bind === 45) {
                                _tmp$3 = 7;
                              } else {
                                if (_bind >= 46 && _bind <= 62) {
                                  _tmp$3 = 2;
                                } else {
                                  if (_bind === 63) {
                                    _tmp$3 = 8;
                                  } else {
                                    if (_bind === 64) {
                                      _tmp$3 = 9;
                                    } else {
                                      if (_bind >= 65 && _bind <= 90) {
                                        _tmp$3 = 10;
                                      } else {
                                        if (_bind === 91) {
                                          _tmp$3 = 11;
                                        } else {
                                          if (_bind === 92) {
                                            _tmp$3 = 2;
                                          } else {
                                            if (_bind === 93) {
                                              _tmp$3 = 12;
                                            } else {
                                              if (_bind === 94) {
                                                _tmp$3 = 2;
                                              } else {
                                                if (_bind === 95) {
                                                  _tmp$3 = 10;
                                                } else {
                                                  if (_bind === 96) {
                                                    _tmp$3 = 2;
                                                  } else {
                                                    if (_bind >= 97 && _bind <= 122) {
                                                      _tmp$3 = 10;
                                                    } else {
                                                      if (_bind >= 123 && _bind <= 1114111) {
                                                        _tmp$3 = 2;
                                                      } else {
                                                        break _L$2;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$3;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 11) {
            _match_pattern = 11;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 10) {
            _match_pattern = 10;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 3: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
          }
          const _bind$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$4;
          if (_bind$2 >= 9 && _bind$2 <= 10) {
            _tmp$4 = 3;
          } else {
            if (_bind$2 === 32) {
              _tmp$4 = 3;
            } else {
              break _L$2;
            }
          }
          _tmp$2 = _tmp$4;
          continue _L$2;
        }
        case 4: {
          if (_match_pattern >= 6) {
            _match_pattern = 6;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 5: {
          if (_match_pattern >= 7) {
            _match_pattern = 7;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 6: {
          if (_match_pattern >= 8) {
            _match_pattern = 8;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 7: {
          if (_match_pattern >= 10) {
            _match_pattern = 10;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          const _bind$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$5;
          if (_bind$3 === 62) {
            _tmp$5 = 13;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$5;
          continue _L$2;
        }
        case 8: {
          if (_match_pattern >= 9) {
            _match_pattern = 9;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 9: {
          if (_match_pattern >= 10) {
            _match_pattern = 10;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          const _bind$4 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$6;
          if (_bind$4 >= 65 && _bind$4 <= 90) {
            _tmp$6 = 14;
          } else {
            if (_bind$4 === 95) {
              _tmp$6 = 14;
            } else {
              if (_bind$4 >= 97 && _bind$4 <= 122) {
                _tmp$6 = 14;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$2 = _tmp$6;
          continue _L$2;
        }
        case 10: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$5 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$7;
          if (_bind$5 >= 48 && _bind$5 <= 57) {
            _tmp$7 = 10;
          } else {
            if (_bind$5 >= 65 && _bind$5 <= 90) {
              _tmp$7 = 10;
            } else {
              if (_bind$5 === 95) {
                _tmp$7 = 10;
              } else {
                if (_bind$5 >= 97 && _bind$5 <= 122) {
                  _tmp$7 = 10;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$2 = _tmp$7;
          continue _L$2;
        }
        case 11: {
          if (_match_pattern >= 4) {
            _match_pattern = 4;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 12: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 13: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 2 | 0;
          }
          break _L$2;
        }
        case 14: {
          _tag_0 = lexbuf$2.pos;
          const _bind$6 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$8;
          if (_bind$6 === 46) {
            _tmp$8 = 15;
          } else {
            if (_bind$6 === 47) {
              _tmp$8 = 16;
            } else {
              if (_bind$6 >= 48 && _bind$6 <= 57) {
                _tmp$8 = 14;
              } else {
                if (_bind$6 >= 65 && _bind$6 <= 90) {
                  _tmp$8 = 14;
                } else {
                  if (_bind$6 === 95) {
                    _tmp$8 = 14;
                  } else {
                    if (_bind$6 >= 97 && _bind$6 <= 122) {
                      _tmp$8 = 14;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$8;
          continue _L$2;
        }
        case 15: {
          _tag_1 = lexbuf$2.pos;
          const _bind$7 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$9;
          if (_bind$7 >= 65 && _bind$7 <= 90) {
            _tmp$9 = 17;
          } else {
            if (_bind$7 === 95) {
              _tmp$9 = 17;
            } else {
              if (_bind$7 >= 97 && _bind$7 <= 122) {
                _tmp$9 = 17;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$2 = _tmp$9;
          continue _L$2;
        }
        case 16: {
          const _bind$8 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$10;
          if (_bind$8 >= 65 && _bind$8 <= 90) {
            _tmp$10 = 14;
          } else {
            if (_bind$8 === 95) {
              _tmp$10 = 14;
            } else {
              if (_bind$8 >= 97 && _bind$8 <= 122) {
                _tmp$10 = 14;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$2 = _tmp$10;
          continue _L$2;
        }
        case 17: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
            _capture_1_start = _tag_1;
            _capture_1_end = _match_end;
            _capture_2_start = _match_start + 1 | 0;
            _capture_2_end = _tag_0;
          }
          const _bind$9 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$203$(lexbuf$2);
          let _tmp$11;
          if (_bind$9 >= 48 && _bind$9 <= 57) {
            _tmp$11 = 17;
          } else {
            if (_bind$9 >= 65 && _bind$9 <= 90) {
              _tmp$11 = 17;
            } else {
              if (_bind$9 === 95) {
                _tmp$11 = 17;
              } else {
                if (_bind$9 >= 97 && _bind$9 <= 122) {
                  _tmp$11 = 17;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$2 = _tmp$11;
          continue _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 11) {
      moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$203$(lexbuf$2, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          continue _L;
        }
        case 1: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          const id = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_1_start, _capture_1_end);
          const pkg = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_2_start, _capture_2_end);
          return new Result$Ok$42$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$PKG_AND_IDENT({ _0: pkg, _1: id }), _1: _capture_0_start, _2: _capture_0_end });
        }
        case 2: {
          const t = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$42$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$IDENT(t), _1: _capture_0_start, _2: _capture_0_end });
        }
        case 3: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$42$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$ARROW, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 4: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$42$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$LBRACKET, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 5: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$42$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$RBRACKET, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 6: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$42$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$LPAREN, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 7: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$42$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$RPAREN, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 8: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$42$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$COMMA, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 9: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$42$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$QUESTION, _1: _capture_0_start, _2: _capture_0_end });
        }
        case 10: {
          const t$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Err$42$(new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$LexError$46$Unrecognized(t$2, _capture_0_start));
        }
        case 11: {
          moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$203$(lexbuf$2, _capture_0_start, _capture_0_end);
          return new Result$Ok$42$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$Token$EOF, _1: _capture_0_start, _2: _capture_0_end });
        }
        default: {
          return new Result$Ok$42$($panic());
        }
      }
    } else {
      return new Result$Ok$42$($panic());
    }
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$error(stack, token, loc) {
  const expected = [];
  const _arr = [{ _0: 0, _1: 0 }, { _0: 1, _1: 1 }, { _0: 2, _1: 2 }, { _0: 3, _1: 3 }, { _0: 4, _1: 4 }, { _0: 5, _1: 5 }, { _0: 6, _1: 6 }, { _0: 7, _1: 7 }, { _0: 8, _1: 8 }, { _0: 9, _1: 9 }];
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const term = _arr[_i];
      const kind = term._1;
      const symbol = term._0;
      let stack$2;
      _L: {
        stack$2 = stack;
        break _L;
      }
      let _tmp$2 = stack$2;
      _L$2: while (true) {
        const stack$3 = _tmp$2;
        if (stack$3.$tag === 0) {
          break;
        } else {
          const _Cons = stack$3;
          const _state = _Cons._0;
          let count;
          let symbol$2;
          _L$3: {
            _L$4: {
              const _bind = _state(symbol);
              switch (_bind.$tag) {
                case 0: {
                  break _L$4;
                }
                case 1: {
                  break _L$4;
                }
                case 2: {
                  const _Reduce = _bind;
                  const _count = _Reduce._0;
                  const _symbol = _Reduce._1;
                  count = _count;
                  symbol$2 = _symbol;
                  break _L$3;
                }
                case 3: {
                  const _ReduceNoLookahead = _bind;
                  const _count$2 = _ReduceNoLookahead._0;
                  const _symbol$2 = _ReduceNoLookahead._1;
                  count = _count$2;
                  symbol$2 = _symbol$2;
                  break _L$3;
                }
                default: {
                  break _L$2;
                }
              }
            }
            moonbitlang$core$array$$Array$push$125$(expected, kind);
            break;
          }
          let stack$4;
          let count$2;
          let symbol$3;
          _L$4: {
            stack$4 = stack$3;
            count$2 = count;
            symbol$3 = symbol$2;
            break _L$4;
          }
          let _tmp$3 = stack$4;
          let _tmp$4 = count$2;
          let _tmp$5 = symbol$3;
          _L$5: while (true) {
            const stack$5 = _tmp$3;
            const count$3 = _tmp$4;
            const symbol$4 = _tmp$5;
            const stack$6 = moonbitlang$core$immut$list$$T$drop$34$(stack$5, count$3);
            if (stack$6.$tag === 1) {
              const _Cons$2 = stack$6;
              const _state$2 = _Cons$2._0;
              let count$4;
              let symbol$5;
              _L$6: {
                const _bind = _state$2(symbol$4);
                switch (_bind.$tag) {
                  case 1: {
                    const _Shift = _bind;
                    const _state$3 = _Shift._0;
                    _tmp$2 = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$12$(_state$3, stack$6);
                    continue _L$2;
                  }
                  case 2: {
                    const _Reduce = _bind;
                    const _count = _Reduce._0;
                    const _symbol = _Reduce._1;
                    count$4 = _count;
                    symbol$5 = _symbol;
                    break _L$6;
                  }
                  case 3: {
                    const _ReduceNoLookahead = _bind;
                    const _count$2 = _ReduceNoLookahead._0;
                    const _symbol$2 = _ReduceNoLookahead._1;
                    count$4 = _count$2;
                    symbol$5 = _symbol$2;
                    break _L$6;
                  }
                  default: {
                    $panic();
                    break _L$2;
                  }
                }
              }
              _tmp$3 = stack$6;
              _tmp$4 = count$4;
              _tmp$5 = symbol$5;
              continue;
            } else {
              $panic();
              break _L$2;
            }
          }
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (token === undefined) {
    return new Result$Err$43$(new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$ParseError$46$UnexpectedEndOfInput(loc._1, expected));
  } else {
    const _Some = token;
    const _token = _Some;
    return new Result$Err$43$(new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$ParseError$46$UnexpectedToken(_token, loc, expected));
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_input(token, _start_pos, _end_pos) {
  switch (token.$tag) {
    case 0: {
      return { _0: 0, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 1: {
      return { _0: 1, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 2: {
      return { _0: 2, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 3: {
      return { _0: 3, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 4: {
      return { _0: 4, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 5: {
      return { _0: 5, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 6: {
      return { _0: 6, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 7: {
      return { _0: 7, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 8: {
      const _IDENT = token;
      const _data = _IDENT._0;
      return { _0: 8, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj_String$46$YYObj_String(_data) };
    }
    default: {
      const _PKG_AND_IDENT = token;
      const _data$2 = _PKG_AND_IDENT._0;
      return { _0: 9, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__String__String_$46$YYObj__String__String_(_data$2) };
    }
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_parse$85$(tokens, start, return_, initial_pos) {
  let cursor = 0;
  const state_stack = { val: new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$12$(start, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$12$) };
  const data_stack = [];
  const last_pos = { val: moonbitlang$core$option$$Option$or$8$(initial_pos, moonbitlang$core$array$$Array$op_get$140$(tokens, 0)._1) };
  const state = { val: start };
  let lookahead = undefined;
  let last_shifted_state_stack = state_stack.val;
  while (true) {
    let decision;
    const _func = state.val;
    const _bind = _func(15);
    switch (_bind.$tag) {
      case 3: {
        decision = _bind;
        break;
      }
      case 0: {
        decision = _bind;
        break;
      }
      default: {
        const _bind$2 = lookahead;
        if (_bind$2 === undefined) {
          if (cursor < tokens.length) {
            const _bind$3 = moonbitlang$core$array$$Array$op_get$140$(tokens, cursor);
            const _token = _bind$3._0;
            const _start_pos = _bind$3._1;
            const _end_pos = _bind$3._2;
            cursor = cursor + 1 | 0;
            const _bind$4 = moonbitlang$yacc$lib$parser$type_expr_parser$$yy_input(_token, _start_pos, _end_pos);
            const _symbol = _bind$4._0;
            const _data = _bind$4._1;
            lookahead = { _0: _symbol, _1: { _0: _data, _1: _start_pos, _2: _end_pos }, _2: _token };
            const _func$2 = state.val;
            decision = _func$2(_symbol);
          } else {
            lookahead = { _0: 15, _1: { _0: Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj_Void$46$YYObj_Void, _1: last_pos.val, _2: last_pos.val }, _2: undefined };
            const _func$2 = state.val;
            decision = _func$2(15);
          }
        } else {
          const _Some = _bind$2;
          const _la = _Some;
          const _func$2 = state.val;
          decision = _func$2(_la._0);
        }
      }
    }
    let action;
    let count;
    let symbol;
    _L: {
      _L$2: {
        switch (decision.$tag) {
          case 0: {
            return new Result$Ok$44$(return_(moonbitlang$core$array$$Array$unsafe_pop$11$(data_stack)._0));
          }
          case 1: {
            const _Shift = decision;
            const _next_state = _Shift._0;
            const _bind$3 = lookahead;
            if (_bind$3 === undefined) {
              $panic();
            } else {
              const _Some = _bind$3;
              const _la = _Some;
              moonbitlang$core$array$$Array$push$11$(data_stack, _la._1);
              state_stack.val = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$12$(_next_state, state_stack.val);
              last_shifted_state_stack = state_stack.val;
              state.val = _next_state;
              last_pos.val = _la._1._2;
              lookahead = undefined;
            }
            break;
          }
          case 2: {
            const _Reduce = decision;
            const _count = _Reduce._0;
            const _symbol = _Reduce._1;
            const _action = _Reduce._2;
            action = _action;
            count = _count;
            symbol = _symbol;
            break _L$2;
          }
          case 3: {
            const _ReduceNoLookahead = decision;
            const _count$2 = _ReduceNoLookahead._0;
            const _symbol$2 = _ReduceNoLookahead._1;
            const _action$2 = _ReduceNoLookahead._2;
            action = _action$2;
            count = _count$2;
            symbol = _symbol$2;
            break _L$2;
          }
          default: {
            const _bind$4 = moonbitlang$core$option$$Option$unwrap$170$(lookahead);
            const _x = _bind$4._1;
            const _start_pos = _x._1;
            const _end_pos = _x._2;
            const _token = _bind$4._2;
            const _bind$5 = moonbitlang$yacc$lib$parser$type_expr_parser$$error(last_shifted_state_stack, _token, { _0: _start_pos, _1: _end_pos });
            if (_bind$5.$tag === 1) {
              const _ok = _bind$5;
              _ok._0;
            } else {
              return _bind$5;
            }
          }
        }
        break _L;
      }
      let _tmp = count;
      let _tmp$2 = symbol;
      let _tmp$3 = action;
      _L$3: while (true) {
        const args = moonbitlang$core$array$$Array$op_as_view$11$(data_stack, data_stack.length - count | 0, undefined);
        const data = action(last_pos.val, args);
        let start_pos;
        let end_pos;
        _L$4: {
          if (args.len === 0) {
            const _tmp$4 = last_pos.val;
            const _tmp$5 = last_pos.val;
            start_pos = _tmp$4;
            end_pos = _tmp$5;
            break _L$4;
          } else {
            const _tmp$4 = moonbitlang$core$array$$ArrayView$op_get$11$(args, 0)._1;
            const _tmp$5 = moonbitlang$core$array$$ArrayView$op_get$11$(args, args.len - 1 | 0)._2;
            start_pos = _tmp$4;
            end_pos = _tmp$5;
            break _L$4;
          }
        }
        let _tmp$4 = 0;
        while (true) {
          const i = _tmp$4;
          if (i < count) {
            moonbitlang$core$array$$Array$unsafe_pop$11$(data_stack);
            state_stack.val = moonbitlang$core$immut$list$$T$tail$34$(state_stack.val);
            _tmp$4 = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        state.val = moonbitlang$core$immut$list$$T$unsafe_head$34$(state_stack.val);
        moonbitlang$core$array$$Array$push$11$(data_stack, { _0: data, _1: start_pos, _2: end_pos });
        let action$2;
        let count$2;
        let symbol$2;
        _L$5: {
          const _func$2 = state.val;
          const _bind$3 = _func$2(symbol);
          switch (_bind$3.$tag) {
            case 0: {
              return new Result$Ok$44$(return_(moonbitlang$core$array$$Array$unsafe_pop$11$(data_stack)._0));
            }
            case 1: {
              const _Shift = _bind$3;
              const _next_state = _Shift._0;
              state_stack.val = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$12$(_next_state, state_stack.val);
              state.val = _next_state;
              break _L$3;
            }
            case 2: {
              const _Reduce = _bind$3;
              const _count = _Reduce._0;
              const _symbol = _Reduce._1;
              const _action = _Reduce._2;
              action$2 = _action;
              count$2 = _count;
              symbol$2 = _symbol;
              break _L$5;
            }
            case 3: {
              const _ReduceNoLookahead = _bind$3;
              const _count$2 = _ReduceNoLookahead._0;
              const _symbol$2 = _ReduceNoLookahead._1;
              const _action$2 = _ReduceNoLookahead._2;
              action$2 = _action$2;
              count$2 = _count$2;
              symbol$2 = _symbol$2;
              break _L$5;
            }
            default: {
              $panic();
              break _L$3;
            }
          }
        }
        _tmp = count$2;
        _tmp$2 = symbol$2;
        _tmp$3 = action$2;
        continue;
      }
    }
    continue;
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_1(_lookahead) {
  return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Accept;
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_3(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 45) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar1 = _YYObj__ast_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_11(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$ReduceNoLookahead(1, 12, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_3);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_13(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 45) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar2 = _YYObj__ast_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 3)._0;
    if (_bind$2.$tag === 46) {
      const _YYObj__immut_list_T__ast_TypeExpr_ = _bind$2;
      const __dollar4 = _YYObj__immut_list_T__ast_TypeExpr_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Tuple(moonbitlang$core$immut$list$$T$to_array$85$(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$29$(__dollar2, __dollar4))));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_1(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 45) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar2 = _YYObj__ast_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 3)._0;
    if (_bind$2.$tag === 46) {
      const _YYObj__immut_list_T__ast_TypeExpr_ = _bind$2;
      const __dollar4 = _YYObj__immut_list_T__ast_TypeExpr_._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 6)._0;
      if (_bind$3.$tag === 45) {
        const _YYObj__ast_TypeExpr$2 = _bind$3;
        const __dollar7 = _YYObj__ast_TypeExpr$2._0;
        return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Arrow(moonbitlang$core$immut$list$$T$to_array$85$(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$29$(__dollar2, __dollar4)), __dollar7));
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_18(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$ReduceNoLookahead(7, 11, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_1);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_7(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 45) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar1 = _YYObj__ast_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_0(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 45) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar1 = _YYObj__ast_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Option(__dollar1));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_20(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$ReduceNoLookahead(2, 12, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_0);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_19(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 7: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_20);
      }
      case 0: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 5: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Reduce(1, 11, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_7);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_14(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj__String__String_ = _bind;
    const __dollar1 = _YYObj__String__String_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Constr(__dollar1._0, __dollar1._1, []));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_15(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj__String__String_ = _bind;
    const __dollar1 = _YYObj__String__String_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 46) {
      const _YYObj__immut_list_T__ast_TypeExpr_ = _bind$2;
      const __dollar3 = _YYObj__immut_list_T__ast_TypeExpr_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Constr(__dollar1._0, __dollar1._1, moonbitlang$core$immut$list$$T$to_array$85$(__dollar3)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_31(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$ReduceNoLookahead(4, 13, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_15);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_30(_lookahead) {
  if (_lookahead === 4) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_31);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_6(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 45) {
    const _YYObj__ast_TypeExpr = _bind;
    const _type_expr = _YYObj__ast_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__immut_list_T__ast_TypeExpr_$46$YYObj__immut_list_T__ast_TypeExpr_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$29$(_type_expr, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$29$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_5(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 45) {
    const _YYObj__ast_TypeExpr = _bind;
    const _type_expr = _YYObj__ast_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 46) {
      const _YYObj__immut_list_T__ast_TypeExpr_ = _bind$2;
      const _type_expr_list = _YYObj__immut_list_T__ast_TypeExpr_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__immut_list_T__ast_TypeExpr_$46$YYObj__immut_list_T__ast_TypeExpr_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$29$(_type_expr, _type_expr_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_6(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$ReduceNoLookahead(3, 14, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_5);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_4(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 43) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Constr(undefined, __dollar1, []));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_12(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 43) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 2)._0;
    if (_bind$2.$tag === 46) {
      const _YYObj__immut_list_T__ast_TypeExpr_ = _bind$2;
      const __dollar3 = _YYObj__immut_list_T__ast_TypeExpr_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Constr(undefined, __dollar1, moonbitlang$core$immut$list$$T$to_array$85$(__dollar3)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_10(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$ReduceNoLookahead(4, 13, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_12);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_9(_lookahead) {
  if (_lookahead === 4) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_10);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_10(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 45) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar2 = _YYObj__ast_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 5)._0;
    if (_bind$2.$tag === 45) {
      const _YYObj__ast_TypeExpr$2 = _bind$2;
      const __dollar6 = _YYObj__ast_TypeExpr$2._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Arrow([__dollar2], __dollar6));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_23(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$ReduceNoLookahead(6, 11, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_10);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_11(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 45) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar2 = _YYObj__ast_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(__dollar2);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_2(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 1)._0;
  if (_bind.$tag === 45) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar2 = _YYObj__ast_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 4)._0;
    if (_bind$2.$tag === 45) {
      const _YYObj__ast_TypeExpr$2 = _bind$2;
      const __dollar5 = _YYObj__ast_TypeExpr$2._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Arrow([__dollar2], __dollar5));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_26(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$ReduceNoLookahead(5, 11, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_2);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_8(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 3)._0;
  if (_bind.$tag === 45) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar4 = _YYObj__ast_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$ast$46$TypeExpr$Arrow([], __dollar4));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_29(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$ReduceNoLookahead(4, 11, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_8);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_12(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_2);
    }
    case 8: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_7);
    }
    case 13: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_11);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_12);
    }
    case 11: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_13);
    }
    case 12: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_19);
    }
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_27);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_13(_lookahead) {
  switch (_lookahead) {
    case 5: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_14);
    }
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_24);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_14(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_2);
    }
    case 11: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_4);
    }
    case 8: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_7);
    }
    case 13: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_11);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_12);
    }
    case 14: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_15);
    }
    case 12: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_19);
    }
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_21);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_15(_lookahead) {
  if (_lookahead === 2) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_16);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_16(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 6: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_17);
      }
      case 0: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 7: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Reduce(5, 13, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_13);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_17(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_2);
    }
    case 8: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_7);
    }
    case 13: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_11);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_12);
    }
    case 11: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_18);
    }
    case 12: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_19);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_2(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 3: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_3);
      }
      case 0: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 7: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Reduce(1, 13, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_14);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_3(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_2);
    }
    case 11: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_4);
    }
    case 8: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_7);
    }
    case 13: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_11);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_12);
    }
    case 12: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_19);
    }
    case 14: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_30);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_4(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 5: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_5);
      }
      case 2: {
        break _L;
      }
      case 4: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Reduce(1, 14, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_6);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_5(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_2);
    }
    case 11: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_4);
    }
    case 14: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_6);
    }
    case 8: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_7);
    }
    case 13: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_11);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_12);
    }
    case 12: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_19);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_7(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 3: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_8);
      }
      case 0: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 7: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Reduce(1, 13, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_4);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_8(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_2);
    }
    case 11: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_4);
    }
    case 8: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_7);
    }
    case 14: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_9);
    }
    case 13: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_11);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_12);
    }
    case 12: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_19);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_21(_lookahead) {
  if (_lookahead === 6) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_22);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_22(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_2);
    }
    case 8: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_7);
    }
    case 13: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_11);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_12);
    }
    case 12: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_19);
    }
    case 11: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_23);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_24(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 6: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_25);
      }
      case 0: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 7: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Reduce(3, 13, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_11);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_25(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_2);
    }
    case 8: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_7);
    }
    case 13: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_11);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_12);
    }
    case 12: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_19);
    }
    case 11: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_26);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_27(_lookahead) {
  if (_lookahead === 6) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_28);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_28(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_2);
    }
    case 8: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_7);
    }
    case 13: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_11);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_12);
    }
    case 12: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_19);
    }
    case 11: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_29);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_9(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$11$(_args, 0)._0;
  if (_bind.$tag === 45) {
    const _YYObj__ast_TypeExpr = _bind;
    const __dollar1 = _YYObj__ast_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYObj__ast_TypeExpr$46$YYObj__ast_TypeExpr(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_33(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$ReduceNoLookahead(2, 10, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_action_9);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_32(_lookahead) {
  if (_lookahead === 0) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_33);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_0(_lookahead) {
  switch (_lookahead) {
    case 10: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_1);
    }
    case 9: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_2);
    }
    case 8: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_7);
    }
    case 13: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_11);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_12);
    }
    case 12: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_19);
    }
    case 11: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_32);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$parse_type_expr(tokens, initial_pos) {
  return moonbitlang$yacc$lib$parser$type_expr_parser$$yy_parse$85$(tokens, moonbitlang$yacc$lib$parser$type_expr_parser$$yy_state_0, (_param4) => {
    if (_param4.$tag === 45) {
      const _YYObj__ast_TypeExpr = _param4;
      const _result = _YYObj__ast_TypeExpr._0;
      return _result;
    } else {
      return $panic();
    }
  }, initial_pos);
}
function moonbitlang$yacc$lib$parser$type_expr_parser$$parse(str) {
  const lexbuf = moonbitlang$ulex$45$runtime$lexbuf$$StringLexbuf$from_string(str);
  const tokens = [];
  while (true) {
    let triple;
    let _try_err;
    _L: {
      _L$2: {
        const _bind = moonbitlang$yacc$lib$parser$type_expr_parser$$token(lexbuf);
        if (_bind.$tag === 1) {
          const _ok = _bind;
          triple = _ok._0;
        } else {
          const _err = _bind;
          const _tmp = _err._0;
          _try_err = _tmp;
          break _L$2;
        }
        break _L;
      }
      return new Result$Err$45$(new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$ParseOrLexError$46$LexError(_try_err));
    }
    moonbitlang$core$array$$Array$push$140$(tokens, triple);
    const _bind = triple._0;
    if (_bind.$tag === 0) {
      break;
    }
    continue;
  }
  let _try_err;
  _L: {
    const _bind = moonbitlang$yacc$lib$parser$type_expr_parser$$parse_type_expr(tokens, undefined);
    let _tmp;
    if (_bind.$tag === 1) {
      const _ok = _bind;
      _tmp = _ok._0;
    } else {
      const _err = _bind;
      const _tmp$2 = _err._0;
      _try_err = _tmp$2;
      break _L;
    }
    return new Result$Ok$45$(_tmp);
  }
  return new Result$Err$45$(new Error$moonbitlang$47$yacc$47$lib$47$parser$47$type_expr_parser$46$ParseOrLexError$46$ParseError(_try_err));
}
function moonbitlang$core$builtin$$Show$output$125$(self, logger) {
  let _tmp;
  switch (self) {
    case 0: {
      _tmp = "EOF";
      break;
    }
    case 1: {
      _tmp = "\"(\"";
      break;
    }
    case 2: {
      _tmp = "\")\"";
      break;
    }
    case 3: {
      _tmp = "\"[\"";
      break;
    }
    case 4: {
      _tmp = "\"]\"";
      break;
    }
    case 5: {
      _tmp = "\",\"";
      break;
    }
    case 6: {
      _tmp = "\"->\"";
      break;
    }
    case 7: {
      _tmp = "\"?\"";
      break;
    }
    case 8: {
      _tmp = "IDENT";
      break;
    }
    default: {
      _tmp = "PKG_AND_IDENT";
    }
  }
  logger.method_0(logger.self, _tmp);
}
(() => {
})();
function moonbitlang$core$builtin$$Eq$op_equal$45$(_x_316, _x_317) {
  let _tmp = _x_316;
  let _tmp$2 = _x_317;
  _L: while (true) {
    const _x_316$2 = _tmp;
    const _x_317$2 = _tmp$2;
    switch (_x_316$2.$tag) {
      case 0: {
        const _Constr = _x_316$2;
        const _$42$x0_318 = _Constr._0;
        const _$42$x1_319 = _Constr._1;
        const _$42$x2_320 = _Constr._2;
        if (_x_317$2.$tag === 0) {
          const _Constr$2 = _x_317$2;
          const _$42$y0_321 = _Constr$2._0;
          const _$42$y1_322 = _Constr$2._1;
          const _$42$y2_323 = _Constr$2._2;
          return moonbitlang$core$builtin$$Eq$op_equal$109$(_$42$x0_318, _$42$y0_321) && (_$42$x1_319 === _$42$y1_322 && moonbitlang$core$builtin$$Eq$op_equal$198$(_$42$x2_320, _$42$y2_323));
        } else {
          return false;
        }
      }
      case 1: {
        const _Param = _x_316$2;
        const _$42$x0_324 = _Param._0;
        if (_x_317$2.$tag === 1) {
          const _Param$2 = _x_317$2;
          const _$42$y0_325 = _Param$2._0;
          return _$42$x0_324 === _$42$y0_325;
        } else {
          return false;
        }
      }
      case 2: {
        const _Option = _x_316$2;
        const _$42$x0_326 = _Option._0;
        if (_x_317$2.$tag === 2) {
          const _Option$2 = _x_317$2;
          const _$42$y0_327 = _Option$2._0;
          _tmp = _$42$x0_326;
          _tmp$2 = _$42$y0_327;
          continue _L;
        } else {
          return false;
        }
      }
      case 3: {
        const _Tuple = _x_316$2;
        const _$42$x0_328 = _Tuple._0;
        if (_x_317$2.$tag === 3) {
          const _Tuple$2 = _x_317$2;
          const _$42$y0_329 = _Tuple$2._0;
          return moonbitlang$core$builtin$$Eq$op_equal$198$(_$42$x0_328, _$42$y0_329);
        } else {
          return false;
        }
      }
      default: {
        const _Arrow = _x_316$2;
        const _$42$x0_330 = _Arrow._0;
        const _$42$x1_331 = _Arrow._1;
        if (_x_317$2.$tag === 4) {
          const _Arrow$2 = _x_317$2;
          const _$42$y0_332 = _Arrow$2._0;
          const _$42$y1_333 = _Arrow$2._1;
          if (moonbitlang$core$builtin$$Eq$op_equal$198$(_$42$x0_330, _$42$y0_332)) {
            _tmp = _$42$x1_331;
            _tmp$2 = _$42$y1_333;
            continue _L;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$45$(_x_274, _x_275) {
  let _tmp = _x_274;
  let _tmp$2 = _x_275;
  _L: while (true) {
    const _x_274$2 = _tmp;
    const _x_275$2 = _tmp$2;
    switch (_x_274$2.$tag) {
      case 0: {
        const _Constr = _x_274$2;
        const _$42$x0_276 = _Constr._0;
        const _$42$x1_277 = _Constr._1;
        const _$42$x2_278 = _Constr._2;
        if (_x_275$2.$tag === 0) {
          const _Constr$2 = _x_275$2;
          const _$42$y0_279 = _Constr$2._0;
          const _$42$y1_280 = _Constr$2._1;
          const _$42$y2_281 = _Constr$2._2;
          const _bind = moonbitlang$core$builtin$$Compare$compare$109$(_$42$x0_276, _$42$y0_279);
          if (_bind === 0) {
            const _bind$2 = moonbitlang$core$builtin$$Compare$compare$6$(_$42$x1_277, _$42$y1_280);
            if (_bind$2 === 0) {
              return moonbitlang$core$builtin$$Compare$compare$198$(_$42$x2_278, _$42$y2_281);
            } else {
              return _bind$2;
            }
          } else {
            return _bind;
          }
        } else {
          return -1;
        }
      }
      case 1: {
        const _Param = _x_274$2;
        const _$42$x0_284 = _Param._0;
        switch (_x_275$2.$tag) {
          case 0: {
            return 1;
          }
          case 1: {
            const _Param$2 = _x_275$2;
            const _$42$y0_285 = _Param$2._0;
            return moonbitlang$core$builtin$$Compare$compare$6$(_$42$x0_284, _$42$y0_285);
          }
          default: {
            return -1;
          }
        }
      }
      case 2: {
        const _Option = _x_274$2;
        const _$42$x0_286 = _Option._0;
        switch (_x_275$2.$tag) {
          case 0: {
            return 1;
          }
          case 1: {
            return 1;
          }
          case 2: {
            const _Option$2 = _x_275$2;
            const _$42$y0_287 = _Option$2._0;
            _tmp = _$42$x0_286;
            _tmp$2 = _$42$y0_287;
            continue _L;
          }
          default: {
            return -1;
          }
        }
      }
      case 3: {
        const _Tuple = _x_274$2;
        const _$42$x0_288 = _Tuple._0;
        switch (_x_275$2.$tag) {
          case 0: {
            return 1;
          }
          case 1: {
            return 1;
          }
          case 2: {
            return 1;
          }
          case 3: {
            const _Tuple$2 = _x_275$2;
            const _$42$y0_289 = _Tuple$2._0;
            return moonbitlang$core$builtin$$Compare$compare$198$(_$42$x0_288, _$42$y0_289);
          }
          default: {
            return -1;
          }
        }
      }
      default: {
        const _Arrow = _x_274$2;
        const _$42$x0_290 = _Arrow._0;
        const _$42$x1_291 = _Arrow._1;
        switch (_x_275$2.$tag) {
          case 0: {
            return 1;
          }
          case 1: {
            return 1;
          }
          case 2: {
            return 1;
          }
          case 3: {
            return 1;
          }
          default: {
            const _Arrow$2 = _x_275$2;
            const _$42$y0_292 = _Arrow$2._0;
            const _$42$y1_293 = _Arrow$2._1;
            const _bind = moonbitlang$core$builtin$$Compare$compare$198$(_$42$x0_290, _$42$y0_292);
            if (_bind === 0) {
              _tmp = _$42$x1_291;
              _tmp$2 = _$42$y1_293;
              continue _L;
            } else {
              return _bind;
            }
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$elab$$offset_to_line_column(content, offset) {
  let line = 1;
  let column = 1;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < offset) {
      $bound_check(content, i);
      if (content.charCodeAt(i) === 10) {
        line = line + 1 | 0;
        column = 1;
      } else {
        column = column + 1 | 0;
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return { _0: line, _1: column };
}
function moonbitlang$yacc$lib$elab$$Item$type_(self) {
  const _bind = self.term;
  switch (_bind.$tag) {
    case 0: {
      const _Token = _bind;
      const _token = _Token._0;
      return _token.type_;
    }
    case 1: {
      const _Param = _bind;
      const _type_ = _Param._1;
      return _type_;
    }
    default: {
      const _RuleCall = _bind;
      const _type_$2 = _RuleCall._2;
      return _type_$2;
    }
  }
}
function moonbitlang$yacc$lib$elab$$elaborate_action$46$item_ident_to_index$124$65(name_to_index, ident) {
  if (ident.$tag === 0) {
    const _Dollar = ident;
    const _index = _Dollar._0;
    return _index - 1 | 0;
  } else {
    const _Name = ident;
    const _name = _Name._0;
    return moonbitlang$core$option$$Option$unwrap$8$(moonbitlang$core$builtin$$Map$get$152$(name_to_index, _name));
  }
}
function moonbitlang$yacc$lib$elab$$elaborate_action$46$add_binding$124$71(_env, desc) {
  const items = _env._3;
  const name_to_index = _env._2;
  const bindings = _env._1;
  const visited = _env._0;
  let _tmp = desc;
  _L: while (true) {
    const desc$2 = _tmp;
    if (!moonbitlang$core$sorted_set$$T$contains$46$(visited, desc$2)) {
      moonbitlang$core$sorted_set$$T$add$46$(visited, desc$2);
      switch (desc$2.$tag) {
        case 0: {
          const _Dollar = desc$2;
          const _index = _Dollar._0;
          const name = `_dollar${moonbitlang$core$builtin$$Show$to_string$8$(_index)}`;
          moonbitlang$core$array$$Array$push$29$(bindings, { _0: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$Data(_index - 1 | 0, moonbitlang$yacc$lib$elab$$Item$type_(moonbitlang$core$array$$Array$op_get$27$(items, _index - 1 | 0))), _1: name });
          return;
        }
        case 1: {
          moonbitlang$core$array$$Array$push$29$(bindings, { _0: $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$StartPos, _1: "_start_pos" });
          return;
        }
        case 3: {
          moonbitlang$yacc$lib$elab$$elaborate_action$46$add_binding$124$71(_env, $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$StartPos);
          _tmp = $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$EndPos;
          continue _L;
        }
        case 2: {
          moonbitlang$core$array$$Array$push$29$(bindings, { _0: $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$EndPos, _1: "_end_pos" });
          return;
        }
        case 4: {
          const _StartPosOf = desc$2;
          const _arg = _StartPosOf._0;
          const index = moonbitlang$yacc$lib$elab$$elaborate_action$46$item_ident_to_index$124$65(name_to_index, _arg);
          moonbitlang$core$array$$Array$push$29$(bindings, { _0: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$StartPosOf(index), _1: `_start_pos_of_item${moonbitlang$core$builtin$$Show$to_string$8$(index)}` });
          return;
        }
        case 5: {
          const _EndPosOf = desc$2;
          const _arg$2 = _EndPosOf._0;
          const index$2 = moonbitlang$yacc$lib$elab$$elaborate_action$46$item_ident_to_index$124$65(name_to_index, _arg$2);
          moonbitlang$core$array$$Array$push$29$(bindings, { _0: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$EndPosOf(index$2), _1: `_end_pos_of_item${moonbitlang$core$builtin$$Show$to_string$8$(index$2)}` });
          return;
        }
        case 6: {
          const _LocOf = desc$2;
          const _arg$3 = _LocOf._0;
          moonbitlang$yacc$lib$elab$$elaborate_action$46$add_binding$124$71(_env, new $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$StartPosOf(_arg$3));
          _tmp = new $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$EndPosOf(_arg$3);
          continue _L;
        }
        case 7: {
          moonbitlang$core$array$$Array$push$29$(bindings, { _0: $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$SymbolStartPos, _1: "_symbol_start_pos" });
          return;
        }
        default: {
          moonbitlang$yacc$lib$elab$$elaborate_action$46$add_binding$124$71(_env, $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$SymbolStartPos);
          _tmp = $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$EndPos;
          continue _L;
        }
      }
    } else {
      return;
    }
  }
}
function moonbitlang$yacc$lib$elab$$elaborate_action(items, ast_action, parser_spec_str, filename, rule_index, clause_index, ast_clause, nonterminal_name, type_, json_cst) {
  const arity = items.length;
  const name_to_index = moonbitlang$core$builtin$$Map$from_array$152$([]);
  const _len = items.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const item = items[_i];
      const _bind = item.binder;
      if (_bind === undefined) {
      } else {
        const _Some = _bind;
        const _name = _Some;
        moonbitlang$core$builtin$$Map$op_set$152$(name_to_index, _name, _i);
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const bindings = [];
  const visited = moonbitlang$core$sorted_set$$new$46$();
  const _env = { _0: visited, _1: bindings, _2: name_to_index, _3: items };
  const body = [];
  if (json_cst === 0) {
    const _len$2 = items.length;
    let _tmp$2 = 0;
    while (true) {
      const _i = _tmp$2;
      if (_i < _len$2) {
        const item = items[_i];
        const _x = item.binder;
        if (_x === undefined) {
        } else {
          const _Some = _x;
          const _name = _Some;
          moonbitlang$core$array$$Array$push$29$(bindings, { _0: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$Data(_i, moonbitlang$yacc$lib$elab$$Item$type_(item)), _1: _name });
        }
        _tmp$2 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const _bind = ast_action.code;
    if (_bind === undefined) {
      moonbitlang$core$array$$Array$push$68$(body, { _0: "()", _1: undefined });
    } else {
      const _Some = _bind;
      const _code = _Some;
      let last_index = 0;
      const _arr = _code.subst;
      const _len$3 = _arr.length;
      let _tmp$3 = 0;
      while (true) {
        const _i = _tmp$3;
        if (_i < _len$3) {
          const item = _arr[_i];
          if (item.start > last_index) {
            const len = item.start - last_index | 0;
            moonbitlang$core$array$$Array$push$68$(body, { _0: moonbitlang$core$string$$String$substring(_code.code, last_index, item.start), _1: { _0: _code.utf8_pos + last_index | 0, _1: len } });
          }
          moonbitlang$yacc$lib$elab$$elaborate_action$46$add_binding$124$71(_env, item.desc);
          const _bind$2 = item.desc;
          let _tmp$4;
          switch (_bind$2.$tag) {
            case 0: {
              const _Dollar = _bind$2;
              const _index = _Dollar._0;
              _tmp$4 = `_dollar${moonbitlang$core$builtin$$Show$to_string$8$(_index)}`;
              break;
            }
            case 1: {
              _tmp$4 = "_start_pos";
              break;
            }
            case 2: {
              _tmp$4 = "_end_pos";
              break;
            }
            case 3: {
              _tmp$4 = "(_start_pos, _end_pos)";
              break;
            }
            case 4: {
              const _StartPosOf = _bind$2;
              const _arg = _StartPosOf._0;
              _tmp$4 = `_start_pos_of_item${moonbitlang$core$builtin$$Show$to_string$8$(moonbitlang$yacc$lib$elab$$elaborate_action$46$item_ident_to_index$124$65(name_to_index, _arg))}`;
              break;
            }
            case 5: {
              const _EndPosOf = _bind$2;
              const _arg$2 = _EndPosOf._0;
              _tmp$4 = `_end_pos_of_item${moonbitlang$core$builtin$$Show$to_string$8$(moonbitlang$yacc$lib$elab$$elaborate_action$46$item_ident_to_index$124$65(name_to_index, _arg$2))}`;
              break;
            }
            case 6: {
              const _LocOf = _bind$2;
              const _arg$3 = _LocOf._0;
              const index = moonbitlang$yacc$lib$elab$$elaborate_action$46$item_ident_to_index$124$65(name_to_index, _arg$3);
              _tmp$4 = `(_start_pos_of_item${moonbitlang$core$builtin$$Show$to_string$8$(index)}, _end_pos_of_item${moonbitlang$core$builtin$$Show$to_string$8$(index)})`;
              break;
            }
            case 7: {
              _tmp$4 = "_symbol_start_pos";
              break;
            }
            default: {
              _tmp$4 = "(_symbol_start_pos, _end_pos)";
            }
          }
          moonbitlang$core$array$$Array$push$68$(body, { _0: _tmp$4, _1: { _0: _code.utf8_pos + item.start | 0, _1: item.end - item.start | 0 } });
          last_index = item.end;
          _tmp$3 = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      if (last_index < _code.code.length) {
        const len = _code.code.length - last_index | 0;
        moonbitlang$core$array$$Array$push$68$(body, { _0: moonbitlang$core$string$$String$substring(_code.code, last_index, _code.code.length), _1: { _0: _code.utf8_pos + last_index | 0, _1: len } });
      }
    }
  } else {
    moonbitlang$yacc$lib$elab$$elaborate_action$46$add_binding$124$71(_env, $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$StartPos);
    moonbitlang$yacc$lib$elab$$elaborate_action$46$add_binding$124$71(_env, $64$moonbitlang$47$yacc$47$lib$47$ast$46$SubstItemDesc$EndPos);
    moonbitlang$core$array$$Array$push$68$(body, { _0: `{\n  \"type\": \"NONTERMINAL\",\n  \"name\": \"${nonterminal_name}\",\n  \"rule_index\": ${moonbitlang$core$builtin$$Show$to_string$8$(rule_index)},\n  \"clause_index\": ${moonbitlang$core$builtin$$Show$to_string$8$(clause_index)},\n  \"children\": args_to_json(_args),\n  \"start\": _start_pos.to_json(),\n  \"end\": _end_pos.to_json(),\n}\n`, _1: undefined });
  }
  const _ast_clause_without_action = ast_clause._0;
  const _ast_clause_action = ast_clause._1;
  const _bind = moonbitlang$yacc$lib$elab$$offset_to_line_column(parser_spec_str, _ast_clause_without_action.loc._0);
  const _line = _bind._0;
  const _column = _bind._1;
  const original_clause_info = { file: filename, line: _line - 1 | 0, column: _column - 1 | 0, code: moonbitlang$core$string$$String$substring(parser_spec_str, _ast_clause_without_action.loc._0, _ast_clause_action.loc._0 + _ast_clause_action.loc._1 | 0) };
  return { stamp: moonbitlang$yacc$lib$util$stamp$$new(), arity: arity, type_: type_, sub_actions: [], bindings: bindings, body: body, original_clause_info: original_clause_info };
}
function moonbitlang$yacc$lib$elab$$elaborate_type_expr_with_generic_params(ast_type_expr, generic_params) {
  const elaborate_type_expr = (ast_type_expr$2) => moonbitlang$yacc$lib$elab$$elaborate_type_expr_with_generic_params(ast_type_expr$2, generic_params);
  let name;
  let pkg;
  let args;
  _L: {
    switch (ast_type_expr.$tag) {
      case 0: {
        const _Constr = ast_type_expr;
        const _x = _Constr._0;
        if (_x === undefined) {
          const _name = _Constr._1;
          const _x$2 = _Constr._2;
          if (_x$2.length === 0) {
            if (moonbitlang$core$set$$Set$contains$6$(generic_params, _name)) {
              return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Param(_name);
            } else {
              name = _name;
              pkg = _x;
              args = _x$2;
              break _L;
            }
          } else {
            name = _name;
            pkg = _x;
            args = _x$2;
            break _L;
          }
        } else {
          const _name = _Constr._1;
          const _args = _Constr._2;
          name = _name;
          pkg = _x;
          args = _args;
          break _L;
        }
      }
      case 1: {
        const _Option = ast_type_expr;
        const _inner = _Option._0;
        return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Option(elaborate_type_expr(_inner));
      }
      case 2: {
        const _Tuple = ast_type_expr;
        const _args = _Tuple._0;
        const _p = new Array(_args.length);
        const _p$2 = _args.length;
        let _tmp = 0;
        while (true) {
          const _p$3 = _tmp;
          if (_p$3 < _p$2) {
            const _p$4 = _args[_p$3];
            _p[_p$3] = elaborate_type_expr(_p$4);
            _tmp = _p$3 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Tuple(_p);
      }
      default: {
        const _Arrow = ast_type_expr;
        const _args$2 = _Arrow._0;
        const _ret = _Arrow._1;
        const _p$3 = new Array(_args$2.length);
        const _p$4 = _args$2.length;
        let _tmp$2 = 0;
        while (true) {
          const _p$5 = _tmp$2;
          if (_p$5 < _p$4) {
            const _p$6 = _args$2[_p$5];
            _p$3[_p$5] = elaborate_type_expr(_p$6);
            _tmp$2 = _p$5 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Arrow(_p$3, elaborate_type_expr(_ret));
      }
    }
  }
  const _p = new Array(args.length);
  const _p$2 = args.length;
  let _tmp = 0;
  while (true) {
    const _p$3 = _tmp;
    if (_p$3 < _p$2) {
      const _p$4 = args[_p$3];
      _p[_p$3] = elaborate_type_expr(_p$4);
      _tmp = _p$3 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(pkg, name, _p);
}
function moonbitlang$yacc$lib$elab$$map_error$213$(arr, f) {
  const result = [];
  const _len = arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const item = arr[_i];
      const _bind = f(item);
      let _tmp$2;
      if (_bind.$tag === 1) {
        const _ok = _bind;
        _tmp$2 = _ok._0;
      } else {
        return _bind;
      }
      moonbitlang$core$array$$Array$push$27$(result, _tmp$2);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return new Result$Ok$46$(result);
}
function moonbitlang$yacc$lib$elab$$map_error$214$(arr, f) {
  const result = [];
  const _len = arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const item = arr[_i];
      const _bind = f(item);
      let _tmp$2;
      if (_bind.$tag === 1) {
        const _ok = _bind;
        _tmp$2 = _ok._0;
      } else {
        return _bind;
      }
      moonbitlang$core$array$$Array$push$134$(result, _tmp$2);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return new Result$Ok$47$(result);
}
function moonbitlang$yacc$lib$elab$$elaborate_type_expr(ast_type_expr) {
  return moonbitlang$yacc$lib$elab$$elaborate_type_expr_with_generic_params(ast_type_expr, moonbitlang$core$set$$Set$new$6$(8));
}
function moonbitlang$yacc$lib$elab$$parse_and_elaborate_type_expr(str) {
  let type_expr;
  let _try_err;
  _L: {
    _L$2: {
      const _bind = moonbitlang$yacc$lib$parser$type_expr_parser$$parse(str);
      if (_bind.$tag === 1) {
        const _ok = _bind;
        type_expr = _ok._0;
      } else {
        const _err = _bind;
        const _tmp = _err._0;
        _try_err = _tmp;
        break _L$2;
      }
      break _L;
    }
    return new Result$Err$48$(new Error$moonbitlang$47$yacc$47$lib$47$elab$46$ElabError$46$FailedToParseTypeExpr(str));
  }
  return new Result$Ok$48$(moonbitlang$yacc$lib$elab$$elaborate_type_expr(type_expr));
}
function moonbitlang$yacc$lib$elab$$elaborate$46$get_token_by_name$124$131(_env, name) {
  const token_by_name = _env._1;
  const tokens = _env._0;
  const _bind = moonbitlang$core$builtin$$Map$get$150$(token_by_name, name);
  if (_bind === undefined) {
    const _bind$2 = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", []);
    const _bind$3 = undefined;
    const _bind$4 = undefined;
    const token = { name: name, prec: _bind$4, type_: _bind$2, image: _bind$3 };
    moonbitlang$core$builtin$$Map$op_set$150$(token_by_name, name, token);
    moonbitlang$core$array$$Array$push$158$(tokens, token);
    return token;
  } else {
    const _Some = _bind;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$yacc$lib$elab$$elaborate$46$elaborate_token_type$124$132(token_payload_rewrite, type_) {
  switch (token_payload_rewrite) {
    case 2: {
      if (type_ === undefined) {
        return new Result$Ok$48$(new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", []));
      } else {
        const _Some = type_;
        const _type_ = _Some;
        return moonbitlang$yacc$lib$elab$$parse_and_elaborate_type_expr(_type_);
      }
    }
    case 1: {
      return new Result$Ok$48$(new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Json", []));
    }
    default: {
      return new Result$Ok$48$(new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", []));
    }
  }
}
function moonbitlang$yacc$lib$elab$$elaborate$46$map_term$124$204(_env, ast_term, rule_param_map) {
  const rule_by_name = _env._2;
  const token_by_name = _env._1;
  const token_by_image = _env._0;
  switch (ast_term.$tag) {
    case 0: {
      const _Symbol = ast_term;
      const _symbol = _Symbol._0;
      const _loc = _Symbol._1;
      const _bind = moonbitlang$core$builtin$$Map$get$150$(token_by_name, _symbol);
      if (_bind === undefined) {
        const _bind$2 = moonbitlang$core$builtin$$Map$get$151$(rule_param_map, _symbol);
        if (_bind$2 === undefined) {
          const _bind$3 = moonbitlang$core$builtin$$Map$get$148$(rule_by_name, _symbol);
          if (_bind$3 === undefined) {
            return new Result$Err$49$(new Error$moonbitlang$47$yacc$47$lib$47$elab$46$ElabError$46$UnresolvedSymbol(_symbol, _loc));
          } else {
            const _Some = _bind$3;
            const _rule = _Some;
            return new Result$Ok$49$(new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall(_symbol, [], _rule.type_));
          }
        } else {
          const _Some = _bind$2;
          const _type_ = _Some;
          return new Result$Ok$49$(new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$Param(_symbol, _type_));
        }
      } else {
        const _Some = _bind;
        const _token = _Some;
        return new Result$Ok$49$(new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$Token(_token));
      }
    }
    case 1: {
      const _Image = ast_term;
      const _image = _Image._0;
      const _loc$2 = _Image._1;
      const _bind$2 = moonbitlang$core$builtin$$Map$get$150$(token_by_image, _image);
      if (_bind$2 === undefined) {
        return new Result$Err$49$(new Error$moonbitlang$47$yacc$47$lib$47$elab$46$ElabError$46$UnresolvedSymbol(moonbitlang$core$string$$String$escape(_image), _loc$2));
      } else {
        const _Some = _bind$2;
        const _token = _Some;
        return new Result$Ok$49$(new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$Token(_token));
      }
    }
    default: {
      const _RuleCall = ast_term;
      const _symbol$2 = _RuleCall._0;
      const _symbol_loc = _RuleCall._1;
      const _args = _RuleCall._2;
      const _bind$3 = moonbitlang$core$builtin$$Map$get$148$(rule_by_name, _symbol$2);
      if (_bind$3 === undefined) {
        return new Result$Err$49$(new Error$moonbitlang$47$yacc$47$lib$47$elab$46$ElabError$46$UnresolvedSymbol(_symbol$2, _symbol_loc));
      } else {
        const _Some = _bind$3;
        const _rule = _Some;
        const _bind$4 = moonbitlang$yacc$lib$elab$$map_error$214$(_args, (arg) => moonbitlang$yacc$lib$elab$$elaborate$46$map_term$124$204(_env, arg, rule_param_map));
        let _tmp;
        if (_bind$4.$tag === 1) {
          const _ok = _bind$4;
          _tmp = _ok._0;
        } else {
          return _bind$4;
        }
        return new Result$Ok$49$(new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall(_symbol$2, _tmp, _rule.type_));
      }
    }
  }
}
function moonbitlang$yacc$lib$elab$$elaborate$46$42$func$124$830(_env, _p) {
  const _bind = _env._1;
  const _action = _env._0;
  return _bind((_p$2) => _p({ _0: _p$2, _1: _action }));
}
function moonbitlang$yacc$lib$elab$$elaborate$46$42$p$124$851(_env, trait_) {
  const _type_ = _env._2;
  const derive_map = _env._1;
  const _foreach_result = _env._0;
  let _foreach_error;
  _L: {
    const _bind = moonbitlang$yacc$lib$elab$$parse_and_elaborate_type_expr(trait_);
    let _tmp;
    if (_bind.$tag === 1) {
      const _ok = _bind;
      _tmp = _ok._0;
    } else {
      const _err = _bind;
      const _tmp$2 = _err._0;
      _foreach_error = _tmp$2;
      break _L;
    }
    moonbitlang$yacc$lib$util$array_multimap$$T$add$151$(derive_map, _type_, _tmp);
    return 1;
  }
  _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$50$(_foreach_error);
  return 0;
}
function moonbitlang$yacc$lib$elab$$elaborate(ast_spec, parser_spec_str, filename, json_cst, stdlib_rules, token_payload_rewrite, force_int_position) {
  let header = moonbitlang$core$immut$array$$new$68$();
  let trailer = moonbitlang$core$immut$array$$new$68$();
  const _arr = ast_spec.decls;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const decl = _arr[_i];
      switch (decl.$tag) {
        case 0: {
          const _Header = decl;
          const _code = _Header._0;
          const _utf8_pos = _Header._1;
          const _utf8_len = _Header._2;
          header = moonbitlang$core$immut$array$$T$push$68$(header, { _0: _code, _1: { _0: _utf8_pos, _1: _utf8_len } });
          break;
        }
        case 1: {
          const _Trailer = decl;
          const _code$2 = _Trailer._0;
          const _utf8_pos$2 = _Trailer._1;
          const _utf8_len$2 = _Trailer._2;
          trailer = moonbitlang$core$immut$array$$T$push$68$(trailer, { _0: _code$2, _1: { _0: _utf8_pos$2, _1: _utf8_len$2 } });
          break;
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const token_by_name = moonbitlang$core$builtin$$Map$from_array$150$([]);
  const rule_by_name = moonbitlang$core$builtin$$Map$from_array$148$([]);
  const token_by_image = moonbitlang$core$builtin$$Map$from_array$150$([]);
  const tokens = [];
  if (stdlib_rules === undefined) {
  } else {
    const _Some = stdlib_rules;
    const _stdlib_rules = _Some;
    const _bind = moonbitlang$core$builtin$$Map$iter2$148$(_stdlib_rules);
    _bind((rule_name, rule) => {
      moonbitlang$core$builtin$$Map$op_set$148$(rule_by_name, rule_name, rule);
      return 1;
    });
  }
  const _env = { _0: tokens, _1: token_by_name };
  const _arr$2 = ast_spec.decls;
  const _len$2 = _arr$2.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len$2) {
      const ast_decl = _arr$2[_i];
      switch (ast_decl.$tag) {
        case 3: {
          const _Token = ast_decl;
          const _names = _Token._0;
          const _type_ = _Token._1;
          const _len$3 = _names.length;
          let _tmp$3 = 0;
          while (true) {
            const _i$2 = _tmp$3;
            if (_i$2 < _len$3) {
              const name = _names[_i$2];
              const token = moonbitlang$yacc$lib$elab$$elaborate$46$get_token_by_name$124$131(_env, name);
              const _bind = moonbitlang$yacc$lib$elab$$elaborate$46$elaborate_token_type$124$132(token_payload_rewrite, _type_);
              let _tmp$4;
              if (_bind.$tag === 1) {
                const _ok = _bind;
                _tmp$4 = _ok._0;
              } else {
                return _bind;
              }
              token.type_ = _tmp$4;
              _tmp$3 = _i$2 + 1 | 0;
              continue;
            } else {
              break;
            }
          }
          break;
        }
        case 4: {
          const _Token1 = ast_decl;
          const _name = _Token1._0;
          const _type_$2 = _Token1._1;
          const _image = _Token1._2;
          const token = moonbitlang$yacc$lib$elab$$elaborate$46$get_token_by_name$124$131(_env, _name);
          const _bind = moonbitlang$yacc$lib$elab$$elaborate$46$elaborate_token_type$124$132(token_payload_rewrite, _type_$2);
          let _tmp$4;
          if (_bind.$tag === 1) {
            const _ok = _bind;
            _tmp$4 = _ok._0;
          } else {
            return _bind;
          }
          token.type_ = _tmp$4;
          token.image = _image;
          moonbitlang$core$builtin$$Map$op_set$150$(token_by_image, _image, token);
          break;
        }
      }
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _arr$3 = ast_spec.rules;
  const _len$3 = _arr$3.length;
  let _tmp$3 = 0;
  while (true) {
    const _i = _tmp$3;
    if (_i < _len$3) {
      const ast_rule = _arr$3[_i];
      const generic_params = moonbitlang$core$set$$Set$from_array$6$(ast_rule.generic_params);
      const _p = ast_rule.params;
      const _p$2 = new Array(_p.length);
      const _p$3 = _p.length;
      let _tmp$4 = 0;
      while (true) {
        const _p$4 = _tmp$4;
        if (_p$4 < _p$3) {
          const _p$5 = _p[_p$4];
          const param = _p$5;
          const _name = param._0;
          const _type_ = param._1;
          let type_;
          if (_type_ === undefined) {
            const generic_param = `_${moonbitlang$core$builtin$$Show$to_string$8$(generic_params.size)}`;
            moonbitlang$core$set$$Set$add$6$(generic_params, generic_param);
            type_ = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Param(generic_param);
          } else {
            const _Some = _type_;
            const _type_$2 = _Some;
            type_ = moonbitlang$yacc$lib$elab$$elaborate_type_expr_with_generic_params(_type_$2, generic_params);
          }
          _p$2[_p$4] = { _0: _name, _1: type_ };
          _tmp$4 = _p$4 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const params = _p$2;
      let type_;
      if (json_cst === 1) {
        type_ = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Json", []);
      } else {
        const _bind = ast_rule.type_;
        if (_bind === undefined) {
          type_ = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", []);
        } else {
          const _Some = _bind;
          const _type_ = _Some;
          type_ = moonbitlang$yacc$lib$elab$$elaborate_type_expr_with_generic_params(_type_, generic_params);
        }
      }
      const _bind = ast_rule.inline;
      const _bind$2 = ast_rule.nonterminal;
      const _bind$3 = [];
      const rule = { name: _bind$2, inline: _bind, generic_params: generic_params, params: params, type_: type_, clauses: _bind$3 };
      moonbitlang$core$builtin$$Map$op_set$148$(rule_by_name, rule.name, rule);
      _tmp$3 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const curr_prec = { val: 0 };
  const prec_map = moonbitlang$core$sorted_map$$new$90$();
  const start_rules = [];
  const _arr$4 = ast_spec.decls;
  const _len$4 = _arr$4.length;
  let _tmp$4 = 0;
  while (true) {
    const _i = _tmp$4;
    if (_i < _len$4) {
      const ast_decl = _arr$4[_i];
      let idents;
      _L: {
        _L$2: {
          switch (ast_decl.$tag) {
            case 8: {
              const _Left = ast_decl;
              const _idents = _Left._0;
              idents = _idents;
              break _L$2;
            }
            case 9: {
              const _Right = ast_decl;
              const _idents$2 = _Right._0;
              idents = _idents$2;
              break _L$2;
            }
            case 10: {
              const _Nonassoc = ast_decl;
              const _idents$3 = _Nonassoc._0;
              idents = _idents$3;
              break _L$2;
            }
            case 2: {
              const _Start = ast_decl;
              const _symbols = _Start._0;
              const _type_ = _Start._1;
              const _len$5 = _symbols.length;
              let _tmp$5 = 0;
              while (true) {
                const _i$2 = _tmp$5;
                if (_i$2 < _len$5) {
                  const symbol = _symbols[_i$2];
                  moonbitlang$core$array$$Array$push$6$(start_rules, symbol);
                  const _bind = moonbitlang$core$builtin$$Map$get$148$(rule_by_name, symbol);
                  if (_bind === undefined) {
                    $panic();
                  } else {
                    const _Some = _bind;
                    const _rule = _Some;
                    if (json_cst === 0) {
                      if (_type_ === undefined) {
                      } else {
                        const _Some$2 = _type_;
                        const _type_$2 = _Some$2;
                        const _bind$2 = moonbitlang$yacc$lib$elab$$parse_and_elaborate_type_expr(_type_$2);
                        let _tmp$6;
                        if (_bind$2.$tag === 1) {
                          const _ok = _bind$2;
                          _tmp$6 = _ok._0;
                        } else {
                          return _bind$2;
                        }
                        _rule.type_ = _tmp$6;
                      }
                    }
                  }
                  _tmp$5 = _i$2 + 1 | 0;
                  continue;
                } else {
                  break;
                }
              }
              break;
            }
            case 5: {
              const _Type = ast_decl;
              const _idents$4 = _Type._0;
              const _type_$2 = _Type._1;
              const _len$6 = _idents$4.length;
              let _tmp$6 = 0;
              while (true) {
                const _i$2 = _tmp$6;
                if (_i$2 < _len$6) {
                  const ident = _idents$4[_i$2];
                  const _bind = moonbitlang$core$builtin$$Map$get$150$(token_by_name, ident);
                  if (_bind === undefined) {
                    const _bind$2 = moonbitlang$core$builtin$$Map$get$148$(rule_by_name, ident);
                    if (_bind$2 === undefined) {
                      $panic();
                    } else {
                      const _Some = _bind$2;
                      const _rule = _Some;
                      if (json_cst === 0) {
                        const _bind$3 = moonbitlang$yacc$lib$elab$$parse_and_elaborate_type_expr(_type_$2);
                        let _tmp$7;
                        if (_bind$3.$tag === 1) {
                          const _ok = _bind$3;
                          _tmp$7 = _ok._0;
                        } else {
                          return _bind$3;
                        }
                        _rule.type_ = _tmp$7;
                      }
                    }
                  } else {
                    const _Some = _bind;
                    const _token = _Some;
                    if (token_payload_rewrite === 2) {
                      const _bind$2 = moonbitlang$yacc$lib$elab$$elaborate$46$elaborate_token_type$124$132(token_payload_rewrite, _type_$2);
                      let _tmp$7;
                      if (_bind$2.$tag === 1) {
                        const _ok = _bind$2;
                        _tmp$7 = _ok._0;
                      } else {
                        return _bind$2;
                      }
                      _token.type_ = _tmp$7;
                    }
                  }
                  _tmp$6 = _i$2 + 1 | 0;
                  continue;
                } else {
                  break;
                }
              }
              break;
            }
          }
          break _L;
        }
        let assoc;
        switch (ast_decl.$tag) {
          case 8: {
            assoc = 0;
            break;
          }
          case 9: {
            assoc = 1;
            break;
          }
          case 10: {
            assoc = 2;
            break;
          }
          default: {
            assoc = $panic();
          }
        }
        const prec = curr_prec.val;
        curr_prec.val = curr_prec.val + 1 | 0;
        const _len$5 = idents.length;
        let _tmp$5 = 0;
        while (true) {
          const _i$2 = _tmp$5;
          if (_i$2 < _len$5) {
            const ident = idents[_i$2];
            if (ident.$tag === 0) {
              const _Symbol = ident;
              const _name = _Symbol._0;
              const _bind = moonbitlang$core$builtin$$Map$get$150$(token_by_name, _name);
              if (_bind === undefined) {
              } else {
                const _Some = _bind;
                const _token = _Some;
                _token.prec = { _0: prec, _1: assoc };
              }
              moonbitlang$core$sorted_map$$T$op_set$90$(prec_map, _name, { _0: prec, _1: assoc });
            } else {
              const _Image = ident;
              const _image = _Image._0;
              const token = moonbitlang$core$option$$Option$unwrap$158$(moonbitlang$core$builtin$$Map$get$150$(token_by_image, _image));
              token.prec = { _0: prec, _1: assoc };
              moonbitlang$core$sorted_map$$T$op_set$90$(prec_map, token.name, { _0: prec, _1: assoc });
            }
            _tmp$5 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
      }
      _tmp$4 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _env$2 = { _0: token_by_image, _1: token_by_name, _2: rule_by_name };
  const _arr$5 = ast_spec.rules;
  const _len$5 = _arr$5.length;
  let _tmp$5 = 0;
  while (true) {
    const _i = _tmp$5;
    if (_i < _len$5) {
      const ast_rule = _arr$5[_i];
      const rule = moonbitlang$core$option$$Option$unwrap$155$(moonbitlang$core$builtin$$Map$get$148$(rule_by_name, ast_rule.nonterminal));
      const rule_param_map = moonbitlang$core$builtin$$Map$from_array$151$(rule.params);
      const _bind = moonbitlang$core$array$$Array$iter$84$(ast_rule.clauses);
      const clause_index = { val: 0 };
      const _foreach_result = { val: $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$50$ };
      const _p = (ast_clause) => {
        let _foreach_error;
        _L: {
          const _ast_clause = ast_clause._0;
          const _ast_clause_action = ast_clause._1;
          const _bind$2 = moonbitlang$yacc$lib$elab$$map_error$213$(_ast_clause.items, (ast_item) => {
            const _tmp$6 = ast_item.binder;
            const _bind$3 = moonbitlang$yacc$lib$elab$$elaborate$46$map_term$124$204(_env$2, ast_item.term, rule_param_map);
            let _tmp$7;
            if (_bind$3.$tag === 1) {
              const _ok = _bind$3;
              _tmp$7 = _ok._0;
            } else {
              return _bind$3;
            }
            return new Result$Ok$51$({ binder: _tmp$6, term: _tmp$7 });
          });
          let items;
          if (_bind$2.$tag === 1) {
            const _ok = _bind$2;
            items = _ok._0;
          } else {
            const _err = _bind$2;
            const _tmp$6 = _err._0;
            _foreach_error = _tmp$6;
            break _L;
          }
          const _bind$3 = _ast_clause.prec;
          let prec;
          if (_bind$3 === undefined) {
            prec = undefined;
          } else {
            const _Some = _bind$3;
            const _ident = _Some;
            let _bind$4;
            if (_ident.$tag === 0) {
              const _Symbol = _ident;
              const _name = _Symbol._0;
              _bind$4 = moonbitlang$core$option$$Option$unwrap$159$(moonbitlang$core$sorted_map$$T$get$90$(prec_map, _name));
            } else {
              const _Image = _ident;
              const _image = _Image._0;
              _bind$4 = moonbitlang$core$option$$Option$unwrap$159$(moonbitlang$core$sorted_map$$T$get$90$(prec_map, moonbitlang$core$option$$Option$unwrap$158$(moonbitlang$core$builtin$$Map$get$150$(token_by_image, _image)).name));
            }
            const _prec = _bind$4._0;
            prec = _prec;
          }
          const clause = { items: items, prec: prec, action: moonbitlang$yacc$lib$elab$$elaborate_action(items, _ast_clause_action, parser_spec_str, filename, _i, clause_index.val, { _0: _ast_clause, _1: _ast_clause_action }, rule.name, rule.type_, json_cst) };
          moonbitlang$core$array$$Array$push$177$(rule.clauses, clause);
          clause_index.val = clause_index.val + 1 | 0;
          return 1;
        }
        _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$50$(_foreach_error);
        return 0;
      };
      _bind((_p$2) => {
        const _clauses = _p$2._0;
        const _action = _p$2._1;
        const _bind$2 = moonbitlang$core$immut$list$$T$iter$78$(_clauses);
        const _env$3 = { _0: _action, _1: _bind$2 };
        return moonbitlang$yacc$lib$elab$$elaborate$46$42$func$124$830(_env$3, _p);
      });
      const _tmp$6 = _foreach_result.val;
      switch (_tmp$6.$tag) {
        case 0: {
          break;
        }
        case 1: {
          const _break = _tmp$6;
          _break._0;
          break;
        }
        case 2: {
          const _return = _tmp$6;
          return new Result$Ok$52$(_return._0);
        }
        case 3: {
          const _error = _tmp$6;
          return new Result$Err$52$(_error._0);
        }
        default: {
          $panic();
        }
      }
      _tmp$5 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  let position_type = force_int_position ? new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Int", []) : new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", []);
  const derive_map = moonbitlang$yacc$lib$util$array_multimap$$new$151$();
  const _arr$6 = ast_spec.decls;
  const _len$6 = _arr$6.length;
  let _tmp$6 = 0;
  while (true) {
    const _i = _tmp$6;
    if (_i < _len$6) {
      const ast_decl = _arr$6[_i];
      switch (ast_decl.$tag) {
        case 7: {
          const _Position = ast_decl;
          const _type_ = _Position._0;
          if (!force_int_position) {
            const _bind = moonbitlang$yacc$lib$elab$$parse_and_elaborate_type_expr(_type_);
            let _tmp$7;
            if (_bind.$tag === 1) {
              const _ok = _bind;
              _tmp$7 = _ok._0;
            } else {
              return _bind;
            }
            position_type = _tmp$7;
          }
          break;
        }
        case 6: {
          const _Derive = ast_decl;
          const _traits = _Derive._0;
          const _type_$2 = _Derive._1;
          const _bind = moonbitlang$core$string$$String$split(_traits, { str: moonbitlang$yacc$lib$elab$$elaborate$46$42$bind$124$848, start: 0, end: moonbitlang$yacc$lib$elab$$elaborate$46$42$bind$124$848.length });
          const _foreach_result = { val: $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$50$ };
          const _env$3 = { _0: _foreach_result, _1: derive_map, _2: _type_$2 };
          _bind((_p) => moonbitlang$yacc$lib$elab$$elaborate$46$42$p$124$851(_env$3, moonbitlang$core$builtin$$Show$to_string$20$(moonbitlang$core$string$$StringView$trim(_p, { str: moonbitlang$yacc$lib$elab$$elaborate$46$42$bind$124$849, start: 0, end: moonbitlang$yacc$lib$elab$$elaborate$46$42$bind$124$849.length }))));
          const _tmp$7 = _foreach_result.val;
          switch (_tmp$7.$tag) {
            case 0: {
              break;
            }
            case 1: {
              const _break = _tmp$7;
              _break._0;
              break;
            }
            case 2: {
              const _return = _tmp$7;
              return new Result$Ok$52$(_return._0);
            }
            case 3: {
              const _error = _tmp$7;
              return new Result$Err$52$(_error._0);
            }
            default: {
              $panic();
            }
          }
          break;
        }
      }
      _tmp$6 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (json_cst === 1) {
    header = moonbitlang$core$immut$array$$new$68$();
    trailer = moonbitlang$core$immut$array$$new$68$();
  }
  return new Result$Ok$52$({ header: header, trailer: trailer, tokens: tokens, rules: rule_by_name, start_rules: start_rules, position_type: position_type, derive_map: derive_map });
}
function moonbitlang$yacc$lib$elab$$build_rules_from_src(src, filename, json_cst, token_payload_rewrite, force_int_position) {
  const lexer = moonbitlang$yacc$lib$parser$$new_lexer(src);
  const token = () => moonbitlang$core$result$$Result$unwrap$63$(moonbitlang$yacc$lib$parser$$Lexer$next_token(lexer));
  const ast_spec = moonbitlang$core$result$$Result$unwrap$64$(moonbitlang$yacc$lib$parser$$spec(token, 0));
  const spec = moonbitlang$core$result$$Result$unwrap$65$(moonbitlang$yacc$lib$elab$$elaborate(ast_spec, src, filename, json_cst, undefined, token_payload_rewrite, force_int_position));
  return spec.rules;
}
function moonbitlang$yacc$lib$elab$$elaborate_with_stdlib_rules(ast_spec, parser_spec_str, filename, json_cst, no_std, token_payload_rewrite, force_int_position) {
  return moonbitlang$yacc$lib$elab$$elaborate(ast_spec, parser_spec_str, filename, json_cst, no_std ? moonbitlang$core$builtin$$Map$from_array$148$([]) : moonbitlang$yacc$lib$elab$$build_rules_from_src(moonbitlang$yacc$lib$elab$$stdlib_src, "stdlib.mbty", json_cst, token_payload_rewrite, force_int_position), token_payload_rewrite, force_int_position);
}
function moonbitlang$core$builtin$$Show$output$45$(self, logger) {
  let _tmp;
  switch (self.$tag) {
    case 0: {
      const _Constr = self;
      const _pkg = _Constr._0;
      const _name = _Constr._1;
      const _args = _Constr._2;
      let primary;
      if (_pkg === undefined) {
        primary = _name;
      } else {
        const _Some = _pkg;
        const _pkg$2 = _Some;
        primary = `@${_pkg$2}.${_name}`;
      }
      if (_args.length === 0) {
        _tmp = primary;
      } else {
        const _bind = moonbitlang$core$array$$Array$iter$45$(_args);
        _tmp = `${primary}[${moonbitlang$core$builtin$$Iter$join((_p) => _bind((_p$2) => _p(moonbitlang$core$builtin$$Show$to_string$191$(_p$2))), ", ")}]`;
      }
      break;
    }
    case 1: {
      _tmp = $panic();
      break;
    }
    case 2: {
      const _Option = self;
      const _type_ = _Option._0;
      if (_type_.$tag === 4) {
        _tmp = `(${moonbitlang$core$builtin$$Show$to_string$191$(_type_)})?`;
      } else {
        _tmp = `${moonbitlang$core$builtin$$Show$to_string$191$(_type_)}?`;
      }
      break;
    }
    case 3: {
      const _Tuple = self;
      const _types = _Tuple._0;
      const _bind = moonbitlang$core$array$$Array$iter$45$(_types);
      _tmp = `(${moonbitlang$core$builtin$$Iter$join((_p) => _bind((_p$2) => _p(moonbitlang$core$builtin$$Show$to_string$191$(_p$2))), ", ")})`;
      break;
    }
    default: {
      const _Arrow = self;
      const _args$2 = _Arrow._0;
      const _ret = _Arrow._1;
      const _bind$2 = moonbitlang$core$array$$Array$iter$45$(_args$2);
      _tmp = `(${moonbitlang$core$builtin$$Iter$join((_p) => _bind$2((_p$2) => _p(moonbitlang$core$builtin$$Show$to_string$191$(_p$2))), ", ")}) -> ${moonbitlang$core$builtin$$Show$to_string$191$(_ret)}`;
    }
  }
  logger.method_0(logger.self, _tmp);
}
function moonbitlang$core$builtin$$ToJson$to_json$172$(_x_17) {
  const $36$map = moonbitlang$core$builtin$$Map$from_array$114$([]);
  const _p = _x_17.source;
  moonbitlang$core$builtin$$Map$set$114$($36$map, "source", new $64$moonbitlang$47$core$47$builtin$46$Json$String(_p));
  const _p$2 = _x_17.original_offset;
  moonbitlang$core$builtin$$Map$set$114$($36$map, "original_offset", new $64$moonbitlang$47$core$47$builtin$46$Json$Number(_p$2 + 0));
  const _p$3 = _x_17.generated_offset;
  moonbitlang$core$builtin$$Map$set$114$($36$map, "generated_offset", new $64$moonbitlang$47$core$47$builtin$46$Json$Number(_p$3 + 0));
  const _p$4 = _x_17.length;
  moonbitlang$core$builtin$$Map$set$114$($36$map, "length", new $64$moonbitlang$47$core$47$builtin$46$Json$Number(_p$4 + 0));
  return new $64$moonbitlang$47$core$47$builtin$46$Json$Object($36$map);
}
function moonbitlang$core$builtin$$ToJson$to_json$215$(_x_14) {
  const $36$map = moonbitlang$core$builtin$$Map$from_array$114$([]);
  moonbitlang$core$builtin$$Map$set$114$($36$map, "mappings", moonbitlang$core$builtin$$ToJson$to_json$183$(_x_14.mappings));
  return new $64$moonbitlang$47$core$47$builtin$46$Json$Object($36$map);
}
function moonbitlang$yacc$lib$codegen$$SourceMap$new() {
  return { mappings: [] };
}
function moonbitlang$yacc$lib$codegen$$SourceMapBuilder$add_mapping$215$(self, source, original_offset_in_utf8, generated_offset_in_utf8, length_in_utf8) {
  moonbitlang$core$array$$Array$push$172$(self.mappings, { source: source, original_offset: original_offset_in_utf8, generated_offset: generated_offset_in_utf8, length: length_in_utf8 });
}
function moonbitlang$yacc$lib$desugar$$find_leaf_inline_rules(rules) {
  const all_inline_rules = moonbitlang$core$builtin$$Map$from_array$148$([]);
  const _bind = moonbitlang$core$builtin$$Map$iter2$148$(rules);
  _bind((rule_name, rule) => {
    if (rule.inline) {
      moonbitlang$core$builtin$$Map$op_set$148$(all_inline_rules, rule_name, rule);
    }
    return 1;
  });
  const _bind$2 = moonbitlang$core$builtin$$Map$iter$148$(all_inline_rules);
  return moonbitlang$core$set$$Set$from_iter$6$((_p) => _bind$2((_p$2) => {
    const _rule = _p$2._1;
    if (moonbitlang$core$builtin$$Iter$all$177$(moonbitlang$core$array$$Array$iter$177$(_rule.clauses), (clause) => moonbitlang$core$builtin$$Iter$all$27$(moonbitlang$core$array$$Array$iter$27$(clause.items), (item) => {
      _L: {
        const _bind$3 = item.term;
        switch (_bind$3.$tag) {
          case 0: {
            return true;
          }
          case 2: {
            const _RuleCall = _bind$3;
            const _rule_name = _RuleCall._0;
            const _x = _RuleCall._1;
            if (_x.length === 0) {
              return !moonbitlang$core$builtin$$Map$contains$148$(all_inline_rules, _rule_name);
            } else {
              break _L;
            }
          }
          default: {
            break _L;
          }
        }
      }
      return $panic();
    }))) {
      const _rule_name = _p$2._0;
      return _p(_rule_name);
    } else {
      return 1;
    }
  }));
}
function moonbitlang$yacc$lib$desugar$$eliminate_inline_rules$46$yield_$124$144(new_clauses, clause) {
  moonbitlang$core$array$$Array$push$177$(new_clauses, clause);
}
function moonbitlang$yacc$lib$desugar$$eliminate_inline_rules$46$cont$124$145(_env, cont_items, cont_bindings, cont_subactions, index) {
  const new_clauses = _env._3;
  const inline_rules = _env._2;
  const spec = _env._1;
  const clause = _env._0;
  let _tmp = cont_items;
  let _tmp$2 = cont_bindings;
  let _tmp$3 = cont_subactions;
  let _tmp$4 = index;
  _L: while (true) {
    const cont_items$2 = _tmp;
    const cont_bindings$2 = _tmp$2;
    const cont_subactions$2 = _tmp$3;
    const index$2 = _tmp$4;
    if (index$2 >= clause.items.length) {
      moonbitlang$yacc$lib$desugar$$eliminate_inline_rules$46$yield_$124$144(new_clauses, { items: moonbitlang$core$immut$array$$T$to_array$27$(cont_items$2), prec: clause.prec, action: { ...clause.action, stamp: moonbitlang$yacc$lib$util$stamp$$new(), sub_actions: moonbitlang$core$immut$array$$T$to_array$28$(cont_subactions$2), bindings: moonbitlang$core$immut$array$$T$to_array$29$(cont_bindings$2) } });
      return;
    } else {
      const item = moonbitlang$core$array$$Array$op_get$27$(clause.items, index$2);
      _L$2: {
        _L$3: {
          const _bind = item.term;
          if (_bind.$tag === 2) {
            const _RuleCall = _bind;
            const _rule_name = _RuleCall._0;
            const _x = _RuleCall._1;
            if (_x.length === 0) {
              if (moonbitlang$core$set$$Set$contains$6$(inline_rules, _rule_name)) {
                const inline_rule = moonbitlang$core$option$$Option$unwrap$155$(moonbitlang$core$builtin$$Map$get$148$(spec.rules, _rule_name));
                const _arr = inline_rule.clauses;
                const _len = _arr.length;
                let _tmp$5 = 0;
                while (true) {
                  const _i = _tmp$5;
                  if (_i < _len) {
                    const inline_clause = _arr[_i];
                    const next_cont_items = moonbitlang$core$builtin$$Add$op_add$72$(cont_items$2, moonbitlang$core$immut$array$$from_array$27$(inline_clause.items));
                    const start_index = cont_items$2.size;
                    const end_index = start_index + inline_clause.items.length | 0;
                    const subaction_index = cont_subactions$2.size;
                    const next_cont_subactions = moonbitlang$core$immut$array$$T$push$28$(cont_subactions$2, { start: start_index, end: end_index, action: inline_clause.action });
                    const index_shift = inline_clause.items.length - 1 | 0;
                    const next_cont_bindings = moonbitlang$core$immut$array$$T$map$69$(cont_bindings$2, (binding) => {
                      const _subject = binding._0;
                      const _code = binding._1;
                      let new_subject;
                      _L$4: {
                        _L$5: {
                          switch (_subject.$tag) {
                            case 0: {
                              const _Data = _subject;
                              const _data_index = _Data._0;
                              const _type_ = _Data._1;
                              if (_data_index === start_index) {
                                new_subject = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$SubAction(subaction_index, _type_);
                              } else {
                                if (_data_index > start_index) {
                                  new_subject = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$Data(_data_index + index_shift | 0, _type_);
                                } else {
                                  break _L$5;
                                }
                              }
                              break;
                            }
                            case 1: {
                              const _StartPosOf = _subject;
                              const _data_index$2 = _StartPosOf._0;
                              if (_data_index$2 > start_index) {
                                new_subject = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$StartPosOf(_data_index$2 + index_shift | 0);
                              } else {
                                break _L$5;
                              }
                              break;
                            }
                            case 2: {
                              const _EndPosOf = _subject;
                              const _data_index$3 = _EndPosOf._0;
                              if (_data_index$3 > start_index) {
                                new_subject = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$EndPosOf(_data_index$3 + index_shift | 0);
                              } else {
                                break _L$5;
                              }
                              break;
                            }
                            default: {
                              break _L$5;
                            }
                          }
                          break _L$4;
                        }
                        new_subject = _subject;
                      }
                      return { _0: new_subject, _1: _code };
                    });
                    moonbitlang$yacc$lib$desugar$$eliminate_inline_rules$46$cont$124$145(_env, next_cont_items, next_cont_bindings, next_cont_subactions, index$2 + 1 | 0);
                    _tmp$5 = _i + 1 | 0;
                    continue;
                  } else {
                    return;
                  }
                }
              } else {
                break _L$2;
              }
            } else {
              break _L$3;
            }
          } else {
            break _L$3;
          }
        }
        break _L$2;
      }
      const _tmp$5 = moonbitlang$core$immut$array$$T$push$27$(cont_items$2, item);
      const _tmp$6 = index$2 + 1 | 0;
      _tmp = _tmp$5;
      _tmp$4 = _tmp$6;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$desugar$$eliminate_inline_rules(spec, inline_rules) {
  const new_rules = moonbitlang$core$builtin$$Map$from_array$148$([]);
  let _foreach_result = $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$53$;
  const _bind = moonbitlang$core$builtin$$Map$iter2$148$(spec.rules);
  _bind((rule_name, rule) => {
    if (!moonbitlang$core$set$$Set$contains$6$(inline_rules, rule_name)) {
      const new_clauses = [];
      const _arr = rule.clauses;
      const _len = _arr.length;
      let _tmp = 0;
      while (true) {
        const _i = _tmp;
        if (_i < _len) {
          const clause = _arr[_i];
          const items = clause.items;
          if (moonbitlang$core$builtin$$Iter$any$27$(moonbitlang$core$array$$Array$iter$27$(items), (item) => {
            _L: {
              const _bind$2 = item.term;
              switch (_bind$2.$tag) {
                case 0: {
                  return false;
                }
                case 2: {
                  const _RuleCall = _bind$2;
                  const _rule_name = _RuleCall._0;
                  const _x = _RuleCall._1;
                  if (_x.length === 0) {
                    return moonbitlang$core$set$$Set$contains$6$(inline_rules, _rule_name);
                  } else {
                    break _L;
                  }
                }
                default: {
                  break _L;
                }
              }
            }
            return $panic();
          })) {
            const _env = { _0: clause, _1: spec, _2: inline_rules, _3: new_clauses };
            moonbitlang$yacc$lib$desugar$$eliminate_inline_rules$46$cont$124$145(_env, moonbitlang$core$immut$array$$new$27$(), moonbitlang$core$immut$array$$from_array$29$(clause.action.bindings), moonbitlang$core$immut$array$$from_array$28$(clause.action.sub_actions), 0);
          } else {
            moonbitlang$core$array$$Array$push$177$(new_clauses, clause);
          }
          _tmp = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const new_rule = { name: rule.name, inline: rule.inline, generic_params: rule.generic_params, params: rule.params, type_: rule.type_, clauses: new_clauses };
      moonbitlang$core$builtin$$Map$op_set$148$(new_rules, rule_name, new_rule);
    } else {
      return 1;
    }
    return 1;
  });
  const _tmp = _foreach_result;
  switch (_tmp.$tag) {
    case 0: {
      break;
    }
    case 1: {
      const _break = _tmp;
      _break._0;
      break;
    }
    case 2: {
      const _return = _tmp;
      return _return._0;
    }
    case 3: {
      $panic();
      break;
    }
    default: {
      $panic();
    }
  }
  return { ...spec, rules: new_rules };
}
function moonbitlang$yacc$lib$desugar$$eliminate_inline(spec) {
  let spec$2 = spec;
  while (true) {
    const inline_rules = moonbitlang$yacc$lib$desugar$$find_leaf_inline_rules(spec$2.rules);
    if (inline_rules.size === 0) {
      break;
    } else {
      spec$2 = moonbitlang$yacc$lib$desugar$$eliminate_inline_rules(spec$2, inline_rules);
    }
    continue;
  }
  return spec$2;
}
function moonbitlang$yacc$lib$desugar$$derive_term_ident(term) {
  switch (term.$tag) {
    case 0: {
      const _Token = term;
      const _token = _Token._0;
      return _token.name;
    }
    case 1: {
      return $panic();
    }
    default: {
      const _RuleCall = term;
      const _rule_name = _RuleCall._0;
      const _x = _RuleCall._1;
      if (_x.length === 0) {
        return _rule_name;
      } else {
        const _bind = moonbitlang$core$array$$Array$iter$134$(_x);
        return `${_rule_name}(${moonbitlang$core$builtin$$Iter$join((_p) => _bind((_p$2) => _p(moonbitlang$yacc$lib$desugar$$derive_term_ident(_p$2))), ",")})`;
      }
    }
  }
}
function moonbitlang$yacc$lib$desugar$$infer_return_type$46$unify$124$5(generic_param_map, t1, t2) {
  let _tmp = t1;
  let _tmp$2 = t2;
  _L: while (true) {
    const t1$2 = _tmp;
    const t2$2 = _tmp$2;
    _L$2: {
      switch (t1$2.$tag) {
        case 1: {
          const _Param = t1$2;
          const _name = _Param._0;
          moonbitlang$core$builtin$$Map$op_set$151$(generic_param_map, _name, t2$2);
          return;
        }
        case 0: {
          const _Constr = t1$2;
          const _pkg1 = _Constr._0;
          const _name1 = _Constr._1;
          const _args1 = _Constr._2;
          if (t2$2.$tag === 0) {
            const _Constr$2 = t2$2;
            const _pkg2 = _Constr$2._0;
            const _name2 = _Constr$2._1;
            const _args2 = _Constr$2._2;
            if (moonbitlang$core$builtin$$Eq$op_equal$109$(_pkg1, _pkg2) && (_name1 === _name2 && _args1.length === _args2.length)) {
              const _len = _args1.length;
              let _tmp$3 = 0;
              while (true) {
                const _i = _tmp$3;
                if (_i < _len) {
                  const arg1 = _args1[_i];
                  moonbitlang$yacc$lib$desugar$$infer_return_type$46$unify$124$5(generic_param_map, arg1, moonbitlang$core$array$$Array$op_get$45$(_args2, _i));
                  _tmp$3 = _i + 1 | 0;
                  continue;
                } else {
                  return;
                }
              }
            } else {
              $panic();
              return;
            }
          } else {
            break _L$2;
          }
        }
        case 2: {
          const _Option = t1$2;
          const _t1 = _Option._0;
          if (t2$2.$tag === 2) {
            const _Option$2 = t2$2;
            const _t2 = _Option$2._0;
            _tmp = _t1;
            _tmp$2 = _t2;
            continue _L;
          } else {
            break _L$2;
          }
        }
        case 3: {
          const _Tuple = t1$2;
          const _types1 = _Tuple._0;
          if (t2$2.$tag === 3) {
            const _Tuple$2 = t2$2;
            const _types2 = _Tuple$2._0;
            if (_types1.length === _types2.length) {
              const _len = _types1.length;
              let _tmp$3 = 0;
              while (true) {
                const _i = _tmp$3;
                if (_i < _len) {
                  const type1 = _types1[_i];
                  moonbitlang$yacc$lib$desugar$$infer_return_type$46$unify$124$5(generic_param_map, type1, moonbitlang$core$array$$Array$op_get$45$(_types2, _i));
                  _tmp$3 = _i + 1 | 0;
                  continue;
                } else {
                  return;
                }
              }
            } else {
              $panic();
              return;
            }
          } else {
            break _L$2;
          }
        }
        default: {
          const _Arrow = t1$2;
          const _params1 = _Arrow._0;
          const _ret1 = _Arrow._1;
          if (t2$2.$tag === 4) {
            const _Arrow$2 = t2$2;
            const _params2 = _Arrow$2._0;
            const _ret2 = _Arrow$2._1;
            if (_params1.length === _params2.length) {
              const _len = _params1.length;
              let _tmp$3 = 0;
              while (true) {
                const _i = _tmp$3;
                if (_i < _len) {
                  const param1 = _params1[_i];
                  moonbitlang$yacc$lib$desugar$$infer_return_type$46$unify$124$5(generic_param_map, param1, moonbitlang$core$array$$Array$op_get$45$(_params2, _i));
                  _tmp$3 = _i + 1 | 0;
                  continue;
                } else {
                  break;
                }
              }
              _tmp = _ret1;
              _tmp$2 = _ret2;
              continue _L;
            } else {
              $panic();
              return;
            }
          } else {
            break _L$2;
          }
        }
      }
    }
    $panic();
    return;
  }
}
function moonbitlang$yacc$lib$desugar$$infer_return_type(parametric_rule, env, json_cst) {
  if (json_cst === 1) {
    return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Json", []);
  }
  const generic_param_map = moonbitlang$core$builtin$$Map$from_array$151$([]);
  const _arr = parametric_rule.params;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const param = _arr[_i];
      const arg = moonbitlang$core$option$$Option$unwrap$134$(moonbitlang$core$immut$sorted_map$$T$get$74$(env, param._0));
      const _tmp$2 = param._1;
      let _tmp$3;
      switch (arg.$tag) {
        case 0: {
          const _Token = arg;
          const _token = _Token._0;
          _tmp$3 = _token.type_;
          break;
        }
        case 1: {
          const _Param = arg;
          const _type_ = _Param._1;
          _tmp$3 = _type_;
          break;
        }
        default: {
          const _RuleCall = arg;
          const _type_$2 = _RuleCall._2;
          _tmp$3 = _type_$2;
        }
      }
      moonbitlang$yacc$lib$desugar$$infer_return_type$46$unify$124$5(generic_param_map, _tmp$2, _tmp$3);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const process_type = (type_) => {
    switch (type_.$tag) {
      case 1: {
        const _Param = type_;
        const _name = _Param._0;
        return moonbitlang$core$option$$Option$unwrap$45$(moonbitlang$core$builtin$$Map$get$151$(generic_param_map, _name));
      }
      case 0: {
        const _Constr = type_;
        const _pkg = _Constr._0;
        const _name$2 = _Constr._1;
        const _args = _Constr._2;
        const _p = new Array(_args.length);
        const _p$2 = _args.length;
        let _tmp$2 = 0;
        while (true) {
          const _p$3 = _tmp$2;
          if (_p$3 < _p$2) {
            const _p$4 = _args[_p$3];
            _p[_p$3] = process_type(_p$4);
            _tmp$2 = _p$3 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(_pkg, _name$2, _p);
      }
      case 2: {
        const _Option = type_;
        const _type_ = _Option._0;
        return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Option(process_type(_type_));
      }
      case 3: {
        const _Tuple = type_;
        const _types = _Tuple._0;
        const _p$3 = new Array(_types.length);
        const _p$4 = _types.length;
        let _tmp$3 = 0;
        while (true) {
          const _p$5 = _tmp$3;
          if (_p$5 < _p$4) {
            const _p$6 = _types[_p$5];
            _p$3[_p$5] = process_type(_p$6);
            _tmp$3 = _p$5 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Tuple(_p$3);
      }
      default: {
        const _Arrow = type_;
        const _params = _Arrow._0;
        const _ret = _Arrow._1;
        const _p$5 = new Array(_params.length);
        const _p$6 = _params.length;
        let _tmp$4 = 0;
        while (true) {
          const _p$7 = _tmp$4;
          if (_p$7 < _p$6) {
            const _p$8 = _params[_p$7];
            _p$5[_p$7] = process_type(_p$8);
            _tmp$4 = _p$7 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Arrow(_p$5, process_type(_ret));
      }
    }
  };
  return process_type(parametric_rule.type_);
}
function moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$map_term$124$69(_env, term, env) {
  const spec = _env._2;
  const json_cst = _env._1;
  const deferred_specialized_rules = _env._0;
  switch (term.$tag) {
    case 0: {
      return term;
    }
    case 2: {
      const _RuleCall = term;
      const _rule_name = _RuleCall._0;
      const _x = _RuleCall._1;
      if (_x.length === 0) {
        const _type_ = _RuleCall._2;
        return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall(_rule_name, [], _type_);
      } else {
        const parametric_rule = moonbitlang$core$option$$Option$unwrap$155$(moonbitlang$core$builtin$$Map$get$148$(spec.rules, _rule_name));
        const _p = new Array(_x.length);
        const _p$2 = _x.length;
        let _tmp = 0;
        while (true) {
          const _p$3 = _tmp;
          if (_p$3 < _p$2) {
            const _p$4 = _x[_p$3];
            const arg = _p$4;
            _p[_p$3] = moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$map_term$124$69(_env, arg, env);
            _tmp = _p$3 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        const args = _p;
        let _tmp$2;
        let _tmp$3 = 0;
        let _tmp$4 = env;
        while (true) {
          const _p$3 = _tmp$3;
          const _p$4 = _tmp$4;
          if (_p$3 < args.length) {
            const _tmp$5 = _p$3 + 1 | 0;
            const index = _p$3;
            const env$2 = _p$4;
            const arg = moonbitlang$core$array$$Array$op_get$134$(args, _p$3);
            const param = moonbitlang$core$array$$Array$op_get$137$(parametric_rule.params, index);
            const _tmp$6 = moonbitlang$core$immut$sorted_map$$T$add$74$(env$2, param._0, arg);
            _tmp$3 = _tmp$5;
            _tmp$4 = _tmp$6;
            continue;
          } else {
            _tmp$2 = _p$4;
            break;
          }
        }
        const type_ = moonbitlang$yacc$lib$desugar$$infer_return_type(parametric_rule, _tmp$2, json_cst);
        const specialized_rule_name = moonbitlang$yacc$lib$desugar$$derive_term_ident(new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall(_rule_name, args, type_));
        moonbitlang$core$builtin$$Map$op_set$149$(deferred_specialized_rules.val, specialized_rule_name, { parametric_rule_name: _rule_name, specialized_rule_name: specialized_rule_name, args: args, env: env });
        return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall(specialized_rule_name, [], type_);
      }
    }
    default: {
      const _Param = term;
      const _name = _Param._0;
      const _bind = moonbitlang$core$immut$sorted_map$$T$get$74$(env, _name);
      if (_bind === undefined) {
        return term;
      } else {
        const _Some = _bind;
        const _term = _Some;
        return _term;
      }
    }
  }
}
function moonbitlang$yacc$lib$desugar$$eliminate_rule_args(spec, json_cst) {
  const deferred_specialized_rules = { val: moonbitlang$core$builtin$$Map$from_array$149$([]) };
  const parametric_rules = moonbitlang$core$builtin$$Map$from_array$148$([]);
  const new_rules = moonbitlang$core$builtin$$Map$from_array$148$([]);
  const _env = { _0: deferred_specialized_rules, _1: json_cst, _2: spec };
  const _bind = moonbitlang$core$builtin$$Map$iter2$148$(spec.rules);
  _bind((rule_name, rule) => {
    const _p = rule.params;
    if (_p.length === 0) {
      const _tmp = rule.name;
      const _tmp$2 = rule.inline;
      const _tmp$3 = rule.generic_params;
      const _tmp$4 = rule.params;
      const _tmp$5 = rule.type_;
      const _p$2 = rule.clauses;
      const _p$3 = new Array(_p$2.length);
      const _p$4 = _p$2.length;
      let _tmp$6 = 0;
      while (true) {
        const _p$5 = _tmp$6;
        if (_p$5 < _p$4) {
          const _p$6 = _p$2[_p$5];
          const clause = _p$6;
          const _p$7 = clause.items;
          const _p$8 = new Array(_p$7.length);
          const _p$9 = _p$7.length;
          let _tmp$7 = 0;
          while (true) {
            const _p$10 = _tmp$7;
            if (_p$10 < _p$9) {
              const _p$11 = _p$7[_p$10];
              const item = _p$11;
              _p$8[_p$10] = { binder: item.binder, term: moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$map_term$124$69(_env, item.term, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$10$) };
              _tmp$7 = _p$10 + 1 | 0;
              continue;
            } else {
              break;
            }
          }
          const items = _p$8;
          const _p$10 = clause.items;
          const _p$11 = new Array(_p$10.length);
          const _p$12 = _p$10.length;
          let _tmp$8 = 0;
          while (true) {
            const _p$13 = _tmp$8;
            if (_p$13 < _p$12) {
              const _p$14 = _p$10[_p$13];
              const item = _p$14;
              _p$11[_p$13] = { binder: item.binder, term: moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$map_term$124$69(_env, item.term, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$10$) };
              _tmp$8 = _p$13 + 1 | 0;
              continue;
            } else {
              break;
            }
          }
          const _tmp$9 = clause.prec;
          const _tmp$10 = clause.action;
          const _tmp$11 = moonbitlang$yacc$lib$util$stamp$$new();
          const _p$13 = clause.action.bindings;
          const _p$14 = new Array(_p$13.length);
          const _p$15 = _p$13.length;
          let _tmp$12 = 0;
          while (true) {
            const _p$16 = _tmp$12;
            if (_p$16 < _p$15) {
              const _p$17 = _p$13[_p$16];
              const binding = _p$17;
              const _subject = binding._0;
              const _code = binding._1;
              let new_subject;
              if (_subject.$tag === 0) {
                const _Data = _subject;
                const _index = _Data._0;
                new_subject = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$Data(_index, moonbitlang$yacc$lib$elab$$Item$type_(moonbitlang$core$array$$Array$op_get$27$(items, _index)));
              } else {
                new_subject = _subject;
              }
              _p$14[_p$16] = { _0: new_subject, _1: _code };
              _tmp$12 = _p$16 + 1 | 0;
              continue;
            } else {
              break;
            }
          }
          _p$3[_p$5] = { items: _p$11, prec: _tmp$9, action: { ..._tmp$10, stamp: _tmp$11, bindings: _p$14 } };
          _tmp$6 = _p$5 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      moonbitlang$core$builtin$$Map$op_set$148$(new_rules, rule_name, { name: _tmp, inline: _tmp$2, generic_params: _tmp$3, params: _tmp$4, type_: _tmp$5, clauses: _p$3 });
    } else {
      moonbitlang$core$builtin$$Map$op_set$148$(parametric_rules, rule_name, rule);
    }
    return 1;
  });
  while (true) {
    const _bind$2 = moonbitlang$core$builtin$$Map$values$149$(deferred_specialized_rules.val);
    const queue = moonbitlang$core$builtin$$Iter$to_array$178$((_p) => _bind$2((_p$2) => !moonbitlang$core$builtin$$Map$contains$148$(new_rules, _p$2.specialized_rule_name) ? _p(_p$2) : 1));
    deferred_specialized_rules.val = moonbitlang$core$builtin$$Map$from_array$149$([]);
    if (queue.length === 0) {
      break;
    }
    const _len = queue.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const it = queue[_i];
        const _tmp$2 = it.specialized_rule_name;
        const _parametric_rule_name = it.parametric_rule_name;
        const _specialized_rule_name = it.specialized_rule_name;
        const _args = it.args;
        const _env$2 = it.env;
        const parametric_rule = moonbitlang$core$option$$Option$unwrap$155$(moonbitlang$core$builtin$$Map$get$148$(parametric_rules, _parametric_rule_name));
        const env = { val: _env$2 };
        const _arr = parametric_rule.params;
        const _len$2 = _arr.length;
        let _tmp$3 = 0;
        while (true) {
          const _i$2 = _tmp$3;
          if (_i$2 < _len$2) {
            const param = _arr[_i$2];
            env.val = moonbitlang$core$immut$sorted_map$$T$add$74$(env.val, param._0, moonbitlang$core$array$$Array$op_get$134$(_args, _i$2));
            _tmp$3 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        const type_ = moonbitlang$yacc$lib$desugar$$infer_return_type(parametric_rule, env.val, json_cst);
        const _bind$3 = moonbitlang$core$set$$Set$new$6$(8);
        const _bind$4 = [];
        const _p = parametric_rule.clauses;
        const _p$2 = new Array(_p.length);
        const _p$3 = _p.length;
        let _tmp$4 = 0;
        while (true) {
          const _p$4 = _tmp$4;
          if (_p$4 < _p$3) {
            const _p$5 = _p[_p$4];
            const clause = _p$5;
            const _p$6 = clause.items;
            const _p$7 = new Array(_p$6.length);
            const _p$8 = _p$6.length;
            let _tmp$5 = 0;
            while (true) {
              const _p$9 = _tmp$5;
              if (_p$9 < _p$8) {
                const _p$10 = _p$6[_p$9];
                const item = _p$10;
                _p$7[_p$9] = { binder: item.binder, term: moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$map_term$124$69(_env, item.term, env.val) };
                _tmp$5 = _p$9 + 1 | 0;
                continue;
              } else {
                break;
              }
            }
            const new_items = _p$7;
            const _tmp$6 = clause.prec;
            const _tmp$7 = clause.action;
            const _tmp$8 = moonbitlang$yacc$lib$util$stamp$$new();
            const _p$9 = clause.action.bindings;
            const _p$10 = new Array(_p$9.length);
            const _p$11 = _p$9.length;
            let _tmp$9 = 0;
            while (true) {
              const _p$12 = _tmp$9;
              if (_p$12 < _p$11) {
                const _p$13 = _p$9[_p$12];
                const binding = _p$13;
                const _subject = binding._0;
                const _code = binding._1;
                let new_subject;
                if (_subject.$tag === 0) {
                  const _Data = _subject;
                  const _index = _Data._0;
                  const item = moonbitlang$core$array$$Array$op_get$27$(new_items, _index);
                  new_subject = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$Data(_index, moonbitlang$yacc$lib$elab$$Item$type_(item));
                } else {
                  new_subject = _subject;
                }
                _p$10[_p$12] = { _0: new_subject, _1: _code };
                _tmp$9 = _p$12 + 1 | 0;
                continue;
              } else {
                break;
              }
            }
            _p$2[_p$4] = { items: new_items, prec: _tmp$6, action: { ..._tmp$7, stamp: _tmp$8, bindings: _p$10, type_: type_ } };
            _tmp$4 = _p$4 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        const _bind$5 = _p$2;
        moonbitlang$core$builtin$$Map$op_set$148$(new_rules, _tmp$2, { name: _specialized_rule_name, inline: parametric_rule.inline, generic_params: _bind$3, params: _bind$4, type_: type_, clauses: _bind$5 });
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    continue;
  }
  return { ...spec, rules: new_rules };
}
function moonbitlang$yacc$lib$driver$util$$path_basename(path) {
  const _bind = moonbitlang$core$string$$String$rev_find(path, { str: moonbitlang$yacc$lib$driver$util$$path_basename$46$42$bind$124$19, start: 0, end: moonbitlang$yacc$lib$driver$util$$path_basename$46$42$bind$124$19.length });
  if (_bind === undefined) {
    const _bind$2 = moonbitlang$core$string$$String$rev_find(path, { str: moonbitlang$yacc$lib$driver$util$$path_basename$46$42$bind$124$13, start: 0, end: moonbitlang$yacc$lib$driver$util$$path_basename$46$42$bind$124$13.length });
    if (_bind$2 === undefined) {
      return path;
    } else {
      const _Some = _bind$2;
      const _lastBackslashIndex = _Some;
      return moonbitlang$core$string$$String$substring(path, _lastBackslashIndex + 1 | 0, undefined);
    }
  } else {
    const _Some = _bind;
    const _lastSlashIndex = _Some;
    return moonbitlang$core$string$$String$substring(path, _lastSlashIndex + 1 | 0, undefined);
  }
}
function moonbitlang$yacc$lib$driver$util$$exit$216$(code) {
  moonbitlang$yacc$lib$driver$util$$ffi_exit(code);
  return $panic();
}
function moonbitlang$yacc$lib$driver$util$$exit$7$(code) {
  moonbitlang$yacc$lib$driver$util$$ffi_exit(code);
  $panic();
}
function moonbitlang$yacc$lib$driver$util$$exit$12$(code) {
  moonbitlang$yacc$lib$driver$util$$ffi_exit(code);
  return $panic();
}
function moonbitlang$yacc$lib$driver$util$$exit$13$(code) {
  moonbitlang$yacc$lib$driver$util$$ffi_exit(code);
  return $panic();
}
function moonbitlang$yacc$lib$driver$util$$exit$14$(code) {
  moonbitlang$yacc$lib$driver$util$$ffi_exit(code);
  return $panic();
}
function moonbitlang$yacc$lib$driver$$offset_to_line_column(content, offset) {
  let line = 1;
  let column = 1;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < offset) {
      $bound_check(content, i);
      if (content.charCodeAt(i) === 10) {
        line = line + 1 | 0;
        column = 1;
      } else {
        column = column + 1 | 0;
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return { _0: line, _1: column };
}
function moonbitlang$yacc$lib$driver$$array_to_or_list(arr) {
  if (arr.len === 0) {
    return $panic();
  } else {
    if (arr.len === 1) {
      const _x = arr.buf[arr.start];
      return _x;
    } else {
      const _x = arr.buf[arr.start + (arr.len - 1 | 0) | 0];
      const _tmp = arr.buf;
      const _tmp$2 = arr.start;
      const _some = arr.len - 1 | 0;
      const _x$2 = { buf: _tmp, start: _tmp$2, len: _some };
      const _self = [];
      moonbitlang$core$array$$Array$push_iter$6$(_self, moonbitlang$core$array$$ArrayView$iter$6$(_x$2));
      const left = moonbitlang$core$array$$Array$join(_self, { str: moonbitlang$yacc$lib$driver$$array_to_or_list$46$42$bind$124$147, start: 0, end: moonbitlang$yacc$lib$driver$$array_to_or_list$46$42$bind$124$147.length });
      return `${left} or ${_x}`;
    }
  }
}
function moonbitlang$yacc$lib$driver$$loc_to_string(filename, content, loc) {
  const _bind = moonbitlang$yacc$lib$driver$$offset_to_line_column(content, loc._0);
  const _start_line = _bind._0;
  const _start_column = _bind._1;
  const _bind$2 = moonbitlang$yacc$lib$driver$$offset_to_line_column(content, loc._1);
  const _end_line = _bind$2._0;
  const _end_column = _bind$2._1;
  return _start_line === _end_line ? `${filename}:${moonbitlang$core$builtin$$Show$to_string$8$(_start_line)}:${moonbitlang$core$builtin$$Show$to_string$8$(_start_column)}-${moonbitlang$core$builtin$$Show$to_string$8$(_end_column)}` : `${filename}:${moonbitlang$core$builtin$$Show$to_string$8$(_start_line)}:${moonbitlang$core$builtin$$Show$to_string$8$(_start_column)}-${moonbitlang$core$builtin$$Show$to_string$8$(_end_line)}:${moonbitlang$core$builtin$$Show$to_string$8$(_end_column)}`;
}
function moonbitlang$yacc$lib$driver$$pos_to_string(filename, content, pos) {
  const _bind = moonbitlang$yacc$lib$driver$$offset_to_line_column(content, pos);
  const _line = _bind._0;
  const _column = _bind._1;
  return `${filename}:${moonbitlang$core$builtin$$Show$to_string$8$(_line)}:${moonbitlang$core$builtin$$Show$to_string$8$(_column)}0`;
}
function moonbitlang$yacc$lib$driver$$print(parser_spec_str, filename, out) {
  const lexer = moonbitlang$yacc$lib$parser$$new_lexer(parser_spec_str);
  const token = () => {
    let _try_err;
    _L: {
      const _bind = moonbitlang$yacc$lib$parser$$Lexer$next_token(lexer);
      if (_bind.$tag === 1) {
        const _ok = _bind;
        return _ok._0;
      } else {
        const _err = _bind;
        const _tmp = _err._0;
        _try_err = _tmp;
        break _L;
      }
    }
    if (_try_err.$tag === 1) {
      const _Unrecognized = _try_err;
      const _x = _Unrecognized._0;
      const _pos = _Unrecognized._1;
      const pos_str = moonbitlang$yacc$lib$driver$$pos_to_string(filename, parser_spec_str, _pos);
      const _self = moonbitlang$core$builtin$$StringBuilder$new(0);
      moonbitlang$core$builtin$$Logger$write_char$38$(_self, _x);
      const _p = _self;
      const _p$2 = moonbitlang$core$string$$String$escape(_p.val);
      moonbitlang$yacc$lib$driver$util$$println_to_stderr(`SyntaxError: Unrecognized character ${_p$2}, at ${pos_str}`);
      return moonbitlang$yacc$lib$driver$util$$exit$12$(1);
    } else {
      moonbitlang$yacc$lib$driver$util$$println_to_stderr("SyntaxError: Unexpected end of file");
      return moonbitlang$yacc$lib$driver$util$$exit$12$(1);
    }
  };
  let spec;
  let _try_err;
  _L: {
    _L$2: {
      const _bind = moonbitlang$yacc$lib$parser$$spec(token, 0);
      if (_bind.$tag === 1) {
        const _ok = _bind;
        spec = _ok._0;
      } else {
        const _err = _bind;
        const _tmp = _err._0;
        _try_err = _tmp;
        break _L$2;
      }
      break _L;
    }
    const _UnexpectedToken = _try_err;
    const _token = _UnexpectedToken._0;
    const _loc = _UnexpectedToken._1;
    const _expected = _UnexpectedToken._2;
    const loc_str = moonbitlang$yacc$lib$driver$$loc_to_string(filename, parser_spec_str, _loc);
    const _p = new Array(_expected.length);
    const _p$2 = _expected.length;
    let _tmp = 0;
    while (true) {
      const _p$3 = _tmp;
      if (_p$3 < _p$2) {
        const _p$4 = _expected[_p$3];
        _p[_p$3] = moonbitlang$core$builtin$$Show$to_string$188$(_p$4);
        _tmp = _p$3 + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const _bind = _p;
    const expected_str = moonbitlang$yacc$lib$driver$$array_to_or_list({ buf: _bind, start: 0, len: _bind.length });
    moonbitlang$yacc$lib$driver$util$$println_to_stderr(`SyntaxError: Unexpected token ${moonbitlang$core$builtin$$Show$to_string$188$(moonbitlang$yacc$lib$parser$$Token$kind(_token))}, expected ${expected_str}.\n  at ${loc_str}`);
    spec = moonbitlang$yacc$lib$driver$util$$exit$13$(1);
  }
  moonbitlang$yacc$lib$ast$$print_spec(spec, out, false);
  moonbitlang$core$builtin$$println$6$(out.val);
}
function moonbitlang$yacc$lib$driver$$compile$46$get_terminal_by_name$124$46(terminal_by_name, name) {
  return moonbitlang$core$option$$Option$unwrap$119$(moonbitlang$core$builtin$$Map$get$143$(terminal_by_name, name));
}
function moonbitlang$yacc$lib$driver$$compile$46$get_nonterminal_by_name$124$47(nonterminal_by_name, name) {
  return moonbitlang$core$option$$Option$unwrap$118$(moonbitlang$core$builtin$$Map$get$144$(nonterminal_by_name, name));
}
function moonbitlang$yacc$lib$driver$$compile(parser_spec_str, mode, input_mode, filename, external_tokens, no_comments, no_std, token_payload_rewrite, force_int_position, source_map_builder, generator) {
  const lexer = moonbitlang$yacc$lib$parser$$new_lexer(parser_spec_str);
  const token = () => {
    let _try_err;
    _L: {
      const _bind = moonbitlang$yacc$lib$parser$$Lexer$next_token(lexer);
      if (_bind.$tag === 1) {
        const _ok = _bind;
        return _ok._0;
      } else {
        const _err = _bind;
        const _tmp = _err._0;
        _try_err = _tmp;
        break _L;
      }
    }
    if (_try_err.$tag === 1) {
      const _Unrecognized = _try_err;
      const _x = _Unrecognized._0;
      const _pos = _Unrecognized._1;
      const pos_str = moonbitlang$yacc$lib$driver$$pos_to_string(filename, parser_spec_str, _pos);
      const _self = moonbitlang$core$builtin$$StringBuilder$new(0);
      moonbitlang$core$builtin$$Logger$write_char$38$(_self, _x);
      const _p = _self;
      const _p$2 = moonbitlang$core$string$$String$escape(_p.val);
      moonbitlang$yacc$lib$driver$util$$println_to_stderr(`SyntaxError: Unrecognized character ${_p$2}, at ${pos_str}`);
      return moonbitlang$yacc$lib$driver$util$$exit$12$(1);
    } else {
      moonbitlang$yacc$lib$driver$util$$println_to_stderr("SyntaxError: Unexpected end of file");
      return moonbitlang$yacc$lib$driver$util$$exit$12$(1);
    }
  };
  let spec;
  let _try_err;
  _L: {
    _L$2: {
      const _bind = moonbitlang$yacc$lib$parser$$spec(token, 0);
      if (_bind.$tag === 1) {
        const _ok = _bind;
        spec = _ok._0;
      } else {
        const _err = _bind;
        const _tmp = _err._0;
        _try_err = _tmp;
        break _L$2;
      }
      break _L;
    }
    const _UnexpectedToken = _try_err;
    const _token = _UnexpectedToken._0;
    const _loc = _UnexpectedToken._1;
    const _expected = _UnexpectedToken._2;
    const loc_str = moonbitlang$yacc$lib$driver$$loc_to_string(filename, parser_spec_str, _loc);
    const _p = new Array(_expected.length);
    const _p$2 = _expected.length;
    let _tmp = 0;
    while (true) {
      const _p$3 = _tmp;
      if (_p$3 < _p$2) {
        const _p$4 = _expected[_p$3];
        _p[_p$3] = moonbitlang$core$builtin$$Show$to_string$188$(_p$4);
        _tmp = _p$3 + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const _bind = _p;
    const expected_str = moonbitlang$yacc$lib$driver$$array_to_or_list({ buf: _bind, start: 0, len: _bind.length });
    moonbitlang$yacc$lib$driver$util$$println_to_stderr(`SyntaxError: Unexpected token ${moonbitlang$core$builtin$$Show$to_string$188$(moonbitlang$yacc$lib$parser$$Token$kind(_token))}, expected ${expected_str}.\n  at ${loc_str}`);
    spec = moonbitlang$yacc$lib$driver$util$$exit$13$(1);
  }
  let spec$2;
  let _try_err$2;
  _L$2: {
    _L$3: {
      const _tmp = moonbitlang$yacc$lib$driver$util$$path_basename(filename);
      let _tmp$2;
      switch (mode) {
        case 1: {
          _tmp$2 = 1;
          break;
        }
        case 0: {
          _tmp$2 = 0;
          break;
        }
        default: {
          _tmp$2 = 0;
        }
      }
      const _tmp$3 = _tmp$2;
      let _tmp$4;
      switch (token_payload_rewrite) {
        case 2: {
          _tmp$4 = 2;
          break;
        }
        case 1: {
          _tmp$4 = 1;
          break;
        }
        default: {
          _tmp$4 = 0;
        }
      }
      const _bind = moonbitlang$yacc$lib$elab$$elaborate_with_stdlib_rules(spec, parser_spec_str, _tmp, _tmp$3, no_std, _tmp$4, force_int_position);
      if (_bind.$tag === 1) {
        const _ok = _bind;
        spec$2 = _ok._0;
      } else {
        const _err = _bind;
        const _tmp$5 = _err._0;
        _try_err$2 = _tmp$5;
        break _L$3;
      }
      break _L$2;
    }
    if (_try_err$2.$tag === 5) {
      const _UnresolvedSymbol = _try_err$2;
      const _symbol = _UnresolvedSymbol._0;
      const _loc = _UnresolvedSymbol._1;
      const loc_str = moonbitlang$yacc$lib$driver$$loc_to_string(filename, parser_spec_str, _loc);
      moonbitlang$yacc$lib$driver$util$$println_to_stderr(`Unresolved symbol ${_symbol}, at ${loc_str}`);
      spec$2 = moonbitlang$yacc$lib$driver$util$$exit$14$(1);
    } else {
      const _FailedToParseTypeExpr = _try_err$2;
      const _type_expr = _FailedToParseTypeExpr._0;
      const type_expr_str = _type_expr;
      moonbitlang$yacc$lib$driver$util$$println_to_stderr(`Failed to parse type expression ${type_expr_str}`);
      spec$2 = moonbitlang$yacc$lib$driver$util$$exit$14$(1);
    }
  }
  let _tmp;
  switch (mode) {
    case 1: {
      _tmp = 1;
      break;
    }
    case 0: {
      _tmp = 0;
      break;
    }
    default: {
      _tmp = 0;
    }
  }
  const spec$3 = moonbitlang$yacc$lib$desugar$$eliminate_rule_args(spec$2, _tmp);
  const spec$4 = moonbitlang$yacc$lib$desugar$$eliminate_inline(spec$3);
  const terminals = [];
  const nonterminals = [];
  const terminal_by_name = moonbitlang$core$builtin$$Map$from_array$143$([]);
  const nonterminal_by_name = moonbitlang$core$builtin$$Map$from_array$144$([]);
  const _arr = spec$4.tokens;
  const _len = _arr.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len) {
      const token$2 = _arr[_i];
      const _bind = token$2.name;
      const _bind$2 = terminals.length;
      const _bind$3 = token$2.prec;
      let _bind$4;
      if (_bind$3 === undefined) {
        _bind$4 = undefined;
      } else {
        const _Some = _bind$3;
        const _x = _Some;
        const _prec = _x._0;
        const _x$2 = _x._1;
        switch (_x$2) {
          case 2: {
            _bind$4 = { _0: _prec, _1: 2 };
            break;
          }
          case 0: {
            _bind$4 = { _0: _prec, _1: 0 };
            break;
          }
          default: {
            _bind$4 = { _0: _prec, _1: 1 };
          }
        }
      }
      const terminal = { num: _bind$2, name: _bind, prec: _bind$4 };
      moonbitlang$core$builtin$$Map$op_set$143$(terminal_by_name, token$2.name, terminal);
      moonbitlang$core$array$$Array$push$119$(terminals, terminal);
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _bind = moonbitlang$core$builtin$$Map$iter2$148$(spec$4.rules);
  _bind((rule_name, rule) => {
    const _bind$2 = nonterminals.length;
    const _bind$3 = [];
    const nonterminal = { num: _bind$2, name: rule_name, productions: _bind$3 };
    moonbitlang$core$builtin$$Map$op_set$144$(nonterminal_by_name, rule.name, nonterminal);
    moonbitlang$core$array$$Array$push$118$(nonterminals, nonterminal);
    return 1;
  });
  const production_meta_map = moonbitlang$core$builtin$$Map$from_array$145$([]);
  const terminal_meta_map = moonbitlang$core$builtin$$Map$from_array$146$([]);
  const nonterminal_meta_map = moonbitlang$core$builtin$$Map$from_array$147$([]);
  const productions = [];
  const starts = spec$4.start_rules;
  const position_data_type = spec$4.position_type;
  const derive_map = spec$4.derive_map;
  const _arr$2 = spec$4.tokens;
  const _len$2 = _arr$2.length;
  let _tmp$3 = 0;
  while (true) {
    const _i = _tmp$3;
    if (_i < _len$2) {
      const token$2 = _arr$2[_i];
      const terminal = moonbitlang$yacc$lib$driver$$compile$46$get_terminal_by_name$124$46(terminal_by_name, token$2.name);
      moonbitlang$core$builtin$$Map$op_set$146$(terminal_meta_map, terminal.num, { data_type: token$2.type_, image: token$2.image });
      _tmp$3 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (mode === 2) {
    const output = moonbitlang$core$builtin$$StringBuilder$new(0);
    generator.method_2(generator.self, terminals, (name) => moonbitlang$core$builtin$$Map$get_or_init$146$(terminal_meta_map, moonbitlang$yacc$lib$driver$$compile$46$get_terminal_by_name$124$46(terminal_by_name, name).num, () => ({ data_type: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", []), image: undefined })), { self: output, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ }, no_comments, spec$4.derive_map);
    return output.val;
  }
  const _bind$2 = moonbitlang$core$builtin$$Map$iter2$148$(spec$4.rules);
  _bind$2((rule_name, rule) => {
    const lhs = moonbitlang$yacc$lib$driver$$compile$46$get_nonterminal_by_name$124$47(nonterminal_by_name, rule_name);
    moonbitlang$core$builtin$$Map$op_set$147$(nonterminal_meta_map, lhs.num, { data_type: rule.type_ });
    const _arr$3 = rule.clauses;
    const _len$3 = _arr$3.length;
    let _tmp$4 = 0;
    while (true) {
      const _i = _tmp$4;
      if (_i < _len$3) {
        const clause = _arr$3[_i];
        const production_num = productions.length;
        const _p = clause.items;
        const _p$2 = new Array(_p.length);
        const _p$3 = _p.length;
        let _tmp$5 = 0;
        while (true) {
          const _p$4 = _tmp$5;
          if (_p$4 < _p$3) {
            const _p$5 = _p[_p$4];
            const item = _p$5;
            let _tmp$6;
            _L$3: {
              _L$4: {
                const _bind$3 = item.term;
                switch (_bind$3.$tag) {
                  case 0: {
                    const _Token = _bind$3;
                    const _token = _Token._0;
                    _tmp$6 = new $64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$T(moonbitlang$yacc$lib$driver$$compile$46$get_terminal_by_name$124$46(terminal_by_name, _token.name));
                    break;
                  }
                  case 2: {
                    const _RuleCall = _bind$3;
                    const _rule_name = _RuleCall._0;
                    const _x = _RuleCall._1;
                    if (_x.length === 0) {
                      _tmp$6 = new $64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$NT(moonbitlang$yacc$lib$driver$$compile$46$get_nonterminal_by_name$124$47(nonterminal_by_name, _rule_name));
                    } else {
                      break _L$4;
                    }
                    break;
                  }
                  default: {
                    break _L$4;
                  }
                }
                break _L$3;
              }
              _tmp$6 = $panic();
            }
            _p$2[_p$4] = _tmp$6;
            _tmp$5 = _p$4 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        const production = { num: production_num, lhs: lhs, rhs: _p$2, prec: clause.prec };
        moonbitlang$core$array$$Array$push$18$(productions, production);
        moonbitlang$core$array$$Array$push$18$(lhs.productions, production);
        moonbitlang$core$builtin$$Map$op_set$145$(production_meta_map, production_num, { action: clause.action });
        _tmp$4 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return 1;
  });
  const _p = new Array(starts.length);
  const _p$2 = starts.length;
  let _tmp$4 = 0;
  while (true) {
    const _p$3 = _tmp$4;
    if (_p$3 < _p$2) {
      const _p$4 = starts[_p$3];
      const name = _p$4;
      const start_nt = moonbitlang$yacc$lib$driver$$compile$46$get_nonterminal_by_name$124$47(nonterminal_by_name, name);
      const augmented_start_nt = { num: nonterminals.length, name: `${name}_prime`, productions: [] };
      moonbitlang$core$builtin$$Map$op_set$144$(nonterminal_by_name, augmented_start_nt.name, augmented_start_nt);
      moonbitlang$core$array$$Array$push$118$(nonterminals, augmented_start_nt);
      moonbitlang$core$builtin$$Map$op_set$147$(nonterminal_meta_map, augmented_start_nt.num, moonbitlang$core$option$$Option$unwrap$153$(moonbitlang$core$builtin$$Map$get$147$(nonterminal_meta_map, start_nt.num)));
      const production = { num: productions.length, lhs: augmented_start_nt, rhs: [new $64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$NT(start_nt)], prec: undefined };
      moonbitlang$core$array$$Array$push$18$(productions, production);
      moonbitlang$core$array$$Array$push$18$(augmented_start_nt.productions, production);
      _p[_p$3] = production;
      _tmp$4 = _p$3 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const starts$2 = _p;
  const _len$3 = productions.length;
  let _tmp$5 = 0;
  while (true) {
    const _i = _tmp$5;
    if (_i < _len$3) {
      const prod = productions[_i];
      const _bind$3 = prod.prec;
      if (_bind$3 === undefined) {
        const rightmost_term = moonbitlang$core$builtin$$Iter$find_first$93$(moonbitlang$core$array$$Array$rev_iter$93$(prod.rhs), (x) => {
          if (x.$tag === 0) {
            return true;
          } else {
            return false;
          }
        });
        if (rightmost_term === undefined) {
        } else {
          const _Some = rightmost_term;
          const _x = _Some;
          if (_x.$tag === 0) {
            const _T = _x;
            const _terminal = _T._0;
            const term = moonbitlang$yacc$lib$driver$$compile$46$get_terminal_by_name$124$46(terminal_by_name, _terminal.name);
            const _bind$4 = term.prec;
            let _tmp$6;
            if (_bind$4 === undefined) {
              _tmp$6 = undefined;
            } else {
              const _Some$2 = _bind$4;
              const _x$2 = _Some$2;
              const _prec = _x$2._0;
              _tmp$6 = _prec;
            }
            prod.prec = _tmp$6;
          } else {
            $panic();
          }
        }
      }
      _tmp$5 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const grammar = { starts: starts$2, terminals: terminals, nonterminals: nonterminals, productions: productions };
  let _tmp$6;
  if (input_mode === 1) {
    _tmp$6 = true;
  } else {
    _tmp$6 = false;
  }
  const automaton = moonbitlang$yacc$lib$lr1$$Automaton$build(grammar, _tmp$6);
  const errors = moonbitlang$yacc$lib$lr1$$resolve_conflicts(automaton.conflicts);
  const _len$4 = errors.length;
  let _tmp$7 = 0;
  while (true) {
    const _i = _tmp$7;
    if (_i < _len$4) {
      const error = errors[_i];
      switch (error.$tag) {
        case 0: {
          moonbitlang$yacc$lib$driver$util$$println_to_stderr("Reduce conflict resolved by presentation order");
          break;
        }
        case 1: {
          moonbitlang$yacc$lib$driver$util$$println_to_stderr("Shift-reduce conflict resolved without precedence");
          break;
        }
        default: {
          moonbitlang$yacc$lib$driver$util$$println_to_stderr("Shift-reduce conflict not resolved because of non-associativity");
        }
      }
      _tmp$7 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const meta = { header: spec$4.header, footer: spec$4.trailer, position_data_type: position_data_type, terminal_meta: (name) => moonbitlang$core$builtin$$Map$get_or_init$146$(terminal_meta_map, moonbitlang$yacc$lib$driver$$compile$46$get_terminal_by_name$124$46(terminal_by_name, name).num, () => ({ data_type: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", []), image: undefined })), nonterminal_meta: (name) => moonbitlang$core$option$$Option$unwrap$153$(moonbitlang$core$builtin$$Map$get$147$(nonterminal_meta_map, moonbitlang$yacc$lib$driver$$compile$46$get_nonterminal_by_name$124$47(nonterminal_by_name, name).num)), production_meta: (num) => moonbitlang$core$option$$Option$unwrap$154$(moonbitlang$core$builtin$$Map$get$145$(production_meta_map, num)), derive_map: derive_map };
  const output_buffer = moonbitlang$core$builtin$$StringBuilder$new(0);
  const output = moonbitlang$yacc$lib$util$logger_with_cursor$$new({ self: output_buffer, method_0: moonbitlang$core$builtin$$Logger$write_string$38$, method_1: moonbitlang$core$builtin$$Logger$write_substring$38$, method_2: moonbitlang$core$builtin$$Logger$write_char$38$ }, 0);
  const _tmp$8 = moonbitlang$yacc$lib$driver$util$$path_basename(filename);
  let _tmp$9;
  switch (mode) {
    case 2: {
      _tmp$9 = $panic();
      break;
    }
    case 0: {
      _tmp$9 = 0;
      break;
    }
    default: {
      _tmp$9 = 1;
    }
  }
  const _tmp$10 = _tmp$9;
  let _tmp$11;
  if (input_mode === 0) {
    _tmp$11 = 0;
  } else {
    _tmp$11 = 1;
  }
  generator.method_3(generator.self, grammar, automaton, meta, output, source_map_builder, _tmp$8, external_tokens, no_comments, _tmp$10, _tmp$11);
  return output_buffer.val;
}
function moonbitlang$yacc$lib$util$default_hashmap$$new$112$(default_fn) {
  return { map: moonbitlang$core$hashmap$$new$112$(8), default_fn: default_fn };
}
function moonbitlang$yacc$lib$util$default_hashmap$$DefaultHashMap$get$112$(self, key) {
  return moonbitlang$core$hashmap$$T$get_or_init$112$(self.map, key, () => {
    const _func = self.default_fn;
    return _func(key);
  });
}
function moonbitlang$core$builtin$$Eq$op_equal$97$(_x_337, _x_338) {
  switch (_x_337.$tag) {
    case 0: {
      if (_x_338.$tag === 0) {
        return true;
      } else {
        return false;
      }
    }
    case 1: {
      const _Shift = _x_337;
      const _$42$x0_339 = _Shift._0;
      if (_x_338.$tag === 1) {
        const _Shift$2 = _x_338;
        const _$42$y0_340 = _Shift$2._0;
        return _$42$x0_339 === _$42$y0_340;
      } else {
        return false;
      }
    }
    case 2: {
      const _Reduce = _x_337;
      const _$42$x0_341 = _Reduce._0;
      const _$42$x1_342 = _Reduce._1;
      const _$42$x2_343 = _Reduce._2;
      if (_x_338.$tag === 2) {
        const _Reduce$2 = _x_338;
        const _$42$y0_344 = _Reduce$2._0;
        const _$42$y1_345 = _Reduce$2._1;
        const _$42$y2_346 = _Reduce$2._2;
        return _$42$x0_341 === _$42$y0_344 && (_$42$x1_342.num === _$42$y1_345.num && _$42$x2_343 === _$42$y2_346);
      } else {
        return false;
      }
    }
    default: {
      const _ReduceNoLookahead = _x_337;
      const _$42$x0_347 = _ReduceNoLookahead._0;
      const _$42$x1_348 = _ReduceNoLookahead._1;
      const _$42$x2_349 = _ReduceNoLookahead._2;
      if (_x_338.$tag === 3) {
        const _ReduceNoLookahead$2 = _x_338;
        const _$42$y0_350 = _ReduceNoLookahead$2._0;
        const _$42$y1_351 = _ReduceNoLookahead$2._1;
        const _$42$y2_352 = _ReduceNoLookahead$2._2;
        return _$42$x0_347 === _$42$y0_350 && (_$42$x1_348.num === _$42$y1_351.num && _$42$x2_349 === _$42$y2_352);
      } else {
        return false;
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$97$(_x_297, _x_298) {
  switch (_x_297.$tag) {
    case 0: {
      if (_x_298.$tag === 0) {
        return 0;
      } else {
        return -1;
      }
    }
    case 1: {
      const _Shift = _x_297;
      const _$42$x0_299 = _Shift._0;
      switch (_x_298.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          const _Shift$2 = _x_298;
          const _$42$y0_300 = _Shift$2._0;
          return $compare_int(_$42$x0_299, _$42$y0_300);
        }
        default: {
          return -1;
        }
      }
    }
    case 2: {
      const _Reduce = _x_297;
      const _$42$x0_301 = _Reduce._0;
      const _$42$x1_302 = _Reduce._1;
      const _$42$x2_303 = _Reduce._2;
      switch (_x_298.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          const _Reduce$2 = _x_298;
          const _$42$y0_304 = _Reduce$2._0;
          const _$42$y1_305 = _Reduce$2._1;
          const _$42$y2_306 = _Reduce$2._2;
          const _bind = $compare_int(_$42$x0_301, _$42$y0_304);
          if (_bind === 0) {
            const _bind$2 = $compare_int(_$42$x1_302.num, _$42$y1_305.num);
            if (_bind$2 === 0) {
              return $compare_int(_$42$x2_303, _$42$y2_306);
            } else {
              return _bind$2;
            }
          } else {
            return _bind;
          }
        }
        default: {
          return -1;
        }
      }
    }
    default: {
      const _ReduceNoLookahead = _x_297;
      const _$42$x0_309 = _ReduceNoLookahead._0;
      const _$42$x1_310 = _ReduceNoLookahead._1;
      const _$42$x2_311 = _ReduceNoLookahead._2;
      switch (_x_298.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 1;
        }
        default: {
          const _ReduceNoLookahead$2 = _x_298;
          const _$42$y0_312 = _ReduceNoLookahead$2._0;
          const _$42$y1_313 = _ReduceNoLookahead$2._1;
          const _$42$y2_314 = _ReduceNoLookahead$2._2;
          const _bind$2 = $compare_int(_$42$x0_309, _$42$y0_312);
          if (_bind$2 === 0) {
            const _bind$3 = $compare_int(_$42$x1_310.num, _$42$y1_313.num);
            if (_bind$3 === 0) {
              return $compare_int(_$42$x2_311, _$42$y2_314);
            } else {
              return _bind$3;
            }
          } else {
            return _bind$2;
          }
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$58$(_x_273, _x_274) {
  switch (_x_273.$tag) {
    case 0: {
      const _T = _x_273;
      const _$42$x0_275 = _T._0;
      if (_x_274.$tag === 0) {
        const _T$2 = _x_274;
        const _$42$y0_276 = _T$2._0;
        return $compare_int(_$42$x0_275.num, _$42$y0_276.num);
      } else {
        return -1;
      }
    }
    case 1: {
      const _NT = _x_273;
      const _$42$x0_277 = _NT._0;
      switch (_x_274.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          const _NT$2 = _x_274;
          const _$42$y0_278 = _NT$2._0;
          return $compare_int(_$42$x0_277.num, _$42$y0_278.num);
        }
        default: {
          return -1;
        }
      }
    }
    default: {
      switch (_x_274.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        default: {
          return 0;
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident(nont) {
  const name = nont.name;
  return moonbitlang$core$string$$String$replace_all(moonbitlang$core$string$$String$replace_all(moonbitlang$core$string$$String$replace_all(moonbitlang$core$string$$String$replace_all(name, { str: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$479, start: 0, end: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$479.length }, { str: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$481, start: 0, end: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$481.length }), { str: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$484, start: 0, end: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$484.length }, { str: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$486, start: 0, end: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$486.length }), { str: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$489, start: 0, end: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$489.length }, { str: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$491, start: 0, end: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$491.length }), { str: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$494, start: 0, end: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$494.length }, { str: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$496, start: 0, end: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident$46$42$bind$124$496.length });
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$CodegenSymbol$to_string(self) {
  switch (self.$tag) {
    case 0: {
      const _T = self;
      const _t = _T._0;
      const _p = _t.name;
      return `T_${_p}`;
    }
    case 1: {
      const _NT = self;
      const _nt = _NT._0;
      const _p$2 = moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident(_nt);
      return `NT_${_p$2}`;
    }
    default: {
      return "EOI";
    }
  }
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(type_) {
  switch (type_.$tag) {
    case 0: {
      const _Constr = type_;
      const _pkg = _Constr._0;
      const _name = _Constr._1;
      const _args = _Constr._2;
      let primary;
      if (_pkg === undefined) {
        primary = _name;
      } else {
        const _Some = _pkg;
        const _pkg$2 = _Some;
        const pkg2 = moonbitlang$core$string$$String$replace_all(_pkg$2, { str: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident$46$42$bind$124$509, start: 0, end: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident$46$42$bind$124$509.length }, { str: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident$46$42$bind$124$511, start: 0, end: moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident$46$42$bind$124$511.length });
        primary = `_${pkg2}_${_name}`;
      }
      if (_args.length === 0) {
        return primary;
      } else {
        const _bind = moonbitlang$core$array$$Array$iter$45$(_args);
        return `${primary}_${moonbitlang$core$builtin$$Iter$join((_p) => _bind((_p$2) => _p(moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_p$2))), "__")}_`;
      }
    }
    case 1: {
      return $panic();
    }
    case 2: {
      const _Option = type_;
      const _type_ = _Option._0;
      if (_type_.$tag === 4) {
        return `_${moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_type_)}__`;
      } else {
        return `${moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_type_)}_`;
      }
    }
    case 3: {
      const _Tuple = type_;
      const _types = _Tuple._0;
      const _bind = moonbitlang$core$array$$Array$iter$45$(_types);
      return `_${moonbitlang$core$builtin$$Iter$join((_p) => _bind((_p$2) => _p(moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_p$2))), "__")}_`;
    }
    default: {
      const _Arrow = type_;
      const _args$2 = _Arrow._0;
      const _ret = _Arrow._1;
      const _bind$2 = moonbitlang$core$array$$Array$iter$45$(_args$2);
      return `_${moonbitlang$core$builtin$$Iter$join((_p) => _bind$2((_p$2) => _p(moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_p$2))), "__")}_____${moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_ret)}`;
    }
  }
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen_tokens$46$inject_derive$124$233(derive_map, type_) {
  const _bind = moonbitlang$yacc$lib$util$array_multimap$$T$get$151$(derive_map, type_);
  if (_bind.length === 0) {
    return "";
  } else {
    const _bind$2 = moonbitlang$core$array$$Array$iter$45$(_bind);
    const joined = moonbitlang$core$builtin$$Iter$join((_p) => _bind$2((_p$2) => _p(moonbitlang$core$builtin$$Show$to_string$191$(_p$2))), ", ");
    return ` derive(${joined})`;
  }
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen_tokens(terminals, terminal_meta, output, no_comments, derive_map) {
  output.method_0(output.self, "pub(all) enum Token {\n");
  const _len = terminals.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const term = terminals[_i];
      const meta = terminal_meta(term.name);
      _L: {
        _L$2: {
          const _bind = meta.data_type;
          if (_bind.$tag === 0) {
            const _Constr = _bind;
            const _x = _Constr._0;
            if (_x === undefined) {
              const _x$2 = _Constr._1;
              if (_x$2 === "Unit") {
                const _x$3 = _Constr._2;
                if (_x$3.length === 0) {
                  const _p = term.name;
                  output.method_0(output.self, `  ${_p}\n`);
                } else {
                  break _L$2;
                }
              } else {
                break _L$2;
              }
            } else {
              break _L$2;
            }
          } else {
            break _L$2;
          }
          break _L;
        }
        const _p = term.name;
        output.method_0(output.self, `  ${_p}(${moonbitlang$core$builtin$$Show$to_string$191$(meta.data_type)})\n`);
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _p = moonbitlang$yacc$lib$codegen$gen_mbt$$codegen_tokens$46$inject_derive$124$233(derive_map, "Token");
  output.method_0(output.self, `}${_p}\n\npub fn Token::kind(self : Token) -> TokenKind {\n  match self {\n`);
  const _len$2 = terminals.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len$2) {
      const term = terminals[_i];
      const meta = terminal_meta(term.name);
      _L: {
        _L$2: {
          const _bind = meta.data_type;
          if (_bind.$tag === 0) {
            const _Constr = _bind;
            const _x = _Constr._0;
            if (_x === undefined) {
              const _x$2 = _Constr._1;
              if (_x$2 === "Unit") {
                const _x$3 = _Constr._2;
                if (_x$3.length === 0) {
                  const _p$2 = term.name;
                  const _p$3 = term.name;
                  output.method_0(output.self, `    ${_p$2} => TK_${_p$3}\n`);
                } else {
                  break _L$2;
                }
              } else {
                break _L$2;
              }
            } else {
              break _L$2;
            }
          } else {
            break _L$2;
          }
          break _L;
        }
        const _p$2 = term.name;
        const _p$3 = term.name;
        output.method_0(output.self, `    ${_p$2}(_) => TK_${_p$3}\n`);
      }
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  output.method_0(output.self, "  }\n}\n\n");
  output.method_0(output.self, "pub(all) enum TokenKind {\n");
  const _len$3 = terminals.length;
  let _tmp$3 = 0;
  while (true) {
    const _i = _tmp$3;
    if (_i < _len$3) {
      const term = terminals[_i];
      const _p$2 = term.name;
      output.method_0(output.self, `  TK_${_p$2}\n`);
      _tmp$3 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _p$2 = moonbitlang$yacc$lib$codegen$gen_mbt$$codegen_tokens$46$inject_derive$124$233(derive_map, "TokenKind");
  output.method_0(output.self, `}${_p$2}\n\n`);
  output.method_0(output.self, "pub impl Show for TokenKind with output(self, logger) {\n  logger.write_string(\n    match self {\n");
  const _len$4 = terminals.length;
  let _tmp$4 = 0;
  while (true) {
    const _i = _tmp$4;
    if (_i < _len$4) {
      const term = terminals[_i];
      const _bind = terminal_meta(term.name).image;
      let name;
      if (_bind === undefined) {
        name = term.name;
      } else {
        const _Some = _bind;
        const _image = _Some;
        name = _image;
      }
      const _p$3 = term.name;
      const _p$4 = moonbitlang$core$string$$String$escape(name);
      output.method_0(output.self, `      TK_${_p$3} => ${_p$4}\n`);
      _tmp$4 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  output.method_0(output.self, "    }\n  )\n}\n\n");
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$fix_result_type(str) {
  return moonbitlang$core$string$$String$contains(str, { str: moonbitlang$yacc$lib$codegen$gen_mbt$$fix_result_type$46$42$bind$124$578, start: 0, end: moonbitlang$yacc$lib$codegen$gen_mbt$$fix_result_type$46$42$bind$124$578.length }) ? `(${str})` : str;
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_action$124$53(_env, action) {
  const data_types = _env._1;
  const dedup = _env._0;
  if (moonbitlang$core$set$$Set$add_and_check$55$(dedup, action.stamp)) {
    const _arr = action.sub_actions;
    const _len = _arr.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const sub_action = _arr[_i];
        moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_action$124$53(_env, sub_action.action);
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const _arr$2 = action.bindings;
    const _len$2 = _arr$2.length;
    let _tmp$2 = 0;
    while (true) {
      const _i = _tmp$2;
      if (_i < _len$2) {
        const binding = _arr$2[_i];
        const _bind = binding._0;
        if (_bind.$tag === 0) {
          const _Data = _bind;
          const _type_ = _Data._1;
          _L: {
            _L$2: {
              if (_type_.$tag === 0) {
                const _Constr = _type_;
                const _x = _Constr._0;
                if (_x === undefined) {
                  const _x$2 = _Constr._1;
                  if (_x$2 === "Unit") {
                    const _x$3 = _Constr._2;
                    if (_x$3.length === 0) {
                    } else {
                      break _L$2;
                    }
                  } else {
                    break _L$2;
                  }
                } else {
                  break _L$2;
                }
              } else {
                break _L$2;
              }
              break _L;
            }
            moonbitlang$core$sorted_set$$T$add$45$(data_types, _type_);
          }
        }
        _tmp$2 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    moonbitlang$core$sorted_set$$T$add$45$(data_types, action.type_);
    return;
  } else {
    return;
  }
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_action$124$82(actions, action) {
  if (moonbitlang$core$hashmap$$T$contains$111$(actions, action.stamp)) {
    return undefined;
  }
  const _arr = action.sub_actions;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const sub_action = _arr[_i];
      moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_action$124$82(actions, sub_action.action);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$hashmap$$T$op_set$111$(actions, action.stamp, action);
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$get_action_id$124$99(stamp_to_action_id, action) {
  return moonbitlang$yacc$lib$util$default_hashmap$$DefaultHashMap$get$112$(stamp_to_action_id, action.stamp);
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_symbol_decision$124$158(_env, symbol, decision) {
  const sum = _env._2;
  const decision_groups = _env._1;
  const grammar = _env._0;
  moonbitlang$core$sorted_map$$T$op_set$91$(decision_groups, decision, moonbitlang$core$immut$sorted_set$$T$add$58$(moonbitlang$core$option$$Option$or$25$(moonbitlang$core$sorted_map$$T$get$91$(decision_groups, decision), $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$0$), symbol));
  switch (symbol.$tag) {
    case 0: {
      const _T = symbol;
      const _t = _T._0;
      sum.val = sum.val + _t.num | 0;
      return;
    }
    case 1: {
      const _NT = symbol;
      const _nt = _NT._0;
      sum.val = sum.val + (grammar.terminals.length + _nt.num | 0) | 0;
      return;
    }
    default: {
      sum.val = sum.val + (grammar.terminals.length + grammar.nonterminals.length | 0) | 0;
      return;
    }
  }
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$get_action_id_by_prod_num$124$184(_env, prod_num) {
  const stamp_to_action_id = _env._1;
  const _production_meta = _env._0;
  return moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$get_action_id$124$99(stamp_to_action_id, _production_meta(prod_num).action);
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$gen_decision$124$182(_env, decision) {
  const stamp_to_action_id = _env._1;
  const _production_meta = _env._0;
  const _env$2 = { _0: _production_meta, _1: stamp_to_action_id };
  switch (decision.$tag) {
    case 0: {
      return "Accept";
    }
    case 1: {
      const _Shift = decision;
      const _state_num = _Shift._0;
      return `Shift(yy_state_${moonbitlang$core$builtin$$Show$to_string$8$(_state_num)})`;
    }
    case 2: {
      const _Reduce = decision;
      const _num_symbols = _Reduce._0;
      const _nonterm = _Reduce._1;
      const _prod_num = _Reduce._2;
      const _tmp = moonbitlang$core$builtin$$Show$to_string$8$(_num_symbols);
      const _p = moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident(_nonterm);
      return `Reduce(${_tmp}, NT_${_p}, yy_action_${moonbitlang$core$builtin$$Show$to_string$8$(moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$get_action_id_by_prod_num$124$184(_env$2, _prod_num))})`;
    }
    default: {
      const _ReduceNoLookahead = decision;
      const _num_symbols$2 = _ReduceNoLookahead._0;
      const _nonterm$2 = _ReduceNoLookahead._1;
      const _prod_num$2 = _ReduceNoLookahead._2;
      const _tmp$2 = moonbitlang$core$builtin$$Show$to_string$8$(_num_symbols$2);
      const _p$2 = moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident(_nonterm$2);
      return `ReduceNoLookahead(${_tmp$2}, NT_${_p$2}, yy_action_${moonbitlang$core$builtin$$Show$to_string$8$(moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$get_action_id_by_prod_num$124$184(_env$2, _prod_num$2))})`;
    }
  }
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen(grammar, automaton, meta, output, source_map_builder, grammar_filename, external_tokens, no_comments, mode, input_mode) {
  const used_runtime_funcs = moonbitlang$core$sorted_set$$new$6$();
  const _terminal_meta = meta.terminal_meta;
  const _nonterminal_meta = meta.nonterminal_meta;
  const _production_meta = meta.production_meta;
  const _bind = moonbitlang$core$immut$array$$T$iter$68$(meta.header);
  _bind((chunk) => {
    const _code = chunk._0;
    const _original_range = chunk._1;
    if (source_map_builder === undefined) {
    } else {
      if (_original_range === undefined) {
      } else {
        const _Some = source_map_builder;
        const _source_map_builder = _Some;
        const _Some$2 = _original_range;
        const _x = _Some$2;
        const _original_utf8_pos = _x._0;
        const _utf8_len = _x._1;
        const generated_utf8_pos = output.cursor;
        _source_map_builder.method_0(_source_map_builder.self, grammar_filename, _original_utf8_pos, generated_utf8_pos, _utf8_len);
      }
    }
    moonbitlang$core$builtin$$Logger$write_string$212$(output, _code);
    return 1;
  });
  moonbitlang$core$builtin$$Logger$write_string$212$(output, "\n");
  if (external_tokens) {
  } else {
    moonbitlang$yacc$lib$codegen$gen_mbt$$codegen_tokens(grammar.terminals, _terminal_meta, { self: output, method_0: moonbitlang$core$builtin$$Logger$write_string$212$, method_1: moonbitlang$core$builtin$$Logger$write_substring$212$, method_2: moonbitlang$core$builtin$$Logger$write_char$212$ }, no_comments, meta.derive_map);
  }
  moonbitlang$core$builtin$$Logger$write_string$212$(output, `pub suberror ParseError {\n  UnexpectedToken(Token, (${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}), Array[TokenKind])\n`);
  if (input_mode === 0) {
    moonbitlang$core$builtin$$Logger$write_string$212$(output, `  UnexpectedEndOfInput(${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, Array[TokenKind])\n`);
  }
  const _bind$2 = moonbitlang$yacc$lib$util$array_multimap$$T$get$151$(meta.derive_map, moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$type_$124$36);
  let _p;
  if (_bind$2.length === 0) {
    _p = "";
  } else {
    const _bind$3 = moonbitlang$core$array$$Array$iter$45$(_bind$2);
    const joined = moonbitlang$core$builtin$$Iter$join((_p$2) => _bind$3((_p$3) => _p$2(moonbitlang$core$builtin$$Show$to_string$191$(_p$3))), ", ");
    _p = ` derive(${joined})`;
  }
  moonbitlang$core$builtin$$Logger$write_string$212$(output, `}${_p}\n\n`);
  moonbitlang$core$builtin$$Logger$write_string$212$(output, "typealias Error as YYObj\n\n");
  if (mode === 0) {
    const data_types = moonbitlang$core$sorted_set$$new$45$();
    const _arr = grammar.terminals;
    const _len = _arr.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const term = _arr[_i];
        const meta$2 = _terminal_meta(term.name);
        _L: {
          _L$2: {
            const _bind$3 = meta$2.data_type;
            if (_bind$3.$tag === 0) {
              const _Constr = _bind$3;
              const _x = _Constr._0;
              if (_x === undefined) {
                const _x$2 = _Constr._1;
                if (_x$2 === "Unit") {
                  const _x$3 = _Constr._2;
                  if (_x$3.length === 0) {
                  } else {
                    break _L$2;
                  }
                } else {
                  break _L$2;
                }
              } else {
                break _L$2;
              }
            } else {
              break _L$2;
            }
            break _L;
          }
          moonbitlang$core$sorted_set$$T$add$45$(data_types, meta$2.data_type);
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const dedup = moonbitlang$core$set$$Set$new$55$(8);
    const _env = { _0: dedup, _1: data_types };
    const _arr$2 = automaton.states;
    const _len$2 = _arr$2.length;
    let _tmp$2 = 0;
    while (true) {
      const _i = _tmp$2;
      if (_i < _len$2) {
        const state = _arr$2[_i];
        const _bind$3 = moonbitlang$core$sorted_map$$T$iter2$89$(state.action);
        _bind$3((__, action) => {
          switch (action.$tag) {
            case 0: {
              break;
            }
            case 2: {
              break;
            }
            case 1: {
              const _Reduce = action;
              const _production = _Reduce._0;
              if (!moonbitlang$core$array$$Array$contains$18$(grammar.starts, _production)) {
                const meta$2 = _production_meta(_production.num);
                moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_action$124$53(_env, meta$2.action);
              }
              break;
            }
            default: {
              $panic();
            }
          }
          return 1;
        });
        _tmp$2 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    moonbitlang$core$builtin$$Logger$write_string$212$(output, "priv suberror YYObj_Void\n\n");
    const _bind$3 = moonbitlang$core$sorted_set$$T$iter$45$(data_types);
    _bind$3((data_type) => {
      const _p$2 = moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(data_type);
      moonbitlang$core$builtin$$Logger$write_string$212$(output, `priv suberror YYObj_${_p$2} ${moonbitlang$core$builtin$$Show$to_string$191$(data_type)}\n\n`);
      return 1;
    });
  } else {
    if (input_mode === 0) {
      moonbitlang$core$builtin$$Logger$write_string$212$(output, "priv suberror YYObj_Void\n\n");
    }
    moonbitlang$core$builtin$$Logger$write_string$212$(output, "priv suberror YYObj_Json Json\n\n");
  }
  moonbitlang$core$builtin$$Logger$write_string$212$(output, `typealias (YYSymbol) -> YYDecision as YYState\n\ntypealias (${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, ArrayView[(YYObj, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)})]) -> YYObj as YYAction\n\npriv enum YYDecision {\n  Accept\n  Shift(YYState)\n  Reduce(Int, YYSymbol, YYAction)\n  ReduceNoLookahead(Int, YYSymbol, YYAction)\n  Error\n}\n\n`);
  moonbitlang$core$builtin$$Logger$write_string$212$(output, "priv enum YYSymbol {\n");
  const _arr = grammar.terminals;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const term = _arr[_i];
      const _p$2 = term.name;
      moonbitlang$core$builtin$$Logger$write_string$212$(output, `  T_${_p$2}\n`);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _arr$2 = grammar.nonterminals;
  const _len$2 = _arr$2.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len$2) {
      _L: {
        const nonterm = _arr$2[_i];
        const _bind$3 = moonbitlang$core$array$$Array$iter$18$(grammar.starts);
        if (!moonbitlang$core$builtin$$Iter$contains$118$((_p$2) => _bind$3((_p$3) => _p$2(_p$3.lhs)), nonterm)) {
          const _p$2 = moonbitlang$yacc$lib$codegen$gen_mbt$$derive_nonterminal_ident(nonterm);
          moonbitlang$core$builtin$$Logger$write_string$212$(output, `  NT_${_p$2}\n`);
        } else {
          break _L;
        }
        break _L;
      }
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$212$(output, "  EOI\n}\n\n// Workaround for EOI unused warning\nfn init {\n  match (EOI : YYSymbol) {\n    EOI => ()\n    _ => ()\n  }\n}\n\n");
  const actions = moonbitlang$core$hashmap$$new$111$(8);
  const _arr$3 = automaton.states;
  const _len$3 = _arr$3.length;
  let _tmp$3 = 0;
  while (true) {
    const _i = _tmp$3;
    if (_i < _len$3) {
      const state = _arr$3[_i];
      let _foreach_result = $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$54$;
      const _bind$3 = moonbitlang$core$sorted_map$$T$iter2$89$(state.action);
      _bind$3((__, decision) => {
        if (decision.$tag === 1) {
          const _Reduce = decision;
          const _production = _Reduce._0;
          if (!moonbitlang$core$array$$Array$contains$18$(grammar.starts, _production)) {
            const meta$2 = _production_meta(_production.num);
            moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_action$124$82(actions, meta$2.action);
          } else {
            return 1;
          }
        }
        return 1;
      });
      const _tmp$4 = _foreach_result;
      switch (_tmp$4.$tag) {
        case 0: {
          break;
        }
        case 1: {
          const _break = _tmp$4;
          _break._0;
          break;
        }
        case 2: {
          const _return = _tmp$4;
          return _return._0;
        }
        case 3: {
          $panic();
          break;
        }
        default: {
          $panic();
        }
      }
      _tmp$3 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const next_action_id = { val: 0 };
  const stamp_to_action_id = moonbitlang$yacc$lib$util$default_hashmap$$new$112$((_key) => {
    const action_id = next_action_id.val;
    next_action_id.val = next_action_id.val + 1 | 0;
    return action_id;
  });
  const _bind$3 = moonbitlang$core$hashmap$$T$iter2$111$(actions);
  _bind$3((__, action) => {
    const clause_info = action.original_clause_info;
    const _p$2 = clause_info.file;
    moonbitlang$core$builtin$$Logger$write_string$212$(output, `// file:///./${_p$2}\n`);
    const clause_lines = moonbitlang$core$builtin$$Iter$to_array$20$(moonbitlang$core$string$$String$split(clause_info.code, { str: moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$42$bind$124$747, start: 0, end: moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$42$bind$124$747.length }));
    const max_line_number = (clause_info.line + 1 | 0) + (clause_lines.length - 1 | 0) | 0;
    const num_digits = moonbitlang$core$int$$Int$to_string(max_line_number, 10).length;
    const _len$4 = clause_lines.length;
    let _tmp$4 = 0;
    while (true) {
      const _i = _tmp$4;
      if (_i < _len$4) {
        const line = clause_lines[_i];
        moonbitlang$core$builtin$$Logger$write_string$212$(output, "// ");
        const line_number = (clause_info.line + 1 | 0) + _i | 0;
        const line_number_str = moonbitlang$core$string$$String$pad_start(moonbitlang$core$int$$Int$to_string(line_number, 10), num_digits, 32);
        moonbitlang$core$builtin$$Logger$write_string$212$(output, line_number_str);
        moonbitlang$core$builtin$$Logger$write_char$212$(output, 124);
        if (_i === 0) {
          if (clause_info.column > 0) {
            moonbitlang$core$builtin$$Logger$write_string$212$(output, moonbitlang$core$string$$String$repeat(" ", clause_info.column));
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$212$(output, moonbitlang$core$builtin$$Show$to_string$20$(line));
        moonbitlang$core$builtin$$Logger$write_char$212$(output, 10);
        _tmp$4 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    moonbitlang$core$builtin$$Logger$write_string$212$(output, `fn yy_action_${moonbitlang$core$builtin$$Show$to_string$8$(moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$get_action_id$124$99(stamp_to_action_id, action))}(_last_pos : ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, _args : ArrayView[(YYObj, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)})]) -> YYObj {\n`);
    const _arr$4 = action.sub_actions;
    const _len$5 = _arr$4.length;
    let _tmp$5 = 0;
    while (true) {
      const _i = _tmp$5;
      if (_i < _len$5) {
        const sub_action = _arr$4[_i];
        const _start = sub_action.start;
        const _end = sub_action.end;
        const _action2 = sub_action.action;
        const last_pos_code = _start === 0 ? "_last_pos" : `_args[${moonbitlang$core$builtin$$Show$to_string$8$(_start - 1 | 0)}].2`;
        moonbitlang$core$builtin$$Logger$write_string$212$(output, `  let _sub_action_${moonbitlang$core$builtin$$Show$to_string$8$(_i)}_result = yy_action_${moonbitlang$core$builtin$$Show$to_string$8$(moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$get_action_id$124$99(stamp_to_action_id, _action2))}(${last_pos_code}, _args[${moonbitlang$core$builtin$$Show$to_string$8$(_start)}:${moonbitlang$core$builtin$$Show$to_string$8$(_end)}])\n`);
        _tmp$5 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const _arr$5 = action.bindings;
    const _len$6 = _arr$5.length;
    let _tmp$6 = 0;
    while (true) {
      const _i = _tmp$6;
      if (_i < _len$6) {
        const binding = _arr$5[_i];
        let index;
        _L: {
          _L$2: {
            const _bind$4 = binding._0;
            switch (_bind$4.$tag) {
              case 0: {
                const _Data = _bind$4;
                const _index = _Data._0;
                const _type_ = _Data._1;
                _L$3: {
                  _L$4: {
                    if (_type_.$tag === 0) {
                      const _Constr = _type_;
                      const _x = _Constr._0;
                      if (_x === undefined) {
                        const _x$2 = _Constr._1;
                        if (_x$2 === "Unit") {
                          const _x$3 = _Constr._2;
                          if (_x$3.length === 0) {
                            const _p$3 = binding._1;
                            moonbitlang$core$builtin$$Logger$write_string$212$(output, `  let ${_p$3} = ()\n`);
                          } else {
                            break _L$4;
                          }
                        } else {
                          break _L$4;
                        }
                      } else {
                        break _L$4;
                      }
                    } else {
                      break _L$4;
                    }
                    break _L$3;
                  }
                  const _tmp$7 = moonbitlang$core$builtin$$Show$to_string$8$(_index);
                  const _p$3 = moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_type_);
                  const _p$4 = binding._1;
                  moonbitlang$core$builtin$$Logger$write_string$212$(output, `  guard _args[${_tmp$7}].0 is YYObj_${_p$3}(${_p$4})\n`);
                }
                break;
              }
              case 3: {
                const _p$3 = binding._1;
                moonbitlang$core$builtin$$Logger$write_string$212$(output, `  let ${_p$3} = if _args.length() == 0 { _last_pos } else { _args[0].1 }\n`);
                break;
              }
              case 4: {
                const _p$4 = binding._1;
                moonbitlang$core$builtin$$Logger$write_string$212$(output, `  let ${_p$4} = if _args.length() == 0 { _last_pos } else { _args[_args.length() - 1].2 }\n`);
                break;
              }
              case 1: {
                const _StartPosOf = _bind$4;
                const _index$2 = _StartPosOf._0;
                index = _index$2;
                break _L$2;
              }
              case 2: {
                const _EndPosOf = _bind$4;
                const _index$3 = _EndPosOf._0;
                index = _index$3;
                break _L$2;
              }
              case 5: {
                moonbitlang$core$sorted_set$$T$add$6$(used_runtime_funcs, "_get_symbol_start_pos");
                const _p$5 = binding._1;
                moonbitlang$core$builtin$$Logger$write_string$212$(output, `  let ${_p$5} = _get_symbol_start_pos(_args, _last_pos)\n`);
                break;
              }
              default: {
                const _SubAction = _bind$4;
                const _index$4 = _SubAction._0;
                const _type_$2 = _SubAction._1;
                _L$4: {
                  _L$5: {
                    if (_type_$2.$tag === 0) {
                      const _Constr = _type_$2;
                      const _x = _Constr._0;
                      if (_x === undefined) {
                        const _x$2 = _Constr._1;
                        if (_x$2 === "Unit") {
                          const _x$3 = _Constr._2;
                          if (_x$3.length === 0) {
                            const _p$6 = binding._1;
                            moonbitlang$core$builtin$$Logger$write_string$212$(output, `  let ${_p$6} = ()\n`);
                          } else {
                            break _L$5;
                          }
                        } else {
                          break _L$5;
                        }
                      } else {
                        break _L$5;
                      }
                    } else {
                      break _L$5;
                    }
                    break _L$4;
                  }
                  const _tmp$7 = moonbitlang$core$builtin$$Show$to_string$8$(_index$4);
                  const _p$6 = moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_type_$2);
                  const _p$7 = binding._1;
                  moonbitlang$core$builtin$$Logger$write_string$212$(output, `  guard _sub_action_${_tmp$7}_result is YYObj_${_p$6}(${_p$7})\n`);
                }
              }
            }
            break _L;
          }
          if (action.arity === 0) {
            const _p$3 = binding._1;
            moonbitlang$core$builtin$$Logger$write_string$212$(output, `  let ${_p$3} = _last_pos\n`);
          } else {
            const _bind$4 = binding._0;
            let field;
            switch (_bind$4.$tag) {
              case 1: {
                field = 1;
                break;
              }
              case 2: {
                field = 2;
                break;
              }
              default: {
                field = $panic();
              }
            }
            const _p$3 = binding._1;
            moonbitlang$core$builtin$$Logger$write_string$212$(output, `  let ${_p$3} = _args[${moonbitlang$core$builtin$$Show$to_string$8$(index)}].${moonbitlang$core$builtin$$Show$to_string$8$(field)}\n`);
          }
        }
        _tmp$6 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const result_data_type = action.type_;
    const _p$3 = moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(result_data_type);
    moonbitlang$core$builtin$$Logger$write_string$212$(output, `  YYObj_${_p$3}({(); `);
    const _arr$6 = action.body;
    const _len$7 = _arr$6.length;
    let _tmp$7 = 0;
    while (true) {
      const _i = _tmp$7;
      if (_i < _len$7) {
        const part = _arr$6[_i];
        const _code = part._0;
        const _original_range = part._1;
        if (_original_range === undefined) {
        } else {
          const _Some = _original_range;
          const _x = _Some;
          const _original_utf8_pos = _x._0;
          const _original_utf8_len = _x._1;
          const generated_utf8_pos = output.cursor;
          if (source_map_builder === undefined) {
          } else {
            const _Some$2 = source_map_builder;
            const _source_map_builder = _Some$2;
            if (_code.length === _original_utf8_len) {
              _source_map_builder.method_0(_source_map_builder.self, grammar_filename, _original_utf8_pos, generated_utf8_pos, _code.length);
            }
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$212$(output, _code);
        _tmp$7 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    moonbitlang$core$builtin$$Logger$write_string$212$(output, "})\n");
    moonbitlang$core$builtin$$Logger$write_string$212$(output, "}\n\n");
    return 1;
  });
  moonbitlang$core$builtin$$Logger$write_string$212$(output, `fn yy_input(token : Token, _start_pos : ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, _end_pos : ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}) -> (YYSymbol, YYObj) {\n  match token {\n`);
  const _arr$4 = grammar.terminals;
  const _len$4 = _arr$4.length;
  let _tmp$4 = 0;
  while (true) {
    const _i = _tmp$4;
    if (_i < _len$4) {
      const term = _arr$4[_i];
      const meta$2 = _terminal_meta(term.name);
      if (mode === 0) {
        _L: {
          _L$2: {
            const _bind$4 = meta$2.data_type;
            if (_bind$4.$tag === 0) {
              const _Constr = _bind$4;
              const _x = _Constr._0;
              if (_x === undefined) {
                const _x$2 = _Constr._1;
                if (_x$2 === "Unit") {
                  const _x$3 = _Constr._2;
                  if (_x$3.length === 0) {
                    const _p$2 = term.name;
                    const _p$3 = term.name;
                    moonbitlang$core$builtin$$Logger$write_string$212$(output, `    ${_p$2} => (T_${_p$3}, YYObj_Void)\n`);
                  } else {
                    break _L$2;
                  }
                } else {
                  break _L$2;
                }
              } else {
                break _L$2;
              }
            } else {
              break _L$2;
            }
            break _L;
          }
          const _p$2 = term.name;
          const _p$3 = term.name;
          const _p$4 = moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(meta$2.data_type);
          moonbitlang$core$builtin$$Logger$write_string$212$(output, `    ${_p$2}(data) => (T_${_p$3}, YYObj_${_p$4}(data))\n`);
        }
      } else {
        const _bind$4 = meta$2.data_type;
        let payload_code;
        if (_bind$4.$tag === 0) {
          const _Constr = _bind$4;
          const _x = _Constr._0;
          if (_x === undefined) {
            const _x$2 = _Constr._1;
            if (_x$2 === "Unit") {
              const _x$3 = _Constr._2;
              payload_code = _x$3.length === 0 ? "" : "(data)";
            } else {
              payload_code = "(data)";
            }
          } else {
            payload_code = "(data)";
          }
        } else {
          payload_code = "(data)";
        }
        const _bind$5 = meta$2.data_type;
        let data_code;
        if (_bind$5.$tag === 0) {
          const _Constr = _bind$5;
          const _x = _Constr._0;
          if (_x === undefined) {
            const _x$2 = _Constr._1;
            if (_x$2 === "Unit") {
              const _x$3 = _Constr._2;
              data_code = _x$3.length === 0 ? "Json::null()" : "data.to_json()";
            } else {
              data_code = "data.to_json()";
            }
          } else {
            data_code = "data.to_json()";
          }
        } else {
          data_code = "data.to_json()";
        }
        const _p$2 = term.name;
        const _p$3 = term.name;
        const _p$4 = term.name;
        moonbitlang$core$builtin$$Logger$write_string$212$(output, `    ${_p$2}${payload_code} => (T_${_p$3}, YYObj_Json({\n      \"type\": \"TERMINAL\",\n      \"name\": \"${_p$4}\",\n      \"data\": ${data_code},\n      \"start\": _start_pos.to_json(),\n      \"end\": _end_pos.to_json()\n    }))\n`);
      }
      _tmp$4 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$212$(output, "  }\n}\n\n");
  const _arr$5 = automaton.states;
  const _len$5 = _arr$5.length;
  let _tmp$5 = 0;
  while (true) {
    const _i = _tmp$5;
    if (_i < _len$5) {
      const state = _arr$5[_i];
      if (!no_comments) {
        const _bind$4 = moonbitlang$yacc$lib$lr1$$LR1State$iter_item_groups(state);
        _bind$4((item) => {
          moonbitlang$core$builtin$$Logger$write_string$212$(output, `// ${moonbitlang$core$builtin$$Show$to_string$192$(item)}\n`);
          return 1;
        });
      }
      moonbitlang$core$builtin$$Logger$write_string$212$(output, `fn yy_state_${moonbitlang$core$builtin$$Show$to_string$8$(state.num)}(_lookahead : YYSymbol) -> YYDecision {\n`);
      const sum = { val: 0 };
      const decision_groups = moonbitlang$core$sorted_map$$new$91$();
      const _env = { _0: grammar, _1: decision_groups, _2: sum };
      const _bind$4 = moonbitlang$core$sorted_map$$T$iter2$89$(state.action);
      _bind$4((input, decision) => {
        let _tmp$6;
        if (input.$tag === 1) {
          const _Input = input;
          const _term = _Input._0;
          _tmp$6 = new $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$T(_term);
        } else {
          _tmp$6 = $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$EOI;
        }
        const _tmp$7 = _tmp$6;
        let _tmp$8;
        switch (decision.$tag) {
          case 2: {
            _tmp$8 = $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Accept;
            break;
          }
          case 0: {
            const _Shift = decision;
            const _next_state = _Shift._0;
            _tmp$8 = new $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Shift(_next_state.num);
            break;
          }
          case 1: {
            const _Reduce = decision;
            const _production = _Reduce._0;
            _tmp$8 = new $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Reduce(_production.rhs.length, _production.lhs, _production.num);
            break;
          }
          default: {
            _tmp$8 = $panic();
          }
        }
        moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_symbol_decision$124$158(_env, _tmp$7, _tmp$8);
        return 1;
      });
      const _bind$5 = moonbitlang$core$sorted_map$$T$iter2$88$(state.goto);
      _bind$5((symbol, state$2) => {
        if (symbol.$tag === 1) {
          const _NT = symbol;
          const _nonterm = _NT._0;
          moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_symbol_decision$124$158(_env, new $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$NT(_nonterm), new $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Shift(state$2.num));
        }
        return 1;
      });
      let total = 0;
      const _arr$6 = grammar.terminals;
      const _len$6 = _arr$6.length;
      let _tmp$6 = 0;
      while (true) {
        const _i$2 = _tmp$6;
        if (_i$2 < _len$6) {
          const term = _arr$6[_i$2];
          total = total + term.num | 0;
          _tmp$6 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const _arr$7 = grammar.nonterminals;
      const _len$7 = _arr$7.length;
      let _tmp$7 = 0;
      while (true) {
        const _i$2 = _tmp$7;
        if (_i$2 < _len$7) {
          _L: {
            const nonterm = _arr$7[_i$2];
            const _bind$6 = moonbitlang$core$array$$Array$iter$18$(grammar.starts);
            if (!moonbitlang$core$builtin$$Iter$contains$118$((_p$2) => _bind$6((_p$3) => _p$2(_p$3.lhs)), nonterm)) {
              total = total + (grammar.terminals.length + nonterm.num | 0) | 0;
            } else {
              break _L;
            }
            break _L;
          }
          _tmp$7 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      total = total + (grammar.terminals.length + grammar.nonterminals.length | 0) | 0;
      const _env$2 = { _0: _production_meta, _1: stamp_to_action_id };
      let _tmp$8;
      if (decision_groups.size === 1) {
        const _bind$6 = moonbitlang$core$array$$Array$op_get$97$(moonbitlang$core$sorted_map$$T$keys$91$(decision_groups), 0);
        let _tmp$9;
        switch (_bind$6.$tag) {
          case 2: {
            _tmp$9 = true;
            break;
          }
          case 0: {
            _tmp$9 = true;
            break;
          }
          default: {
            _tmp$9 = false;
          }
        }
        _tmp$8 = _tmp$9;
      } else {
        _tmp$8 = false;
      }
      if (_tmp$8) {
        const decision = moonbitlang$core$array$$Array$op_get$97$(moonbitlang$core$sorted_map$$T$keys$91$(decision_groups), 0);
        let decision$2;
        if (decision.$tag === 2) {
          const _Reduce = decision;
          const _num_symbols = _Reduce._0;
          const _nonterm = _Reduce._1;
          const _prod_num = _Reduce._2;
          decision$2 = new $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$ReduceNoLookahead(_num_symbols, _nonterm, _prod_num);
        } else {
          decision$2 = decision;
        }
        const _p$2 = moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$gen_decision$124$182(_env$2, decision$2);
        moonbitlang$core$builtin$$Logger$write_string$212$(output, `  ${_p$2}\n`);
      } else {
        moonbitlang$core$builtin$$Logger$write_string$212$(output, "  match _lookahead {\n");
        const _bind$6 = moonbitlang$core$sorted_map$$T$iter2$91$(decision_groups);
        _bind$6((decision, symbols) => {
          const _bind$7 = moonbitlang$core$immut$sorted_set$$T$iter$58$(symbols);
          const pattern = moonbitlang$core$array$$Array$join(moonbitlang$core$builtin$$Iter$to_array$6$((_p$2) => _bind$7((_p$3) => _p$2(moonbitlang$yacc$lib$codegen$gen_mbt$$CodegenSymbol$to_string(_p$3)))), { str: moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$42$bind$124$846, start: 0, end: moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$42$bind$124$846.length });
          const _p$2 = moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$gen_decision$124$182(_env$2, decision);
          moonbitlang$core$builtin$$Logger$write_string$212$(output, `    ${pattern} => ${_p$2}\n`);
          return 1;
        });
        const exhaustive = sum.val === total;
        if (!exhaustive) {
          moonbitlang$core$builtin$$Logger$write_string$212$(output, "    _ => Error\n");
        }
        moonbitlang$core$builtin$$Logger$write_string$212$(output, "  }\n");
      }
      moonbitlang$core$builtin$$Logger$write_string$212$(output, "}\n\n");
      _tmp$5 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (input_mode === 0) {
    moonbitlang$core$builtin$$Logger$write_string$212$(output, `fn[T] yy_parse(\n  tokens : Array[(Token, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)})],\n  start : YYState,\n  return_ : (YYObj) -> T,\n  initial_pos? : ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)},\n) -> T raise ParseError {\n  let mut cursor = 0\n  let mut state_stack : @immut/list.T[YYState] = Cons(start, Nil)\n  let data_stack : Array[(YYObj, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)})] = []\n  let mut last_pos = initial_pos.or(tokens[0].1)\n  let mut state = start\n  let mut lookahead : Option[(YYSymbol, (YYObj, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}), Token?)] = None\n  let mut last_shifted_state_stack = state_stack\n  while true {\n    let decision = match state(EOI) {\n      ReduceNoLookahead(_) | Accept as t => t\n      _ => {\n        match lookahead {\n          Some(la) => state(la.0)\n          None => {\n            if cursor < tokens.length() {\n              let (token, start_pos, end_pos) = tokens[cursor]\n              cursor += 1\n              let (symbol, data) = yy_input(token, start_pos, end_pos)\n              lookahead = Some((symbol, (data, start_pos, end_pos), Some(token)))\n              state(symbol)\n            } else {\n              lookahead = Some((EOI, (YYObj_Void, last_pos, last_pos), None))\n              state(EOI)\n            }\n          }\n        }\n      }\n    }\n    match decision {\n      Accept => return return_(data_stack.unsafe_pop().0)\n      Shift(next_state) => {\n        guard lookahead is Some(la)\n        data_stack.push(la.1)\n        state_stack = Cons(next_state, state_stack)\n        last_shifted_state_stack = state_stack\n        state = next_state\n        last_pos = la.1.2\n        lookahead = None\n      }\n      Reduce(count, symbol, action)\n      | ReduceNoLookahead(count, symbol, action) => {\n        loop (count, symbol, action) {\n          _ => {\n            let args = data_stack[data_stack.length() - count:]\n            let data = action(last_pos, args)\n            let (start_pos, end_pos) = if args.length() == 0 {\n              (last_pos, last_pos)\n            } else {\n              (args[0].1, args[args.length() - 1].2)\n            }\n            for i in 0..<count {\n              ignore(data_stack.unsafe_pop())\n              state_stack = state_stack.tail()\n            }\n            state = state_stack.unsafe_head()\n            data_stack.push((data, start_pos, end_pos))\n            match state(symbol) {\n              Accept => return return_(data_stack.unsafe_pop().0)\n              Shift(next_state) => {\n                state_stack = Cons(next_state, state_stack)\n                state = next_state\n              }\n              Reduce(count, symbol, action)\n              | ReduceNoLookahead(count, symbol, action) => continue (count, symbol, action)\n              _ => panic()\n            }\n          }\n        }\n      }\n      Error => {\n        let (_, (_, start_pos, end_pos), token) = lookahead.unwrap()\n        error(last_shifted_state_stack, token, (start_pos, end_pos))\n      }\n    }\n  }\n  panic()\n}\n\n`);
  } else {
    moonbitlang$core$builtin$$Logger$write_string$212$(output, `fn[T] yy_parse(\n  read_token : () -> (Token, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}),\n  start_pos : ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)},\n  start : YYState,\n  return_ : (YYObj) -> T\n) -> T raise ParseError {\n  let mut state_stack : @immut/list.T[YYState] = Cons(start, Nil)\n  let data_stack : Array[(YYObj, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)})] = []\n  let mut last_pos = start_pos\n  let mut state = start\n  let mut lookahead : Option[(YYSymbol, (YYObj, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}), Token)] = None\n  let mut last_shifted_state_stack = state_stack\n  while true {\n    let decision = match state(EOI) {\n      ReduceNoLookahead(_) | Accept as t => t\n      _ => {\n        match lookahead {\n          Some(la) => state(la.0)\n          None => {\n            let (token, start_pos, end_pos) = read_token()\n            let (symbol, data) = yy_input(token, start_pos, end_pos)\n            lookahead = Some((symbol, (data, start_pos, end_pos), token))\n            state(symbol)\n          }\n        }\n      }\n    }\n    match decision {\n      Accept => return return_(data_stack.unsafe_pop().0)\n      Shift(next_state) => {\n        guard lookahead is Some(la)\n        data_stack.push(la.1)\n        state_stack = Cons(next_state, state_stack)\n        last_shifted_state_stack = state_stack\n        state = next_state\n        last_pos = la.1.2\n        lookahead = None\n      }\n      Reduce(count, symbol, action)\n      | ReduceNoLookahead(count, symbol, action) => {\n        loop (count, symbol, action) {\n          _ => {\n            let args = data_stack[data_stack.length() - count:]\n            let data = action(last_pos, args)\n            let (start_pos, end_pos) = if args.length() == 0 {\n              (last_pos, last_pos)\n            } else {\n              (args[0].1, args[args.length() - 1].2)\n            }\n            for i in 0..<count {\n              ignore(data_stack.unsafe_pop())\n              state_stack = state_stack.tail()\n            }\n            state = state_stack.unsafe_head()\n            data_stack.push((data, start_pos, end_pos))\n            match state(symbol) {\n              Accept => return return_(data_stack.unsafe_pop().0)\n              Shift(next_state) => {\n                state_stack = Cons(next_state, state_stack)\n                state = next_state\n              }\n              Reduce(count, symbol, action)\n              | ReduceNoLookahead(count, symbol, action) => continue (count, symbol, action)\n              _ => panic()\n            }\n          }\n        }\n      }\n      Error => {\n        let (_, (_, start_pos, end_pos), token) = lookahead.unwrap()\n        error(last_shifted_state_stack, token, (start_pos, end_pos))\n      }\n    }\n  }\n  panic()\n}\n\n`);
  }
  if (input_mode === 0) {
    moonbitlang$core$builtin$$Logger$write_string$212$(output, `fn error(stack : @immut/list.T[YYState], token : Token?, loc : (${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)})) -> Unit raise ParseError {\n`);
  } else {
    moonbitlang$core$builtin$$Logger$write_string$212$(output, `fn error(stack : @immut/list.T[YYState], token : Token, loc : (${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)})) -> Unit raise ParseError {\n`);
  }
  moonbitlang$core$builtin$$Logger$write_string$212$(output, "  let expected = []\n  fn try_add(symbol : YYSymbol, kind : TokenKind) {\n    fn go(stack : @immut/list.T[YYState]) {\n      match stack {\n        Nil => ()\n        Cons(state, _) => {\n          match state(symbol) {\n            Accept | Shift(_) => expected.push(kind)\n            Reduce(count, symbol, _) | ReduceNoLookahead(count, symbol, _) => {\n              fn inner_go(stack : @immut/list.T[YYState], count, symbol) {\n                let stack = stack.drop(count)\n                guard stack is Cons(state, _)\n                match state(symbol) {\n                  Shift(state) => go(Cons(state, stack))\n                  Reduce(count, symbol, _) | ReduceNoLookahead(count, symbol, _) => inner_go(stack, count, symbol)\n                  _ => panic()\n                }\n              }\n              inner_go(stack, count, symbol)\n            }\n            Error => ()\n          }\n        }\n      }\n    }\n    go(stack)\n  }\n");
  moonbitlang$core$builtin$$Logger$write_string$212$(output, "  for term in ([");
  const _arr$6 = grammar.terminals;
  const _len$6 = _arr$6.length;
  let _tmp$6 = 0;
  while (true) {
    const _i = _tmp$6;
    if (_i < _len$6) {
      const term = _arr$6[_i];
      if (_i > 0) {
        moonbitlang$core$builtin$$Logger$write_string$212$(output, ", ");
      }
      const _p$2 = term.name;
      const _p$3 = term.name;
      moonbitlang$core$builtin$$Logger$write_string$212$(output, `(T_${_p$2}, TK_${_p$3})`);
      _tmp$6 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$212$(output, "] : Array[(YYSymbol, TokenKind)]) {\n");
  moonbitlang$core$builtin$$Logger$write_string$212$(output, "    try_add(term.0, term.1)\n  }\n");
  if (input_mode === 0) {
    moonbitlang$core$builtin$$Logger$write_string$212$(output, "  match token {\n    None => raise UnexpectedEndOfInput(loc.1, expected)\n    Some(token) => raise UnexpectedToken(token, loc, expected)\n  }\n");
  } else {
    moonbitlang$core$builtin$$Logger$write_string$212$(output, "  raise UnexpectedToken(token, loc, expected)\n");
  }
  moonbitlang$core$builtin$$Logger$write_string$212$(output, "}\n\n");
  const _arr$7 = automaton.starts;
  const _len$7 = _arr$7.length;
  let _tmp$7 = 0;
  while (true) {
    const _i = _tmp$7;
    if (_i < _len$7) {
      const start = _arr$7[_i];
      const _start_production = start._0;
      const _start_state = start._1;
      const name = _start_production.lhs.name;
      const original_name = moonbitlang$core$string$$String$substring(name, 0, name.length - "_prime".length | 0);
      if (input_mode === 0) {
        const _tmp$8 = moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type);
        const _tmp$9 = moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type);
        const _tmp$10 = moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type);
        const _p$2 = moonbitlang$yacc$lib$codegen$gen_mbt$$fix_result_type(moonbitlang$core$builtin$$Show$to_string$191$(_nonterminal_meta(name).data_type));
        const _tmp$11 = moonbitlang$core$builtin$$Show$to_string$8$(_start_state.num);
        const _p$3 = moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_nonterminal_meta(name).data_type);
        moonbitlang$core$builtin$$Logger$write_string$212$(output, `pub fn ${original_name}(tokens : Array[(Token, ${_tmp$8}, ${_tmp$9})], initial_pos? : ${_tmp$10}) -> ${_p$2} raise ParseError {\n  yy_parse(\n    tokens,\n    yy_state_${_tmp$11},\n    fn {\n      YYObj_${_p$3}(result) => result\n      _ => panic()\n    },\n    initial_pos?,\n  )\n}\n`);
      } else {
        const _tmp$8 = moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type);
        const _tmp$9 = moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type);
        const _tmp$10 = moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type);
        const _p$2 = moonbitlang$yacc$lib$codegen$gen_mbt$$fix_result_type(moonbitlang$core$builtin$$Show$to_string$191$(_nonterminal_meta(name).data_type));
        const _tmp$11 = moonbitlang$core$builtin$$Show$to_string$8$(_start_state.num);
        const _p$3 = moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_nonterminal_meta(name).data_type);
        moonbitlang$core$builtin$$Logger$write_string$212$(output, `pub fn ${original_name}(read_token : () -> (Token, ${_tmp$8}, ${_tmp$9}), start_pos : ${_tmp$10}) -> ${_p$2} raise ParseError {\n  yy_parse(\n    read_token,\n    start_pos,\n    yy_state_${_tmp$11},\n    fn {\n      YYObj_${_p$3}(result) => result\n      _ => panic()\n    },\n  )\n}\n`);
      }
      _tmp$7 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _bind$4 = moonbitlang$core$sorted_set$$T$iter$6$(used_runtime_funcs);
  _bind$4((func) => {
    if (func === "_get_symbol_start_pos") {
      moonbitlang$core$builtin$$Logger$write_string$212$(output, `\nfn _get_symbol_start_pos(args : ArrayView[(YYObj, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)})], last_pos : ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}) -> ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)} {\n  if args.length() == 0 {\n    last_pos\n  } else {\n    for i = 0; i < args.length(); i = i + 1 {\n      let (_, start_pos, end_pos) = args[i]\n      if start_pos == end_pos {\n        continue\n      }\n      return start_pos\n    }\n    args[args.length() - 1].2\n  }\n}\n`);
    } else {
      $panic();
    }
    return 1;
  });
  if (mode === 0) {
  } else {
    moonbitlang$core$builtin$$Logger$write_string$212$(output, `\nfn args_to_json(args : ArrayView[(YYObj, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)}, ${moonbitlang$core$builtin$$Show$to_string$191$(meta.position_data_type)})]) -> Json {\n  Json::array(args.iter().map(fn {\n    (YYObj_Json(json), _, _) => json\n    _ => panic()\n  }).to_array())\n}\n`);
  }
  const _bind$5 = moonbitlang$core$immut$array$$T$iter$68$(meta.footer);
  _bind$5((chunk) => {
    const _code = chunk._0;
    const _original_range = chunk._1;
    if (source_map_builder === undefined) {
    } else {
      if (_original_range === undefined) {
      } else {
        const _Some = source_map_builder;
        const _source_map_builder = _Some;
        const _Some$2 = _original_range;
        const _x = _Some$2;
        const _original_utf8_pos = _x._0;
        const _utf8_len = _x._1;
        const generated_utf8_pos = output.cursor;
        _source_map_builder.method_0(_source_map_builder.self, grammar_filename, _original_utf8_pos, generated_utf8_pos, _utf8_len);
      }
    }
    moonbitlang$core$builtin$$Logger$write_string$212$(output, _code);
    return 1;
  });
}
function moonbitlang$yacc$lib$codegen$$CodeGenerator$void_type$5$(self) {
  return "Unit";
}
function moonbitlang$yacc$lib$codegen$$CodeGenerator$void_action_code$5$(self) {
  return "()";
}
function moonbitlang$yacc$lib$codegen$$CodeGenerator$codegen_tokens$5$(self, terminals, terminal_meta, output, no_comments, derive_map) {
  moonbitlang$yacc$lib$codegen$gen_mbt$$codegen_tokens(terminals, terminal_meta, output, no_comments, derive_map);
}
function moonbitlang$yacc$lib$codegen$$CodeGenerator$codegen$5$(self, grammar, automaton, meta, output, source_map_builder, grammar_filename, external_tokens, no_comments, mode, input_mode) {
  moonbitlang$yacc$lib$codegen$gen_mbt$$codegen(grammar, automaton, meta, output, source_map_builder, grammar_filename, external_tokens, no_comments, mode, input_mode);
}
function moonbitlang$yacc$main$$_init$42$46$write_map_file$124$23(source_map, file) {
  return moonbitlang$x$fs$$write_string_to_file(file, moonbitlang$core$json$$Json$stringify(moonbitlang$core$builtin$$ToJson$to_json$215$(source_map), false, 2), "utf8");
}
(() => {
  const output_file = { val: "" };
  const output_map_file = { val: undefined };
  const input_file = { val: "" };
  const mode = { val: 0 };
  const input_mode = { val: 0 };
  const external_tokens = { val: false };
  const no_comments = { val: false };
  const no_std = { val: false };
  const token_payload_rewrite = { val: 2 };
  const force_int_position = { val: false };
  const print_as_mly_without_actions = { val: false };
  Yoorkin$ArgParser$$parse([{ _0: "--print-as-mly-without-actions", _1: "--print-as-mly-without-actions", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    print_as_mly_without_actions.val = true;
  }), _3: "Print as mly without actions" }, { _0: "--output-file", _1: "-o", _2: new $64$Yoorkin$47$ArgParser$46$Spec$String((file) => {
    output_file.val = file;
  }), _3: "Output file" }, { _0: "--output-map-file", _1: "--output-map-file", _2: new $64$Yoorkin$47$ArgParser$46$Spec$String((file) => {
    output_map_file.val = file;
  }), _3: "Output source map file, if not specified, it will be the output file with .map.json extension" }, { _0: "--mode", _1: "--mode", _2: new $64$Yoorkin$47$ArgParser$46$Spec$String((mode_sym) => {
    let _tmp;
    switch (mode_sym) {
      case "default": {
        _tmp = 0;
        break;
      }
      case "json-cst": {
        _tmp = 1;
        break;
      }
      case "only-tokens": {
        _tmp = 2;
        break;
      }
      default: {
        moonbitlang$yacc$lib$driver$util$$println_to_stderr(`Unsupported mode: ${mode_sym}`);
        _tmp = moonbitlang$yacc$lib$driver$util$$exit$216$(1);
      }
    }
    mode.val = _tmp;
  }), _3: "Specify mode (default, json-cst)" }, { _0: "--input-mode", _1: "--input-mode", _2: new $64$Yoorkin$47$ArgParser$46$Spec$String((input_mode_sym) => {
    switch (input_mode_sym) {
      case "array": {
        input_mode.val = 0;
        return;
      }
      case "pull": {
        input_mode.val = 1;
        return;
      }
      default: {
        moonbitlang$yacc$lib$driver$util$$println_to_stderr(`Unsupported input mode: ${input_mode_sym}`);
        moonbitlang$yacc$lib$driver$util$$exit$7$(1);
        return;
      }
    }
  }), _3: "Specify input mode (array, pull). Default is array" }, { _0: "--external-tokens", _1: "--external-tokens", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    external_tokens.val = true;
  }), _3: "Use external tokens" }, { _0: "--force-token-json-payload", _1: "--force-token-json-payload", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    token_payload_rewrite.val = 1;
  }), _3: "Force token to use JSON payload" }, { _0: "--force-token-no-payload", _1: "--force-token-no-payload", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    token_payload_rewrite.val = 0;
  }), _3: "Force token to not use payload" }, { _0: "--force-int-position", _1: "--force-int-position", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    force_int_position.val = true;
  }), _3: "Overwrite the position type to int" }, { _0: "--no-comments", _1: "--no-comments", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    no_comments.val = true;
  }), _3: "Do not include comments in the output" }, { _0: "--no-std", _1: "--no-std", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    no_std.val = true;
  }), _3: "Do not include standard library" }, { _0: "--version", _1: "-v", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    moonbitlang$core$builtin$$println$6$("moonyacc 0.1.0");
    moonbitlang$yacc$lib$driver$util$$exit$7$(0);
  }), _3: "Show version" }], (rest) => {
    input_file.val = rest;
  }, moonbitlang$yacc$main$$_init$42$46$usage$124$1, moonbitlang$x$sys$$get_cli_args());
  const _p = input_file.val;
  const _p$2 = "";
  if (!(_p === _p$2)) {
    let parser_spec_src;
    let _try_err;
    _L: {
      _L$2: {
        const _bind = moonbitlang$x$fs$$read_file_to_string(input_file.val, "utf8");
        if (_bind.$tag === 1) {
          const _ok = _bind;
          parser_spec_src = _ok._0;
        } else {
          const _err = _bind;
          const _tmp = _err._0;
          _try_err = _tmp;
          break _L$2;
        }
        break _L;
      }
      parser_spec_src = moonbitlang$core$abort$$abort$6$(moonbitlang$core$builtin$$Show$to_string$186$(_try_err));
    }
    if (print_as_mly_without_actions.val) {
      const out = moonbitlang$core$builtin$$StringBuilder$new(0);
      moonbitlang$yacc$lib$driver$$print(parser_spec_src, input_file.val, out);
      moonbitlang$yacc$lib$driver$util$$exit$7$(0);
    }
    const source_map = moonbitlang$yacc$lib$codegen$$SourceMap$new();
    const output = moonbitlang$yacc$lib$driver$$compile(parser_spec_src, mode.val, input_mode.val, input_file.val, external_tokens.val, no_comments.val, no_std.val, token_payload_rewrite.val, force_int_position.val, { self: source_map, method_0: moonbitlang$yacc$lib$codegen$$SourceMapBuilder$add_mapping$215$ }, moonbitlang$yacc$lib$codegen$gen_mbt$$generator);
    if (output_file.val === "") {
      moonbitlang$core$builtin$$println$6$(output);
      const _bind = output_map_file.val;
      if (_bind === undefined) {
        return;
      } else {
        const _Some = _bind;
        const _file = _Some;
        let _tmp;
        let _try_err$2;
        _L$2: {
          _L$3: {
            const _bind$2 = moonbitlang$yacc$main$$_init$42$46$write_map_file$124$23(source_map, _file);
            if (_bind$2.$tag === 1) {
              const _ok = _bind$2;
              _ok._0;
            } else {
              const _err = _bind$2;
              const _tmp$2 = _err._0;
              _try_err$2 = _tmp$2;
              break _L$3;
            }
            _tmp = new Result$Ok$20$(undefined);
            break _L$2;
          }
          _tmp = new Result$Err$20$(_try_err$2);
        }
        moonbitlang$core$result$$Result$unwrap$62$(_tmp);
        return;
      }
    } else {
      let _tmp;
      let _try_err$2;
      _L$2: {
        _L$3: {
          const _bind = moonbitlang$x$fs$$write_string_to_file(output_file.val, output, "utf8");
          if (_bind.$tag === 1) {
            const _ok = _bind;
            _ok._0;
          } else {
            const _err = _bind;
            const _tmp$2 = _err._0;
            _try_err$2 = _tmp$2;
            break _L$3;
          }
          const _tmp$2 = output_map_file.val;
          const _p$3 = output_file.val;
          const _bind$2 = moonbitlang$yacc$main$$_init$42$46$write_map_file$124$23(source_map, moonbitlang$core$option$$Option$or$6$(_tmp$2, `${_p$3}.map.json`));
          if (_bind$2.$tag === 1) {
            const _ok = _bind$2;
            _ok._0;
          } else {
            const _err = _bind$2;
            const _tmp$3 = _err._0;
            _try_err$2 = _tmp$3;
            break _L$3;
          }
          _tmp = new Result$Ok$20$(undefined);
          break _L$2;
        }
        _tmp = new Result$Err$20$(_try_err$2);
      }
      moonbitlang$core$result$$Result$unwrap$62$(_tmp);
      return;
    }
  } else {
    moonbitlang$yacc$lib$driver$util$$println_to_stderr("Input file is required");
    moonbitlang$yacc$lib$driver$util$$exit$7$(1);
    return;
  }
})();
