const $1L = { hi: 0, lo: 1 };
const $0L = { hi: 0, lo: 0 };
function Result$Err$0$(param0) {
  this._0 = param0;
}
Result$Err$0$.prototype.$tag = 0;
function Result$Ok$0$(param0) {
  this._0 = param0;
}
Result$Ok$0$.prototype.$tag = 1;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$ParseError$46$UnexpectedToken(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$ParseError$46$UnexpectedToken.prototype.$tag = 30;
const Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void = { $tag: 29 };
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__Int__Array_SubstItem__$46$YYObj__String__Int__Array_SubstItem__(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__Int__Array_SubstItem__$46$YYObj__String__Int__Array_SubstItem__.prototype.$tag = 28;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_ClauseAction$46$YYObj_ClauseAction(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_ClauseAction$46$YYObj_ClauseAction.prototype.$tag = 27;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_String_$46$YYObj__immut_list_T_String_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_String_$46$YYObj__immut_list_T_String_.prototype.$tag = 26;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_ParserSpec$46$YYObj_ParserSpec(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_ParserSpec$46$YYObj_ParserSpec.prototype.$tag = 25;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Declaration_$46$YYObj__immut_list_T_Declaration_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Declaration_$46$YYObj__immut_list_T_Declaration_.prototype.$tag = 24;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Symbol_$46$YYObj_Symbol_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Symbol_$46$YYObj_Symbol_.prototype.$tag = 23;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Clause$46$YYObj_Clause(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Clause$46$YYObj_Clause.prototype.$tag = 22;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Rule_$46$YYObj__immut_list_T_Rule_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Rule_$46$YYObj__immut_list_T_Rule_.prototype.$tag = 21;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Clause_$46$YYObj__immut_list_T_Clause_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Clause_$46$YYObj__immut_list_T_Clause_.prototype.$tag = 20;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Rule$46$YYObj_Rule(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Rule$46$YYObj_Rule.prototype.$tag = 19;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr_$46$YYObj_TypeExpr_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr_$46$YYObj_TypeExpr_.prototype.$tag = 18;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Code_$46$YYObj_Code_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Code_$46$YYObj_Code_.prototype.$tag = 17;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__String_$46$YYObj__String__String_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__String_$46$YYObj__String__String_.prototype.$tag = 16;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_ClauseItem_$46$YYObj__immut_list_T_ClauseItem_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_ClauseItem_$46$YYObj__immut_list_T_ClauseItem_.prototype.$tag = 15;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_ClauseItem$46$YYObj_ClauseItem(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_ClauseItem$46$YYObj_ClauseItem.prototype.$tag = 14;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Term_$46$YYObj__immut_list_T_Term_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Term_$46$YYObj__immut_list_T_Term_.prototype.$tag = 13;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Term$46$YYObj_Term(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Term$46$YYObj_Term.prototype.$tag = 12;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_TypeExpr_$46$YYObj__immut_list_T_TypeExpr_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_TypeExpr_$46$YYObj__immut_list_T_TypeExpr_.prototype.$tag = 11;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Array_String_$46$YYObj_Array_String_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Array_String_$46$YYObj_Array_String_.prototype.$tag = 10;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Symbol$46$YYObj_Symbol(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Symbol$46$YYObj_Symbol.prototype.$tag = 9;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr.prototype.$tag = 8;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__String__TypeExpr___$46$YYObj__immut_list_T__String__TypeExpr___(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__String__TypeExpr___$46$YYObj__immut_list_T__String__TypeExpr___.prototype.$tag = 7;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_String$46$YYObj_String(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_String$46$YYObj_String.prototype.$tag = 6;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Declaration$46$YYObj_Declaration(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Declaration$46$YYObj_Declaration.prototype.$tag = 5;
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Symbol_$46$YYObj__immut_list_T_Symbol_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Symbol_$46$YYObj__immut_list_T_Symbol_.prototype.$tag = 4;
const Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$UnexpectedEndOfFile = { $tag: 2 };
function Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$Unrecognized(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$Unrecognized.prototype.$tag = 3;
function Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError.prototype.$tag = 1;
function Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError.prototype.$tag = 0;
const $9223372036854775807L = { hi: 2147483647, lo: -1 };
const $10L = { hi: 0, lo: 10 };
const $16L = { hi: 0, lo: 16 };
const $_9223372036854775808L = { hi: -2147483648, lo: 0 };
function Result$Err$1$(param0) {
  this._0 = param0;
}
Result$Err$1$.prototype.$tag = 0;
function Result$Ok$1$(param0) {
  this._0 = param0;
}
Result$Ok$1$.prototype.$tag = 1;
function Result$Err$2$(param0) {
  this._0 = param0;
}
Result$Err$2$.prototype.$tag = 0;
function Result$Ok$2$(param0) {
  this._0 = param0;
}
Result$Ok$2$.prototype.$tag = 1;
function Result$Err$3$(param0) {
  this._0 = param0;
}
Result$Err$3$.prototype.$tag = 0;
function Result$Ok$3$(param0) {
  this._0 = param0;
}
Result$Ok$3$.prototype.$tag = 1;
function $bound_check(arr, index) {
  if (index < 0 || index >= arr.length) throw new Error("Index out of bounds");
}
function $compare_int(a, b) {
  return (a >= b) - (a <= b);
}
const moonbitlang$core$array$$JSArray$copy = (arr) => arr.slice(0);
function $make_array_len_and_init(a, b) {
  const arr = new Array(a);
  for (let i = 0; i < a; i++) {
    arr[i] = b;
  }
  return arr;
}
const $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$4$(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$4$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$5$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$5$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$5$.prototype.$tag = 1;
class $PanicError extends Error {}
function $panic() {
  throw new $PanicError();
}
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$6$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$6$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$6$.prototype.$tag = 1;
const $bytes_literal$0 = new Uint8Array();
const moonbitlang$core$builtin$$get_int64_wasm_helper = function f() {   if (f._exports) return f._exports;   return f._exports = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports; };
const moonbitlang$core$builtin$$JSArray$push = (arr, val) => { arr.push(val); };
const moonbitlang$core$builtin$$JSArray$pop = (arr) => arr.pop();
const moonbitlang$core$builtin$$JSArray$splice = (arr, idx, cnt) => arr.splice(idx, cnt);
function $64$moonbitlang$47$core$47$builtin$46$Json$Number(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$Json$Number.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$Json$String(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$Json$String.prototype.$tag = 4;
function $64$moonbitlang$47$core$47$builtin$46$Json$Array(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$Json$Array.prototype.$tag = 5;
function $64$moonbitlang$47$core$47$builtin$46$Json$Object(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$Json$Object.prototype.$tag = 6;
const moonbitlang$core$builtin$$MyInt64$compare = (a, b) => {   const ahi = a.hi;   const bhi = b.hi;   if (ahi < bhi) {     return -1;   }   if (ahi > bhi) {     return 1;   }   const alo = a.lo >>> 0;   const blo = b.lo >>> 0;   if (alo < blo) {     return -1;   }   if (alo > blo) {     return 1;   }   return 0; };
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$7$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$7$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$7$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$7$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$7$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$7$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$7$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$7$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$7$.prototype.$tag = 4;
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$8$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$8$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$8$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$8$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$8$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$8$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$8$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$8$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$8$.prototype.$tag = 4;
const moonbitlang$x$fs$$read_file_ffi = function(path) {    var fs = require('fs');    try {      const content = fs.readFileSync(path);      globalThis.fileContent = content;      return 0;    } catch (error) {      globalThis.errorMessage = error.message;      return -1;    }  };
const moonbitlang$x$fs$$write_file_ffi = function(path, content) {    var fs = require('fs');    try {      fs.writeFileSync(path, Buffer.from(content));      return 0;    } catch (error) {      globalThis.errorMessage = error.message;      return -1;    }  };
const moonbitlang$x$fs$$get_file_content_ffi = function() {    return globalThis.fileContent;  };
const moonbitlang$x$fs$$get_error_message_ffi = function() {    return globalThis.errorMessage || '';  };
function Result$Err$9$(param0) {
  this._0 = param0;
}
Result$Err$9$.prototype.$tag = 0;
function Result$Ok$9$(param0) {
  this._0 = param0;
}
Result$Ok$9$.prototype.$tag = 1;
function Result$Err$10$(param0) {
  this._0 = param0;
}
Result$Err$10$.prototype.$tag = 0;
function Result$Ok$10$(param0) {
  this._0 = param0;
}
Result$Ok$10$.prototype.$tag = 1;
function Result$Err$11$(param0) {
  this._0 = param0;
}
Result$Err$11$.prototype.$tag = 0;
function Result$Ok$11$(param0) {
  this._0 = param0;
}
Result$Ok$11$.prototype.$tag = 1;
function Result$Err$12$(param0) {
  this._0 = param0;
}
Result$Err$12$.prototype.$tag = 0;
function Result$Ok$12$(param0) {
  this._0 = param0;
}
Result$Ok$12$.prototype.$tag = 1;
function Result$Err$13$(param0) {
  this._0 = param0;
}
Result$Err$13$.prototype.$tag = 0;
function Result$Ok$13$(param0) {
  this._0 = param0;
}
Result$Ok$13$.prototype.$tag = 1;
function Result$Err$14$(param0) {
  this._0 = param0;
}
Result$Err$14$.prototype.$tag = 0;
function Result$Ok$14$(param0) {
  this._0 = param0;
}
Result$Ok$14$.prototype.$tag = 1;
const moonbitlang$x$sys$internal$ffi$$get_cli_args_internal = function() {   return process.argv;  };
function $64$Yoorkin$47$ArgParser$46$Spec$Unit(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Unit.prototype.$tag = 0;
function $64$Yoorkin$47$ArgParser$46$Spec$String(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$String.prototype.$tag = 1;
function $64$Yoorkin$47$ArgParser$46$Spec$Set_string(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Set_string.prototype.$tag = 2;
function $64$Yoorkin$47$ArgParser$46$Spec$Set(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Set.prototype.$tag = 3;
function $64$Yoorkin$47$ArgParser$46$Spec$Clear(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Clear.prototype.$tag = 4;
function Result$Err$15$(param0) {
  this._0 = param0;
}
Result$Err$15$.prototype.$tag = 0;
function Result$Ok$15$(param0) {
  this._0 = param0;
}
Result$Ok$15$.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$Dollar(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$Dollar.prototype.$tag = 0;
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$StartPos = { $tag: 1 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$EndPos = { $tag: 2 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$Loc = { $tag: 3 };
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$StartPosOf(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$StartPosOf.prototype.$tag = 4;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$EndPosOf(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$EndPosOf.prototype.$tag = 5;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$LocOf(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$LocOf.prototype.$tag = 6;
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$SymbolStartPos = { $tag: 7 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$Sloc = { $tag: 8 };
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$ClauseItemIdent$Dollar(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$ClauseItemIdent$Dollar.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$ClauseItemIdent$Name(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$ClauseItemIdent$Name.prototype.$tag = 1;
function Result$Err$16$(param0) {
  this._0 = param0;
}
Result$Err$16$.prototype.$tag = 0;
function Result$Ok$16$(param0) {
  this._0 = param0;
}
Result$Ok$16$.prototype.$tag = 1;
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$EOF = { $tag: 0 };
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$IDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$IDENT.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$STRING(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$STRING.prototype.$tag = 2;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LBRACE_CODE_RBRACE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LBRACE_CODE_RBRACE.prototype.$tag = 3;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_LBRACE_CODE_PERCENT_RBRACE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_LBRACE_CODE_PERCENT_RBRACE.prototype.$tag = 4;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_PERCENT_CODE_EOF(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_PERCENT_CODE_EOF.prototype.$tag = 5;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PKG_AND_IDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PKG_AND_IDENT.prototype.$tag = 6;
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_PERCENT = { $tag: 7 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_START = { $tag: 8 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_TOKEN = { $tag: 9 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_TYPE = { $tag: 10 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_POSITION = { $tag: 11 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_LEFT = { $tag: 12 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_RIGHT = { $tag: 13 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_NONASSOC = { $tag: 14 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_PREC = { $tag: 15 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_DERIVE = { $tag: 16 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_INLINE = { $tag: 17 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LANGLE = { $tag: 18 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$RANGLE = { $tag: 19 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LBRACKET = { $tag: 20 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$RBRACKET = { $tag: 21 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LPAREN = { $tag: 22 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$RPAREN = { $tag: 23 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$COMMA = { $tag: 24 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$ARROW = { $tag: 25 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$QUESTION = { $tag: 26 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$COLON = { $tag: 27 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$BAR = { $tag: 28 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$EQ = { $tag: 29 };
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$SEMI = { $tag: 30 };
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Start(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Start.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Token(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Token.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Token1(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Token1.prototype.$tag = 2;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Type(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Type.prototype.$tag = 3;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Derive(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Derive.prototype.$tag = 4;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Position(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Position.prototype.$tag = 5;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Left(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Left.prototype.$tag = 6;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Right(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Right.prototype.$tag = 7;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Nonassoc(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Nonassoc.prototype.$tag = 8;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$17$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$17$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$17$.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Constr(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Constr.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Option(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Option.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Tuple(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Tuple.prototype.$tag = 2;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Arrow(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Arrow.prototype.$tag = 3;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$18$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$18$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$18$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$19$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$19$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$19$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$20$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$20$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$20$.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Term$Symbol(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Term$Symbol.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Term$Image(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Term$Image.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$Term$RuleCall(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$Term$RuleCall.prototype.$tag = 2;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$21$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$21$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$21$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$22$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$22$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$22$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$23$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$23$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$23$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$24$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$.prototype.$tag = 1;
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Accept = { $tag: 0 };
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce.prototype.$tag = 2;
function $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead.prototype.$tag = 3;
const $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error = { $tag: 4 };
function Result$Err$25$(param0) {
  this._0 = param0;
}
Result$Err$25$.prototype.$tag = 0;
function Result$Ok$25$(param0) {
  this._0 = param0;
}
Result$Ok$25$.prototype.$tag = 1;
function Result$Err$26$(param0) {
  this._0 = param0;
}
Result$Err$26$.prototype.$tag = 0;
function Result$Ok$26$(param0) {
  this._0 = param0;
}
Result$Ok$26$.prototype.$tag = 1;
function $i32_ctz(a) {
  a >>>= 0;
  if (a === 0) return 32;
  a &= -a;
  return 31 - Math.clz32(a);
}
function $i32_popcnt(a) {
  a = a - ((a >>> 1) & 0x55555555);
  a = (a & 0x33333333) + ((a >>> 2) & 0x33333333);
  a = (a + (a >>> 4)) & 0x0f0f0f0f;
  a = a + (a >>> 8);
  a = a + (a >>> 16);
  return a & 0x3f;
}
const Option$None$27$ = { $tag: 0 };
function Option$Some$27$(param0) {
  this._0 = param0;
}
Option$Some$27$.prototype.$tag = 1;
const $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$EndOfInput = { $tag: 0 };
function $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$Input(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$Input.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$28$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$28$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$28$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$28$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$28$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$28$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$28$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$28$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$28$.prototype.$tag = 4;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$29$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$29$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$29$.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Reduce_conflict_resolved_by_presentation_order(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Reduce_conflict_resolved_by_presentation_order.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Shift_reduce_conflict_resolved_without_precedence(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Shift_reduce_conflict_resolved_without_precedence.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Shift_reduce_conflict_not_resolved_because_of_non_assoc(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Shift_reduce_conflict_not_resolved_because_of_non_assoc.prototype.$tag = 2;
function Result$Err$30$(param0) {
  this._0 = param0;
}
Result$Err$30$.prototype.$tag = 0;
function Result$Ok$30$(param0) {
  this._0 = param0;
}
Result$Ok$30$.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Shift(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Shift.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Reduce(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Reduce.prototype.$tag = 1;
const $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Accept = { $tag: 2 };
function $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Conflict(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Conflict.prototype.$tag = 3;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$31$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$31$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$31$.prototype.$tag = 1;
const Option$None$32$ = { $tag: 0 };
function Option$Some$32$(param0) {
  this._0 = param0;
}
Option$Some$32$.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$T(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$T.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$NT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$NT.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$Data(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$Data.prototype.$tag = 0;
const $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$LastPos = { $tag: 1 };
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$StartPos(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$StartPos.prototype.$tag = 2;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$EndPos(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$EndPos.prototype.$tag = 3;
const $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$SymbolStartPos = { $tag: 4 };
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$SubAction(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$SubAction.prototype.$tag = 5;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Option(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Option.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Tuple(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Tuple.prototype.$tag = 2;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Arrow(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Arrow.prototype.$tag = 3;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$Token(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$Token.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$Param(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$Param.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall.prototype.$tag = 2;
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$33$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$33$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$33$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$33$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$33$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$33$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$33$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$33$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$33$.prototype.$tag = 4;
const moonbitlang$yacc$lib$driver$util$$ffi_exit = (code) => { process.exit(code); };
const moonbitlang$yacc$lib$driver$util$$println_to_stderr = (msg) => { console.error("%s", msg); };
const $64$moonbitlang$47$yacc$47$lib$47$elab$46$JsonCst$No = { $tag: 0 };
function $64$moonbitlang$47$yacc$47$lib$47$elab$46$JsonCst$Yes(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$elab$46$JsonCst$Yes.prototype.$tag = 1;
const $64$moonbitlang$47$yacc$47$lib$47$codegen$46$Mode$Default = { $tag: 0 };
function $64$moonbitlang$47$yacc$47$lib$47$codegen$46$Mode$JsonCst(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$codegen$46$Mode$JsonCst.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$T(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$T.prototype.$tag = 0;
function $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$NT(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$NT.prototype.$tag = 1;
const $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$EOI = { $tag: 2 };
const $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Accept = { $tag: 0 };
function $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Shift(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Shift.prototype.$tag = 1;
function $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Reduce(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Reduce.prototype.$tag = 2;
function $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$ReduceNoLookahead(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$ReduceNoLookahead.prototype.$tag = 3;
const $64$moonbitlang$47$yacc$47$lib$47$driver$46$Mode$Default = { $tag: 0 };
function $64$moonbitlang$47$yacc$47$lib$47$driver$46$Mode$JsonCst(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$yacc$47$lib$47$driver$46$Mode$JsonCst.prototype.$tag = 1;
const $64$moonbitlang$47$yacc$47$lib$47$driver$46$Mode$OnlyTokens = { $tag: 2 };
function Error$$to_string(_e) {
  switch (_e.$tag) {
    case 28: {
      return "moonbitlang/yacc/lib/parser.YYObj__String__Int__Array_SubstItem__.YYObj__String__Int__Array_SubstItem__";
    }
    case 13: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T_Term_.YYObj__immut_list_T_Term_";
    }
    case 6: {
      return "moonbitlang/yacc/lib/parser.YYObj_String.YYObj_String";
    }
    case 23: {
      return "moonbitlang/yacc/lib/parser.YYObj_Symbol_.YYObj_Symbol_";
    }
    case 15: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T_ClauseItem_.YYObj__immut_list_T_ClauseItem_";
    }
    case 11: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T_TypeExpr_.YYObj__immut_list_T_TypeExpr_";
    }
    case 30: {
      return "moonbitlang/yacc/lib/parser.ParseError.UnexpectedToken";
    }
    case 2: {
      return "moonbitlang/yacc/lib/parser.LexError.UnexpectedEndOfFile";
    }
    case 22: {
      return "moonbitlang/yacc/lib/parser.YYObj_Clause.YYObj_Clause";
    }
    case 25: {
      return "moonbitlang/yacc/lib/parser.YYObj_ParserSpec.YYObj_ParserSpec";
    }
    case 1: {
      return moonbitlang$core$builtin$$Show$to_string$0$(_e);
    }
    case 16: {
      return "moonbitlang/yacc/lib/parser.YYObj__String__String_.YYObj__String__String_";
    }
    case 18: {
      return "moonbitlang/yacc/lib/parser.YYObj_TypeExpr_.YYObj_TypeExpr_";
    }
    case 14: {
      return "moonbitlang/yacc/lib/parser.YYObj_ClauseItem.YYObj_ClauseItem";
    }
    case 26: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T_String_.YYObj__immut_list_T_String_";
    }
    case 24: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T_Declaration_.YYObj__immut_list_T_Declaration_";
    }
    case 12: {
      return "moonbitlang/yacc/lib/parser.YYObj_Term.YYObj_Term";
    }
    case 29: {
      return "moonbitlang/yacc/lib/parser.YYObj_Void.YYObj_Void";
    }
    case 19: {
      return "moonbitlang/yacc/lib/parser.YYObj_Rule.YYObj_Rule";
    }
    case 7: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T__String__TypeExpr___.YYObj__immut_list_T__String__TypeExpr___";
    }
    case 8: {
      return "moonbitlang/yacc/lib/parser.YYObj_TypeExpr.YYObj_TypeExpr";
    }
    case 5: {
      return "moonbitlang/yacc/lib/parser.YYObj_Declaration.YYObj_Declaration";
    }
    case 4: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T_Symbol_.YYObj__immut_list_T_Symbol_";
    }
    case 27: {
      return "moonbitlang/yacc/lib/parser.YYObj_ClauseAction.YYObj_ClauseAction";
    }
    case 20: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T_Clause_.YYObj__immut_list_T_Clause_";
    }
    case 17: {
      return "moonbitlang/yacc/lib/parser.YYObj_Code_.YYObj_Code_";
    }
    case 0: {
      return moonbitlang$core$builtin$$Show$to_string$1$(_e);
    }
    case 9: {
      return "moonbitlang/yacc/lib/parser.YYObj_Symbol.YYObj_Symbol";
    }
    case 10: {
      return "moonbitlang/yacc/lib/parser.YYObj_Array_String_.YYObj_Array_String_";
    }
    case 3: {
      return "moonbitlang/yacc/lib/parser.LexError.Unrecognized";
    }
    default: {
      return "moonbitlang/yacc/lib/parser.YYObj__immut_list_T_Rule_.YYObj__immut_list_T_Rule_";
    }
  }
}
const moonbitlang$core$strconv$$base_err_str = "invalid base";
const moonbitlang$core$strconv$$range_err_str = "value out of range";
const moonbitlang$core$strconv$$syntax_err_str = "invalid syntax";
const moonbitlang$yacc$lib$parser$$token_tag_action_row_0 = [];
const moonbitlang$yacc$lib$parser$$token_tag_action_row_2 = [-1];
const moonbitlang$yacc$lib$parser$$token_tag_action_row_1 = [0];
const moonbitlang$yacc$lib$parser$$token_tag_action_row_3 = [-1, 0];
const moonbitlang$yacc$lib$parser$$code_eof_tag_action_row_0 = [];
const moonbitlang$yacc$lib$parser$$code_eof_tag_action_row_1 = [0];
const moonbitlang$yacc$lib$parser$$code_eof_tag_action_row_2 = [-1];
const moonbitlang$yacc$lib$parser$$code_percent_rbrace_tag_action_row_0 = [];
const moonbitlang$yacc$lib$parser$$code_percent_rbrace_tag_action_row_1 = [0];
const moonbitlang$yacc$lib$parser$$code_percent_rbrace_tag_action_row_2 = [-1];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0 = [];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1 = [0];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2 = [-1];
const moonbitlang$yacc$lib$parser$$comment_star_rparen_tag_action_0 = [];
const moonbitlang$yacc$lib$util$stamp$$next_stamp = { val: 0 };
const moonbitlang$yacc$lib$util$small_int_set$$_empty = [0];
const moonbitlang$yacc$lib$driver$util$$path_basename$46$arg$2$ = "/";
const moonbitlang$yacc$lib$driver$util$$path_basename$46$arg$3$ = "\\";
const moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$type_$4$ = "ParseError";
const moonbitlang$yacc$main$$_init$42$46$usage$5$ = "Usage: moonyacc [options] <input-file>";
const moonbitlang$yacc$lib$parser$$code_percent_rbrace_tag_action_0 = [moonbitlang$yacc$lib$parser$$code_percent_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_percent_rbrace_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$code_percent_rbrace_tag_action_1 = [moonbitlang$yacc$lib$parser$$code_percent_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_percent_rbrace_tag_action_row_2];
const moonbitlang$yacc$lib$parser$$__mbtlex_engine_code_percent_rbrace = { graph: [moonbitlang$yacc$lib$parser$$code_percent_rbrace_state_0, moonbitlang$yacc$lib$parser$$code_percent_rbrace_state_1, moonbitlang$yacc$lib$parser$$code_percent_rbrace_state_2, moonbitlang$yacc$lib$parser$$code_percent_rbrace_state_3, moonbitlang$yacc$lib$parser$$code_percent_rbrace_state_4], end_nodes: [undefined, { _0: 1, _1: [{ _0: { _0: 0, _1: 0 }, _1: { _0: 1, _1: 0 } }] }, { _0: 2, _1: [] }, { _0: 1, _1: [{ _0: { _0: 0, _1: 0 }, _1: { _0: 1, _1: 0 } }] }, { _0: 0, _1: [] }], start_tags: [0], code_blocks_n: 3 };
const moonbitlang$yacc$lib$parser$$token_tag_action_25 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_41 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_28 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_27 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_22 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_38 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_37 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_24 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_33 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_52 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_43 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_53 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_44 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_30 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_23 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_50 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_29 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_17 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_19 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_13 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_12 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_18 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_9 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_20 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_1 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_3 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_2 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_3, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_7 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_15 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_4 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_5 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_0 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2];
const moonbitlang$yacc$lib$parser$$token_tag_action_14 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_11 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_10 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_8 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_6 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_16 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_39 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_51 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_45 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_47 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_42 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_40 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_32 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_34 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_26 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_31 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_35 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_46 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_48 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_49 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_21 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$token_tag_action_36 = [moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_1, moonbitlang$yacc$lib$parser$$token_tag_action_row_2, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0, moonbitlang$yacc$lib$parser$$token_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$__mbtlex_engine_token = { graph: [moonbitlang$yacc$lib$parser$$token_state_0, moonbitlang$yacc$lib$parser$$token_state_1, moonbitlang$yacc$lib$parser$$token_state_2, moonbitlang$yacc$lib$parser$$token_state_3, moonbitlang$yacc$lib$parser$$token_state_4, moonbitlang$yacc$lib$parser$$token_state_5, moonbitlang$yacc$lib$parser$$token_state_6, moonbitlang$yacc$lib$parser$$token_state_7, moonbitlang$yacc$lib$parser$$token_state_8, moonbitlang$yacc$lib$parser$$token_state_9, moonbitlang$yacc$lib$parser$$token_state_10, moonbitlang$yacc$lib$parser$$token_state_11, moonbitlang$yacc$lib$parser$$token_state_12, moonbitlang$yacc$lib$parser$$token_state_13, moonbitlang$yacc$lib$parser$$token_state_14, moonbitlang$yacc$lib$parser$$token_state_15, moonbitlang$yacc$lib$parser$$token_state_16, moonbitlang$yacc$lib$parser$$token_state_17, moonbitlang$yacc$lib$parser$$token_state_18, moonbitlang$yacc$lib$parser$$token_state_19, moonbitlang$yacc$lib$parser$$token_state_20, moonbitlang$yacc$lib$parser$$token_state_21, moonbitlang$yacc$lib$parser$$token_state_22, moonbitlang$yacc$lib$parser$$token_state_23, moonbitlang$yacc$lib$parser$$token_state_24, moonbitlang$yacc$lib$parser$$token_state_25, moonbitlang$yacc$lib$parser$$token_state_26, moonbitlang$yacc$lib$parser$$token_state_27, moonbitlang$yacc$lib$parser$$token_state_28, moonbitlang$yacc$lib$parser$$token_state_29, moonbitlang$yacc$lib$parser$$token_state_30, moonbitlang$yacc$lib$parser$$token_state_31, moonbitlang$yacc$lib$parser$$token_state_32, moonbitlang$yacc$lib$parser$$token_state_33, moonbitlang$yacc$lib$parser$$token_state_34, moonbitlang$yacc$lib$parser$$token_state_35, moonbitlang$yacc$lib$parser$$token_state_36, moonbitlang$yacc$lib$parser$$token_state_37, moonbitlang$yacc$lib$parser$$token_state_38, moonbitlang$yacc$lib$parser$$token_state_39, moonbitlang$yacc$lib$parser$$token_state_40, moonbitlang$yacc$lib$parser$$token_state_41, moonbitlang$yacc$lib$parser$$token_state_42, moonbitlang$yacc$lib$parser$$token_state_43, moonbitlang$yacc$lib$parser$$token_state_44, moonbitlang$yacc$lib$parser$$token_state_45, moonbitlang$yacc$lib$parser$$token_state_46, moonbitlang$yacc$lib$parser$$token_state_47, moonbitlang$yacc$lib$parser$$token_state_48, moonbitlang$yacc$lib$parser$$token_state_49, moonbitlang$yacc$lib$parser$$token_state_50, moonbitlang$yacc$lib$parser$$token_state_51, moonbitlang$yacc$lib$parser$$token_state_52, moonbitlang$yacc$lib$parser$$token_state_53, moonbitlang$yacc$lib$parser$$token_state_54, moonbitlang$yacc$lib$parser$$token_state_55, moonbitlang$yacc$lib$parser$$token_state_56, moonbitlang$yacc$lib$parser$$token_state_57, moonbitlang$yacc$lib$parser$$token_state_58, moonbitlang$yacc$lib$parser$$token_state_59, moonbitlang$yacc$lib$parser$$token_state_60, moonbitlang$yacc$lib$parser$$token_state_61, moonbitlang$yacc$lib$parser$$token_state_62, moonbitlang$yacc$lib$parser$$token_state_63, moonbitlang$yacc$lib$parser$$token_state_64, moonbitlang$yacc$lib$parser$$token_state_65, moonbitlang$yacc$lib$parser$$token_state_66, moonbitlang$yacc$lib$parser$$token_state_67, moonbitlang$yacc$lib$parser$$token_state_68, moonbitlang$yacc$lib$parser$$token_state_69, moonbitlang$yacc$lib$parser$$token_state_70, moonbitlang$yacc$lib$parser$$token_state_71, moonbitlang$yacc$lib$parser$$token_state_72, moonbitlang$yacc$lib$parser$$token_state_73, moonbitlang$yacc$lib$parser$$token_state_74, moonbitlang$yacc$lib$parser$$token_state_75, moonbitlang$yacc$lib$parser$$token_state_76, moonbitlang$yacc$lib$parser$$token_state_77, moonbitlang$yacc$lib$parser$$token_state_78, moonbitlang$yacc$lib$parser$$token_state_79, moonbitlang$yacc$lib$parser$$token_state_80, moonbitlang$yacc$lib$parser$$token_state_81, moonbitlang$yacc$lib$parser$$token_state_82, moonbitlang$yacc$lib$parser$$token_state_83, moonbitlang$yacc$lib$parser$$token_state_84, moonbitlang$yacc$lib$parser$$token_state_85, moonbitlang$yacc$lib$parser$$token_state_86, moonbitlang$yacc$lib$parser$$token_state_87, moonbitlang$yacc$lib$parser$$token_state_88, moonbitlang$yacc$lib$parser$$token_state_89, moonbitlang$yacc$lib$parser$$token_state_90, moonbitlang$yacc$lib$parser$$token_state_91, moonbitlang$yacc$lib$parser$$token_state_92, moonbitlang$yacc$lib$parser$$token_state_93, moonbitlang$yacc$lib$parser$$token_state_94, moonbitlang$yacc$lib$parser$$token_state_95, moonbitlang$yacc$lib$parser$$token_state_96, moonbitlang$yacc$lib$parser$$token_state_97, moonbitlang$yacc$lib$parser$$token_state_98, moonbitlang$yacc$lib$parser$$token_state_99, moonbitlang$yacc$lib$parser$$token_state_100], end_nodes: [undefined, { _0: 34, _1: [{ _0: { _0: 62, _1: 0 }, _1: { _0: 63, _1: 0 } }] }, { _0: 34, _1: [{ _0: { _0: 62, _1: 0 }, _1: { _0: 63, _1: 0 } }] }, { _0: 29, _1: [{ _0: { _0: 52, _1: 0 }, _1: { _0: 53, _1: 0 } }] }, { _0: 22, _1: [{ _0: { _0: 38, _1: 0 }, _1: { _0: 39, _1: 0 } }] }, { _0: 19, _1: [{ _0: { _0: 32, _1: 0 }, _1: { _0: 33, _1: 0 } }] }, { _0: 20, _1: [{ _0: { _0: 34, _1: 0 }, _1: { _0: 35, _1: 0 } }] }, { _0: 34, _1: [{ _0: { _0: 62, _1: 0 }, _1: { _0: 63, _1: 0 } }] }, { _0: 32, _1: [{ _0: { _0: 58, _1: 0 }, _1: { _0: 59, _1: 0 } }] }, { _0: 0, _1: [] }, { _0: 21, _1: [{ _0: { _0: 36, _1: 0 }, _1: { _0: 37, _1: 0 } }] }, { _0: 30, _1: [{ _0: { _0: 54, _1: 0 }, _1: { _0: 55, _1: 0 } }] }, { _0: 6, _1: [{ _0: { _0: 6, _1: 0 }, _1: { _0: 7, _1: 0 } }] }, { _0: 34, _1: [{ _0: { _0: 62, _1: 0 }, _1: { _0: 63, _1: 0 } }] }, { _0: 25, _1: [{ _0: { _0: 44, _1: 0 }, _1: { _0: 45, _1: 0 } }] }, { _0: 35, _1: [{ _0: { _0: 64, _1: 0 }, _1: { _0: 65, _1: 0 } }] }, { _0: 24, _1: [{ _0: { _0: 42, _1: 0 }, _1: { _0: 43, _1: 0 } }] }, { _0: 26, _1: [{ _0: { _0: 46, _1: 0 }, _1: { _0: 47, _1: 0 } }] }, { _0: 34, _1: [{ _0: { _0: 62, _1: 0 }, _1: { _0: 63, _1: 0 } }] }, { _0: 28, _1: [{ _0: { _0: 50, _1: 0 }, _1: { _0: 51, _1: 0 } }] }, { _0: 31, _1: [{ _0: { _0: 56, _1: 0 }, _1: { _0: 57, _1: 0 } }] }, { _0: 27, _1: [{ _0: { _0: 48, _1: 0 }, _1: { _0: 49, _1: 0 } }] }, { _0: 34, _1: [{ _0: { _0: 62, _1: 0 }, _1: { _0: 63, _1: 0 } }] }, undefined, { _0: 18, _1: [{ _0: { _0: 30, _1: 0 }, _1: { _0: 31, _1: 0 } }] }, { _0: 6, _1: [{ _0: { _0: 6, _1: 0 }, _1: { _0: 7, _1: 0 } }] }, undefined, { _0: 4, _1: [] }, undefined, { _0: 2, _1: [] }, { _0: 17, _1: [{ _0: { _0: 28, _1: 0 }, _1: { _0: 29, _1: 0 } }] }, undefined, undefined, undefined, undefined, undefined, undefined, { _0: 23, _1: [{ _0: { _0: 40, _1: 0 }, _1: { _0: 41, _1: 0 } }] }, undefined, undefined, { _0: 33, _1: [{ _0: { _0: 60, _1: 0 }, _1: { _0: 61, _1: 0 } }] }, undefined, undefined, undefined, { _0: 4, _1: [] }, { _0: 4, _1: [] }, undefined, undefined, undefined, { _0: 1, _1: [] }, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, { _0: 5, _1: [{ _0: { _0: 0, _1: 0 }, _1: { _0: 1, _1: 0 } }, { _0: { _0: 2, _1: 0 }, _1: { _0: 3, _1: 0 } }, { _0: { _0: 4, _1: 0 }, _1: { _0: 5, _1: 0 } }] }, undefined, undefined, { _0: 3, _1: [] }, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, { _0: 5, _1: [{ _0: { _0: 0, _1: 0 }, _1: { _0: 1, _1: 0 } }, { _0: { _0: 2, _1: 0 }, _1: { _0: 3, _1: 0 } }, { _0: { _0: 4, _1: 0 }, _1: { _0: 5, _1: 0 } }] }, undefined, undefined, undefined, { _0: 11, _1: [{ _0: { _0: 16, _1: 0 }, _1: { _0: 17, _1: 0 } }] }, undefined, undefined, undefined, { _0: 9, _1: [{ _0: { _0: 12, _1: 0 }, _1: { _0: 13, _1: 0 } }] }, { _0: 14, _1: [{ _0: { _0: 22, _1: 0 }, _1: { _0: 23, _1: 0 } }] }, undefined, undefined, undefined, { _0: 12, _1: [{ _0: { _0: 18, _1: 0 }, _1: { _0: 19, _1: 0 } }] }, undefined, undefined, { _0: 8, _1: [{ _0: { _0: 10, _1: 0 }, _1: { _0: 11, _1: 0 } }] }, undefined, { _0: 7, _1: [{ _0: { _0: 8, _1: 0 }, _1: { _0: 9, _1: 0 } }] }, { _0: 15, _1: [{ _0: { _0: 24, _1: 0 }, _1: { _0: 25, _1: 0 } }] }, undefined, { _0: 16, _1: [{ _0: { _0: 26, _1: 0 }, _1: { _0: 27, _1: 0 } }] }, undefined, undefined, undefined, { _0: 13, _1: [{ _0: { _0: 20, _1: 0 }, _1: { _0: 21, _1: 0 } }] }, { _0: 10, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }], start_tags: [0, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64], code_blocks_n: 36 };
const moonbitlang$yacc$lib$parser$$code_eof_tag_action_0 = [moonbitlang$yacc$lib$parser$$code_eof_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_eof_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$code_eof_tag_action_1 = [moonbitlang$yacc$lib$parser$$code_eof_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_eof_tag_action_row_2];
const moonbitlang$yacc$lib$parser$$__mbtlex_engine_code_eof = { graph: [moonbitlang$yacc$lib$parser$$code_eof_state_0, moonbitlang$yacc$lib$parser$$code_eof_state_1, moonbitlang$yacc$lib$parser$$code_eof_state_2], end_nodes: [undefined, { _0: 0, _1: [{ _0: { _0: 0, _1: 0 }, _1: { _0: 1, _1: 0 } }] }, { _0: 1, _1: [] }], start_tags: [0], code_blocks_n: 2 };
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 = [moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_8 = [moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 = [moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 = [moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_9 = [moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_7 = [moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 = [moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_10 = [moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_12 = [moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_13 = [moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_3 = [moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_2 = [moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_0 = [moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0];
const moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_1 = [moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_0, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_1, moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_row_2];
const moonbitlang$yacc$lib$parser$$__mbtlex_engine_code_rbrace = { graph: [moonbitlang$yacc$lib$parser$$code_rbrace_state_0, moonbitlang$yacc$lib$parser$$code_rbrace_state_1, moonbitlang$yacc$lib$parser$$code_rbrace_state_2, moonbitlang$yacc$lib$parser$$code_rbrace_state_3, moonbitlang$yacc$lib$parser$$code_rbrace_state_4, moonbitlang$yacc$lib$parser$$code_rbrace_state_5, moonbitlang$yacc$lib$parser$$code_rbrace_state_6, moonbitlang$yacc$lib$parser$$code_rbrace_state_7, moonbitlang$yacc$lib$parser$$code_rbrace_state_8, moonbitlang$yacc$lib$parser$$code_rbrace_state_9, moonbitlang$yacc$lib$parser$$code_rbrace_state_10, moonbitlang$yacc$lib$parser$$code_rbrace_state_11, moonbitlang$yacc$lib$parser$$code_rbrace_state_12, moonbitlang$yacc$lib$parser$$code_rbrace_state_13, moonbitlang$yacc$lib$parser$$code_rbrace_state_14, moonbitlang$yacc$lib$parser$$code_rbrace_state_15, moonbitlang$yacc$lib$parser$$code_rbrace_state_16, moonbitlang$yacc$lib$parser$$code_rbrace_state_17, moonbitlang$yacc$lib$parser$$code_rbrace_state_18, moonbitlang$yacc$lib$parser$$code_rbrace_state_19, moonbitlang$yacc$lib$parser$$code_rbrace_state_20, moonbitlang$yacc$lib$parser$$code_rbrace_state_21, moonbitlang$yacc$lib$parser$$code_rbrace_state_22, moonbitlang$yacc$lib$parser$$code_rbrace_state_23, moonbitlang$yacc$lib$parser$$code_rbrace_state_24, moonbitlang$yacc$lib$parser$$code_rbrace_state_25, moonbitlang$yacc$lib$parser$$code_rbrace_state_26, moonbitlang$yacc$lib$parser$$code_rbrace_state_27, moonbitlang$yacc$lib$parser$$code_rbrace_state_28, moonbitlang$yacc$lib$parser$$code_rbrace_state_29, moonbitlang$yacc$lib$parser$$code_rbrace_state_30, moonbitlang$yacc$lib$parser$$code_rbrace_state_31, moonbitlang$yacc$lib$parser$$code_rbrace_state_32, moonbitlang$yacc$lib$parser$$code_rbrace_state_33, moonbitlang$yacc$lib$parser$$code_rbrace_state_34, moonbitlang$yacc$lib$parser$$code_rbrace_state_35, moonbitlang$yacc$lib$parser$$code_rbrace_state_36, moonbitlang$yacc$lib$parser$$code_rbrace_state_37, moonbitlang$yacc$lib$parser$$code_rbrace_state_38, moonbitlang$yacc$lib$parser$$code_rbrace_state_39, moonbitlang$yacc$lib$parser$$code_rbrace_state_40, moonbitlang$yacc$lib$parser$$code_rbrace_state_41, moonbitlang$yacc$lib$parser$$code_rbrace_state_42, moonbitlang$yacc$lib$parser$$code_rbrace_state_43, moonbitlang$yacc$lib$parser$$code_rbrace_state_44, moonbitlang$yacc$lib$parser$$code_rbrace_state_45, moonbitlang$yacc$lib$parser$$code_rbrace_state_46, moonbitlang$yacc$lib$parser$$code_rbrace_state_47, moonbitlang$yacc$lib$parser$$code_rbrace_state_48, moonbitlang$yacc$lib$parser$$code_rbrace_state_49], end_nodes: [undefined, { _0: 6, _1: [{ _0: { _0: 16, _1: 0 }, _1: { _0: 17, _1: 0 } }] }, { _0: 7, _1: [] }, { _0: 1, _1: [] }, { _0: 0, _1: [] }, { _0: 6, _1: [{ _0: { _0: 16, _1: 0 }, _1: { _0: 17, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 2, _1: [{ _0: { _0: 0, _1: 0 }, _1: { _0: 1, _1: 0 } }, { _0: { _0: 2, _1: 0 }, _1: { _0: 3, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 4, _1: [{ _0: { _0: 10, _1: 0 }, _1: { _0: 11, _1: 0 } }, { _0: { _0: 12, _1: 0 }, _1: { _0: 13, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, undefined, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 4, _1: [{ _0: { _0: 10, _1: 0 }, _1: { _0: 11, _1: 0 } }, { _0: { _0: 12, _1: 0 }, _1: { _0: 13, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, undefined, undefined, undefined, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, undefined, undefined, { _0: 3, _1: [{ _0: { _0: 4, _1: 0 }, _1: { _0: 5, _1: 0 } }, { _0: { _0: 6, _1: 0 }, _1: { _0: 7, _1: 0 } }, { _0: { _0: 8, _1: 0 }, _1: { _0: 9, _1: 0 } }] }, undefined, { _0: 4, _1: [{ _0: { _0: 10, _1: 0 }, _1: { _0: 11, _1: 0 } }, { _0: { _0: 12, _1: 0 }, _1: { _0: 13, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 4, _1: [{ _0: { _0: 10, _1: 0 }, _1: { _0: 11, _1: 0 } }, { _0: { _0: 12, _1: 0 }, _1: { _0: 13, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 5, _1: [{ _0: { _0: 14, _1: 0 }, _1: { _0: 15, _1: 0 } }] }, { _0: 4, _1: [{ _0: { _0: 10, _1: 0 }, _1: { _0: 11, _1: 0 } }, { _0: { _0: 12, _1: 0 }, _1: { _0: 13, _1: 0 } }] }], start_tags: [0, 4, 10, 14, 16], code_blocks_n: 8 };
const moonbitlang$yacc$lib$parser$$__mbtlex_engine_comment_star_rparen = { graph: [moonbitlang$yacc$lib$parser$$comment_star_rparen_state_0, moonbitlang$yacc$lib$parser$$comment_star_rparen_state_1, moonbitlang$yacc$lib$parser$$comment_star_rparen_state_2, moonbitlang$yacc$lib$parser$$comment_star_rparen_state_3, moonbitlang$yacc$lib$parser$$comment_star_rparen_state_4, moonbitlang$yacc$lib$parser$$comment_star_rparen_state_5, moonbitlang$yacc$lib$parser$$comment_star_rparen_state_6], end_nodes: [undefined, { _0: 3, _1: [] }, { _0: 2, _1: [] }, { _0: 2, _1: [] }, { _0: 2, _1: [] }, { _0: 1, _1: [] }, { _0: 0, _1: [] }], start_tags: [], code_blocks_n: 4 };
const moonbitlang$yacc$lib$util$stamp$$initial_stamp = moonbitlang$yacc$lib$util$stamp$$new();
const moonbitlang$yacc$lib$lr1$$_empty = { concrete_set: moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$empty(), vars: moonbitlang$yacc$lib$util$small_int_set$$empty() };
const moonbitlang$yacc$lib$codegen$gen_mbt$$generator = { self: undefined, method_0: moonbitlang$yacc$lib$codegen$$CodeGenerator$void_type$6$, method_1: moonbitlang$yacc$lib$codegen$$CodeGenerator$void_action_code$6$, method_2: moonbitlang$yacc$lib$codegen$$CodeGenerator$codegen_tokens$6$, method_3: moonbitlang$yacc$lib$codegen$$CodeGenerator$codegen$6$ };
function moonbitlang$core$strconv$$base_err$7$() {
  return new Result$Err$0$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$base_err_str));
}
function moonbitlang$core$strconv$$check_and_consume_base(view, base) {
  let rest;
  _L: {
    let rest$2;
    _L$2: {
      let rest$3;
      _L$3: {
        let rest$4;
        _L$4: {
          if (moonbitlang$core$string$$StringView$length_ge(view, 2)) {
            const _x = moonbitlang$core$string$$StringView$op_get(view, 0);
            if (_x === 48) {
              const _x$2 = moonbitlang$core$string$$StringView$op_get(view, 1);
              switch (_x$2) {
                case 120: {
                  const _x$3 = moonbitlang$core$string$$StringView$op_as_view(view, 2, undefined);
                  rest$4 = _x$3;
                  break _L$4;
                }
                case 88: {
                  const _x$4 = moonbitlang$core$string$$StringView$op_as_view(view, 2, undefined);
                  rest$4 = _x$4;
                  break _L$4;
                }
                case 111: {
                  const _x$5 = moonbitlang$core$string$$StringView$op_as_view(view, 2, undefined);
                  rest$3 = _x$5;
                  break _L$3;
                }
                case 79: {
                  const _x$6 = moonbitlang$core$string$$StringView$op_as_view(view, 2, undefined);
                  rest$3 = _x$6;
                  break _L$3;
                }
                case 98: {
                  const _x$7 = moonbitlang$core$string$$StringView$op_as_view(view, 2, undefined);
                  rest$2 = _x$7;
                  break _L$2;
                }
                case 66: {
                  const _x$8 = moonbitlang$core$string$$StringView$op_as_view(view, 2, undefined);
                  rest$2 = _x$8;
                  break _L$2;
                }
                default: {
                  rest = view;
                  break _L;
                }
              }
            } else {
              rest = view;
              break _L;
            }
          } else {
            rest = view;
            break _L;
          }
        }
        _L$5: {
          switch (base) {
            case 0: {
              break _L$5;
            }
            case 16: {
              break _L$5;
            }
            default: {
              return moonbitlang$core$strconv$$base_err$7$();
            }
          }
        }
        return new Result$Ok$0$({ _0: 16, _1: rest$4, _2: true });
      }
      _L$4: {
        switch (base) {
          case 0: {
            break _L$4;
          }
          case 8: {
            break _L$4;
          }
          default: {
            return moonbitlang$core$strconv$$base_err$7$();
          }
        }
      }
      return new Result$Ok$0$({ _0: 8, _1: rest$3, _2: true });
    }
    _L$3: {
      switch (base) {
        case 0: {
          break _L$3;
        }
        case 2: {
          break _L$3;
        }
        default: {
          return moonbitlang$core$strconv$$base_err$7$();
        }
      }
    }
    return new Result$Ok$0$({ _0: 2, _1: rest$2, _2: true });
  }
  if (base === 0) {
    return new Result$Ok$0$({ _0: 10, _1: rest, _2: false });
  } else {
    return 2 <= base && base <= 36 ? new Result$Ok$0$({ _0: base, _1: rest, _2: false }) : moonbitlang$core$strconv$$base_err$7$();
  }
}
function moonbitlang$core$strconv$$overflow_threshold(base, neg) {
  return !neg ? (base === 10 ? moonbitlang$core$int64$$Int64$op_add(moonbitlang$core$int64$$Int64$op_div($9223372036854775807L, $10L), $1L) : base === 16 ? moonbitlang$core$int64$$Int64$op_add(moonbitlang$core$int64$$Int64$op_div($9223372036854775807L, $16L), $1L) : moonbitlang$core$int64$$Int64$op_add(moonbitlang$core$int64$$Int64$op_div($9223372036854775807L, moonbitlang$core$int$$Int$to_int64(base)), $1L)) : base === 10 ? moonbitlang$core$int64$$Int64$op_div($_9223372036854775808L, $10L) : base === 16 ? moonbitlang$core$int64$$Int64$op_div($_9223372036854775808L, $16L) : moonbitlang$core$int64$$Int64$op_div($_9223372036854775808L, moonbitlang$core$int$$Int$to_int64(base));
}
function moonbitlang$core$strconv$$range_err$8$() {
  return new Result$Err$1$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$range_err_str));
}
function moonbitlang$core$strconv$$range_err$9$() {
  return new Result$Err$2$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$range_err_str));
}
function moonbitlang$core$strconv$$syntax_err$8$() {
  return new Result$Err$1$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$syntax_err_str));
}
function moonbitlang$core$strconv$$syntax_err$10$() {
  return new Result$Err$3$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$syntax_err_str));
}
function moonbitlang$core$strconv$$parse_int64(str, base) {
  if (moonbitlang$core$builtin$$op_notequal$11$(str, "")) {
    let _bind;
    let rest;
    _L: {
      _L$2: {
        const _bind$2 = moonbitlang$core$string$$String$op_as_view(str, moonbitlang$core$string$$String$op_as_view$46$start$46$default(), undefined);
        if (moonbitlang$core$string$$StringView$length_ge(_bind$2, 1)) {
          const _x = moonbitlang$core$string$$StringView$op_get(_bind$2, 0);
          switch (_x) {
            case 43: {
              const _x$2 = moonbitlang$core$string$$StringView$op_as_view(_bind$2, 1, undefined);
              _bind = { _0: false, _1: _x$2 };
              break;
            }
            case 45: {
              const _x$3 = moonbitlang$core$string$$StringView$op_as_view(_bind$2, 1, undefined);
              _bind = { _0: true, _1: _x$3 };
              break;
            }
            default: {
              rest = _bind$2;
              break _L$2;
            }
          }
        } else {
          rest = _bind$2;
          break _L$2;
        }
        break _L;
      }
      _bind = { _0: false, _1: rest };
    }
    const _neg = _bind._0;
    const _rest = _bind._1;
    const _bind$2 = moonbitlang$core$strconv$$check_and_consume_base(_rest, base);
    let _bind$3;
    if (_bind$2.$tag === 1) {
      const _ok = _bind$2;
      _bind$3 = _ok._0;
    } else {
      return _bind$2;
    }
    const _num_base = _bind$3._0;
    const _rest$2 = _bind$3._1;
    const _allow_underscore = _bind$3._2;
    const overflow_threshold = moonbitlang$core$strconv$$overflow_threshold(_num_base, _neg);
    let has_digit;
    if (moonbitlang$core$string$$StringView$length_ge(_rest$2, 1)) {
      const _x = moonbitlang$core$string$$StringView$op_get(_rest$2, 0);
      if (48 <= _x && _x <= 57) {
        has_digit = true;
      } else {
        if (97 <= _x && _x <= 122) {
          has_digit = true;
        } else {
          if (65 <= _x && _x <= 90) {
            has_digit = true;
          } else {
            if (moonbitlang$core$string$$StringView$length_ge(_rest$2, 2)) {
              if (_x === 95) {
                const _x$2 = moonbitlang$core$string$$StringView$op_get(_rest$2, 1);
                has_digit = 48 <= _x$2 && _x$2 <= 57 ? true : 97 <= _x$2 && _x$2 <= 122 ? true : 65 <= _x$2 && _x$2 <= 90;
              } else {
                has_digit = false;
              }
            } else {
              has_digit = false;
            }
          }
        }
      }
    } else {
      has_digit = false;
    }
    if (has_digit) {
      let _tmp;
      let _tmp$2 = _rest$2;
      let _tmp$3 = $0L;
      let _tmp$4 = _allow_underscore;
      while (true) {
        const _param = _tmp$2;
        const _param$2 = _tmp$3;
        const _param$3 = _tmp$4;
        let acc;
        let rest$2;
        let c;
        _L$2: {
          if (moonbitlang$core$string$$StringView$length_eq(_param, 1)) {
            const _x = moonbitlang$core$string$$StringView$op_get(_param, 0);
            if (_x === 95) {
              const _bind$4 = moonbitlang$core$strconv$$syntax_err$8$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                _tmp = _ok._0;
                break;
              } else {
                return _bind$4;
              }
            } else {
              const _x$2 = moonbitlang$core$string$$StringView$op_as_view(_param, 1, undefined);
              acc = _param$2;
              rest$2 = _x$2;
              c = _x;
              break _L$2;
            }
          } else {
            if (moonbitlang$core$string$$StringView$length_ge(_param, 1)) {
              const _x = moonbitlang$core$string$$StringView$op_get(_param, 0);
              if (_x === 95) {
                if (_param$3 === false) {
                  const _bind$4 = moonbitlang$core$strconv$$syntax_err$8$();
                  if (_bind$4.$tag === 1) {
                    const _ok = _bind$4;
                    _tmp = _ok._0;
                    break;
                  } else {
                    return _bind$4;
                  }
                } else {
                  const _x$2 = moonbitlang$core$string$$StringView$op_as_view(_param, 1, undefined);
                  _tmp$2 = _x$2;
                  _tmp$4 = false;
                  continue;
                }
              } else {
                const _x$2 = moonbitlang$core$string$$StringView$op_as_view(_param, 1, undefined);
                acc = _param$2;
                rest$2 = _x$2;
                c = _x;
                break _L$2;
              }
            } else {
              _tmp = _param$2;
              break;
            }
          }
        }
        let d;
        if (48 <= c && c <= 57) {
          d = moonbitlang$core$char$$Char$op_sub(c, 48);
        } else {
          if (97 <= c && c <= 122) {
            d = moonbitlang$core$char$$Char$op_sub(c, 97) + 10 | 0;
          } else {
            if (65 <= c && c <= 90) {
              d = moonbitlang$core$char$$Char$op_sub(c, 65) + 10 | 0;
            } else {
              const _bind$4 = moonbitlang$core$strconv$$syntax_err$10$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                d = _ok._0;
              } else {
                return _bind$4;
              }
            }
          }
        }
        if (d < _num_base) {
          if (_neg) {
            if (moonbitlang$core$builtin$$op_ge$8$(acc, overflow_threshold)) {
              const next_acc = moonbitlang$core$int64$$Int64$op_sub(moonbitlang$core$int64$$Int64$op_mul(acc, moonbitlang$core$int$$Int$to_int64(_num_base)), moonbitlang$core$int$$Int$to_int64(d));
              if (moonbitlang$core$builtin$$op_le$8$(next_acc, acc)) {
                _tmp$2 = rest$2;
                _tmp$3 = next_acc;
                _tmp$4 = true;
                continue;
              } else {
                const _bind$4 = moonbitlang$core$strconv$$range_err$8$();
                if (_bind$4.$tag === 1) {
                  const _ok = _bind$4;
                  _tmp = _ok._0;
                  break;
                } else {
                  return _bind$4;
                }
              }
            } else {
              const _bind$4 = moonbitlang$core$strconv$$range_err$8$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                _tmp = _ok._0;
                break;
              } else {
                return _bind$4;
              }
            }
          } else {
            if (moonbitlang$core$builtin$$op_lt$8$(acc, overflow_threshold)) {
              const next_acc = moonbitlang$core$int64$$Int64$op_add(moonbitlang$core$int64$$Int64$op_mul(acc, moonbitlang$core$int$$Int$to_int64(_num_base)), moonbitlang$core$int$$Int$to_int64(d));
              if (moonbitlang$core$builtin$$op_ge$8$(next_acc, acc)) {
                _tmp$2 = rest$2;
                _tmp$3 = next_acc;
                _tmp$4 = true;
                continue;
              } else {
                const _bind$4 = moonbitlang$core$strconv$$range_err$8$();
                if (_bind$4.$tag === 1) {
                  const _ok = _bind$4;
                  _tmp = _ok._0;
                  break;
                } else {
                  return _bind$4;
                }
              }
            } else {
              const _bind$4 = moonbitlang$core$strconv$$range_err$8$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                _tmp = _ok._0;
                break;
              } else {
                return _bind$4;
              }
            }
          }
        } else {
          const _bind$4 = moonbitlang$core$strconv$$syntax_err$8$();
          if (_bind$4.$tag === 1) {
            const _ok = _bind$4;
            _tmp = _ok._0;
            break;
          } else {
            return _bind$4;
          }
        }
      }
      return new Result$Ok$1$(_tmp);
    } else {
      return moonbitlang$core$strconv$$syntax_err$8$();
    }
  } else {
    return moonbitlang$core$strconv$$syntax_err$8$();
  }
}
function moonbitlang$core$strconv$$parse_int(str, base) {
  const _bind = moonbitlang$core$strconv$$parse_int64(str, base);
  let n;
  if (_bind.$tag === 1) {
    const _ok = _bind;
    n = _ok._0;
  } else {
    return _bind;
  }
  if (moonbitlang$core$builtin$$op_lt$8$(n, moonbitlang$core$int$$Int$to_int64(-2147483648)) || moonbitlang$core$builtin$$op_gt$8$(n, moonbitlang$core$int$$Int$to_int64(2147483647))) {
    const _bind$2 = moonbitlang$core$strconv$$range_err$9$();
    if (_bind$2.$tag === 1) {
      const _ok = _bind$2;
      _ok._0;
    } else {
      return _bind$2;
    }
  }
  return new Result$Ok$3$(moonbitlang$core$int64$$Int64$to_int(n));
}
function moonbitlang$core$builtin$$Show$output$12$(self, logger) {
  const _StrConvError = self;
  const _err = _StrConvError._0;
  logger.method_0(logger.self, _err);
}
function moonbitlang$core$bytes$$Bytes$from_array(arr) {
  return moonbitlang$core$bytes$$Bytes$makei(arr.length, (i) => moonbitlang$core$array$$Array$op_get$13$(arr, i));
}
function moonbitlang$core$string$$is_leading_surrogate(c) {
  return 55296 <= c && c <= 56319;
}
function moonbitlang$core$string$$is_trailing_surrogate(c) {
  return 56320 <= c && c <= 57343;
}
function moonbitlang$core$string$$String$index_at(self, offset_by, start) {
  const str_len = self.length;
  if (start >= 0 && start <= str_len) {
    let utf16_offset = start;
    let char_count = 0;
    while (true) {
      if (utf16_offset < str_len && char_count < offset_by) {
        const _tmp = utf16_offset;
        $bound_check(self, _tmp);
        const c1 = self.charCodeAt(_tmp);
        if (moonbitlang$core$string$$is_leading_surrogate(c1) && (utf16_offset + 1 | 0) < str_len) {
          const _tmp$2 = utf16_offset + 1 | 0;
          $bound_check(self, _tmp$2);
          const c2 = self.charCodeAt(_tmp$2);
          if (moonbitlang$core$string$$is_trailing_surrogate(c2)) {
            utf16_offset = utf16_offset + 2 | 0;
            char_count = char_count + 1 | 0;
            continue;
          } else {
            moonbitlang$core$builtin$$abort$9$("invalid surrogate pair");
          }
        }
        utf16_offset = utf16_offset + 1 | 0;
        char_count = char_count + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return char_count < offset_by || utf16_offset > str_len ? undefined : utf16_offset;
  } else {
    return moonbitlang$core$builtin$$abort$14$("Invalid start index");
  }
}
function moonbitlang$core$string$$String$index_at_rev(self, offset_by, end) {
  const str_len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = str_len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end >= 0 && _end <= str_len ? _end : moonbitlang$core$builtin$$abort$10$("Invalid end index");
  }
  let utf16_offset = end$2;
  let char_count = 0;
  while (true) {
    if (utf16_offset > 0 && char_count < offset_by) {
      const _tmp = utf16_offset - 1 | 0;
      $bound_check(self, _tmp);
      const c1 = self.charCodeAt(_tmp);
      if (moonbitlang$core$string$$is_trailing_surrogate(c1) && (utf16_offset - 2 | 0) >= 0) {
        const _tmp$2 = utf16_offset - 2 | 0;
        $bound_check(self, _tmp$2);
        const c2 = self.charCodeAt(_tmp$2);
        if (moonbitlang$core$string$$is_leading_surrogate(c2)) {
          utf16_offset = utf16_offset - 2 | 0;
          char_count = char_count + 1 | 0;
          continue;
        }
      }
      utf16_offset = utf16_offset - 1 | 0;
      char_count = char_count + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return char_count < offset_by || utf16_offset < 0 ? undefined : utf16_offset;
}
function moonbitlang$core$string$$StringView$length_eq(self, len) {
  let _tmp = self.start;
  let _tmp$2 = 0;
  while (true) {
    const index = _tmp;
    const self_len = _tmp$2;
    if (index < self.end && self_len < len) {
      const _tmp$3 = self.str;
      $bound_check(_tmp$3, index);
      const c1 = _tmp$3.charCodeAt(index);
      if (moonbitlang$core$string$$is_leading_surrogate(c1) && (index + 1 | 0) < self.end) {
        const _tmp$4 = self.str;
        const _tmp$5 = index + 1 | 0;
        $bound_check(_tmp$4, _tmp$5);
        const c2 = _tmp$4.charCodeAt(_tmp$5);
        if (moonbitlang$core$string$$is_trailing_surrogate(c2)) {
          const _tmp$6 = index + 2 | 0;
          const _tmp$7 = self_len + 1 | 0;
          _tmp = _tmp$6;
          _tmp$2 = _tmp$7;
          continue;
        } else {
          moonbitlang$core$builtin$$abort$9$("invalid surrogate pair");
        }
      }
      const _tmp$4 = index + 1 | 0;
      const _tmp$5 = self_len + 1 | 0;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    } else {
      return self_len === len && index === self.end;
    }
  }
}
function moonbitlang$core$string$$StringView$length_ge(self, len) {
  let _tmp = self.start;
  let _tmp$2 = 0;
  while (true) {
    const index = _tmp;
    const self_len = _tmp$2;
    if (index < self.end && self_len < len) {
      const _tmp$3 = self.str;
      $bound_check(_tmp$3, index);
      const c1 = _tmp$3.charCodeAt(index);
      if (moonbitlang$core$string$$is_leading_surrogate(c1) && (index + 1 | 0) < self.end) {
        const _tmp$4 = self.str;
        const _tmp$5 = index + 1 | 0;
        $bound_check(_tmp$4, _tmp$5);
        const c2 = _tmp$4.charCodeAt(_tmp$5);
        if (moonbitlang$core$string$$is_trailing_surrogate(c2)) {
          const _tmp$6 = index + 2 | 0;
          const _tmp$7 = self_len + 1 | 0;
          _tmp = _tmp$6;
          _tmp$2 = _tmp$7;
          continue;
        } else {
          moonbitlang$core$builtin$$abort$9$("invalid surrogate pair");
        }
      }
      const _tmp$4 = index + 1 | 0;
      const _tmp$5 = self_len + 1 | 0;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    } else {
      return self_len >= len;
    }
  }
}
function moonbitlang$core$string$$String$op_as_view(self, start, end) {
  const str_len = self.length;
  const start$2 = start >= 0 ? moonbitlang$core$option$$Option$unwrap$15$(moonbitlang$core$string$$String$index_at(self, start, 0)) : moonbitlang$core$option$$Option$unwrap$15$(moonbitlang$core$string$$String$index_at_rev(self, -start, str_len));
  let end$2;
  if (end === undefined) {
    end$2 = str_len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end >= 0 ? moonbitlang$core$option$$Option$unwrap$15$(moonbitlang$core$string$$String$index_at(self, _end, 0)) : moonbitlang$core$option$$Option$unwrap$15$(moonbitlang$core$string$$String$index_at_rev(self, -_end, str_len));
  }
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= str_len) ? { str: self, start: start$2, end: end$2 } : moonbitlang$core$builtin$$abort$16$("Invalid index for View");
}
function moonbitlang$core$string$$String$op_as_view$46$start$46$default() {
  return 0;
}
function moonbitlang$core$string$$StringView$op_as_view(self, start, end) {
  const start$2 = start >= 0 ? moonbitlang$core$option$$Option$unwrap$15$(moonbitlang$core$string$$String$index_at(self.str, start, self.start)) : moonbitlang$core$option$$Option$unwrap$15$(moonbitlang$core$string$$String$index_at_rev(self.str, -start, self.end));
  let end$2;
  if (end === undefined) {
    end$2 = self.end;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end >= 0 ? moonbitlang$core$option$$Option$unwrap$15$(moonbitlang$core$string$$String$index_at(self.str, _end, self.start)) : moonbitlang$core$option$$Option$unwrap$15$(moonbitlang$core$string$$String$index_at_rev(self.str, -_end, self.end));
  }
  return start$2 >= self.start && (start$2 <= self.end && (end$2 >= self.start && (end$2 <= self.end && start$2 <= end$2))) ? { str: self.str, start: start$2, end: end$2 } : moonbitlang$core$builtin$$abort$16$("Invalid index for View");
}
function moonbitlang$core$string$$code_point_of_surrogate_pair(leading, trailing) {
  return (((Math.imul(leading - 55296 | 0, 1024) | 0) + trailing | 0) - 56320 | 0) + 65536 | 0;
}
function moonbitlang$core$string$$StringView$op_get(self, index) {
  if (index >= 0) {
    let utf16_offset = self.start;
    let char_count = 0;
    const code_unit_length = self.str.length;
    while (true) {
      if (char_count < index && utf16_offset < self.end) {
        const _tmp = self.str;
        const _tmp$2 = utf16_offset;
        $bound_check(_tmp, _tmp$2);
        const c1 = _tmp.charCodeAt(_tmp$2);
        if (moonbitlang$core$string$$is_leading_surrogate(c1) && (utf16_offset + 1 | 0) < code_unit_length) {
          const _tmp$3 = self.str;
          const _tmp$4 = utf16_offset + 1 | 0;
          $bound_check(_tmp$3, _tmp$4);
          const c2 = _tmp$3.charCodeAt(_tmp$4);
          if (moonbitlang$core$string$$is_trailing_surrogate(c2)) {
            utf16_offset = utf16_offset + 2 | 0;
            char_count = char_count + 1 | 0;
            continue;
          } else {
            moonbitlang$core$builtin$$abort$9$("invalid surrogate pair");
          }
        }
        utf16_offset = utf16_offset + 1 | 0;
        char_count = char_count + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    if (char_count === index && utf16_offset < self.end) {
      const _tmp = self.str;
      const _tmp$2 = utf16_offset;
      $bound_check(_tmp, _tmp$2);
      const c1 = _tmp.charCodeAt(_tmp$2);
      if (moonbitlang$core$string$$is_leading_surrogate(c1)) {
        const _tmp$3 = self.str;
        const _tmp$4 = utf16_offset + 1 | 0;
        $bound_check(_tmp$3, _tmp$4);
        const c2 = _tmp$3.charCodeAt(_tmp$4);
        return moonbitlang$core$string$$is_trailing_surrogate(c2) ? moonbitlang$core$string$$code_point_of_surrogate_pair(c1, c2) : moonbitlang$core$builtin$$abort$17$("invalid surrogate pair");
      } else {
        return c1;
      }
    } else {
      return moonbitlang$core$builtin$$abort$17$(`Index out of bounds: cannot access index ${moonbitlang$core$builtin$$Show$to_string$10$(index)}`);
    }
  } else {
    return moonbitlang$core$builtin$$abort$17$("Index out of bounds: cannot access negative index");
  }
}
function moonbitlang$core$string$$String$from_array(chars) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(Math.imul(chars.length, 4) | 0);
  const _len = chars.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const c = chars[_i];
      moonbitlang$core$builtin$$Logger$write_char$18$(buf, c);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return moonbitlang$core$builtin$$StringBuilder$to_string(buf);
}
function moonbitlang$core$string$$String$concat(strings, separator) {
  if (strings.length === 0) {
    return "";
  } else {
    const _hd = moonbitlang$core$array$$Array$op_get$11$(strings, 0);
    const _x = moonbitlang$core$array$$Array$op_as_view$11$(strings, 1, strings.length - 0 | 0);
    let size_hint = _hd.length;
    const _len = moonbitlang$core$array$$ArrayView$length$11$(_x);
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const s = _x.buf[_x.start + _i | 0];
        size_hint = size_hint + (s.length + separator.length | 0) | 0;
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    size_hint = size_hint << 1;
    const buf = moonbitlang$core$builtin$$StringBuilder$new(size_hint);
    moonbitlang$core$builtin$$Logger$write_string$18$(buf, _hd);
    if (separator === "") {
      const _len$2 = moonbitlang$core$array$$ArrayView$length$11$(_x);
      let _tmp$2 = 0;
      while (true) {
        const _i = _tmp$2;
        if (_i < _len$2) {
          const s = _x.buf[_x.start + _i | 0];
          moonbitlang$core$builtin$$Logger$write_string$18$(buf, s);
          _tmp$2 = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
    } else {
      const _len$2 = moonbitlang$core$array$$ArrayView$length$11$(_x);
      let _tmp$2 = 0;
      while (true) {
        const _i = _tmp$2;
        if (_i < _len$2) {
          const s = _x.buf[_x.start + _i | 0];
          moonbitlang$core$builtin$$Logger$write_string$18$(buf, separator);
          moonbitlang$core$builtin$$Logger$write_string$18$(buf, s);
          _tmp$2 = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
    }
    return moonbitlang$core$builtin$$StringBuilder$to_string(buf);
  }
}
function moonbitlang$core$builtin$$Compare$compare$11$(self, other) {
  const len = self.length;
  const _bind = $compare_int(len, other.length);
  if (_bind === 0) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        $bound_check(self, i);
        const _tmp$2 = self.charCodeAt(i);
        $bound_check(other, i);
        const order = $compare_int(_tmp$2, other.charCodeAt(i));
        if (order !== 0) {
          return order;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return 0;
  } else {
    return _bind;
  }
}
function moonbitlang$core$builtin$$Default$default$11$() {
  return "";
}
function moonbitlang$core$string$$String$iter(self) {
  return moonbitlang$core$builtin$$Iter$new$17$((yield_) => {
    const len = self.length;
    let _tmp = 0;
    while (true) {
      const index = _tmp;
      if (index < len) {
        $bound_check(self, index);
        const c1 = self.charCodeAt(index);
        if (moonbitlang$core$string$$is_leading_surrogate(c1) && (index + 1 | 0) < len) {
          const _tmp$2 = index + 1 | 0;
          $bound_check(self, _tmp$2);
          const c2 = self.charCodeAt(_tmp$2);
          if (moonbitlang$core$string$$is_trailing_surrogate(c2)) {
            const c = moonbitlang$core$string$$code_point_of_surrogate_pair(c1, c2);
            const _bind = yield_(c);
            if (_bind === 1) {
              _tmp = index + 2 | 0;
              continue;
            } else {
              return 0;
            }
          }
        }
        const _bind = yield_(c1);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = index + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  });
}
function moonbitlang$core$string$$String$to_array(self) {
  const _bind = moonbitlang$core$string$$String$iter(self);
  const _bind$2 = moonbitlang$core$array$$Array$new$17$(self.length);
  const _acc = { val: _bind$2 };
  _bind((_p) => {
    const rv = _acc.val;
    moonbitlang$core$array$$Array$push$17$(rv, _p);
    _acc.val = rv;
    return 1;
  });
  return _acc.val;
}
function moonbitlang$core$string$$String$index_of(self, str, from) {
  const len = self.length;
  const sub_len = str.length;
  if (sub_len === 0) {
    if (len === 0) {
      return 0;
    }
    return from < 0 ? 0 : from >= len ? len : from;
  }
  if (sub_len > len) {
    return -1;
  }
  const from$2 = from < 0 ? 0 : from >= len ? len - 1 | 0 : from;
  const max_idx = len - sub_len | 0;
  $bound_check(str, 0);
  const first = str.charCodeAt(0);
  let i = from$2;
  while (true) {
    if (i <= max_idx) {
      while (true) {
        let _tmp;
        if (i < len) {
          const _tmp$2 = i;
          $bound_check(self, _tmp$2);
          _tmp = self.charCodeAt(_tmp$2) !== first;
        } else {
          _tmp = false;
        }
        if (_tmp) {
          i = i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      if (i <= max_idx) {
        let _tmp = 1;
        while (true) {
          const j = _tmp;
          if (j < sub_len) {
            const _tmp$2 = i + j | 0;
            $bound_check(self, _tmp$2);
            const _tmp$3 = self.charCodeAt(_tmp$2);
            $bound_check(str, j);
            if (_tmp$3 !== str.charCodeAt(j)) {
              break;
            }
            _tmp = j + 1 | 0;
            continue;
          } else {
            return i;
          }
        }
      }
      i = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return -1;
}
function moonbitlang$core$string$$String$index_of$46$from$46$default() {
  return 0;
}
function moonbitlang$core$string$$String$last_index_of(self, str, from) {
  const from$2 = from < 0 ? 0 : from > self.length ? self.length : from;
  const len = self.length;
  const sub_len = str.length;
  if (sub_len === 0) {
    return from$2;
  }
  if (len < sub_len) {
    return -1;
  }
  const min = sub_len - 1 | 0;
  const _tmp = sub_len - 1 | 0;
  $bound_check(str, _tmp);
  const last = str.charCodeAt(_tmp);
  let i = from$2 - 1 | 0;
  while (true) {
    if (i >= 0) {
      while (true) {
        let _tmp$2;
        if (i >= min) {
          const _tmp$3 = i;
          $bound_check(self, _tmp$3);
          _tmp$2 = self.charCodeAt(_tmp$3) !== last;
        } else {
          _tmp$2 = false;
        }
        if (_tmp$2) {
          i = i - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      if (i < min) {
        return -1;
      }
      let j = i - 1 | 0;
      let k = sub_len - 2 | 0;
      const start = i - sub_len | 0;
      let found;
      while (true) {
        if (j > start) {
          const _tmp$2 = j;
          $bound_check(self, _tmp$2);
          const _tmp$3 = self.charCodeAt(_tmp$2);
          const _tmp$4 = k;
          $bound_check(str, _tmp$4);
          if (_tmp$3 !== str.charCodeAt(_tmp$4)) {
            found = false;
            break;
          }
          j = j - 1 | 0;
          k = k - 1 | 0;
          continue;
        } else {
          found = true;
          break;
        }
      }
      if (found) {
        return start + 1 | 0;
      }
      i = i - 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return -1;
}
function moonbitlang$core$string$$String$last_index_of$46$from$46$default(self) {
  return self.length;
}
function moonbitlang$core$string$$String$starts_with(self, str) {
  return str.length > self.length ? false : moonbitlang$core$string$$String$index_of(self, str, moonbitlang$core$string$$String$index_of$46$from$46$default()) === 0;
}
function moonbitlang$core$string$$String$replace_all(self, old, new_) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default());
  const len = self.length;
  const old_len = old.length;
  if (old_len === 0) {
    moonbitlang$core$builtin$$Logger$write_string$18$(buf, new_);
    const _bind = moonbitlang$core$string$$String$iter(self);
    _bind((_p) => {
      moonbitlang$core$builtin$$Logger$write_char$18$(buf, _p);
      moonbitlang$core$builtin$$Logger$write_string$18$(buf, new_);
      return 1;
    });
  } else {
    let start = 0;
    while (true) {
      if (start < len) {
        const end = moonbitlang$core$string$$String$index_of(self, old, start);
        if (end < 0) {
          moonbitlang$core$builtin$$Logger$write_string$18$(buf, moonbitlang$core$string$$String$substring(self, start, undefined));
          break;
        }
        moonbitlang$core$builtin$$Logger$write_string$18$(buf, moonbitlang$core$string$$String$substring(self, start, end));
        moonbitlang$core$builtin$$Logger$write_string$18$(buf, new_);
        start = end + old_len | 0;
        continue;
      } else {
        break;
      }
    }
  }
  return moonbitlang$core$builtin$$StringBuilder$to_string(buf);
}
function moonbitlang$core$string$$String$repeat(self, n) {
  if (n <= 0) {
    return "";
  }
  if (n === 1) {
    return self;
  }
  const len = self.length;
  const buf = moonbitlang$core$builtin$$StringBuilder$new(Math.imul(len, n) | 0);
  let _tmp = 0;
  while (true) {
    const _ = _tmp;
    if (_ < n) {
      moonbitlang$core$builtin$$Logger$write_string$18$(buf, self);
      _tmp = _ + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return moonbitlang$core$builtin$$StringBuilder$to_string(buf);
}
function moonbitlang$core$result$$Result$unwrap$19$(self) {
  if (self.$tag === 1) {
    const _Ok = self;
    const _x = _Ok._0;
    return _x;
  } else {
    return moonbitlang$core$builtin$$abort$20$("called `Result::unwrap()` on an `Err` value");
  }
}
function moonbitlang$core$result$$Result$unwrap$21$(self) {
  if (self.$tag === 1) {
    const _Ok = self;
    _Ok._0;
    return;
  } else {
    moonbitlang$core$builtin$$abort$9$("called `Result::unwrap()` on an `Err` value");
    return;
  }
}
function moonbitlang$core$sorted_set$$new$22$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_set$$new$23$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_set$$new$11$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_set$$height$22$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_set$$height$23$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_set$$height$11$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_set$$height_ge$22$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_set$$height_ge$23$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_set$$height_ge$11$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_set$$max(x, y) {
  return x > y ? x : y;
}
function moonbitlang$core$sorted_set$$Node$update_height$22$(self) {
  self.height = 1 + moonbitlang$core$sorted_set$$max(moonbitlang$core$sorted_set$$height$22$(self.left), moonbitlang$core$sorted_set$$height$22$(self.right)) | 0;
}
function moonbitlang$core$sorted_set$$Node$update_height$23$(self) {
  self.height = 1 + moonbitlang$core$sorted_set$$max(moonbitlang$core$sorted_set$$height$23$(self.left), moonbitlang$core$sorted_set$$height$23$(self.right)) | 0;
}
function moonbitlang$core$sorted_set$$Node$update_height$11$(self) {
  self.height = 1 + moonbitlang$core$sorted_set$$max(moonbitlang$core$sorted_set$$height$11$(self.left), moonbitlang$core$sorted_set$$height$11$(self.right)) | 0;
}
function moonbitlang$core$sorted_set$$rotate_l$22$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$24$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_set$$Node$update_height$22$(n);
  moonbitlang$core$sorted_set$$Node$update_height$22$(r);
  return r;
}
function moonbitlang$core$sorted_set$$rotate_l$23$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$25$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_set$$Node$update_height$23$(n);
  moonbitlang$core$sorted_set$$Node$update_height$23$(r);
  return r;
}
function moonbitlang$core$sorted_set$$rotate_l$11$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$26$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_set$$Node$update_height$11$(n);
  moonbitlang$core$sorted_set$$Node$update_height$11$(r);
  return r;
}
function moonbitlang$core$sorted_set$$rotate_r$22$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$24$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_set$$Node$update_height$22$(n);
  moonbitlang$core$sorted_set$$Node$update_height$22$(l);
  return l;
}
function moonbitlang$core$sorted_set$$rotate_r$23$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$25$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_set$$Node$update_height$23$(n);
  moonbitlang$core$sorted_set$$Node$update_height$23$(l);
  return l;
}
function moonbitlang$core$sorted_set$$rotate_r$11$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$26$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_set$$Node$update_height$11$(n);
  moonbitlang$core$sorted_set$$Node$update_height$11$(l);
  return l;
}
function moonbitlang$core$sorted_set$$rotate_lr$22$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$24$(n.left);
  const v = moonbitlang$core$sorted_set$$rotate_l$22$(l);
  n.left = v;
  return moonbitlang$core$sorted_set$$rotate_r$22$(n);
}
function moonbitlang$core$sorted_set$$rotate_lr$23$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$25$(n.left);
  const v = moonbitlang$core$sorted_set$$rotate_l$23$(l);
  n.left = v;
  return moonbitlang$core$sorted_set$$rotate_r$23$(n);
}
function moonbitlang$core$sorted_set$$rotate_lr$11$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$26$(n.left);
  const v = moonbitlang$core$sorted_set$$rotate_l$11$(l);
  n.left = v;
  return moonbitlang$core$sorted_set$$rotate_r$11$(n);
}
function moonbitlang$core$sorted_set$$rotate_rl$22$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$24$(n.right);
  const v = moonbitlang$core$sorted_set$$rotate_r$22$(r);
  n.right = v;
  return moonbitlang$core$sorted_set$$rotate_l$22$(n);
}
function moonbitlang$core$sorted_set$$rotate_rl$23$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$25$(n.right);
  const v = moonbitlang$core$sorted_set$$rotate_r$23$(r);
  n.right = v;
  return moonbitlang$core$sorted_set$$rotate_l$23$(n);
}
function moonbitlang$core$sorted_set$$rotate_rl$11$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$26$(n.right);
  const v = moonbitlang$core$sorted_set$$rotate_r$11$(r);
  n.right = v;
  return moonbitlang$core$sorted_set$$rotate_l$11$(n);
}
function moonbitlang$core$sorted_set$$balance$22$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_set$$height$22$(l);
  const hr = moonbitlang$core$sorted_set$$height$22$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$24$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_set$$height_ge$22$(_ll, _lr) ? moonbitlang$core$sorted_set$$rotate_r$22$(root) : moonbitlang$core$sorted_set$$rotate_lr$22$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$24$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_set$$height_ge$22$(_rr, _rl) ? moonbitlang$core$sorted_set$$rotate_l$22$(root) : moonbitlang$core$sorted_set$$rotate_rl$22$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_set$$Node$update_height$22$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_set$$balance$11$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_set$$height$11$(l);
  const hr = moonbitlang$core$sorted_set$$height$11$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$26$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_set$$height_ge$11$(_ll, _lr) ? moonbitlang$core$sorted_set$$rotate_r$11$(root) : moonbitlang$core$sorted_set$$rotate_lr$11$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$26$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_set$$height_ge$11$(_rr, _rl) ? moonbitlang$core$sorted_set$$rotate_l$11$(root) : moonbitlang$core$sorted_set$$rotate_rl$11$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_set$$Node$update_height$11$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_set$$balance$23$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_set$$height$23$(l);
  const hr = moonbitlang$core$sorted_set$$height$23$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$25$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_set$$height_ge$23$(_ll, _lr) ? moonbitlang$core$sorted_set$$rotate_r$23$(root) : moonbitlang$core$sorted_set$$rotate_lr$23$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$25$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_set$$height_ge$23$(_rr, _rl) ? moonbitlang$core$sorted_set$$rotate_l$23$(root) : moonbitlang$core$sorted_set$$rotate_rl$23$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_set$$Node$update_height$23$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_set$$new_node$22$(value, left, right, height) {
  return { value: value, left: left, right: right, height: height };
}
function moonbitlang$core$sorted_set$$new_node$11$(value, left, right, height) {
  return { value: value, left: left, right: right, height: height };
}
function moonbitlang$core$sorted_set$$new_node$23$(value, left, right, height) {
  return { value: value, left: left, right: right, height: height };
}
function moonbitlang$core$sorted_set$$new_node$46$left$46$default$22$() {
  return undefined;
}
function moonbitlang$core$sorted_set$$new_node$46$left$46$default$11$() {
  return undefined;
}
function moonbitlang$core$sorted_set$$new_node$46$left$46$default$23$() {
  return undefined;
}
function moonbitlang$core$sorted_set$$new_node$46$right$46$default$22$() {
  return undefined;
}
function moonbitlang$core$sorted_set$$new_node$46$right$46$default$11$() {
  return undefined;
}
function moonbitlang$core$sorted_set$$new_node$46$right$46$default$23$() {
  return undefined;
}
function moonbitlang$core$sorted_set$$new_node$46$height$46$default$22$() {
  return 1;
}
function moonbitlang$core$sorted_set$$new_node$46$height$46$default$11$() {
  return 1;
}
function moonbitlang$core$sorted_set$$new_node$46$height$46$default$23$() {
  return 1;
}
function moonbitlang$core$sorted_set$$add_node$22$(root, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_set$$new_node$22$(value, moonbitlang$core$sorted_set$$new_node$46$left$46$default$22$(), moonbitlang$core$sorted_set$$new_node$46$right$46$default$22$(), moonbitlang$core$sorted_set$$new_node$46$height$46$default$22$()), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    const comp = moonbitlang$core$builtin$$Compare$compare$22$(value, _n.value);
    if (comp === 0) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (comp < 0) {
        const _bind = moonbitlang$core$sorted_set$$add_node$22$(l, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_set$$balance$22$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_set$$add_node$22$(r, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_set$$balance$22$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_set$$add_node$23$(root, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_set$$new_node$23$(value, moonbitlang$core$sorted_set$$new_node$46$left$46$default$23$(), moonbitlang$core$sorted_set$$new_node$46$right$46$default$23$(), moonbitlang$core$sorted_set$$new_node$46$height$46$default$23$()), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    const comp = moonbitlang$core$builtin$$Compare$compare$23$(value, _n.value);
    if (comp === 0) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (comp < 0) {
        const _bind = moonbitlang$core$sorted_set$$add_node$23$(l, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_set$$balance$23$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_set$$add_node$23$(r, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_set$$balance$23$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_set$$add_node$11$(root, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_set$$new_node$11$(value, moonbitlang$core$sorted_set$$new_node$46$left$46$default$11$(), moonbitlang$core$sorted_set$$new_node$46$right$46$default$11$(), moonbitlang$core$sorted_set$$new_node$46$height$46$default$11$()), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    const comp = moonbitlang$core$builtin$$Compare$compare$11$(value, _n.value);
    if (comp === 0) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (comp < 0) {
        const _bind = moonbitlang$core$sorted_set$$add_node$11$(l, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_set$$balance$11$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_set$$add_node$11$(r, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_set$$balance$11$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_set$$T$add$22$(self, value) {
  const _bind = moonbitlang$core$sorted_set$$add_node$22$(self.root, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$27$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_set$$T$add$11$(self, value) {
  const _bind = moonbitlang$core$sorted_set$$add_node$11$(self.root, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$28$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_set$$T$add$23$(self, value) {
  const _bind = moonbitlang$core$sorted_set$$add_node$23$(self.root, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$29$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_set$$T$contains$22$(self, value) {
  let _tmp = self.root;
  let _tmp$2 = value;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param === undefined) {
      return false;
    } else {
      const _Some = _param;
      const _node = _Some;
      const compare_result = moonbitlang$core$builtin$$Compare$compare$22$(_param$2, _node.value);
      if (compare_result === 0) {
        return true;
      } else {
        if (compare_result < 0) {
          _tmp = _node.left;
          continue;
        } else {
          _tmp = _node.right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_set$$Node$iter$23$(self) {
  return moonbitlang$core$builtin$$Iter$new$23$((yield_) => {
    const _left = self.left;
    const _value = self.value;
    const _right = self.right;
    let res;
    if (_left === undefined) {
      res = 1;
    } else {
      const _Some = _left;
      const _l = _Some;
      res = moonbitlang$core$builtin$$Iter$run$23$(moonbitlang$core$sorted_set$$Node$iter$23$(_l), yield_);
    }
    if (moonbitlang$core$builtin$$Eq$op_equal$30$(res, 0)) {
      return 0;
    } else {
      if (moonbitlang$core$builtin$$Eq$op_equal$30$(yield_(_value), 0)) {
        return 0;
      } else {
        if (_right === undefined) {
          return 1;
        } else {
          const _Some = _right;
          const _r = _Some;
          return moonbitlang$core$builtin$$Iter$run$23$(moonbitlang$core$sorted_set$$Node$iter$23$(_r), yield_);
        }
      }
    }
  });
}
function moonbitlang$core$sorted_set$$Node$iter$11$(self) {
  return moonbitlang$core$builtin$$Iter$new$11$((yield_) => {
    const _left = self.left;
    const _value = self.value;
    const _right = self.right;
    let res;
    if (_left === undefined) {
      res = 1;
    } else {
      const _Some = _left;
      const _l = _Some;
      res = moonbitlang$core$builtin$$Iter$run$11$(moonbitlang$core$sorted_set$$Node$iter$11$(_l), yield_);
    }
    if (moonbitlang$core$builtin$$Eq$op_equal$30$(res, 0)) {
      return 0;
    } else {
      if (moonbitlang$core$builtin$$Eq$op_equal$30$(yield_(_value), 0)) {
        return 0;
      } else {
        if (_right === undefined) {
          return 1;
        } else {
          const _Some = _right;
          const _r = _Some;
          return moonbitlang$core$builtin$$Iter$run$11$(moonbitlang$core$sorted_set$$Node$iter$11$(_r), yield_);
        }
      }
    }
  });
}
function moonbitlang$core$sorted_set$$T$iter$11$(self) {
  return moonbitlang$core$builtin$$Iter$new$11$((yield_) => {
    const _bind = self.root;
    if (_bind === undefined) {
      return 1;
    } else {
      const _Some = _bind;
      const _root = _Some;
      return moonbitlang$core$builtin$$Iter$run$11$(moonbitlang$core$sorted_set$$Node$iter$11$(_root), yield_);
    }
  });
}
function moonbitlang$core$sorted_set$$T$iter$23$(self) {
  return moonbitlang$core$builtin$$Iter$new$23$((yield_) => {
    const _bind = self.root;
    if (_bind === undefined) {
      return 1;
    } else {
      const _Some = _bind;
      const _root = _Some;
      return moonbitlang$core$builtin$$Iter$run$23$(moonbitlang$core$sorted_set$$Node$iter$23$(_root), yield_);
    }
  });
}
function moonbitlang$core$builtin$$Eq$op_equal$31$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$22$(self.value, other.value);
}
function moonbitlang$core$builtin$$Eq$op_equal$32$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$23$(self.value, other.value);
}
function moonbitlang$core$builtin$$Eq$op_equal$33$(self, other) {
  return self.value === other.value;
}
function moonbitlang$core$ref$$new$34$(x) {
  return { val: x };
}
function moonbitlang$core$ref$$new$35$(x) {
  return { val: x };
}
function moonbitlang$core$ref$$new$36$(x) {
  return { val: x };
}
function moonbitlang$core$ref$$new$37$(x) {
  return { val: x };
}
function moonbitlang$core$ref$$new$38$(x) {
  return { val: x };
}
function moonbitlang$core$ref$$new$11$(x) {
  return { val: x };
}
function moonbitlang$core$array$$get_limit(len) {
  let len$2 = len;
  let limit = 0;
  while (true) {
    if (len$2 > 0) {
      len$2 = len$2 / 2 | 0;
      limit = limit + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return limit;
}
function moonbitlang$core$array$$ArrayView$rev_inplace$39$(self) {
  const mid_len = moonbitlang$core$array$$ArrayView$length$39$(self) / 2 | 0;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < mid_len) {
      const j = (moonbitlang$core$array$$ArrayView$length$39$(self) - i | 0) - 1 | 0;
      moonbitlang$core$array$$ArrayView$swap$39$(self, i, j);
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$ArrayView$rev_inplace$40$(self) {
  const mid_len = moonbitlang$core$array$$ArrayView$length$40$(self) / 2 | 0;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < mid_len) {
      const j = (moonbitlang$core$array$$ArrayView$length$40$(self) - i | 0) - 1 | 0;
      moonbitlang$core$array$$ArrayView$swap$40$(self, i, j);
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$minimum(x, y) {
  return x > y ? y : x;
}
function moonbitlang$core$array$$ArrayView$iter$11$(self) {
  return moonbitlang$core$builtin$$Iter$new$11$((yield_) => {
    const _len = moonbitlang$core$array$$ArrayView$length$11$(self);
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self.buf[self.start + _i | 0];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  });
}
function moonbitlang$core$array$$Array$copy$10$(self) {
  return moonbitlang$core$array$$JSArray$copy(self);
}
function moonbitlang$core$array$$Array$copy$41$(self) {
  return moonbitlang$core$array$$JSArray$copy(self);
}
function moonbitlang$core$array$$Array$copy$42$(self) {
  return moonbitlang$core$array$$JSArray$copy(self);
}
function moonbitlang$core$array$$FixedArray$makei$43$(length, value) {
  if (length <= 0) {
    return [];
  } else {
    const array = $make_array_len_and_init(length, value(0));
    let _tmp = 1;
    while (true) {
      const i = _tmp;
      if (i < length) {
        $bound_check(array, i);
        array[i] = value(i);
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return array;
  }
}
function moonbitlang$core$array$$bubble_sort_by$39$(arr, cmp) {
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < moonbitlang$core$array$$ArrayView$length$39$(arr)) {
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && cmp(moonbitlang$core$array$$ArrayView$op_get$39$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$39$(arr, j)) > 0) {
          moonbitlang$core$array$$ArrayView$swap$39$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$bubble_sort_by$40$(arr, cmp) {
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < moonbitlang$core$array$$ArrayView$length$40$(arr)) {
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && cmp(moonbitlang$core$array$$ArrayView$op_get$40$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$40$(arr, j)) > 0) {
          moonbitlang$core$array$$ArrayView$swap$40$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$choose_pivot_by$39$(arr, cmp) {
  const len = moonbitlang$core$array$$ArrayView$length$39$(arr);
  const swaps = { val: 0 };
  const b = Math.imul(len / 4 | 0, 2) | 0;
  if (len >= 8) {
    const a = Math.imul(len / 4 | 0, 1) | 0;
    const c = Math.imul(len / 4 | 0, 3) | 0;
    const _env = { _0: cmp, _1: arr, _2: swaps };
    if (len > 50) {
      moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$492(_env, a - 1 | 0, a, a + 1 | 0);
      moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$492(_env, b - 1 | 0, b, b + 1 | 0);
      moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$492(_env, c - 1 | 0, c, c + 1 | 0);
    }
    moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$492(_env, a, b, c);
  }
  if (swaps.val === 12) {
    moonbitlang$core$array$$ArrayView$rev_inplace$39$(arr);
    return { _0: (len - b | 0) - 1 | 0, _1: true };
  } else {
    return { _0: b, _1: swaps.val === 0 };
  }
}
function moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$491(_env, a, b) {
  const swaps = _env._2;
  const arr = _env._1;
  const cmp = _env._0;
  if (cmp(moonbitlang$core$array$$ArrayView$op_get$39$(arr, a), moonbitlang$core$array$$ArrayView$op_get$39$(arr, b)) > 0) {
    moonbitlang$core$array$$ArrayView$swap$39$(arr, a, b);
    swaps.val = swaps.val + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$492(_env, a, b, c) {
  moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$491(_env, a, b);
  moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$491(_env, b, c);
  moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$491(_env, a, b);
}
function moonbitlang$core$array$$choose_pivot_by$40$(arr, cmp) {
  const len = moonbitlang$core$array$$ArrayView$length$40$(arr);
  const swaps = { val: 0 };
  const b = Math.imul(len / 4 | 0, 2) | 0;
  if (len >= 8) {
    const a = Math.imul(len / 4 | 0, 1) | 0;
    const c = Math.imul(len / 4 | 0, 3) | 0;
    const _env = { _0: cmp, _1: arr, _2: swaps };
    if (len > 50) {
      moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$512(_env, a - 1 | 0, a, a + 1 | 0);
      moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$512(_env, b - 1 | 0, b, b + 1 | 0);
      moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$512(_env, c - 1 | 0, c, c + 1 | 0);
    }
    moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$512(_env, a, b, c);
  }
  if (swaps.val === 12) {
    moonbitlang$core$array$$ArrayView$rev_inplace$40$(arr);
    return { _0: (len - b | 0) - 1 | 0, _1: true };
  } else {
    return { _0: b, _1: swaps.val === 0 };
  }
}
function moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$511(_env, a, b) {
  const swaps = _env._2;
  const arr = _env._1;
  const cmp = _env._0;
  if (cmp(moonbitlang$core$array$$ArrayView$op_get$40$(arr, a), moonbitlang$core$array$$ArrayView$op_get$40$(arr, b)) > 0) {
    moonbitlang$core$array$$ArrayView$swap$40$(arr, a, b);
    swaps.val = swaps.val + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$array$$choose_pivot_by$46$sort_3$47$512(_env, a, b, c) {
  moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$511(_env, a, b);
  moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$511(_env, b, c);
  moonbitlang$core$array$$choose_pivot_by$46$sort_2$47$511(_env, a, b);
}
function moonbitlang$core$array$$sift_down_by$39$(arr, index, cmp) {
  let index$2 = index;
  const len = moonbitlang$core$array$$ArrayView$length$39$(arr);
  let child = (Math.imul(index$2, 2) | 0) + 1 | 0;
  while (true) {
    if (child < len) {
      if ((child + 1 | 0) < len && cmp(moonbitlang$core$array$$ArrayView$op_get$39$(arr, child), moonbitlang$core$array$$ArrayView$op_get$39$(arr, child + 1 | 0)) < 0) {
        child = child + 1 | 0;
      }
      if (cmp(moonbitlang$core$array$$ArrayView$op_get$39$(arr, index$2), moonbitlang$core$array$$ArrayView$op_get$39$(arr, child)) >= 0) {
        return undefined;
      }
      moonbitlang$core$array$$ArrayView$swap$39$(arr, index$2, child);
      index$2 = child;
      child = (Math.imul(index$2, 2) | 0) + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$sift_down_by$40$(arr, index, cmp) {
  let index$2 = index;
  const len = moonbitlang$core$array$$ArrayView$length$40$(arr);
  let child = (Math.imul(index$2, 2) | 0) + 1 | 0;
  while (true) {
    if (child < len) {
      if ((child + 1 | 0) < len && cmp(moonbitlang$core$array$$ArrayView$op_get$40$(arr, child), moonbitlang$core$array$$ArrayView$op_get$40$(arr, child + 1 | 0)) < 0) {
        child = child + 1 | 0;
      }
      if (cmp(moonbitlang$core$array$$ArrayView$op_get$40$(arr, index$2), moonbitlang$core$array$$ArrayView$op_get$40$(arr, child)) >= 0) {
        return undefined;
      }
      moonbitlang$core$array$$ArrayView$swap$40$(arr, index$2, child);
      index$2 = child;
      child = (Math.imul(index$2, 2) | 0) + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$heap_sort_by$39$(arr, cmp) {
  const len = moonbitlang$core$array$$ArrayView$length$39$(arr);
  let _tmp = (len / 2 | 0) - 1 | 0;
  while (true) {
    const i = _tmp;
    if (i >= 0) {
      moonbitlang$core$array$$sift_down_by$39$(arr, i, cmp);
      _tmp = i - 1 | 0;
      continue;
    } else {
      break;
    }
  }
  let _tmp$2 = len - 1 | 0;
  while (true) {
    const i = _tmp$2;
    if (i > 0) {
      moonbitlang$core$array$$ArrayView$swap$39$(arr, 0, i);
      moonbitlang$core$array$$sift_down_by$39$(moonbitlang$core$array$$ArrayView$op_as_view$39$(arr, 0, i), 0, cmp);
      _tmp$2 = i - 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$heap_sort_by$40$(arr, cmp) {
  const len = moonbitlang$core$array$$ArrayView$length$40$(arr);
  let _tmp = (len / 2 | 0) - 1 | 0;
  while (true) {
    const i = _tmp;
    if (i >= 0) {
      moonbitlang$core$array$$sift_down_by$40$(arr, i, cmp);
      _tmp = i - 1 | 0;
      continue;
    } else {
      break;
    }
  }
  let _tmp$2 = len - 1 | 0;
  while (true) {
    const i = _tmp$2;
    if (i > 0) {
      moonbitlang$core$array$$ArrayView$swap$40$(arr, 0, i);
      moonbitlang$core$array$$sift_down_by$40$(moonbitlang$core$array$$ArrayView$op_as_view$40$(arr, 0, i), 0, cmp);
      _tmp$2 = i - 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$partition_by$39$(arr, cmp, pivot_index) {
  moonbitlang$core$array$$ArrayView$swap$39$(arr, pivot_index, moonbitlang$core$array$$ArrayView$length$39$(arr) - 1 | 0);
  const pivot = moonbitlang$core$array$$ArrayView$op_get$39$(arr, moonbitlang$core$array$$ArrayView$length$39$(arr) - 1 | 0);
  let i = 0;
  let partitioned = true;
  let _tmp = 0;
  while (true) {
    const j = _tmp;
    if (j < (moonbitlang$core$array$$ArrayView$length$39$(arr) - 1 | 0)) {
      if (cmp(moonbitlang$core$array$$ArrayView$op_get$39$(arr, j), pivot) < 0) {
        if (i !== j) {
          moonbitlang$core$array$$ArrayView$swap$39$(arr, i, j);
          partitioned = false;
        }
        i = i + 1 | 0;
      }
      _tmp = j + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$array$$ArrayView$swap$39$(arr, i, moonbitlang$core$array$$ArrayView$length$39$(arr) - 1 | 0);
  return { _0: i, _1: partitioned };
}
function moonbitlang$core$array$$partition_by$40$(arr, cmp, pivot_index) {
  moonbitlang$core$array$$ArrayView$swap$40$(arr, pivot_index, moonbitlang$core$array$$ArrayView$length$40$(arr) - 1 | 0);
  const pivot = moonbitlang$core$array$$ArrayView$op_get$40$(arr, moonbitlang$core$array$$ArrayView$length$40$(arr) - 1 | 0);
  let i = 0;
  let partitioned = true;
  let _tmp = 0;
  while (true) {
    const j = _tmp;
    if (j < (moonbitlang$core$array$$ArrayView$length$40$(arr) - 1 | 0)) {
      if (cmp(moonbitlang$core$array$$ArrayView$op_get$40$(arr, j), pivot) < 0) {
        if (i !== j) {
          moonbitlang$core$array$$ArrayView$swap$40$(arr, i, j);
          partitioned = false;
        }
        i = i + 1 | 0;
      }
      _tmp = j + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$array$$ArrayView$swap$40$(arr, i, moonbitlang$core$array$$ArrayView$length$40$(arr) - 1 | 0);
  return { _0: i, _1: partitioned };
}
function moonbitlang$core$array$$try_bubble_sort_by$39$(arr, cmp) {
  let tries = 0;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < moonbitlang$core$array$$ArrayView$length$39$(arr)) {
      let sorted = true;
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && cmp(moonbitlang$core$array$$ArrayView$op_get$39$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$39$(arr, j)) > 0) {
          sorted = false;
          moonbitlang$core$array$$ArrayView$swap$39$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      if (!sorted) {
        tries = tries + 1 | 0;
        if (tries > 8) {
          return false;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return true;
}
function moonbitlang$core$array$$try_bubble_sort_by$40$(arr, cmp) {
  let tries = 0;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < moonbitlang$core$array$$ArrayView$length$40$(arr)) {
      let sorted = true;
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && cmp(moonbitlang$core$array$$ArrayView$op_get$40$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$40$(arr, j)) > 0) {
          sorted = false;
          moonbitlang$core$array$$ArrayView$swap$40$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      if (!sorted) {
        tries = tries + 1 | 0;
        if (tries > 8) {
          return false;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return true;
}
function moonbitlang$core$array$$quick_sort_by$39$(arr, cmp, pred, limit) {
  let limit$2 = limit;
  let arr$2 = arr;
  let pred$2 = pred;
  let was_partitioned = true;
  let balanced = true;
  while (true) {
    const len = moonbitlang$core$array$$ArrayView$length$39$(arr$2);
    if (len <= 16) {
      if (len >= 2) {
        moonbitlang$core$array$$bubble_sort_by$39$(arr$2, cmp);
      }
      return undefined;
    }
    if (limit$2 === 0) {
      moonbitlang$core$array$$heap_sort_by$39$(arr$2, cmp);
      return undefined;
    }
    const _bind = moonbitlang$core$array$$choose_pivot_by$39$(arr$2, cmp);
    const _pivot_index = _bind._0;
    const _likely_sorted = _bind._1;
    if (was_partitioned && (balanced && _likely_sorted)) {
      if (moonbitlang$core$array$$try_bubble_sort_by$39$(arr$2, cmp)) {
        return undefined;
      }
    }
    const _bind$2 = moonbitlang$core$array$$partition_by$39$(arr$2, cmp, _pivot_index);
    const _pivot = _bind$2._0;
    const _partitioned = _bind$2._1;
    was_partitioned = _partitioned;
    balanced = moonbitlang$core$array$$minimum(_pivot, len - _pivot | 0) >= (len / 8 | 0);
    if (!balanced) {
      limit$2 = limit$2 - 1 | 0;
    }
    const _bind$3 = pred$2;
    if (_bind$3 === undefined) {
    } else {
      const _Some = _bind$3;
      const _pred = _Some;
      if (cmp(_pred, moonbitlang$core$array$$ArrayView$op_get$39$(arr$2, _pivot)) === 0) {
        let i = _pivot;
        while (true) {
          if (i < len && cmp(_pred, moonbitlang$core$array$$ArrayView$op_get$39$(arr$2, i)) === 0) {
            i = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        arr$2 = moonbitlang$core$array$$ArrayView$op_as_view$39$(arr$2, i, len);
        continue;
      }
    }
    const left = moonbitlang$core$array$$ArrayView$op_as_view$39$(arr$2, 0, _pivot);
    const right = moonbitlang$core$array$$ArrayView$op_as_view$39$(arr$2, _pivot + 1 | 0, len);
    if (moonbitlang$core$array$$ArrayView$length$39$(left) < moonbitlang$core$array$$ArrayView$length$39$(right)) {
      moonbitlang$core$array$$quick_sort_by$39$(left, cmp, pred$2, limit$2);
      pred$2 = moonbitlang$core$array$$ArrayView$op_get$39$(arr$2, _pivot);
      arr$2 = right;
    } else {
      moonbitlang$core$array$$quick_sort_by$39$(right, cmp, moonbitlang$core$array$$ArrayView$op_get$39$(arr$2, _pivot), limit$2);
      arr$2 = left;
    }
    continue;
  }
}
function moonbitlang$core$array$$quick_sort_by$40$(arr, cmp, pred, limit) {
  let limit$2 = limit;
  let arr$2 = arr;
  let pred$2 = pred;
  let was_partitioned = true;
  let balanced = true;
  while (true) {
    const len = moonbitlang$core$array$$ArrayView$length$40$(arr$2);
    if (len <= 16) {
      if (len >= 2) {
        moonbitlang$core$array$$bubble_sort_by$40$(arr$2, cmp);
      }
      return undefined;
    }
    if (limit$2 === 0) {
      moonbitlang$core$array$$heap_sort_by$40$(arr$2, cmp);
      return undefined;
    }
    const _bind = moonbitlang$core$array$$choose_pivot_by$40$(arr$2, cmp);
    const _pivot_index = _bind._0;
    const _likely_sorted = _bind._1;
    if (was_partitioned && (balanced && _likely_sorted)) {
      if (moonbitlang$core$array$$try_bubble_sort_by$40$(arr$2, cmp)) {
        return undefined;
      }
    }
    const _bind$2 = moonbitlang$core$array$$partition_by$40$(arr$2, cmp, _pivot_index);
    const _pivot = _bind$2._0;
    const _partitioned = _bind$2._1;
    was_partitioned = _partitioned;
    balanced = moonbitlang$core$array$$minimum(_pivot, len - _pivot | 0) >= (len / 8 | 0);
    if (!balanced) {
      limit$2 = limit$2 - 1 | 0;
    }
    const _bind$3 = pred$2;
    if (_bind$3 === undefined) {
    } else {
      const _Some = _bind$3;
      const _pred = _Some;
      if (cmp(_pred, moonbitlang$core$array$$ArrayView$op_get$40$(arr$2, _pivot)) === 0) {
        let i = _pivot;
        while (true) {
          if (i < len && cmp(_pred, moonbitlang$core$array$$ArrayView$op_get$40$(arr$2, i)) === 0) {
            i = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        arr$2 = moonbitlang$core$array$$ArrayView$op_as_view$40$(arr$2, i, len);
        continue;
      }
    }
    const left = moonbitlang$core$array$$ArrayView$op_as_view$40$(arr$2, 0, _pivot);
    const right = moonbitlang$core$array$$ArrayView$op_as_view$40$(arr$2, _pivot + 1 | 0, len);
    if (moonbitlang$core$array$$ArrayView$length$40$(left) < moonbitlang$core$array$$ArrayView$length$40$(right)) {
      moonbitlang$core$array$$quick_sort_by$40$(left, cmp, pred$2, limit$2);
      pred$2 = moonbitlang$core$array$$ArrayView$op_get$40$(arr$2, _pivot);
      arr$2 = right;
    } else {
      moonbitlang$core$array$$quick_sort_by$40$(right, cmp, moonbitlang$core$array$$ArrayView$op_get$40$(arr$2, _pivot), limit$2);
      arr$2 = left;
    }
    continue;
  }
}
function moonbitlang$core$array$$Array$sort_by_key$44$(self, map) {
  moonbitlang$core$array$$quick_sort_by$39$({ buf: self, start: 0, len: self.length }, (a, b) => moonbitlang$core$builtin$$Compare$compare$45$(map(a), map(b)), undefined, moonbitlang$core$array$$get_limit(self.length));
}
function moonbitlang$core$array$$Array$sort_by_key$46$(self, map) {
  moonbitlang$core$array$$quick_sort_by$40$({ buf: self, start: 0, len: self.length }, (a, b) => $compare_int(map(a), map(b)), undefined, moonbitlang$core$array$$get_limit(self.length));
}
function moonbitlang$core$array$$Array$push_iter$11$(self, iter) {
  iter((x) => {
    moonbitlang$core$array$$Array$push$11$(self, x);
    return 1;
  });
}
function moonbitlang$core$immut$sorted_set$$new$47$() {
  return $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$;
}
function moonbitlang$core$immut$sorted_set$$T$size$47$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    const _size = _Node._2;
    return _size;
  }
}
function moonbitlang$core$immut$sorted_set$$create$47$(left, value, right) {
  return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$4$(left, right, (moonbitlang$core$immut$sorted_set$$T$size$47$(left) + moonbitlang$core$immut$sorted_set$$T$size$47$(right) | 0) + 1 | 0, value);
}
function moonbitlang$core$immut$sorted_set$$balance$47$(left, value, right) {
  const left_size = moonbitlang$core$immut$sorted_set$$T$size$47$(left);
  const right_size = moonbitlang$core$immut$sorted_set$$T$size$47$(right);
  if ((left_size + right_size | 0) < 2) {
    return moonbitlang$core$immut$sorted_set$$create$47$(left, value, right);
  } else {
    if (left_size > (Math.imul(right_size, 5) | 0)) {
      if (left.$tag === 0) {
        return moonbitlang$core$builtin$$abort$48$("balance: left is empty.");
      } else {
        const _Node = left;
        const _ll = _Node._0;
        const _lv = _Node._3;
        const _lr = _Node._1;
        if (moonbitlang$core$immut$sorted_set$$T$size$47$(_ll) >= moonbitlang$core$immut$sorted_set$$T$size$47$(_lr)) {
          return moonbitlang$core$immut$sorted_set$$create$47$(_ll, _lv, moonbitlang$core$immut$sorted_set$$create$47$(_lr, value, right));
        } else {
          if (_lr.$tag === 0) {
            return moonbitlang$core$builtin$$abort$48$("balance: right left.right is empty.");
          } else {
            const _Node$2 = _lr;
            const _lrl = _Node$2._0;
            const _lrv = _Node$2._3;
            const _lrr = _Node$2._1;
            return moonbitlang$core$immut$sorted_set$$create$47$(moonbitlang$core$immut$sorted_set$$create$47$(_ll, _lv, _lrl), _lrv, moonbitlang$core$immut$sorted_set$$create$47$(_lrr, value, right));
          }
        }
      }
    } else {
      if (right_size > (Math.imul(left_size, 5) | 0)) {
        if (right.$tag === 0) {
          return moonbitlang$core$builtin$$abort$48$("balance: right is empty");
        } else {
          const _Node = right;
          const _rl = _Node._0;
          const _rv = _Node._3;
          const _rr = _Node._1;
          if (moonbitlang$core$immut$sorted_set$$T$size$47$(_rr) >= moonbitlang$core$immut$sorted_set$$T$size$47$(_rl)) {
            return moonbitlang$core$immut$sorted_set$$create$47$(moonbitlang$core$immut$sorted_set$$create$47$(left, value, _rl), _rv, _rr);
          } else {
            if (_rl.$tag === 0) {
              return moonbitlang$core$builtin$$abort$48$("balance: right.left is empty");
            } else {
              const _Node$2 = _rl;
              const _rll = _Node$2._0;
              const _rlv = _Node$2._3;
              const _rlr = _Node$2._1;
              return moonbitlang$core$immut$sorted_set$$create$47$(moonbitlang$core$immut$sorted_set$$create$47$(left, value, _rll), _rlv, moonbitlang$core$immut$sorted_set$$create$47$(_rlr, _rv, _rr));
            }
          }
        }
      } else {
        return moonbitlang$core$immut$sorted_set$$create$47$(left, value, right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add$47$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$4$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = moonbitlang$core$builtin$$Compare$compare$47$(value, _node_value);
    if (compare_result === 0) {
      return self;
    } else {
      if (compare_result < 0) {
        const ll = moonbitlang$core$immut$sorted_set$$T$add$47$(_left, value);
        return _left === ll ? self : moonbitlang$core$immut$sorted_set$$balance$47$(ll, _node_value, _right);
      } else {
        const rr = moonbitlang$core$immut$sorted_set$$T$add$47$(_right, value);
        return _right === rr ? self : moonbitlang$core$immut$sorted_set$$balance$47$(_left, _node_value, rr);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$iter$47$(self) {
  return moonbitlang$core$builtin$$Iter$new$47$((yield_) => {
    if (self.$tag === 0) {
      return 1;
    } else {
      const _Node = self;
      const _left = _Node._0;
      const _right = _Node._1;
      const _value = _Node._3;
      return moonbitlang$core$builtin$$Eq$op_equal$30$(moonbitlang$core$builtin$$Iter$run$47$(moonbitlang$core$immut$sorted_set$$T$iter$47$(_left), yield_), 0) ? 0 : moonbitlang$core$builtin$$Eq$op_equal$30$(yield_(_value), 0) ? 0 : moonbitlang$core$builtin$$Eq$op_equal$30$(moonbitlang$core$builtin$$Iter$run$47$(moonbitlang$core$immut$sorted_set$$T$iter$47$(_right), yield_), 0) ? 0 : 1;
    }
  });
}
function moonbitlang$core$immut$sorted_map$$T$size$49$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$make_tree$49$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$49$(l) + moonbitlang$core$immut$sorted_map$$T$size$49$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$5$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$balance$49$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$49$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$49$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$49$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$49$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$49$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$49$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$49$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$49$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$49$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$49$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$49$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$49$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$49$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$49$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$49$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$49$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$49$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$49$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$singleton$49$(key, value) {
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$5$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$5$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$5$);
}
function moonbitlang$core$immut$sorted_map$$T$add$49$(self, key, value) {
  if (self.$tag === 0) {
    return moonbitlang$core$immut$sorted_map$$singleton$49$(key, value);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = $compare_int(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$49$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$49$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$49$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$49$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$49$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$new$49$() {
  return $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$5$;
}
function moonbitlang$core$immut$sorted_map$$T$lookup$49$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = $compare_int(key, _k);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$op_get$49$(self, key) {
  return moonbitlang$core$immut$sorted_map$$T$lookup$49$(self, key);
}
function moonbitlang$core$builtin$$Eq$op_equal$50$(_x_379, _x_380) {
  let _tmp = _x_379;
  let _tmp$2 = _x_380;
  while (true) {
    const _x_379$2 = _tmp;
    const _x_380$2 = _tmp$2;
    if (_x_379$2.$tag === 0) {
      if (_x_380$2.$tag === 0) {
        return true;
      } else {
        return false;
      }
    } else {
      const _Cons = _x_379$2;
      const _$42$x0_381 = _Cons._0;
      const _$42$x1_382 = _Cons._1;
      if (_x_380$2.$tag === 1) {
        const _Cons$2 = _x_380$2;
        const _$42$y0_383 = _Cons$2._0;
        const _$42$y1_384 = _Cons$2._1;
        if (moonbitlang$core$builtin$$Eq$op_equal$51$(_$42$x0_381, _$42$y0_383)) {
          _tmp = _$42$x1_382;
          _tmp$2 = _$42$y1_384;
          continue;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }
}
function moonbitlang$core$immut$list$$T$iter$52$(self) {
  return moonbitlang$core$builtin$$Iter$new$52$((yield_) => {
    let _tmp = self;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        return 1;
      } else {
        const _Cons = _param;
        const _head = _Cons._0;
        const _tail = _Cons._1;
        if (moonbitlang$core$builtin$$Eq$op_equal$30$(yield_(_head), 0)) {
          return 0;
        }
        _tmp = _tail;
        continue;
      }
    }
  });
}
function moonbitlang$core$immut$list$$T$iter$51$(self) {
  return moonbitlang$core$builtin$$Iter$new$51$((yield_) => {
    let _tmp = self;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        return 1;
      } else {
        const _Cons = _param;
        const _head = _Cons._0;
        const _tail = _Cons._1;
        if (moonbitlang$core$builtin$$Eq$op_equal$30$(yield_(_head), 0)) {
          return 0;
        }
        _tmp = _tail;
        continue;
      }
    }
  });
}
function moonbitlang$core$immut$list$$T$to_array$53$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$53$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$54$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$54$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$55$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$55$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$56$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$56$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$57$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$57$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$58$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$58$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$59$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$59$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$11$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$11$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$tail$60$(self) {
  if (self.$tag === 0) {
    return $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$6$;
  } else {
    const _Cons = self;
    const _tail = _Cons._1;
    return _tail;
  }
}
function moonbitlang$core$immut$list$$T$unsafe_head$60$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$builtin$$abort$60$("head of empty list");
  } else {
    const _Cons = self;
    const _head = _Cons._0;
    return _head;
  }
}
function moonbitlang$core$immut$list$$T$contains$51$(self, value) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return false;
    } else {
      const _Cons = _param;
      const _x = _Cons._0;
      const _xs = _Cons._1;
      if (moonbitlang$core$builtin$$Eq$op_equal$51$(_x, value)) {
        return true;
      } else {
        _tmp = _xs;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$list$$T$drop$60$(self, n) {
  let _param3;
  let _param4;
  _L: {
    if (n <= 0) {
      return self;
    } else {
      _param3 = n;
      _param4 = self;
      break _L;
    }
  }
  let _tmp = _param3;
  let _tmp$2 = _param4;
  while (true) {
    const _param3$2 = _tmp;
    const _param4$2 = _tmp$2;
    if (_param4$2.$tag === 0) {
      return $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$6$;
    } else {
      if (_param3$2 === 1) {
        const _Cons = _param4$2;
        const _xs = _Cons._1;
        return _xs;
      } else {
        const _Cons = _param4$2;
        const _xs = _Cons._1;
        const _tmp$3 = _param3$2 - 1 | 0;
        _tmp = _tmp$3;
        _tmp$2 = _xs;
        continue;
      }
    }
  }
}
function moonbitlang$core$option$$Option$map$61$(self, f) {
  if (self === undefined) {
    return undefined;
  } else {
    const _Some = self;
    const _t = _Some;
    return f(_t);
  }
}
function moonbitlang$core$option$$Option$is_empty$62$(self) {
  return self === undefined;
}
function moonbitlang$core$option$$Option$or$48$(self, default_) {
  if (self === undefined) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$option$$Option$or$63$(self, default_) {
  if (self.$tag === 0) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some._0;
    return _t;
  }
}
function moonbitlang$core$option$$Option$or$23$(self, default_) {
  if (self === undefined) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$option$$Option$or$64$(self, default_) {
  if (self === undefined) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$option$$Option$or$11$(self, default_) {
  if (self === undefined) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$option$$Option$or_default$11$(self) {
  if (self === undefined) {
    return moonbitlang$core$builtin$$Default$default$11$();
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$builtin$$Compare$compare$65$(self, other) {
  if (self === undefined) {
    return other === undefined ? 0 : -1;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return 1;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Compare$compare$11$(_x, _y);
    }
  }
}
function moonbitlang$core$sorted_map$$new_node$66$(key, value) {
  return { key: key, value: value, left: undefined, right: undefined, height: 1 };
}
function moonbitlang$core$sorted_map$$new_node$67$(key, value) {
  return { key: key, value: value, left: undefined, right: undefined, height: 1 };
}
function moonbitlang$core$sorted_map$$new_node$68$(key, value) {
  return { key: key, value: value, left: undefined, right: undefined, height: 1 };
}
function moonbitlang$core$sorted_map$$new_node$69$(key, value) {
  return { key: key, value: value, left: undefined, right: undefined, height: 1 };
}
function moonbitlang$core$builtin$$Eq$op_equal$70$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$71$(self.key, other.key);
}
function moonbitlang$core$builtin$$Eq$op_equal$72$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$73$(self.key, other.key);
}
function moonbitlang$core$builtin$$Eq$op_equal$74$(self, other) {
  return self.key === other.key;
}
function moonbitlang$core$builtin$$Eq$op_equal$75$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$76$(self.key, other.key);
}
function moonbitlang$core$sorted_map$$max(x, y) {
  return x > y ? x : y;
}
function moonbitlang$core$sorted_map$$height$66$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_map$$height$69$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_map$$height$68$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_map$$height$67$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_map$$new$69$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_map$$new$67$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_map$$new$66$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_map$$new$68$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_map$$height_ge$66$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_map$$height_ge$69$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_map$$height_ge$68$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_map$$height_ge$67$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_map$$Node$update_height$66$(self) {
  self.height = 1 + moonbitlang$core$sorted_map$$max(moonbitlang$core$sorted_map$$height$66$(self.left), moonbitlang$core$sorted_map$$height$66$(self.right)) | 0;
}
function moonbitlang$core$sorted_map$$Node$update_height$69$(self) {
  self.height = 1 + moonbitlang$core$sorted_map$$max(moonbitlang$core$sorted_map$$height$69$(self.left), moonbitlang$core$sorted_map$$height$69$(self.right)) | 0;
}
function moonbitlang$core$sorted_map$$Node$update_height$68$(self) {
  self.height = 1 + moonbitlang$core$sorted_map$$max(moonbitlang$core$sorted_map$$height$68$(self.left), moonbitlang$core$sorted_map$$height$68$(self.right)) | 0;
}
function moonbitlang$core$sorted_map$$Node$update_height$67$(self) {
  self.height = 1 + moonbitlang$core$sorted_map$$max(moonbitlang$core$sorted_map$$height$67$(self.left), moonbitlang$core$sorted_map$$height$67$(self.right)) | 0;
}
function moonbitlang$core$sorted_map$$rotate_l$66$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$62$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_map$$Node$update_height$66$(n);
  moonbitlang$core$sorted_map$$Node$update_height$66$(r);
  return r;
}
function moonbitlang$core$sorted_map$$rotate_l$69$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$77$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_map$$Node$update_height$69$(n);
  moonbitlang$core$sorted_map$$Node$update_height$69$(r);
  return r;
}
function moonbitlang$core$sorted_map$$rotate_l$68$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$78$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_map$$Node$update_height$68$(n);
  moonbitlang$core$sorted_map$$Node$update_height$68$(r);
  return r;
}
function moonbitlang$core$sorted_map$$rotate_l$67$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$79$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_map$$Node$update_height$67$(n);
  moonbitlang$core$sorted_map$$Node$update_height$67$(r);
  return r;
}
function moonbitlang$core$sorted_map$$rotate_r$66$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$62$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_map$$Node$update_height$66$(n);
  moonbitlang$core$sorted_map$$Node$update_height$66$(l);
  return l;
}
function moonbitlang$core$sorted_map$$rotate_r$69$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$77$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_map$$Node$update_height$69$(n);
  moonbitlang$core$sorted_map$$Node$update_height$69$(l);
  return l;
}
function moonbitlang$core$sorted_map$$rotate_r$68$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$78$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_map$$Node$update_height$68$(n);
  moonbitlang$core$sorted_map$$Node$update_height$68$(l);
  return l;
}
function moonbitlang$core$sorted_map$$rotate_r$67$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$79$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_map$$Node$update_height$67$(n);
  moonbitlang$core$sorted_map$$Node$update_height$67$(l);
  return l;
}
function moonbitlang$core$sorted_map$$rotate_lr$66$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$62$(n.left);
  const v = moonbitlang$core$sorted_map$$rotate_l$66$(l);
  n.left = v;
  return moonbitlang$core$sorted_map$$rotate_r$66$(n);
}
function moonbitlang$core$sorted_map$$rotate_lr$69$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$77$(n.left);
  const v = moonbitlang$core$sorted_map$$rotate_l$69$(l);
  n.left = v;
  return moonbitlang$core$sorted_map$$rotate_r$69$(n);
}
function moonbitlang$core$sorted_map$$rotate_lr$68$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$78$(n.left);
  const v = moonbitlang$core$sorted_map$$rotate_l$68$(l);
  n.left = v;
  return moonbitlang$core$sorted_map$$rotate_r$68$(n);
}
function moonbitlang$core$sorted_map$$rotate_lr$67$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$79$(n.left);
  const v = moonbitlang$core$sorted_map$$rotate_l$67$(l);
  n.left = v;
  return moonbitlang$core$sorted_map$$rotate_r$67$(n);
}
function moonbitlang$core$sorted_map$$rotate_rl$66$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$62$(n.right);
  const v = moonbitlang$core$sorted_map$$rotate_r$66$(r);
  n.right = v;
  return moonbitlang$core$sorted_map$$rotate_l$66$(n);
}
function moonbitlang$core$sorted_map$$rotate_rl$69$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$77$(n.right);
  const v = moonbitlang$core$sorted_map$$rotate_r$69$(r);
  n.right = v;
  return moonbitlang$core$sorted_map$$rotate_l$69$(n);
}
function moonbitlang$core$sorted_map$$rotate_rl$68$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$78$(n.right);
  const v = moonbitlang$core$sorted_map$$rotate_r$68$(r);
  n.right = v;
  return moonbitlang$core$sorted_map$$rotate_l$68$(n);
}
function moonbitlang$core$sorted_map$$rotate_rl$67$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$79$(n.right);
  const v = moonbitlang$core$sorted_map$$rotate_r$67$(r);
  n.right = v;
  return moonbitlang$core$sorted_map$$rotate_l$67$(n);
}
function moonbitlang$core$sorted_map$$balance$66$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_map$$height$66$(l);
  const hr = moonbitlang$core$sorted_map$$height$66$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$62$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_map$$height_ge$66$(_ll, _lr) ? moonbitlang$core$sorted_map$$rotate_r$66$(root) : moonbitlang$core$sorted_map$$rotate_lr$66$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$62$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_map$$height_ge$66$(_rr, _rl) ? moonbitlang$core$sorted_map$$rotate_l$66$(root) : moonbitlang$core$sorted_map$$rotate_rl$66$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_map$$Node$update_height$66$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_map$$balance$67$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_map$$height$67$(l);
  const hr = moonbitlang$core$sorted_map$$height$67$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$79$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_map$$height_ge$67$(_ll, _lr) ? moonbitlang$core$sorted_map$$rotate_r$67$(root) : moonbitlang$core$sorted_map$$rotate_lr$67$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$79$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_map$$height_ge$67$(_rr, _rl) ? moonbitlang$core$sorted_map$$rotate_l$67$(root) : moonbitlang$core$sorted_map$$rotate_rl$67$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_map$$Node$update_height$67$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_map$$balance$68$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_map$$height$68$(l);
  const hr = moonbitlang$core$sorted_map$$height$68$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$78$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_map$$height_ge$68$(_ll, _lr) ? moonbitlang$core$sorted_map$$rotate_r$68$(root) : moonbitlang$core$sorted_map$$rotate_lr$68$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$78$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_map$$height_ge$68$(_rr, _rl) ? moonbitlang$core$sorted_map$$rotate_l$68$(root) : moonbitlang$core$sorted_map$$rotate_rl$68$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_map$$Node$update_height$68$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_map$$balance$69$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_map$$height$69$(l);
  const hr = moonbitlang$core$sorted_map$$height$69$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$77$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_map$$height_ge$69$(_ll, _lr) ? moonbitlang$core$sorted_map$$rotate_r$69$(root) : moonbitlang$core$sorted_map$$rotate_lr$69$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$77$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_map$$height_ge$69$(_rr, _rl) ? moonbitlang$core$sorted_map$$rotate_l$69$(root) : moonbitlang$core$sorted_map$$rotate_rl$69$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_map$$Node$update_height$69$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_map$$add_node$66$(root, key, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_map$$new_node$66$(key, value), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    if (moonbitlang$core$builtin$$Eq$op_equal$71$(key, _n.key)) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (moonbitlang$core$builtin$$op_lt$71$(key, _n.key)) {
        const _bind = moonbitlang$core$sorted_map$$add_node$66$(l, key, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_map$$balance$66$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_map$$add_node$66$(r, key, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_map$$balance$66$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_map$$add_node$69$(root, key, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_map$$new_node$69$(key, value), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    if (moonbitlang$core$builtin$$Eq$op_equal$73$(key, _n.key)) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (moonbitlang$core$builtin$$op_lt$73$(key, _n.key)) {
        const _bind = moonbitlang$core$sorted_map$$add_node$69$(l, key, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_map$$balance$69$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_map$$add_node$69$(r, key, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_map$$balance$69$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_map$$add_node$68$(root, key, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_map$$new_node$68$(key, value), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    if (key === _n.key) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (moonbitlang$core$builtin$$op_lt$11$(key, _n.key)) {
        const _bind = moonbitlang$core$sorted_map$$add_node$68$(l, key, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_map$$balance$68$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_map$$add_node$68$(r, key, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_map$$balance$68$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_map$$add_node$67$(root, key, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_map$$new_node$67$(key, value), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    if (moonbitlang$core$builtin$$Eq$op_equal$76$(key, _n.key)) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (moonbitlang$core$builtin$$op_lt$76$(key, _n.key)) {
        const _bind = moonbitlang$core$sorted_map$$add_node$67$(l, key, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_map$$balance$67$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_map$$add_node$67$(r, key, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_map$$balance$67$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$add$66$(self, key, value) {
  const _bind = moonbitlang$core$sorted_map$$add_node$66$(self.root, key, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$80$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_map$$T$add$67$(self, key, value) {
  const _bind = moonbitlang$core$sorted_map$$add_node$67$(self.root, key, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$81$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_map$$T$add$68$(self, key, value) {
  const _bind = moonbitlang$core$sorted_map$$add_node$68$(self.root, key, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$82$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_map$$T$add$69$(self, key, value) {
  const _bind = moonbitlang$core$sorted_map$$add_node$69$(self.root, key, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$83$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_map$$T$op_set$66$(self, key, value) {
  moonbitlang$core$sorted_map$$T$add$66$(self, key, value);
}
function moonbitlang$core$sorted_map$$T$op_set$69$(self, key, value) {
  moonbitlang$core$sorted_map$$T$add$69$(self, key, value);
}
function moonbitlang$core$sorted_map$$T$op_set$68$(self, key, value) {
  moonbitlang$core$sorted_map$$T$add$68$(self, key, value);
}
function moonbitlang$core$sorted_map$$T$op_set$67$(self, key, value) {
  moonbitlang$core$sorted_map$$T$add$67$(self, key, value);
}
function moonbitlang$core$sorted_map$$T$get$66$(self, key) {
  let _tmp = self.root;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return undefined;
    } else {
      const _Some = _param;
      const _node = _Some;
      const cmp = moonbitlang$core$builtin$$Compare$compare$71$(key, _node.key);
      if (cmp === 0) {
        return _node.value;
      } else {
        if (cmp > 0) {
          _tmp = _node.right;
          continue;
        } else {
          _tmp = _node.left;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$get$69$(self, key) {
  let _tmp = self.root;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return undefined;
    } else {
      const _Some = _param;
      const _node = _Some;
      const cmp = moonbitlang$core$builtin$$Compare$compare$73$(key, _node.key);
      if (cmp === 0) {
        return _node.value;
      } else {
        if (cmp > 0) {
          _tmp = _node.right;
          continue;
        } else {
          _tmp = _node.left;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$get$67$(self, key) {
  let _tmp = self.root;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return undefined;
    } else {
      const _Some = _param;
      const _node = _Some;
      const cmp = moonbitlang$core$builtin$$Compare$compare$76$(key, _node.key);
      if (cmp === 0) {
        return _node.value;
      } else {
        if (cmp > 0) {
          _tmp = _node.right;
          continue;
        } else {
          _tmp = _node.left;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$get$68$(self, key) {
  let _tmp = self.root;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return undefined;
    } else {
      const _Some = _param;
      const _node = _Some;
      const cmp = moonbitlang$core$builtin$$Compare$compare$11$(key, _node.key);
      if (cmp === 0) {
        return _node.value;
      } else {
        if (cmp > 0) {
          _tmp = _node.right;
          continue;
        } else {
          _tmp = _node.left;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$op_get$66$(self, key) {
  return moonbitlang$core$sorted_map$$T$get$66$(self, key);
}
function moonbitlang$core$sorted_map$$T$op_get$69$(self, key) {
  return moonbitlang$core$sorted_map$$T$get$69$(self, key);
}
function moonbitlang$core$sorted_map$$T$op_get$68$(self, key) {
  return moonbitlang$core$sorted_map$$T$get$68$(self, key);
}
function moonbitlang$core$sorted_map$$T$op_get$67$(self, key) {
  return moonbitlang$core$sorted_map$$T$get$67$(self, key);
}
function moonbitlang$core$sorted_map$$T$each$66$(self, f) {
  const s = [];
  let p = self.root;
  while (true) {
    if (!moonbitlang$core$option$$Option$is_empty$62$(p) || !moonbitlang$core$array$$Array$is_empty$80$(s)) {
      while (true) {
        if (!moonbitlang$core$option$$Option$is_empty$62$(p)) {
          moonbitlang$core$array$$Array$push$80$(s, p);
          p = moonbitlang$core$option$$Option$unwrap$62$(p).left;
          continue;
        } else {
          break;
        }
      }
      if (!moonbitlang$core$array$$Array$is_empty$80$(s)) {
        p = moonbitlang$core$array$$Array$unsafe_pop$80$(s);
        f(moonbitlang$core$option$$Option$unwrap$62$(p).key, moonbitlang$core$option$$Option$unwrap$62$(p).value);
        p = moonbitlang$core$option$$Option$unwrap$62$(p).right;
      }
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$sorted_map$$T$size$66$(self) {
  return self.size;
}
function moonbitlang$core$sorted_map$$T$keys$66$(self) {
  const keys = [];
  moonbitlang$core$sorted_map$$T$each$66$(self, (k, _v) => {
    moonbitlang$core$array$$Array$push$71$(keys, k);
  });
  return keys;
}
function moonbitlang$core$sorted_map$$iter_aux2$69$(node) {
  return moonbitlang$core$builtin$$Iter2$new$69$((yield_) => {
    if (node === undefined) {
      return 1;
    } else {
      const _Some = node;
      const _node = _Some;
      return moonbitlang$core$builtin$$Eq$op_equal$30$(moonbitlang$core$builtin$$Iter2$run$69$(moonbitlang$core$sorted_map$$iter_aux2$69$(_node.left), yield_), 0) ? 0 : moonbitlang$core$builtin$$Eq$op_equal$30$(yield_(_node.key, _node.value), 0) ? 0 : moonbitlang$core$builtin$$Eq$op_equal$30$(moonbitlang$core$builtin$$Iter2$run$69$(moonbitlang$core$sorted_map$$iter_aux2$69$(_node.right), yield_), 0) ? 0 : 1;
    }
  });
}
function moonbitlang$core$sorted_map$$iter_aux2$67$(node) {
  return moonbitlang$core$builtin$$Iter2$new$67$((yield_) => {
    if (node === undefined) {
      return 1;
    } else {
      const _Some = node;
      const _node = _Some;
      return moonbitlang$core$builtin$$Eq$op_equal$30$(moonbitlang$core$builtin$$Iter2$run$67$(moonbitlang$core$sorted_map$$iter_aux2$67$(_node.left), yield_), 0) ? 0 : moonbitlang$core$builtin$$Eq$op_equal$30$(yield_(_node.key, _node.value), 0) ? 0 : moonbitlang$core$builtin$$Eq$op_equal$30$(moonbitlang$core$builtin$$Iter2$run$67$(moonbitlang$core$sorted_map$$iter_aux2$67$(_node.right), yield_), 0) ? 0 : 1;
    }
  });
}
function moonbitlang$core$sorted_map$$iter_aux2$66$(node) {
  return moonbitlang$core$builtin$$Iter2$new$66$((yield_) => {
    if (node === undefined) {
      return 1;
    } else {
      const _Some = node;
      const _node = _Some;
      return moonbitlang$core$builtin$$Eq$op_equal$30$(moonbitlang$core$builtin$$Iter2$run$66$(moonbitlang$core$sorted_map$$iter_aux2$66$(_node.left), yield_), 0) ? 0 : moonbitlang$core$builtin$$Eq$op_equal$30$(yield_(_node.key, _node.value), 0) ? 0 : moonbitlang$core$builtin$$Eq$op_equal$30$(moonbitlang$core$builtin$$Iter2$run$66$(moonbitlang$core$sorted_map$$iter_aux2$66$(_node.right), yield_), 0) ? 0 : 1;
    }
  });
}
function moonbitlang$core$sorted_map$$T$iter2$66$(self) {
  return moonbitlang$core$sorted_map$$iter_aux2$66$(self.root);
}
function moonbitlang$core$sorted_map$$T$iter2$67$(self) {
  return moonbitlang$core$sorted_map$$iter_aux2$67$(self.root);
}
function moonbitlang$core$sorted_map$$T$iter2$69$(self) {
  return moonbitlang$core$sorted_map$$iter_aux2$69$(self.root);
}
function moonbitlang$core$hashmap$$power_2_above(x, n) {
  let _tmp = x;
  while (true) {
    const i = _tmp;
    if (i >= n) {
      return i;
    }
    const next = i << 1;
    if (next < 0) {
      return i;
    }
    _tmp = next;
    continue;
  }
}
function moonbitlang$core$hashmap$$new$84$(capacity) {
  const capacity$2 = moonbitlang$core$hashmap$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), capacity: capacity$2, size: 0 };
}
function moonbitlang$core$hashmap$$new$85$(capacity) {
  const capacity$2 = moonbitlang$core$hashmap$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), capacity: capacity$2, size: 0 };
}
function moonbitlang$core$hashmap$$new$86$(capacity) {
  const capacity$2 = moonbitlang$core$hashmap$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), capacity: capacity$2, size: 0 };
}
function moonbitlang$core$hashmap$$new$46$capacity$46$default$84$() {
  return 8;
}
function moonbitlang$core$hashmap$$new$46$capacity$46$default$85$() {
  return 8;
}
function moonbitlang$core$hashmap$$new$46$capacity$46$default$86$() {
  return 8;
}
function moonbitlang$core$hashmap$$T$set_with_hash$84$(self, key, value, hash) {
  if (self.size >= (self.capacity / 2 | 0)) {
    moonbitlang$core$hashmap$$T$grow$84$(self);
  }
  let _tmp = hash & (self.capacity - 1 | 0);
  let _tmp$2 = { psl: 0, hash: hash, key: key, value: value };
  while (true) {
    const idx = _tmp;
    const entry = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      const _tmp$4 = self.entries;
      $bound_check(_tmp$4, idx);
      _tmp$4[idx] = entry;
      self.size = self.size + 1 | 0;
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (_curr_entry.hash === entry.hash && moonbitlang$core$builtin$$Eq$op_equal$87$(_curr_entry.key, entry.key)) {
        _curr_entry.value = entry.value;
        break;
      }
      let curr_entry;
      if (entry.psl > _curr_entry.psl) {
        const _tmp$4 = self.entries;
        $bound_check(_tmp$4, idx);
        _tmp$4[idx] = entry;
        curr_entry = _curr_entry;
      } else {
        curr_entry = entry;
      }
      curr_entry.psl = curr_entry.psl + 1 | 0;
      const _tmp$4 = idx + 1 & (self.capacity - 1 | 0);
      _tmp = _tmp$4;
      _tmp$2 = curr_entry;
      continue;
    }
  }
}
function moonbitlang$core$hashmap$$T$set_with_hash$85$(self, key, value, hash) {
  if (self.size >= (self.capacity / 2 | 0)) {
    moonbitlang$core$hashmap$$T$grow$85$(self);
  }
  let _tmp = hash & (self.capacity - 1 | 0);
  let _tmp$2 = { psl: 0, hash: hash, key: key, value: value };
  while (true) {
    const idx = _tmp;
    const entry = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      const _tmp$4 = self.entries;
      $bound_check(_tmp$4, idx);
      _tmp$4[idx] = entry;
      self.size = self.size + 1 | 0;
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (_curr_entry.hash === entry.hash && moonbitlang$core$builtin$$Eq$op_equal$87$(_curr_entry.key, entry.key)) {
        _curr_entry.value = entry.value;
        break;
      }
      let curr_entry;
      if (entry.psl > _curr_entry.psl) {
        const _tmp$4 = self.entries;
        $bound_check(_tmp$4, idx);
        _tmp$4[idx] = entry;
        curr_entry = _curr_entry;
      } else {
        curr_entry = entry;
      }
      curr_entry.psl = curr_entry.psl + 1 | 0;
      const _tmp$4 = idx + 1 & (self.capacity - 1 | 0);
      _tmp = _tmp$4;
      _tmp$2 = curr_entry;
      continue;
    }
  }
}
function moonbitlang$core$hashmap$$T$set_with_hash$86$(self, key, value, hash) {
  if (self.size >= (self.capacity / 2 | 0)) {
    moonbitlang$core$hashmap$$T$grow$86$(self);
  }
  let _tmp = hash & (self.capacity - 1 | 0);
  let _tmp$2 = { psl: 0, hash: hash, key: key, value: value };
  while (true) {
    const idx = _tmp;
    const entry = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      const _tmp$4 = self.entries;
      $bound_check(_tmp$4, idx);
      _tmp$4[idx] = entry;
      self.size = self.size + 1 | 0;
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (_curr_entry.hash === entry.hash && moonbitlang$core$builtin$$Eq$op_equal$45$(_curr_entry.key, entry.key)) {
        _curr_entry.value = entry.value;
        break;
      }
      let curr_entry;
      if (entry.psl > _curr_entry.psl) {
        const _tmp$4 = self.entries;
        $bound_check(_tmp$4, idx);
        _tmp$4[idx] = entry;
        curr_entry = _curr_entry;
      } else {
        curr_entry = entry;
      }
      curr_entry.psl = curr_entry.psl + 1 | 0;
      const _tmp$4 = idx + 1 & (self.capacity - 1 | 0);
      _tmp = _tmp$4;
      _tmp$2 = curr_entry;
      continue;
    }
  }
}
function moonbitlang$core$hashmap$$T$grow$85$(self) {
  const old_entries = self.entries;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.size = 0;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < old_entries.length) {
      $bound_check(old_entries, i);
      const _bind = old_entries[i];
      if (_bind === undefined) {
      } else {
        const _Some = _bind;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _hash = _x.hash;
        moonbitlang$core$hashmap$$T$set_with_hash$85$(self, _key, _value, _hash);
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$hashmap$$T$grow$84$(self) {
  const old_entries = self.entries;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.size = 0;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < old_entries.length) {
      $bound_check(old_entries, i);
      const _bind = old_entries[i];
      if (_bind === undefined) {
      } else {
        const _Some = _bind;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _hash = _x.hash;
        moonbitlang$core$hashmap$$T$set_with_hash$84$(self, _key, _value, _hash);
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$hashmap$$T$grow$86$(self) {
  const old_entries = self.entries;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.size = 0;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < old_entries.length) {
      $bound_check(old_entries, i);
      const _bind = old_entries[i];
      if (_bind === undefined) {
      } else {
        const _Some = _bind;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _hash = _x.hash;
        moonbitlang$core$hashmap$$T$set_with_hash$86$(self, _key, _value, _hash);
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$hashmap$$T$set$85$(self, key, value) {
  moonbitlang$core$hashmap$$T$set_with_hash$85$(self, key, value, moonbitlang$core$builtin$$Hash$hash$88$(key));
}
function moonbitlang$core$hashmap$$T$set$86$(self, key, value) {
  moonbitlang$core$hashmap$$T$set_with_hash$86$(self, key, value, moonbitlang$core$builtin$$Hash$hash$89$(key));
}
function moonbitlang$core$hashmap$$T$op_set$85$(self, key, value) {
  moonbitlang$core$hashmap$$T$set$85$(self, key, value);
}
function moonbitlang$core$hashmap$$T$op_set$86$(self, key, value) {
  moonbitlang$core$hashmap$$T$set$86$(self, key, value);
}
function moonbitlang$core$hashmap$$T$get_with_hash$84$(self, key, hash) {
  let _tmp = 0;
  let _tmp$2 = hash & (self.capacity - 1 | 0);
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$87$(_entry.key, key)) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & (self.capacity - 1 | 0);
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$hashmap$$T$get_with_hash$86$(self, key, hash) {
  let _tmp = 0;
  let _tmp$2 = hash & (self.capacity - 1 | 0);
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$45$(_entry.key, key)) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & (self.capacity - 1 | 0);
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$hashmap$$T$get$86$(self, key) {
  return moonbitlang$core$hashmap$$T$get_with_hash$86$(self, key, moonbitlang$core$builtin$$Hash$hash$89$(key));
}
function moonbitlang$core$hashmap$$T$op_get$86$(self, key) {
  return moonbitlang$core$hashmap$$T$get$86$(self, key);
}
function moonbitlang$core$hashmap$$T$get_or_init$84$(self, key, init) {
  const hash = moonbitlang$core$builtin$$Hash$hash$88$(key);
  const _bind = moonbitlang$core$hashmap$$T$get_with_hash$84$(self, key, hash);
  if (_bind === undefined) {
    const v = init();
    moonbitlang$core$hashmap$$T$set_with_hash$84$(self, key, v, hash);
    return v;
  } else {
    const _Some = _bind;
    const _v = _Some;
    return _v;
  }
}
function moonbitlang$core$hashmap$$T$iter$86$(self) {
  return moonbitlang$core$builtin$$Iter$new$90$((yield_) => {
    const _arr = self.entries;
    const _len = _arr.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        _L: {
          const entry = _arr[_i];
          if (entry === undefined) {
            break _L;
          } else {
            const _Some = entry;
            const _x = _Some;
            const _key = _x.key;
            const _value = _x.value;
            if (moonbitlang$core$builtin$$Eq$op_equal$30$(yield_({ _0: _key, _1: _value }), 0)) {
              return 0;
            }
          }
          break _L;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  });
}
function moonbitlang$core$hashmap$$T$iter2$85$(self) {
  return moonbitlang$core$builtin$$Iter2$new$85$((yield_) => {
    const _arr = self.entries;
    const _len = _arr.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        _L: {
          const entry = _arr[_i];
          if (entry === undefined) {
            break _L;
          } else {
            const _Some = entry;
            const _x = _Some;
            const _key = _x.key;
            const _value = _x.value;
            if (moonbitlang$core$builtin$$Eq$op_equal$30$(yield_(_key, _value), 0)) {
              return 0;
            }
          }
          break _L;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  });
}
function moonbitlang$core$json$$indent_str(level, indent) {
  return indent === 0 ? "" : `\n${moonbitlang$core$string$$String$repeat(" ", Math.imul(indent, level) | 0)}`;
}
function moonbitlang$core$json$$escape$46$to_hex_digit$91$(i) {
  return i < 10 ? 48 + i | 0 : 97 + (i - 10 | 0) | 0;
}
function moonbitlang$core$json$$escape(str, escape_slash) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(str.length);
  const _bind = moonbitlang$core$string$$String$iter(str);
  _bind((c) => {
    switch (c) {
      case 34: {
        moonbitlang$core$builtin$$Logger$write_string$18$(buf, "\\\"");
        break;
      }
      case 92: {
        moonbitlang$core$builtin$$Logger$write_string$18$(buf, "\\\\");
        break;
      }
      case 47: {
        if (escape_slash) {
          moonbitlang$core$builtin$$Logger$write_string$18$(buf, "\\/");
        } else {
          moonbitlang$core$builtin$$Logger$write_char$18$(buf, c);
        }
        break;
      }
      case 10: {
        moonbitlang$core$builtin$$Logger$write_string$18$(buf, "\\n");
        break;
      }
      case 13: {
        moonbitlang$core$builtin$$Logger$write_string$18$(buf, "\\r");
        break;
      }
      case 8: {
        moonbitlang$core$builtin$$Logger$write_string$18$(buf, "\\b");
        break;
      }
      case 9: {
        moonbitlang$core$builtin$$Logger$write_string$18$(buf, "\\t");
        break;
      }
      default: {
        const code = c;
        if (code === 12) {
          moonbitlang$core$builtin$$Logger$write_string$18$(buf, "\\f");
        } else {
          if (code < 32) {
            moonbitlang$core$builtin$$Logger$write_string$18$(buf, "\\u00");
            moonbitlang$core$builtin$$Logger$write_char$18$(buf, moonbitlang$core$json$$escape$46$to_hex_digit$91$(code / 16 | 0));
            moonbitlang$core$builtin$$Logger$write_char$18$(buf, moonbitlang$core$json$$escape$46$to_hex_digit$91$(code % 16 | 0));
          } else {
            moonbitlang$core$builtin$$Logger$write_char$18$(buf, c);
          }
        }
      }
    }
    return 1;
  });
  return moonbitlang$core$builtin$$StringBuilder$to_string(buf);
}
function moonbitlang$core$json$$stringify$46$stringify_inner$92$(_env, value, level) {
  const escape_slash = _env._1;
  const indent = _env._0;
  switch (value.$tag) {
    case 6: {
      const _Object = value;
      const _members = _Object._0;
      if (moonbitlang$core$builtin$$Map$is_empty$93$(_members)) {
        return "{}";
      }
      const buf = moonbitlang$core$builtin$$StringBuilder$new(0);
      moonbitlang$core$builtin$$Logger$write_char$18$(buf, 123);
      moonbitlang$core$builtin$$Logger$write_string$18$(buf, moonbitlang$core$json$$indent_str(level + 1 | 0, indent));
      const first = { val: true };
      const _bind = moonbitlang$core$builtin$$Map$iter2$93$(_members);
      _bind((k, v) => {
        if (first.val) {
          first.val = false;
        } else {
          moonbitlang$core$builtin$$Logger$write_char$18$(buf, 44);
          moonbitlang$core$builtin$$Logger$write_string$18$(buf, moonbitlang$core$json$$indent_str(level + 1 | 0, indent));
        }
        moonbitlang$core$builtin$$Logger$write_char$18$(buf, 34);
        moonbitlang$core$builtin$$Logger$write_string$18$(buf, moonbitlang$core$json$$escape(k, escape_slash));
        moonbitlang$core$builtin$$Logger$write_char$18$(buf, 34);
        if (indent === 0) {
          moonbitlang$core$builtin$$Logger$write_char$18$(buf, 58);
        } else {
          moonbitlang$core$builtin$$Logger$write_string$18$(buf, ": ");
        }
        moonbitlang$core$builtin$$Logger$write_string$18$(buf, moonbitlang$core$json$$stringify$46$stringify_inner$92$(_env, v, level + 1 | 0));
        return 1;
      });
      moonbitlang$core$builtin$$Logger$write_string$18$(buf, moonbitlang$core$json$$indent_str(level, indent));
      moonbitlang$core$builtin$$Logger$write_char$18$(buf, 125);
      return moonbitlang$core$builtin$$StringBuilder$to_string(buf);
    }
    case 5: {
      const _Array = value;
      const _arr = _Array._0;
      if (moonbitlang$core$array$$Array$is_empty$94$(_arr)) {
        return "[]";
      }
      const buf$2 = moonbitlang$core$builtin$$StringBuilder$new(0);
      moonbitlang$core$builtin$$Logger$write_char$18$(buf$2, 91);
      moonbitlang$core$builtin$$Logger$write_string$18$(buf$2, moonbitlang$core$json$$indent_str(level + 1 | 0, indent));
      const _len = _arr.length;
      let _tmp = 0;
      while (true) {
        const _i = _tmp;
        if (_i < _len) {
          const v = _arr[_i];
          if (_i > 0) {
            moonbitlang$core$builtin$$Logger$write_char$18$(buf$2, 44);
            moonbitlang$core$builtin$$Logger$write_string$18$(buf$2, moonbitlang$core$json$$indent_str(level + 1 | 0, indent));
          }
          moonbitlang$core$builtin$$Logger$write_string$18$(buf$2, moonbitlang$core$json$$stringify$46$stringify_inner$92$(_env, v, level + 1 | 0));
          _tmp = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      moonbitlang$core$builtin$$Logger$write_string$18$(buf$2, moonbitlang$core$json$$indent_str(level, indent));
      moonbitlang$core$builtin$$Logger$write_char$18$(buf$2, 93);
      return moonbitlang$core$builtin$$StringBuilder$to_string(buf$2);
    }
    case 4: {
      const _String = value;
      const _s = _String._0;
      const buf$3 = moonbitlang$core$builtin$$StringBuilder$new(0);
      moonbitlang$core$builtin$$Logger$write_char$18$(buf$3, 34);
      moonbitlang$core$builtin$$Logger$write_string$18$(buf$3, moonbitlang$core$json$$escape(_s, escape_slash));
      moonbitlang$core$builtin$$Logger$write_char$18$(buf$3, 34);
      return moonbitlang$core$builtin$$StringBuilder$to_string(buf$3);
    }
    case 3: {
      const _Number = value;
      const _n = _Number._0;
      return String(_n);
    }
    case 1: {
      return "true";
    }
    case 2: {
      return "false";
    }
    default: {
      return "null";
    }
  }
}
function moonbitlang$core$json$$Json$stringify(self, escape_slash, indent) {
  const _env = { _0: indent, _1: escape_slash };
  return moonbitlang$core$json$$stringify$46$stringify_inner$92$(_env, self, 0);
}
function moonbitlang$core$json$$Json$stringify$46$escape_slash$46$default() {
  return false;
}
function moonbitlang$core$builtin$$Logger$write_object$11$(self, obj) {
  moonbitlang$core$builtin$$Show$output$11$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$95$(self, obj) {
  moonbitlang$core$builtin$$Show$output$95$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$76$(self, obj) {
  moonbitlang$core$builtin$$Show$output$76$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$96$(self, obj) {
  moonbitlang$core$builtin$$Show$output$96$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$73$(self, obj) {
  moonbitlang$core$builtin$$Show$output$73$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$10$(self, obj) {
  moonbitlang$core$builtin$$Show$output$10$(obj, self);
}
function moonbitlang$core$builtin$$Eq$op_equal$30$(_x_2501, _x_2502) {
  if (_x_2501 === 0) {
    if (_x_2502 === 0) {
      return true;
    } else {
      return false;
    }
  } else {
    if (_x_2502 === 1) {
      return true;
    } else {
      return false;
    }
  }
}
function moonbitlang$core$builtin$$abort$14$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$17$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$16$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$48$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$97$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$39$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$98$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$40$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$99$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$60$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$100$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$101$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$102$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$103$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$10$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$20$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$abort$9$(msg) {
  $panic();
}
function moonbitlang$core$builtin$$abort$11$(msg) {
  return $panic();
}
function moonbitlang$core$builtin$$rotl(x, r) {
  return x << r | (x >>> (32 - r | 0) | 0);
}
function moonbitlang$core$builtin$$StringBuilder$new(size_hint) {
  return { val: "" };
}
function moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default() {
  return 0;
}
function moonbitlang$core$builtin$$StringBuilder$to_string(self) {
  return self.val;
}
function moonbitlang$core$builtin$$op_notequal$80$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$104$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$27$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$105$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$83$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$106$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$82$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$107$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$81$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$108$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$30$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$30$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$29$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$109$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$28$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$110$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$51$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$51$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$87$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$87$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$11$(x, y) {
  return !(x === y);
}
function moonbitlang$core$builtin$$println$11$(input) {
  console.log(moonbitlang$core$builtin$$Show$to_string$11$(input));
}
function moonbitlang$core$builtin$$op_lt$71$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$71$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$76$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$76$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$11$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$11$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$73$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$73$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$8$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$8$(self_, other) < 0;
}
function moonbitlang$core$char$$Char$to_uint(self) {
  return self;
}
function moonbitlang$core$builtin$$op_ge$8$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$8$(self_, other) >= 0;
}
function moonbitlang$core$builtin$$op_le$8$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$8$(self_, other) <= 0;
}
function moonbitlang$core$builtin$$Logger$write_char$18$(self, ch) {
  const _bind = self;
  _bind.val = `${_bind.val}${String.fromCodePoint(ch)}`;
}
function moonbitlang$core$string$$String$escape(self) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default());
  moonbitlang$core$builtin$$Show$output$11$(self, { self: buf, method_0: moonbitlang$core$builtin$$Logger$write_string$18$, method_1: moonbitlang$core$builtin$$Logger$write_substring$18$, method_2: moonbitlang$core$builtin$$Logger$write_sub_string$111$, method_3: moonbitlang$core$builtin$$Logger$write_char$18$ });
  return moonbitlang$core$builtin$$StringBuilder$to_string(buf);
}
function moonbitlang$core$array$$Array$op_get$23$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$112$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$113$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$114$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$115$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$116$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$117$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$13$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$41$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$10$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$95$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$11$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$71$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$118$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$119$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$120$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$40$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$121$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$122$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$103$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$123$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$builtin$$Logger$write_string$18$(self, str) {
  const _bind = self;
  _bind.val = `${_bind.val}${str}`;
}
function moonbitlang$core$bytes$$Bytes$makei(length, value) {
  if (length <= 0) {
    return $bytes_literal$0;
  }
  const arr = $make_array_len_and_init(length, value(0));
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < length) {
      $bound_check(arr, i);
      arr[i] = value(i);
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$builtin$$MyInt64$from_int(value) {
  return { hi: value >> 31 & -1, lo: value | 0 };
}
function moonbitlang$core$int$$Int$to_int64(self) {
  return moonbitlang$core$builtin$$MyInt64$from_int(self);
}
function moonbitlang$core$builtin$$MyInt64$op_div(self, other) {
  const exports = moonbitlang$core$builtin$$get_int64_wasm_helper();
  const _ahi = self.hi;
  const _alo = self.lo;
  const _bhi = other.hi;
  const _blo = other.lo;
  const _func = exports.div_s;
  const lo = _func(_alo, _ahi, _blo, _bhi);
  const _func$2 = exports.get_high;
  const hi = _func$2();
  return { hi: hi, lo: lo };
}
function moonbitlang$core$int64$$Int64$op_div(self, other) {
  return moonbitlang$core$builtin$$MyInt64$op_div(self, other);
}
function moonbitlang$core$builtin$$MyInt64$add_hi_lo(self, bhi, blo) {
  const _ahi = self.hi;
  const _alo = self.lo;
  const lo = _alo + blo | 0;
  const s = lo >> 31;
  const as_ = _alo >> 31;
  const bs = blo >> 31;
  const c = (as_ & bs | ~s & (as_ ^ bs)) & 1;
  const hi = (_ahi + bhi | 0) + c | 0;
  return { hi: hi, lo: lo };
}
function moonbitlang$core$builtin$$MyInt64$op_sub(self, other) {
  return other.lo === 0 ? { hi: self.hi - other.hi | 0, lo: self.lo } : moonbitlang$core$builtin$$MyInt64$add_hi_lo(self, ~other.hi, ~other.lo + 1 | 0);
}
function moonbitlang$core$int64$$Int64$op_sub(self, other) {
  return moonbitlang$core$builtin$$MyInt64$op_sub(self, other);
}
function moonbitlang$core$builtin$$MyInt64$to_int(self) {
  return self.lo;
}
function moonbitlang$core$int64$$Int64$to_int(self) {
  return moonbitlang$core$builtin$$MyInt64$to_int(self);
}
function moonbitlang$core$builtin$$output$46$abs$124$(n) {
  return n < 0 ? 0 - n | 0 : n;
}
function moonbitlang$core$builtin$$output$46$write_digits$125$(_env, num) {
  const logger = _env._1;
  const radix = _env._0;
  const num2 = num / radix | 0;
  if (num2 !== 0) {
    moonbitlang$core$builtin$$output$46$write_digits$125$(_env, num2);
  }
  const _tmp = moonbitlang$core$builtin$$output$46$abs$124$(num % radix | 0);
  $bound_check("0123456789abcdefghijklmnopqrstuvwxyz", _tmp);
  logger.method_3(logger.self, "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(_tmp));
}
function moonbitlang$core$int$$Int$output(self, logger, radix) {
  if (self < 0) {
    logger.method_3(logger.self, 45);
  }
  const _env = { _0: radix, _1: logger };
  moonbitlang$core$builtin$$output$46$write_digits$125$(_env, moonbitlang$core$builtin$$output$46$abs$124$(self));
}
function moonbitlang$core$int$$Int$output$46$radix$46$default() {
  return 10;
}
function moonbitlang$core$int$$Int$output_size_hint(radix) {
  return 2 <= radix && radix < 7 ? 36 : 8 <= radix && radix < 15 ? 18 : 16 <= radix && radix <= 36 ? 10 : moonbitlang$core$builtin$$abort$10$("radix must be between 2 and 36");
}
function moonbitlang$core$string$$String$substring(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end;
  }
  return start >= 0 && (start <= end$2 && end$2 <= len) ? self.substring(start, end$2) : $panic();
}
function moonbitlang$core$char$$Char$op_sub(self, that) {
  return self - that | 0;
}
function moonbitlang$core$builtin$$MyInt64$op_add(self, other) {
  return moonbitlang$core$builtin$$MyInt64$add_hi_lo(self, other.hi, other.lo);
}
function moonbitlang$core$int64$$Int64$op_add(self, other) {
  return moonbitlang$core$builtin$$MyInt64$op_add(self, other);
}
function moonbitlang$core$builtin$$op_gt$8$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$8$(self_, other) > 0;
}
function moonbitlang$core$builtin$$Logger$write_substring$18$(self, str, start, len) {
  const _bind = self;
  _bind.val = `${_bind.val}${moonbitlang$core$string$$String$substring(str, start, start + len | 0)}`;
}
function moonbitlang$core$builtin$$Hasher$combine$87$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$87$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$45$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$45$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$126$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$126$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$76$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$76$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$11$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$11$(value, self);
}
function moonbitlang$core$builtin$$power_2_above(x, n) {
  let _tmp = x;
  while (true) {
    const i = _tmp;
    if (i >= n) {
      return i;
    }
    const next = i << 1;
    if (next < 0) {
      return i;
    }
    _tmp = next;
    continue;
  }
}
function moonbitlang$core$builtin$$calc_grow_threshold(capacity) {
  return (Math.imul(capacity, 13) | 0) / 16 | 0;
}
function moonbitlang$core$builtin$$Map$new$127$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), list: $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined }), size: 0, capacity: capacity$2, capacity_mask: capacity$2 - 1 | 0, growAt: moonbitlang$core$builtin$$calc_grow_threshold(capacity$2), head: undefined, tail: undefined };
}
function moonbitlang$core$builtin$$Map$new$128$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), list: $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined }), size: 0, capacity: capacity$2, capacity_mask: capacity$2 - 1 | 0, growAt: moonbitlang$core$builtin$$calc_grow_threshold(capacity$2), head: undefined, tail: undefined };
}
function moonbitlang$core$builtin$$Map$new$129$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), list: $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined }), size: 0, capacity: capacity$2, capacity_mask: capacity$2 - 1 | 0, growAt: moonbitlang$core$builtin$$calc_grow_threshold(capacity$2), head: undefined, tail: undefined };
}
function moonbitlang$core$builtin$$Map$new$93$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), list: $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined }), size: 0, capacity: capacity$2, capacity_mask: capacity$2 - 1 | 0, growAt: moonbitlang$core$builtin$$calc_grow_threshold(capacity$2), head: undefined, tail: undefined };
}
function moonbitlang$core$builtin$$Map$new$130$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), list: $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined }), size: 0, capacity: capacity$2, capacity_mask: capacity$2 - 1 | 0, growAt: moonbitlang$core$builtin$$calc_grow_threshold(capacity$2), head: undefined, tail: undefined };
}
function moonbitlang$core$builtin$$Map$new$131$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), list: $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined }), size: 0, capacity: capacity$2, capacity_mask: capacity$2 - 1 | 0, growAt: moonbitlang$core$builtin$$calc_grow_threshold(capacity$2), head: undefined, tail: undefined };
}
function moonbitlang$core$builtin$$Map$new$132$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), list: $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined }), size: 0, capacity: capacity$2, capacity_mask: capacity$2 - 1 | 0, growAt: moonbitlang$core$builtin$$calc_grow_threshold(capacity$2), head: undefined, tail: undefined };
}
function moonbitlang$core$builtin$$Map$new$133$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), list: $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined }), size: 0, capacity: capacity$2, capacity_mask: capacity$2 - 1 | 0, growAt: moonbitlang$core$builtin$$calc_grow_threshold(capacity$2), head: undefined, tail: undefined };
}
function moonbitlang$core$builtin$$Map$new$134$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), list: $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined }), size: 0, capacity: capacity$2, capacity_mask: capacity$2 - 1 | 0, growAt: moonbitlang$core$builtin$$calc_grow_threshold(capacity$2), head: undefined, tail: undefined };
}
function moonbitlang$core$builtin$$Map$new$135$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), list: $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined }), size: 0, capacity: capacity$2, capacity_mask: capacity$2 - 1 | 0, growAt: moonbitlang$core$builtin$$calc_grow_threshold(capacity$2), head: undefined, tail: undefined };
}
function moonbitlang$core$builtin$$Map$new$136$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), list: $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined }), size: 0, capacity: capacity$2, capacity_mask: capacity$2 - 1 | 0, growAt: moonbitlang$core$builtin$$calc_grow_threshold(capacity$2), head: undefined, tail: undefined };
}
function moonbitlang$core$builtin$$Map$new$137$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  return { entries: $make_array_len_and_init(capacity$2, undefined), list: $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined }), size: 0, capacity: capacity$2, capacity_mask: capacity$2 - 1 | 0, growAt: moonbitlang$core$builtin$$calc_grow_threshold(capacity$2), head: undefined, tail: undefined };
}
function moonbitlang$core$array$$Array$each$138$(self, f) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$Array$each$139$(self, f) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$Array$each$140$(self, f) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$Array$each$141$(self, f) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$Array$each$142$(self, f) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$Array$each$143$(self, f) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$Array$each$144$(self, f) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$Array$each$145$(self, f) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$Array$each$146$(self, f) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$Array$each$147$(self, f) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$Array$each$148$(self, f) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$Array$each$149$(self, f) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$127$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$129$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$128$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$130$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$131$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$132$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$93$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$136$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$135$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$137$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$134$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$133$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set$127$(self, key, value) {
  if (self.size >= self.growAt) {
    moonbitlang$core$builtin$$Map$grow$127$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key, value: value };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    const _param$3 = _tmp$3;
    const _param$4 = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, _param$2);
    const _bind = _tmp$5[_param$2];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, _param$2);
      _tmp$6[_param$2] = _param$3;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, _param$2);
      _tmp$7[_param$2] = _param$4;
      _param$3.idx = _param$2;
      moonbitlang$core$builtin$$Map$add_entry_to_tail$127$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === _param$3.hash && _curr_entry.key === _param$3.key) {
        _curr_entry.value = _param$3.value;
        break;
      }
      if (_param$3.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, _param$2);
        _tmp$8[_param$2] = _param$3;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, _param$2);
        _tmp$9[_param$2] = _param$4;
        _param$3.idx = _param$2;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = _param + 1 | 0;
        const _tmp$11 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        _param$3.psl = _param$3.psl + 1 | 0;
        const _tmp$8 = _param + 1 | 0;
        const _tmp$9 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$set$128$(self, key, value) {
  if (self.size >= self.growAt) {
    moonbitlang$core$builtin$$Map$grow$128$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key, value: value };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    const _param$3 = _tmp$3;
    const _param$4 = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, _param$2);
    const _bind = _tmp$5[_param$2];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, _param$2);
      _tmp$6[_param$2] = _param$3;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, _param$2);
      _tmp$7[_param$2] = _param$4;
      _param$3.idx = _param$2;
      moonbitlang$core$builtin$$Map$add_entry_to_tail$128$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === _param$3.hash && _curr_entry.key === _param$3.key) {
        _curr_entry.value = _param$3.value;
        break;
      }
      if (_param$3.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, _param$2);
        _tmp$8[_param$2] = _param$3;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, _param$2);
        _tmp$9[_param$2] = _param$4;
        _param$3.idx = _param$2;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = _param + 1 | 0;
        const _tmp$11 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        _param$3.psl = _param$3.psl + 1 | 0;
        const _tmp$8 = _param + 1 | 0;
        const _tmp$9 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$set$129$(self, key, value) {
  if (self.size >= self.growAt) {
    moonbitlang$core$builtin$$Map$grow$129$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$10$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key, value: value };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    const _param$3 = _tmp$3;
    const _param$4 = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, _param$2);
    const _bind = _tmp$5[_param$2];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, _param$2);
      _tmp$6[_param$2] = _param$3;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, _param$2);
      _tmp$7[_param$2] = _param$4;
      _param$3.idx = _param$2;
      moonbitlang$core$builtin$$Map$add_entry_to_tail$129$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === _param$3.hash && _curr_entry.key === _param$3.key) {
        _curr_entry.value = _param$3.value;
        break;
      }
      if (_param$3.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, _param$2);
        _tmp$8[_param$2] = _param$3;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, _param$2);
        _tmp$9[_param$2] = _param$4;
        _param$3.idx = _param$2;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = _param + 1 | 0;
        const _tmp$11 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        _param$3.psl = _param$3.psl + 1 | 0;
        const _tmp$8 = _param + 1 | 0;
        const _tmp$9 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$set$132$(self, key, value) {
  if (self.size >= self.growAt) {
    moonbitlang$core$builtin$$Map$grow$132$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key, value: value };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    const _param$3 = _tmp$3;
    const _param$4 = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, _param$2);
    const _bind = _tmp$5[_param$2];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, _param$2);
      _tmp$6[_param$2] = _param$3;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, _param$2);
      _tmp$7[_param$2] = _param$4;
      _param$3.idx = _param$2;
      moonbitlang$core$builtin$$Map$add_entry_to_tail$132$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === _param$3.hash && _curr_entry.key === _param$3.key) {
        _curr_entry.value = _param$3.value;
        break;
      }
      if (_param$3.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, _param$2);
        _tmp$8[_param$2] = _param$3;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, _param$2);
        _tmp$9[_param$2] = _param$4;
        _param$3.idx = _param$2;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = _param + 1 | 0;
        const _tmp$11 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        _param$3.psl = _param$3.psl + 1 | 0;
        const _tmp$8 = _param + 1 | 0;
        const _tmp$9 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$set$131$(self, key, value) {
  if (self.size >= self.growAt) {
    moonbitlang$core$builtin$$Map$grow$131$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key, value: value };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    const _param$3 = _tmp$3;
    const _param$4 = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, _param$2);
    const _bind = _tmp$5[_param$2];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, _param$2);
      _tmp$6[_param$2] = _param$3;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, _param$2);
      _tmp$7[_param$2] = _param$4;
      _param$3.idx = _param$2;
      moonbitlang$core$builtin$$Map$add_entry_to_tail$131$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === _param$3.hash && _curr_entry.key === _param$3.key) {
        _curr_entry.value = _param$3.value;
        break;
      }
      if (_param$3.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, _param$2);
        _tmp$8[_param$2] = _param$3;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, _param$2);
        _tmp$9[_param$2] = _param$4;
        _param$3.idx = _param$2;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = _param + 1 | 0;
        const _tmp$11 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        _param$3.psl = _param$3.psl + 1 | 0;
        const _tmp$8 = _param + 1 | 0;
        const _tmp$9 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$set$130$(self, key, value) {
  if (self.size >= self.growAt) {
    moonbitlang$core$builtin$$Map$grow$130$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key, value: value };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    const _param$3 = _tmp$3;
    const _param$4 = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, _param$2);
    const _bind = _tmp$5[_param$2];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, _param$2);
      _tmp$6[_param$2] = _param$3;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, _param$2);
      _tmp$7[_param$2] = _param$4;
      _param$3.idx = _param$2;
      moonbitlang$core$builtin$$Map$add_entry_to_tail$130$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === _param$3.hash && _curr_entry.key === _param$3.key) {
        _curr_entry.value = _param$3.value;
        break;
      }
      if (_param$3.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, _param$2);
        _tmp$8[_param$2] = _param$3;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, _param$2);
        _tmp$9[_param$2] = _param$4;
        _param$3.idx = _param$2;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = _param + 1 | 0;
        const _tmp$11 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        _param$3.psl = _param$3.psl + 1 | 0;
        const _tmp$8 = _param + 1 | 0;
        const _tmp$9 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$set$133$(self, key, value) {
  if (self.size >= self.growAt) {
    moonbitlang$core$builtin$$Map$grow$133$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key, value: value };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    const _param$3 = _tmp$3;
    const _param$4 = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, _param$2);
    const _bind = _tmp$5[_param$2];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, _param$2);
      _tmp$6[_param$2] = _param$3;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, _param$2);
      _tmp$7[_param$2] = _param$4;
      _param$3.idx = _param$2;
      moonbitlang$core$builtin$$Map$add_entry_to_tail$133$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === _param$3.hash && _curr_entry.key === _param$3.key) {
        _curr_entry.value = _param$3.value;
        break;
      }
      if (_param$3.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, _param$2);
        _tmp$8[_param$2] = _param$3;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, _param$2);
        _tmp$9[_param$2] = _param$4;
        _param$3.idx = _param$2;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = _param + 1 | 0;
        const _tmp$11 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        _param$3.psl = _param$3.psl + 1 | 0;
        const _tmp$8 = _param + 1 | 0;
        const _tmp$9 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$set$134$(self, key, value) {
  if (self.size >= self.growAt) {
    moonbitlang$core$builtin$$Map$grow$134$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key, value: value };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    const _param$3 = _tmp$3;
    const _param$4 = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, _param$2);
    const _bind = _tmp$5[_param$2];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, _param$2);
      _tmp$6[_param$2] = _param$3;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, _param$2);
      _tmp$7[_param$2] = _param$4;
      _param$3.idx = _param$2;
      moonbitlang$core$builtin$$Map$add_entry_to_tail$134$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === _param$3.hash && _curr_entry.key === _param$3.key) {
        _curr_entry.value = _param$3.value;
        break;
      }
      if (_param$3.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, _param$2);
        _tmp$8[_param$2] = _param$3;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, _param$2);
        _tmp$9[_param$2] = _param$4;
        _param$3.idx = _param$2;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = _param + 1 | 0;
        const _tmp$11 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        _param$3.psl = _param$3.psl + 1 | 0;
        const _tmp$8 = _param + 1 | 0;
        const _tmp$9 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$set$137$(self, key, value) {
  if (self.size >= self.growAt) {
    moonbitlang$core$builtin$$Map$grow$137$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$10$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key, value: value };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    const _param$3 = _tmp$3;
    const _param$4 = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, _param$2);
    const _bind = _tmp$5[_param$2];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, _param$2);
      _tmp$6[_param$2] = _param$3;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, _param$2);
      _tmp$7[_param$2] = _param$4;
      _param$3.idx = _param$2;
      moonbitlang$core$builtin$$Map$add_entry_to_tail$137$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === _param$3.hash && _curr_entry.key === _param$3.key) {
        _curr_entry.value = _param$3.value;
        break;
      }
      if (_param$3.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, _param$2);
        _tmp$8[_param$2] = _param$3;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, _param$2);
        _tmp$9[_param$2] = _param$4;
        _param$3.idx = _param$2;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = _param + 1 | 0;
        const _tmp$11 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        _param$3.psl = _param$3.psl + 1 | 0;
        const _tmp$8 = _param + 1 | 0;
        const _tmp$9 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$set$135$(self, key, value) {
  if (self.size >= self.growAt) {
    moonbitlang$core$builtin$$Map$grow$135$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$10$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key, value: value };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    const _param$3 = _tmp$3;
    const _param$4 = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, _param$2);
    const _bind = _tmp$5[_param$2];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, _param$2);
      _tmp$6[_param$2] = _param$3;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, _param$2);
      _tmp$7[_param$2] = _param$4;
      _param$3.idx = _param$2;
      moonbitlang$core$builtin$$Map$add_entry_to_tail$135$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === _param$3.hash && _curr_entry.key === _param$3.key) {
        _curr_entry.value = _param$3.value;
        break;
      }
      if (_param$3.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, _param$2);
        _tmp$8[_param$2] = _param$3;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, _param$2);
        _tmp$9[_param$2] = _param$4;
        _param$3.idx = _param$2;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = _param + 1 | 0;
        const _tmp$11 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        _param$3.psl = _param$3.psl + 1 | 0;
        const _tmp$8 = _param + 1 | 0;
        const _tmp$9 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$set$136$(self, key, value) {
  if (self.size >= self.growAt) {
    moonbitlang$core$builtin$$Map$grow$136$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$10$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key, value: value };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    const _param$3 = _tmp$3;
    const _param$4 = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, _param$2);
    const _bind = _tmp$5[_param$2];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, _param$2);
      _tmp$6[_param$2] = _param$3;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, _param$2);
      _tmp$7[_param$2] = _param$4;
      _param$3.idx = _param$2;
      moonbitlang$core$builtin$$Map$add_entry_to_tail$136$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === _param$3.hash && _curr_entry.key === _param$3.key) {
        _curr_entry.value = _param$3.value;
        break;
      }
      if (_param$3.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, _param$2);
        _tmp$8[_param$2] = _param$3;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, _param$2);
        _tmp$9[_param$2] = _param$4;
        _param$3.idx = _param$2;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = _param + 1 | 0;
        const _tmp$11 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        _param$3.psl = _param$3.psl + 1 | 0;
        const _tmp$8 = _param + 1 | 0;
        const _tmp$9 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$set$93$(self, key, value) {
  if (self.size >= self.growAt) {
    moonbitlang$core$builtin$$Map$grow$93$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key, value: value };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    const _param$3 = _tmp$3;
    const _param$4 = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, _param$2);
    const _bind = _tmp$5[_param$2];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, _param$2);
      _tmp$6[_param$2] = _param$3;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, _param$2);
      _tmp$7[_param$2] = _param$4;
      _param$3.idx = _param$2;
      moonbitlang$core$builtin$$Map$add_entry_to_tail$93$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === _param$3.hash && _curr_entry.key === _param$3.key) {
        _curr_entry.value = _param$3.value;
        break;
      }
      if (_param$3.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, _param$2);
        _tmp$8[_param$2] = _param$3;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, _param$2);
        _tmp$9[_param$2] = _param$4;
        _param$3.idx = _param$2;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = _param + 1 | 0;
        const _tmp$11 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        _param$3.psl = _param$3.psl + 1 | 0;
        const _tmp$8 = _param + 1 | 0;
        const _tmp$9 = _param$2 + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$127$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.growAt = moonbitlang$core$builtin$$calc_grow_threshold(self.capacity);
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$127$(self, _key, _value);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$129$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.growAt = moonbitlang$core$builtin$$calc_grow_threshold(self.capacity);
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$129$(self, _key, _value);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$128$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.growAt = moonbitlang$core$builtin$$calc_grow_threshold(self.capacity);
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$128$(self, _key, _value);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$130$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.growAt = moonbitlang$core$builtin$$calc_grow_threshold(self.capacity);
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$130$(self, _key, _value);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$131$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.growAt = moonbitlang$core$builtin$$calc_grow_threshold(self.capacity);
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$131$(self, _key, _value);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$132$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.growAt = moonbitlang$core$builtin$$calc_grow_threshold(self.capacity);
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$132$(self, _key, _value);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$93$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.growAt = moonbitlang$core$builtin$$calc_grow_threshold(self.capacity);
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$93$(self, _key, _value);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$136$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.growAt = moonbitlang$core$builtin$$calc_grow_threshold(self.capacity);
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$136$(self, _key, _value);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$135$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.growAt = moonbitlang$core$builtin$$calc_grow_threshold(self.capacity);
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$135$(self, _key, _value);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$137$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.growAt = moonbitlang$core$builtin$$calc_grow_threshold(self.capacity);
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$137$(self, _key, _value);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$134$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.growAt = moonbitlang$core$builtin$$calc_grow_threshold(self.capacity);
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$134$(self, _key, _value);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$133$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.growAt = moonbitlang$core$builtin$$calc_grow_threshold(self.capacity);
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$133$(self, _key, _value);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$from_array$127$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$127$(arr.length);
  moonbitlang$core$array$$Array$each$138$(arr, (e) => {
    moonbitlang$core$builtin$$Map$set$127$(m, e._0, e._1);
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$129$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$129$(arr.length);
  moonbitlang$core$array$$Array$each$140$(arr, (e) => {
    moonbitlang$core$builtin$$Map$set$129$(m, e._0, e._1);
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$128$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$128$(arr.length);
  moonbitlang$core$array$$Array$each$139$(arr, (e) => {
    moonbitlang$core$builtin$$Map$set$128$(m, e._0, e._1);
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$132$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$132$(arr.length);
  moonbitlang$core$array$$Array$each$144$(arr, (e) => {
    moonbitlang$core$builtin$$Map$set$132$(m, e._0, e._1);
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$131$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$131$(arr.length);
  moonbitlang$core$array$$Array$each$143$(arr, (e) => {
    moonbitlang$core$builtin$$Map$set$131$(m, e._0, e._1);
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$130$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$130$(arr.length);
  moonbitlang$core$array$$Array$each$142$(arr, (e) => {
    moonbitlang$core$builtin$$Map$set$130$(m, e._0, e._1);
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$93$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$93$(arr.length);
  moonbitlang$core$array$$Array$each$141$(arr, (e) => {
    moonbitlang$core$builtin$$Map$set$93$(m, e._0, e._1);
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$137$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$137$(arr.length);
  moonbitlang$core$array$$Array$each$149$(arr, (e) => {
    moonbitlang$core$builtin$$Map$set$137$(m, e._0, e._1);
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$136$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$136$(arr.length);
  moonbitlang$core$array$$Array$each$148$(arr, (e) => {
    moonbitlang$core$builtin$$Map$set$136$(m, e._0, e._1);
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$135$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$135$(arr.length);
  moonbitlang$core$array$$Array$each$147$(arr, (e) => {
    moonbitlang$core$builtin$$Map$set$135$(m, e._0, e._1);
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$134$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$134$(arr.length);
  moonbitlang$core$array$$Array$each$146$(arr, (e) => {
    moonbitlang$core$builtin$$Map$set$134$(m, e._0, e._1);
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$133$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$133$(arr.length);
  moonbitlang$core$array$$Array$each$145$(arr, (e) => {
    moonbitlang$core$builtin$$Map$set$133$(m, e._0, e._1);
  });
  return m;
}
function moonbitlang$core$builtin$$Map$op_set$132$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$132$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$127$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$127$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$129$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$129$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$128$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$128$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$130$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$130$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$131$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$131$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$135$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$135$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$137$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$137$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$136$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$136$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$134$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$134$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$133$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$133$(self, key, value);
}
function moonbitlang$core$builtin$$Map$get$128$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$127$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$132$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$129$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$10$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$131$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$130$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$137$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$10$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$135$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$10$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$136$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$10$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$134$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$133$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$op_get$127$(self, key) {
  return moonbitlang$core$builtin$$Map$get$127$(self, key);
}
function moonbitlang$core$builtin$$Map$op_get$128$(self, key) {
  return moonbitlang$core$builtin$$Map$get$128$(self, key);
}
function moonbitlang$core$builtin$$Map$op_get$129$(self, key) {
  return moonbitlang$core$builtin$$Map$get$129$(self, key);
}
function moonbitlang$core$builtin$$Map$op_get$132$(self, key) {
  return moonbitlang$core$builtin$$Map$get$132$(self, key);
}
function moonbitlang$core$builtin$$Map$op_get$130$(self, key) {
  return moonbitlang$core$builtin$$Map$get$130$(self, key);
}
function moonbitlang$core$builtin$$Map$op_get$131$(self, key) {
  return moonbitlang$core$builtin$$Map$get$131$(self, key);
}
function moonbitlang$core$builtin$$Map$op_get$135$(self, key) {
  return moonbitlang$core$builtin$$Map$get$135$(self, key);
}
function moonbitlang$core$builtin$$Map$op_get$137$(self, key) {
  return moonbitlang$core$builtin$$Map$get$137$(self, key);
}
function moonbitlang$core$builtin$$Map$get_or_init$130$(self, key, default_) {
  const _bind = moonbitlang$core$builtin$$Map$get$130$(self, key);
  if (_bind === undefined) {
    const v = default_();
    moonbitlang$core$builtin$$Map$set$130$(self, key, v);
    return v;
  } else {
    const _Some = _bind;
    const _v = _Some;
    return _v;
  }
}
function moonbitlang$core$builtin$$Map$get_or_init$136$(self, key, default_) {
  const _bind = moonbitlang$core$builtin$$Map$get$136$(self, key);
  if (_bind === undefined) {
    const v = default_();
    moonbitlang$core$builtin$$Map$set$136$(self, key, v);
    return v;
  } else {
    const _Some = _bind;
    const _v = _Some;
    return _v;
  }
}
function moonbitlang$core$builtin$$Map$contains$132$(self, key) {
  const _bind = moonbitlang$core$builtin$$Map$get$132$(self, key);
  return !(_bind === undefined);
}
function moonbitlang$core$builtin$$Map$contains$130$(self, key) {
  const _bind = moonbitlang$core$builtin$$Map$get$130$(self, key);
  return !(_bind === undefined);
}
function moonbitlang$core$option$$Option$unwrap$24$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$15$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$25$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$26$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$77$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$78$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$79$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$62$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$23$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$112$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$151$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$10$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$152$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$153$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$154$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$52$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$96$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$155$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$156$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$95$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$157$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$103$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$158$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$159$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$builtin$$Map$is_empty$93$(self) {
  return self.size === 0;
}
function moonbitlang$core$builtin$$Map$is_empty$130$(self) {
  return self.size === 0;
}
function moonbitlang$core$builtin$$Iter$new$160$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$112$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$142$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$52$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$47$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$10$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$90$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$39$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$23$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$40$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$41$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$161$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$17$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$51$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$116$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$103$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$162$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$156$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$11$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter$new$163$(f) {
  return f;
}
function moonbitlang$core$builtin$$Map$iter$130$(self) {
  return moonbitlang$core$builtin$$Iter$new$142$((yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _idx = _x.idx;
        if (moonbitlang$core$builtin$$Eq$op_equal$30$(yield_({ _0: _key, _1: _value }), 0)) {
          return 0;
        }
        const _tmp$2 = self.list;
        $bound_check(_tmp$2, _idx);
        _tmp = _tmp$2[_idx].next;
        continue;
      }
    }
  });
}
function moonbitlang$core$builtin$$Iter2$new$66$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter2$new$67$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter2$new$69$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter2$new$93$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter2$new$85$(f) {
  return f;
}
function moonbitlang$core$builtin$$Iter2$new$164$(f) {
  return f;
}
function moonbitlang$core$builtin$$Map$iter2$93$(self) {
  return moonbitlang$core$builtin$$Iter2$new$93$((yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _idx = _x.idx;
        if (moonbitlang$core$builtin$$Eq$op_equal$30$(yield_(_key, _value), 0)) {
          return 0;
        } else {
          const _tmp$2 = self.list;
          $bound_check(_tmp$2, _idx);
          _tmp = _tmp$2[_idx].next;
          continue;
        }
      }
    }
  });
}
function moonbitlang$core$builtin$$Map$keys$129$(self) {
  return moonbitlang$core$builtin$$Iter$new$10$((yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _idx = _x.idx;
        const _bind = yield_(_key);
        if (_bind === 0) {
          return 0;
        } else {
          const _tmp$2 = self.list;
          $bound_check(_tmp$2, _idx);
          _tmp = _tmp$2[_idx].next;
          continue;
        }
      }
    }
  });
}
function moonbitlang$core$builtin$$Map$values$130$(self) {
  return moonbitlang$core$builtin$$Iter$new$156$((yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _value = _x.value;
        const _idx = _x.idx;
        const _bind = yield_(_value);
        if (_bind === 0) {
          return 0;
        } else {
          const _tmp$2 = self.list;
          $bound_check(_tmp$2, _idx);
          _tmp = _tmp$2[_idx].next;
          continue;
        }
      }
    }
  });
}
function moonbitlang$core$builtin$$Map$from_iter$130$(iter) {
  const m = moonbitlang$core$builtin$$Map$from_array$130$([]);
  iter((e) => {
    moonbitlang$core$builtin$$Map$set$130$(m, e._0, e._1);
    return 1;
  });
  return m;
}
function moonbitlang$core$array$$ArrayView$length$39$(self) {
  return self.len;
}
function moonbitlang$core$array$$ArrayView$length$40$(self) {
  return self.len;
}
function moonbitlang$core$array$$ArrayView$length$99$(self) {
  return self.len;
}
function moonbitlang$core$array$$ArrayView$length$11$(self) {
  return self.len;
}
function moonbitlang$core$array$$ArrayView$op_get$39$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$builtin$$abort$39$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$10$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$10$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$op_get$40$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$builtin$$abort$40$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$10$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$10$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$op_get$99$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$builtin$$abort$99$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$10$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$10$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$swap$39$(self, i, j) {
  if (i >= 0 && (i < self.len && (j >= 0 && j < self.len))) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + i | 0;
    $bound_check(_tmp, _tmp$2);
    const temp = _tmp[_tmp$2];
    const _tmp$3 = self.buf;
    const _tmp$4 = self.start + i | 0;
    const _tmp$5 = self.buf;
    const _tmp$6 = self.start + j | 0;
    $bound_check(_tmp$5, _tmp$6);
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4] = _tmp$5[_tmp$6];
    const _tmp$7 = self.buf;
    const _tmp$8 = self.start + j | 0;
    $bound_check(_tmp$7, _tmp$8);
    _tmp$7[_tmp$8] = temp;
    return;
  } else {
    moonbitlang$core$builtin$$abort$9$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$10$(self.len)} but the index is (${moonbitlang$core$builtin$$Show$to_string$10$(i)}, ${moonbitlang$core$builtin$$Show$to_string$10$(j)})`);
    return;
  }
}
function moonbitlang$core$array$$ArrayView$swap$40$(self, i, j) {
  if (i >= 0 && (i < self.len && (j >= 0 && j < self.len))) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + i | 0;
    $bound_check(_tmp, _tmp$2);
    const temp = _tmp[_tmp$2];
    const _tmp$3 = self.buf;
    const _tmp$4 = self.start + i | 0;
    const _tmp$5 = self.buf;
    const _tmp$6 = self.start + j | 0;
    $bound_check(_tmp$5, _tmp$6);
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4] = _tmp$5[_tmp$6];
    const _tmp$7 = self.buf;
    const _tmp$8 = self.start + j | 0;
    $bound_check(_tmp$7, _tmp$8);
    _tmp$7[_tmp$8] = temp;
    return;
  } else {
    moonbitlang$core$builtin$$abort$9$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$10$(self.len)} but the index is (${moonbitlang$core$builtin$$Show$to_string$10$(i)}, ${moonbitlang$core$builtin$$Show$to_string$10$(j)})`);
    return;
  }
}
function moonbitlang$core$array$$Array$op_as_view$11$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$builtin$$abort$102$("View index out of bounds");
}
function moonbitlang$core$array$$Array$op_as_view$99$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$builtin$$abort$101$("View index out of bounds");
}
function moonbitlang$core$array$$Array$op_as_view$76$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$builtin$$abort$100$("View index out of bounds");
}
function moonbitlang$core$array$$ArrayView$op_as_view$39$(self, start, end) {
  const len = moonbitlang$core$array$$ArrayView$length$39$(self);
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self.buf, start: self.start + start$2 | 0, len: end$2 - start$2 | 0 } : moonbitlang$core$builtin$$abort$97$("View index out of bounds");
}
function moonbitlang$core$array$$ArrayView$op_as_view$40$(self, start, end) {
  const len = moonbitlang$core$array$$ArrayView$length$40$(self);
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self.buf, start: self.start + start$2 | 0, len: end$2 - start$2 | 0 } : moonbitlang$core$builtin$$abort$98$("View index out of bounds");
}
function moonbitlang$core$array$$Array$new$17$(capacity) {
  return [];
}
function moonbitlang$core$array$$Array$push$53$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$54$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$55$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$56$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$59$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$58$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$57$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$80$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$165$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$115$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$71$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$166$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$167$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$10$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$168$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$116$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$169$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$42$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$153$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$13$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$23$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$11$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$99$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$52$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$17$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$170$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$45$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$123$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$171$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$122$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$172$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$120$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$41$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$156$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$157$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$173$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$103$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$174$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$175$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$40$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$96$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$95$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$unsafe_pop$80$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$99$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$157$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$103$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$remove$103$(self, index) {
  if (index >= 0 && index < self.length) {
    $bound_check(self, index);
    const value = self[index];
    moonbitlang$core$builtin$$JSArray$splice(self, index, 1);
    return value;
  } else {
    return moonbitlang$core$builtin$$abort$103$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$10$(self.length)} but the index is ${moonbitlang$core$builtin$$Show$to_string$10$(index)}`);
  }
}
function moonbitlang$core$builtin$$Hasher$new(seed) {
  return { acc: (seed >>> 0) + (374761393 >>> 0) | 0 };
}
function moonbitlang$core$builtin$$Hasher$new$46$seed$46$default() {
  return 0;
}
function moonbitlang$core$builtin$$Hasher$consume4(self, input) {
  self.acc = Math.imul(moonbitlang$core$builtin$$rotl((self.acc >>> 0) + ((Math.imul(input, -1028477379) | 0) >>> 0) | 0, 17), 668265263) | 0;
}
function moonbitlang$core$builtin$$Hasher$combine_uint(self, value) {
  self.acc = (self.acc >>> 0) + (4 >>> 0) | 0;
  moonbitlang$core$builtin$$Hasher$consume4(self, value);
}
function moonbitlang$core$builtin$$Hasher$combine_int(self, value) {
  moonbitlang$core$builtin$$Hasher$combine_uint(self, value);
}
function moonbitlang$core$builtin$$Hasher$combine_string(self, value) {
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < value.length) {
      $bound_check(value, i);
      moonbitlang$core$builtin$$Hasher$combine_uint(self, moonbitlang$core$char$$Char$to_uint(value.charCodeAt(i)));
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$builtin$$Hasher$avalanche(self) {
  let acc = self.acc;
  acc = acc ^ (acc >>> 15 | 0);
  acc = Math.imul(acc, -2048144777) | 0;
  acc = acc ^ (acc >>> 13 | 0);
  acc = Math.imul(acc, -1028477379) | 0;
  acc = acc ^ (acc >>> 16 | 0);
  return acc;
}
function moonbitlang$core$builtin$$Hasher$finalize(self) {
  return moonbitlang$core$builtin$$Hasher$avalanche(self);
}
function moonbitlang$core$builtin$$Hash$hash_combine$11$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_string(hasher, self);
}
function moonbitlang$core$builtin$$Hash$hash$10$(self) {
  const self$2 = self;
  let x = self$2 ^ (self$2 >>> 17 | 0);
  x = Math.imul(x, -312814405) | 0;
  x = x ^ (x >>> 11 | 0);
  x = Math.imul(x, -1404298415) | 0;
  x = x ^ (x >>> 15 | 0);
  x = Math.imul(x, 830770091) | 0;
  x = x ^ (x >>> 14 | 0);
  return x;
}
function moonbitlang$core$builtin$$Hash$hash_combine$10$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_int(hasher, self);
}
function moonbitlang$core$int$$Int$to_string(self, radix) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$int$$Int$output_size_hint(radix));
  moonbitlang$core$int$$Int$output(self, { self: buf, method_0: moonbitlang$core$builtin$$Logger$write_string$18$, method_1: moonbitlang$core$builtin$$Logger$write_substring$18$, method_2: moonbitlang$core$builtin$$Logger$write_sub_string$111$, method_3: moonbitlang$core$builtin$$Logger$write_char$18$ }, radix);
  return moonbitlang$core$builtin$$StringBuilder$to_string(buf);
}
function moonbitlang$core$builtin$$Show$to_string$10$(self) {
  return moonbitlang$core$int$$Int$to_string(self, 10);
}
function moonbitlang$core$builtin$$ToJson$to_json$10$(self) {
  return new $64$moonbitlang$47$core$47$builtin$46$Json$Number(self + 0);
}
function moonbitlang$core$builtin$$ToJson$to_json$11$(self) {
  return new $64$moonbitlang$47$core$47$builtin$46$Json$String(self);
}
function moonbitlang$core$array$$Array$map$176$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$177$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$178$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$179$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$180$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$181$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$61$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$182$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$183$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$184$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$44$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$185$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$186$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$187$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$188$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$189$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$190$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$191$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$map$192$(self, f) {
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$builtin$$ToJson$to_json$193$(self) {
  return new $64$moonbitlang$47$core$47$builtin$46$Json$Array(moonbitlang$core$array$$Array$map$181$(self, moonbitlang$core$builtin$$ToJson$to_json$175$));
}
function moonbitlang$core$array$$Array$make$10$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$make$194$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$make$117$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$builtin$$Show$output$10$(self, logger) {
  moonbitlang$core$int$$Int$output(self, logger, moonbitlang$core$int$$Int$output$46$radix$46$default());
}
function moonbitlang$core$builtin$$output$46$flush_segment$195$(_env, i) {
  const self = _env._2;
  const segment_start = _env._1;
  const logger = _env._0;
  if (i > segment_start.val) {
    logger.method_1(logger.self, self, segment_start.val, i - segment_start.val | 0);
  }
  segment_start.val = i + 1 | 0;
}
function moonbitlang$core$builtin$$output$46$to_hex_digit$196$(i) {
  return i < 10 ? 48 + i | 0 : 97 + (i - 10 | 0) | 0;
}
function moonbitlang$core$builtin$$Show$output$11$(self, logger) {
  logger.method_3(logger.self, 34);
  const segment_start = { val: 0 };
  const _env = { _0: logger, _1: segment_start, _2: self };
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < self.length) {
      $bound_check(self, i);
      const c = self.charCodeAt(i);
      _L: {
        _L$2: {
          switch (c) {
            case 34: {
              break _L$2;
            }
            case 92: {
              break _L$2;
            }
            case 10: {
              moonbitlang$core$builtin$$output$46$flush_segment$195$(_env, i);
              logger.method_0(logger.self, "\\n");
              break;
            }
            case 13: {
              moonbitlang$core$builtin$$output$46$flush_segment$195$(_env, i);
              logger.method_0(logger.self, "\\r");
              break;
            }
            case 8: {
              moonbitlang$core$builtin$$output$46$flush_segment$195$(_env, i);
              logger.method_0(logger.self, "\\b");
              break;
            }
            case 9: {
              moonbitlang$core$builtin$$output$46$flush_segment$195$(_env, i);
              logger.method_0(logger.self, "\\t");
              break;
            }
            default: {
              const code = c;
              if (code < 32) {
                moonbitlang$core$builtin$$output$46$flush_segment$195$(_env, i);
                logger.method_3(logger.self, 92);
                logger.method_3(logger.self, 120);
                logger.method_3(logger.self, moonbitlang$core$builtin$$output$46$to_hex_digit$196$(code / 16 | 0));
                logger.method_3(logger.self, moonbitlang$core$builtin$$output$46$to_hex_digit$196$(code % 16 | 0));
              }
            }
          }
          break _L;
        }
        moonbitlang$core$builtin$$output$46$flush_segment$195$(_env, i);
        logger.method_3(logger.self, 92);
        logger.method_3(logger.self, c);
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$output$46$flush_segment$195$(_env, self.length);
  logger.method_3(logger.self, 34);
}
function moonbitlang$core$builtin$$Show$to_string$11$(self) {
  return self;
}
function moonbitlang$core$array$$Array$iter$112$(self) {
  return moonbitlang$core$builtin$$Iter$new$112$((yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  });
}
function moonbitlang$core$array$$Array$iter$156$(self) {
  return moonbitlang$core$builtin$$Iter$new$156$((yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  });
}
function moonbitlang$core$array$$Array$iter$116$(self) {
  return moonbitlang$core$builtin$$Iter$new$116$((yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  });
}
function moonbitlang$core$array$$Array$iter$41$(self) {
  return moonbitlang$core$builtin$$Iter$new$41$((yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  });
}
function moonbitlang$core$array$$Array$iter$40$(self) {
  return moonbitlang$core$builtin$$Iter$new$40$((yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  });
}
function moonbitlang$core$array$$Array$iter$23$(self) {
  return moonbitlang$core$builtin$$Iter$new$23$((yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  });
}
function moonbitlang$core$array$$Array$iter$39$(self) {
  return moonbitlang$core$builtin$$Iter$new$39$((yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  });
}
function moonbitlang$core$array$$Array$iter$103$(self) {
  return moonbitlang$core$builtin$$Iter$new$103$((yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  });
}
function moonbitlang$core$builtin$$Hash$hash$88$(self) {
  const self$2 = moonbitlang$core$builtin$$Hasher$new(moonbitlang$core$builtin$$Hasher$new$46$seed$46$default());
  moonbitlang$core$builtin$$Hasher$combine$87$(self$2, self);
  return moonbitlang$core$builtin$$Hasher$finalize(self$2);
}
function moonbitlang$core$builtin$$Hash$hash$89$(self) {
  const self$2 = moonbitlang$core$builtin$$Hasher$new(moonbitlang$core$builtin$$Hasher$new$46$seed$46$default());
  moonbitlang$core$builtin$$Hasher$combine$45$(self$2, self);
  return moonbitlang$core$builtin$$Hasher$finalize(self$2);
}
function moonbitlang$core$builtin$$Hash$hash$197$(self) {
  const self$2 = moonbitlang$core$builtin$$Hasher$new(moonbitlang$core$builtin$$Hasher$new$46$seed$46$default());
  moonbitlang$core$builtin$$Hasher$combine$76$(self$2, self);
  return moonbitlang$core$builtin$$Hasher$finalize(self$2);
}
function moonbitlang$core$builtin$$Hash$hash$198$(self) {
  const self$2 = moonbitlang$core$builtin$$Hasher$new(moonbitlang$core$builtin$$Hasher$new$46$seed$46$default());
  moonbitlang$core$builtin$$Hasher$combine$126$(self$2, self);
  return moonbitlang$core$builtin$$Hasher$finalize(self$2);
}
function moonbitlang$core$builtin$$Hash$hash$150$(self) {
  const self$2 = moonbitlang$core$builtin$$Hasher$new(moonbitlang$core$builtin$$Hasher$new$46$seed$46$default());
  moonbitlang$core$builtin$$Hasher$combine$11$(self$2, self);
  return moonbitlang$core$builtin$$Hasher$finalize(self$2);
}
function moonbitlang$core$builtin$$Logger$write_sub_string$199$(self, value, start, len) {
  moonbitlang$core$builtin$$Logger$write_substring$200$(self, value, start, len);
}
function moonbitlang$core$builtin$$Logger$write_sub_string$111$(self, value, start, len) {
  moonbitlang$core$builtin$$Logger$write_substring$18$(self, value, start, len);
}
function moonbitlang$core$builtin$$Show$to_string$0$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default());
  moonbitlang$core$builtin$$Show$output$201$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$18$, method_1: moonbitlang$core$builtin$$Logger$write_substring$18$, method_2: moonbitlang$core$builtin$$Logger$write_sub_string$111$, method_3: moonbitlang$core$builtin$$Logger$write_char$18$ });
  return moonbitlang$core$builtin$$StringBuilder$to_string(logger);
}
function moonbitlang$core$builtin$$Show$to_string$1$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default());
  moonbitlang$core$builtin$$Show$output$12$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$18$, method_1: moonbitlang$core$builtin$$Logger$write_substring$18$, method_2: moonbitlang$core$builtin$$Logger$write_sub_string$111$, method_3: moonbitlang$core$builtin$$Logger$write_char$18$ });
  return moonbitlang$core$builtin$$StringBuilder$to_string(logger);
}
function moonbitlang$core$builtin$$Show$to_string$202$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default());
  moonbitlang$core$builtin$$Show$output$160$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$18$, method_1: moonbitlang$core$builtin$$Logger$write_substring$18$, method_2: moonbitlang$core$builtin$$Logger$write_sub_string$111$, method_3: moonbitlang$core$builtin$$Logger$write_char$18$ });
  return moonbitlang$core$builtin$$StringBuilder$to_string(logger);
}
function moonbitlang$core$builtin$$Show$to_string$203$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default());
  moonbitlang$core$builtin$$Show$output$23$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$18$, method_1: moonbitlang$core$builtin$$Logger$write_substring$18$, method_2: moonbitlang$core$builtin$$Logger$write_sub_string$111$, method_3: moonbitlang$core$builtin$$Logger$write_char$18$ });
  return moonbitlang$core$builtin$$StringBuilder$to_string(logger);
}
function moonbitlang$core$builtin$$Show$to_string$204$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default());
  moonbitlang$core$builtin$$Show$output$166$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$18$, method_1: moonbitlang$core$builtin$$Logger$write_substring$18$, method_2: moonbitlang$core$builtin$$Logger$write_sub_string$111$, method_3: moonbitlang$core$builtin$$Logger$write_char$18$ });
  return moonbitlang$core$builtin$$StringBuilder$to_string(logger);
}
function moonbitlang$core$builtin$$Show$to_string$205$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default());
  moonbitlang$core$builtin$$Show$output$206$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$18$, method_1: moonbitlang$core$builtin$$Logger$write_substring$18$, method_2: moonbitlang$core$builtin$$Logger$write_sub_string$111$, method_3: moonbitlang$core$builtin$$Logger$write_char$18$ });
  return moonbitlang$core$builtin$$StringBuilder$to_string(logger);
}
function moonbitlang$core$builtin$$MyInt64$op_mul(self, other) {
  const _ahi = self.hi;
  const _alo = self.lo;
  const _bhi = other.hi;
  const _blo = other.lo;
  const ahi = _ahi;
  const alo = _alo;
  const bhi = _bhi;
  const blo = _blo;
  const a48 = ahi >>> 16 | 0;
  const a32 = ahi & 65535;
  const a16 = alo >>> 16 | 0;
  const a00 = alo & 65535;
  const b48 = bhi >>> 16 | 0;
  const b32 = bhi & 65535;
  const b16 = blo >>> 16 | 0;
  const b00 = blo & 65535;
  const c00 = Math.imul(a00, b00) | 0;
  const c16 = c00 >>> 16 | 0;
  const c00$2 = c00 & 65535;
  const c16$2 = (c16 >>> 0) + ((Math.imul(a16, b00) | 0) >>> 0) | 0;
  const c32 = c16$2 >>> 16 | 0;
  const c16$3 = c16$2 & 65535;
  const c16$4 = (c16$3 >>> 0) + ((Math.imul(a00, b16) | 0) >>> 0) | 0;
  const c32$2 = (c32 >>> 0) + ((c16$4 >>> 16 | 0) >>> 0) | 0;
  const c16$5 = c16$4 & 65535;
  const c32$3 = (c32$2 >>> 0) + ((Math.imul(a32, b00) | 0) >>> 0) | 0;
  const c48 = c32$3 >>> 16 | 0;
  const c32$4 = c32$3 & 65535;
  const c32$5 = (c32$4 >>> 0) + ((Math.imul(a16, b16) | 0) >>> 0) | 0;
  const c48$2 = (c48 >>> 0) + ((c32$5 >>> 16 | 0) >>> 0) | 0;
  const c32$6 = c32$5 & 65535;
  const c32$7 = (c32$6 >>> 0) + ((Math.imul(a00, b32) | 0) >>> 0) | 0;
  const c48$3 = (c48$2 >>> 0) + ((c32$7 >>> 16 | 0) >>> 0) | 0;
  const c32$8 = c32$7 & 65535;
  const c48$4 = (((((((c48$3 >>> 0) + ((Math.imul(a48, b00) | 0) >>> 0) | 0) >>> 0) + ((Math.imul(a32, b16) | 0) >>> 0) | 0) >>> 0) + ((Math.imul(a16, b32) | 0) >>> 0) | 0) >>> 0) + ((Math.imul(a00, b48) | 0) >>> 0) | 0;
  const c48$5 = c48$4 & 65535;
  return { hi: c48$5 << 16 | c32$8, lo: c16$5 << 16 | c00$2 };
}
function moonbitlang$core$int64$$Int64$op_mul(self, other) {
  return moonbitlang$core$builtin$$MyInt64$op_mul(self, other);
}
function moonbitlang$core$builtin$$Compare$compare$8$(self, other) {
  return moonbitlang$core$builtin$$MyInt64$compare(self, other);
}
function moonbitlang$core$builtin$$Iter2$run$66$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter2$run$67$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter2$run$69$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Eq$op_equal$104$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$70$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$105$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$31$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$110$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$33$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$109$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$32$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$108$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$75$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$107$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$74$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$106$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$72$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$65$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return _x === _y;
    }
  }
}
function moonbitlang$core$array$$Array$get$76$(self, index) {
  const len = self.length;
  return index >= 0 && index < len ? self[index] : undefined;
}
function moonbitlang$core$array$$Array$op_set$41$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$10$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$194$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$117$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$116$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$42$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$207$(self, other) {
  const self_len = self.length;
  const other_len = other.length;
  if (self_len === other_len) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < self_len) {
        if (self[i] === other[i]) {
        } else {
          return false;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return true;
      }
    }
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$208$(self, other) {
  const self_len = self.length;
  const other_len = other.length;
  if (self_len === other_len) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < self_len) {
        if (moonbitlang$core$builtin$$Eq$op_equal$45$(self[i], other[i])) {
        } else {
          return false;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return true;
      }
    }
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$209$(self, other) {
  const self_len = self.length;
  const other_len = other.length;
  if (self_len === other_len) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < self_len) {
        if (moonbitlang$core$builtin$$Eq$op_equal$23$(self[i], other[i])) {
        } else {
          return false;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return true;
      }
    }
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Compare$compare$209$(self, other) {
  const len_self = self.length;
  const len_other = other.length;
  const cmp = $compare_int(len_self, len_other);
  if (cmp === 0) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len_self) {
        const cmp$2 = moonbitlang$core$builtin$$Compare$compare$23$(self[i], other[i]);
        if (cmp$2 === 0) {
        } else {
          return cmp$2;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return 0;
      }
    }
  } else {
    return cmp;
  }
}
function moonbitlang$core$array$$Array$mapi$210$(self, f) {
  if (self.length === 0) {
    return [];
  }
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(_i, v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$mapi$211$(self, f) {
  if (self.length === 0) {
    return [];
  }
  const arr = new Array(self.length);
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      arr[_i] = f(_i, v);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$is_empty$80$(self) {
  return self.length === 0;
}
function moonbitlang$core$array$$Array$is_empty$94$(self) {
  return self.length === 0;
}
function moonbitlang$core$array$$Array$is_empty$144$(self) {
  return self.length === 0;
}
function moonbitlang$core$array$$Array$is_empty$157$(self) {
  return self.length === 0;
}
function moonbitlang$core$array$$Array$is_empty$103$(self) {
  return self.length === 0;
}
function moonbitlang$core$array$$Array$contains$11$(self, value) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      if (v === value) {
        return true;
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return false;
    }
  }
}
function moonbitlang$core$array$$Array$contains$23$(self, value) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      if (moonbitlang$core$builtin$$Eq$op_equal$23$(v, value)) {
        return true;
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return false;
    }
  }
}
function moonbitlang$core$array$$Array$contains$40$(self, value) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      if (moonbitlang$core$builtin$$Eq$op_equal$40$(v, value)) {
        return true;
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return false;
    }
  }
}
function moonbitlang$core$array$$Array$search_by$103$(self, f) {
  const _len = self.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const v = self[_i];
      if (f(v)) {
        return _i;
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return undefined;
    }
  }
}
function moonbitlang$core$array$$Array$fold$212$(self, init, f) {
  let _tmp = 0;
  let _tmp$2 = init;
  while (true) {
    const i = _tmp;
    const acc = _tmp$2;
    if (i < self.length) {
      const _tmp$3 = i + 1 | 0;
      const _tmp$4 = f(acc, moonbitlang$core$array$$Array$op_get$40$(self, i));
      _tmp = _tmp$3;
      _tmp$2 = _tmp$4;
      continue;
    } else {
      return acc;
    }
  }
}
function moonbitlang$core$array$$Array$fold$213$(self, init, f) {
  let _tmp = 0;
  let _tmp$2 = init;
  while (true) {
    const i = _tmp;
    const acc = _tmp$2;
    if (i < self.length) {
      const _tmp$3 = i + 1 | 0;
      const _tmp$4 = f(acc, moonbitlang$core$array$$Array$op_get$121$(self, i));
      _tmp = _tmp$3;
      _tmp$2 = _tmp$4;
      continue;
    } else {
      return acc;
    }
  }
}
function moonbitlang$core$array$$Array$rev_iter$116$(self) {
  return moonbitlang$core$builtin$$Iter$new$116$((yield_) => {
    let _tmp = self.length - 1 | 0;
    while (true) {
      const i = _tmp;
      if (i >= 0) {
        const _bind = yield_(self[i]);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = i - 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  });
}
function moonbitlang$core$builtin$$Iter$run$23$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$run$11$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$run$47$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$run$41$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$run$116$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$any$116$(self, f) {
  return moonbitlang$core$builtin$$op_notequal$30$(moonbitlang$core$builtin$$Iter$run$116$(self, (k) => f(k) ? 0 : 1), 1);
}
function moonbitlang$core$builtin$$Iter$all$116$(self, f) {
  return moonbitlang$core$builtin$$Eq$op_equal$30$(moonbitlang$core$builtin$$Iter$run$116$(self, (k) => !f(k) ? 0 : 1), 1);
}
function moonbitlang$core$builtin$$Iter$all$41$(self, f) {
  return moonbitlang$core$builtin$$Eq$op_equal$30$(moonbitlang$core$builtin$$Iter$run$41$(self, (k) => !f(k) ? 0 : 1), 1);
}
function moonbitlang$core$builtin$$Iter$find_first$103$(self, f) {
  const _foreach_result = { val: $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$7$ };
  self((a) => {
    if (f(a)) {
      _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$7$(a);
      return 0;
    }
    return 1;
  });
  const _tmp = _foreach_result.val;
  switch (_tmp.$tag) {
    case 0: {
      return undefined;
    }
    case 1: {
      const _break = _tmp;
      return _break._0;
    }
    case 2: {
      const _return = _tmp;
      return _return._0;
    }
    case 3: {
      return $panic();
    }
    default: {
      return $panic();
    }
  }
}
function moonbitlang$core$builtin$$Iter$to_array$10$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$10$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$11$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$11$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$156$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$156$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$join(self, sep) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default());
  const first = { val: true };
  self((str) => {
    if (first.val) {
      first.val = false;
    } else {
      moonbitlang$core$builtin$$Logger$write_string$18$(buf, sep);
    }
    moonbitlang$core$builtin$$Logger$write_string$18$(buf, str);
    return 1;
  });
  return moonbitlang$core$builtin$$StringBuilder$to_string(buf);
}
function moonbitlang$core$builtin$$Iter$contains$96$(self, value) {
  const _foreach_result = { val: $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$8$ };
  self((v) => {
    if (moonbitlang$core$builtin$$Eq$op_equal$96$(v, value)) {
      _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$8$(true);
      return 0;
    }
    return 1;
  });
  const _tmp = _foreach_result.val;
  switch (_tmp.$tag) {
    case 0: {
      return false;
    }
    case 1: {
      const _break = _tmp;
      return _break._0;
    }
    case 2: {
      const _return = _tmp;
      return _return._0;
    }
    case 3: {
      return $panic();
    }
    default: {
      return $panic();
    }
  }
}
function moonbitlang$core$builtin$$Show$output$206$(self, logger) {
  logger.method_0(logger.self, Error$$to_string(self));
}
function moonbitlang$x$internal$ffi$$mbt_string_to_utf8_bytes(str, is_filename) {
  const res = [];
  const len = str.length;
  let i = 0;
  while (true) {
    if (i < len) {
      const _tmp = i;
      $bound_check(str, _tmp);
      let c = str.charCodeAt(_tmp);
      if (55296 <= c && c <= 56319) {
        c = c - 55296 | 0;
        i = i + 1 | 0;
        const _tmp$2 = i;
        $bound_check(str, _tmp$2);
        const l = str.charCodeAt(_tmp$2) - 56320 | 0;
        c = ((c << 10) + l | 0) + 65536 | 0;
      }
      if (c < 128) {
        moonbitlang$core$array$$Array$push$13$(res, c & 255);
      } else {
        if (c < 2048) {
          moonbitlang$core$array$$Array$push$13$(res, (192 + (c >> 6) | 0) & 255);
          moonbitlang$core$array$$Array$push$13$(res, (128 + (c & 63) | 0) & 255);
        } else {
          if (c < 65536) {
            moonbitlang$core$array$$Array$push$13$(res, (224 + (c >> 12) | 0) & 255);
            moonbitlang$core$array$$Array$push$13$(res, (128 + (c >> 6 & 63) | 0) & 255);
            moonbitlang$core$array$$Array$push$13$(res, (128 + (c & 63) | 0) & 255);
          } else {
            moonbitlang$core$array$$Array$push$13$(res, (240 + (c >> 18) | 0) & 255);
            moonbitlang$core$array$$Array$push$13$(res, (128 + (c >> 12 & 63) | 0) & 255);
            moonbitlang$core$array$$Array$push$13$(res, (128 + (c >> 6 & 63) | 0) & 255);
            moonbitlang$core$array$$Array$push$13$(res, (128 + (c & 63) | 0) & 255);
          }
        }
      }
      i = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (is_filename) {
    moonbitlang$core$array$$Array$push$13$(res, 0 & 255);
  }
  return moonbitlang$core$bytes$$Bytes$from_array(res);
}
function moonbitlang$x$internal$ffi$$utf8_bytes_to_mbt_string(bytes) {
  const res = [];
  const len = bytes.length;
  let i = 0;
  while (true) {
    if (i < len) {
      const _tmp = i;
      $bound_check(bytes, _tmp);
      let c = bytes[_tmp];
      if (c < 128) {
        moonbitlang$core$array$$Array$push$17$(res, c);
        i = i + 1 | 0;
      } else {
        if (c < 224) {
          if ((i + 1 | 0) >= len) {
            break;
          }
          const _tmp$2 = (c & 31) << 6;
          const _tmp$3 = i + 1 | 0;
          $bound_check(bytes, _tmp$3);
          c = _tmp$2 | bytes[_tmp$3] & 63;
          moonbitlang$core$array$$Array$push$17$(res, c);
          i = i + 2 | 0;
        } else {
          if (c < 240) {
            if ((i + 2 | 0) >= len) {
              break;
            }
            const _tmp$2 = (c & 15) << 12;
            const _tmp$3 = i + 1 | 0;
            $bound_check(bytes, _tmp$3);
            const _tmp$4 = _tmp$2 | (bytes[_tmp$3] & 63) << 6;
            const _tmp$5 = i + 2 | 0;
            $bound_check(bytes, _tmp$5);
            c = _tmp$4 | bytes[_tmp$5] & 63;
            moonbitlang$core$array$$Array$push$17$(res, c);
            i = i + 3 | 0;
          } else {
            if ((i + 3 | 0) >= len) {
              break;
            }
            const _tmp$2 = (c & 7) << 18;
            const _tmp$3 = i + 1 | 0;
            $bound_check(bytes, _tmp$3);
            const _tmp$4 = _tmp$2 | (bytes[_tmp$3] & 63) << 12;
            const _tmp$5 = i + 2 | 0;
            $bound_check(bytes, _tmp$5);
            const _tmp$6 = _tmp$4 | (bytes[_tmp$5] & 63) << 6;
            const _tmp$7 = i + 3 | 0;
            $bound_check(bytes, _tmp$7);
            c = _tmp$6 | bytes[_tmp$7] & 63;
            c = c - 65536 | 0;
            moonbitlang$core$array$$Array$push$17$(res, (c >> 10) + 55296 | 0);
            moonbitlang$core$array$$Array$push$17$(res, (c & 1023) + 56320 | 0);
            i = i + 4 | 0;
          }
        }
      }
      continue;
    } else {
      break;
    }
  }
  return moonbitlang$core$string$$String$from_array(res);
}
function moonbitlang$core$builtin$$Show$output$201$(_x_51, _x_52) {
  const _IOError = _x_51;
  const _$42$err_payload_53 = _IOError._0;
  _x_52.method_0(_x_52.self, "IOError(");
  moonbitlang$core$builtin$$Logger$write_object$11$(_x_52, _$42$err_payload_53);
  _x_52.method_0(_x_52.self, ")");
}
function moonbitlang$x$fs$$read_file_to_bytes_internal(path) {
  const res = moonbitlang$x$fs$$read_file_ffi(path);
  if (res === -1) {
    return new Result$Err$9$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(moonbitlang$x$fs$$get_error_message_ffi()));
  }
  return new Result$Ok$10$(moonbitlang$x$fs$$get_file_content_ffi());
}
function moonbitlang$x$fs$$read_file_to_string_internal(path, encoding) {
  if (encoding === "utf8") {
    const _bind = moonbitlang$x$fs$$read_file_to_bytes_internal(path);
    let bytes;
    if (_bind.$tag === 1) {
      const _ok = _bind;
      bytes = _ok._0;
    } else {
      return _bind;
    }
    return new Result$Ok$12$(moonbitlang$x$internal$ffi$$utf8_bytes_to_mbt_string(bytes));
  } else {
    return new Result$Err$11$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(`Unsupported encoding: ${moonbitlang$core$builtin$$Show$to_string$11$(encoding)}, only utf8 is supported for now`));
  }
}
function moonbitlang$x$fs$$write_bytes_to_file_internal(path, content) {
  const res = moonbitlang$x$fs$$write_file_ffi(path, content);
  if (res === -1) {
    return new Result$Err$14$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(moonbitlang$x$fs$$get_error_message_ffi()));
  } else {
    return new Result$Ok$13$(undefined);
  }
}
function moonbitlang$x$fs$$write_string_to_file_internal(path, content, encoding) {
  if (encoding === "utf8") {
    const bytes = moonbitlang$x$internal$ffi$$mbt_string_to_utf8_bytes(content, false);
    return moonbitlang$x$fs$$write_bytes_to_file_internal(path, bytes);
  } else {
    return new Result$Err$14$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(`Unsupported encoding: ${moonbitlang$core$builtin$$Show$to_string$11$(encoding)}, only utf8 is supported for now`));
  }
}
function moonbitlang$x$fs$$read_file_to_string(path, encoding) {
  return moonbitlang$x$fs$$read_file_to_string_internal(path, encoding);
}
function moonbitlang$x$fs$$read_file_to_string$46$encoding$46$default() {
  return "utf8";
}
function moonbitlang$x$fs$$write_string_to_file(path, content, encoding) {
  return moonbitlang$x$fs$$write_string_to_file_internal(path, content, encoding);
}
function moonbitlang$x$fs$$write_string_to_file$46$encoding$46$default() {
  return "utf8";
}
function moonbitlang$x$sys$internal$ffi$$get_cli_args() {
  return moonbitlang$x$sys$internal$ffi$$get_cli_args_internal();
}
function moonbitlang$x$sys$$get_cli_args() {
  return moonbitlang$x$sys$internal$ffi$$get_cli_args();
}
function Yoorkin$trie$$T$lookup$214$(self, path) {
  const _bind = moonbitlang$core$string$$String$to_array(path);
  let _tmp = { buf: _bind, start: 0, len: _bind.length };
  let _tmp$2 = self;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param.len === 0) {
      return _param$2.value;
    } else {
      const _x = _param.buf[_param.start + 0 | 0];
      const _tmp$3 = _param.buf;
      const _tmp$4 = 1 + _param.start | 0;
      const _some = _param.len - 0 | 0;
      const _x$2 = { buf: _tmp$3, start: _tmp$4, len: _some - 1 | 0 };
      const _bind$2 = moonbitlang$core$immut$sorted_map$$T$op_get$49$(_param$2.forks, _x);
      if (_bind$2 === undefined) {
        return undefined;
      } else {
        const _Some = _bind$2;
        const _subtree = _Some;
        _tmp = _x$2;
        _tmp$2 = _subtree;
        continue;
      }
    }
  }
}
function Yoorkin$trie$$T$add$214$(self, path, value) {
  const _bind = moonbitlang$core$string$$String$to_array(path);
  return Yoorkin$trie$$add$46$aux$47$3700(value, { buf: _bind, start: 0, len: _bind.length }, self);
}
function Yoorkin$trie$$add$46$aux$47$3700(value, _param1, _param2) {
  if (_param1.len === 0) {
    return { value: value, forks: _param2.forks };
  } else {
    const _x = _param1.buf[_param1.start + 0 | 0];
    const _tmp = _param1.buf;
    const _tmp$2 = 1 + _param1.start | 0;
    const _some = _param1.len - 0 | 0;
    const _x$2 = { buf: _tmp, start: _tmp$2, len: _some - 1 | 0 };
    const subtree = moonbitlang$core$option$$Option$or$64$(moonbitlang$core$immut$sorted_map$$T$op_get$49$(_param2.forks, _x), { value: undefined, forks: moonbitlang$core$immut$sorted_map$$new$49$() });
    return { value: _param2.value, forks: moonbitlang$core$immut$sorted_map$$T$add$49$(_param2.forks, _x, Yoorkin$trie$$add$46$aux$47$3700(value, _x$2, subtree)) };
  }
}
function Yoorkin$trie$$empty$214$() {
  return { value: undefined, forks: moonbitlang$core$immut$sorted_map$$new$49$() };
}
function Yoorkin$ArgParser$$interpret(trie, xs, fallback) {
  const _bind = 0;
  const _bind$2 = xs.length;
  let _tmp = xs;
  let _tmp$2 = _bind;
  let _tmp$3 = _bind$2;
  _L: while (true) {
    const _param_buf = _tmp;
    const _param_start = _tmp$2;
    const _param_len = _tmp$3;
    if (_param_len === 0) {
      return;
    } else {
      const _x = _param_buf[_param_start + 0 | 0];
      const _bind$3 = 1 + _param_start | 0;
      const _some = _param_len - 0 | 0;
      const _bind$4 = _some - 1 | 0;
      const _bind$5 = Yoorkin$trie$$T$lookup$214$(trie, _x);
      if (_bind$5 === undefined) {
        fallback(_x);
        _tmp$2 = _bind$3;
        _tmp$3 = _bind$4;
        continue;
      } else {
        const _Some = _bind$5;
        const _spec = _Some;
        _L$2: {
          switch (_spec.$tag) {
            case 1: {
              const _String = _spec;
              const _f = _String._0;
              if (_bind$4 >= 1) {
                const _y = _param_buf[_bind$3 + 0 | 0];
                const _bind$6 = 1 + _bind$3 | 0;
                const _some$2 = _bind$4 - 0 | 0;
                const _bind$7 = _some$2 - 1 | 0;
                _f(_y);
                _tmp$2 = _bind$6;
                _tmp$3 = _bind$7;
                continue _L;
              } else {
                break _L$2;
              }
            }
            case 2: {
              const _Set_string = _spec;
              const _r = _Set_string._0;
              if (_bind$4 >= 1) {
                const _y = _param_buf[_bind$3 + 0 | 0];
                const _bind$6 = 1 + _bind$3 | 0;
                const _some$2 = _bind$4 - 0 | 0;
                const _bind$7 = _some$2 - 1 | 0;
                _r.val = _y;
                _tmp$2 = _bind$6;
                _tmp$3 = _bind$7;
                continue _L;
              } else {
                break _L$2;
              }
            }
            case 3: {
              const _Set = _spec;
              const _r$2 = _Set._0;
              _r$2.val = true;
              _tmp$2 = _bind$3;
              _tmp$3 = _bind$4;
              continue _L;
            }
            case 4: {
              const _Clear = _spec;
              const _r$3 = _Clear._0;
              _r$3.val = false;
              _tmp$2 = _bind$3;
              _tmp$3 = _bind$4;
              continue _L;
            }
            default: {
              const _Unit = _spec;
              const _f$2 = _Unit._0;
              _f$2();
              _tmp$2 = _bind$3;
              _tmp$3 = _bind$4;
              continue _L;
            }
          }
        }
        moonbitlang$core$builtin$$println$11$(`missing argument for ${moonbitlang$core$builtin$$Show$to_string$11$(_x)}`);
        return;
      }
    }
  }
}
function Yoorkin$ArgParser$$parse$46$aux$215$(_param1, _param2) {
  const _x = _param1._0;
  const _help_msg = _param1._1;
  const _a = _param2._0;
  const _b = _param2._1;
  const _spec = _param2._2;
  const _help = _param2._3;
  const trie = Yoorkin$trie$$T$add$214$(Yoorkin$trie$$T$add$214$(_x, _a, _spec), _b, _spec);
  const help_msg = `${_help_msg}  ${moonbitlang$core$builtin$$Show$to_string$11$(_a)}\t${moonbitlang$core$builtin$$Show$to_string$11$(_b)}\t${_help}\n`;
  return { _0: trie, _1: help_msg };
}
function Yoorkin$ArgParser$$parse(speclist, rest, usage_msg, argv) {
  const _bind = moonbitlang$core$array$$Array$fold$213$(speclist, { _0: Yoorkin$trie$$empty$214$(), _1: `${usage_msg}\n options:\n` }, Yoorkin$ArgParser$$parse$46$aux$215$);
  const _trie = _bind._0;
  const _help_msg = _bind._1;
  const help_spec = new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    moonbitlang$core$builtin$$println$11$(_help_msg);
  });
  const trie = Yoorkin$trie$$T$add$214$(Yoorkin$trie$$T$add$214$(_trie, "--help", help_spec), "-h", help_spec);
  Yoorkin$ArgParser$$interpret(trie, argv, rest);
}
function moonbitlang$core$builtin$$Eq$op_equal$76$(_x_119, _x_120) {
  if (_x_119.$tag === 0) {
    const _T = _x_119;
    const _$42$x0_121 = _T._0;
    if (_x_120.$tag === 0) {
      const _T$2 = _x_120;
      const _$42$y0_122 = _T$2._0;
      return moonbitlang$core$builtin$$Eq$op_equal$95$(_$42$x0_121, _$42$y0_122);
    } else {
      return false;
    }
  } else {
    const _NT = _x_119;
    const _$42$x0_123 = _NT._0;
    if (_x_120.$tag === 1) {
      const _NT$2 = _x_120;
      const _$42$y0_124 = _NT$2._0;
      return moonbitlang$core$builtin$$Eq$op_equal$96$(_$42$x0_123, _$42$y0_124);
    } else {
      return false;
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$76$(_x_107, _x_108) {
  if (_x_107.$tag === 0) {
    const _T = _x_107;
    const _$42$x0_109 = _T._0;
    if (_x_108.$tag === 0) {
      const _T$2 = _x_108;
      const _$42$y0_110 = _T$2._0;
      return moonbitlang$core$builtin$$Compare$compare$95$(_$42$x0_109, _$42$y0_110);
    } else {
      return -1;
    }
  } else {
    const _NT = _x_107;
    const _$42$x0_111 = _NT._0;
    if (_x_108.$tag === 0) {
      return 1;
    } else {
      const _NT$2 = _x_108;
      const _$42$y0_112 = _NT$2._0;
      return moonbitlang$core$builtin$$Compare$compare$96$(_$42$x0_111, _$42$y0_112);
    }
  }
}
function moonbitlang$core$builtin$$Hash$hash_combine$76$(_x_99, _x_100) {
  if (_x_99.$tag === 0) {
    const _T = _x_99;
    const _$42$arg_101 = _T._0;
    moonbitlang$core$builtin$$Hasher$combine_int(_x_100, 0);
    moonbitlang$core$builtin$$Hash$hash_combine$95$(_$42$arg_101, _x_100);
    return;
  } else {
    const _NT = _x_99;
    const _$42$arg_102 = _NT._0;
    moonbitlang$core$builtin$$Hasher$combine_int(_x_100, 1);
    moonbitlang$core$builtin$$Hash$hash_combine$96$(_$42$arg_102, _x_100);
    return;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$95$(self, other) {
  return self.num === other.num;
}
function moonbitlang$core$builtin$$Compare$compare$95$(self, other) {
  return $compare_int(self.num, other.num);
}
function moonbitlang$core$builtin$$Hash$hash_combine$95$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_int(hasher, self.num);
}
function moonbitlang$core$builtin$$Show$output$95$(self, logger) {
  logger.method_0(logger.self, self.name);
}
function moonbitlang$core$builtin$$Eq$op_equal$96$(self, other) {
  return self.num === other.num;
}
function moonbitlang$core$builtin$$Compare$compare$96$(self, other) {
  return $compare_int(self.num, other.num);
}
function moonbitlang$core$builtin$$Hash$hash_combine$96$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_int(hasher, self.num);
}
function moonbitlang$core$builtin$$Show$output$96$(self, logger) {
  logger.method_0(logger.self, self.name);
}
function moonbitlang$core$builtin$$Show$output$76$(self, logger) {
  if (self.$tag === 0) {
    const _T = self;
    const _t = _T._0;
    moonbitlang$core$builtin$$Logger$write_object$95$(logger, _t);
    return;
  } else {
    const _NT = self;
    const _nt = _NT._0;
    moonbitlang$core$builtin$$Logger$write_object$96$(logger, _nt);
    return;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$40$(self, other) {
  return self.num === other.num;
}
function moonbitlang$yacc$lib$grm$$Production$output_with_opt_dot$216$(self, logger, dot) {
  moonbitlang$core$builtin$$Logger$write_object$96$({ self: logger, method_0: (x, x$2) => {
    x.method_0(x.self, x$2);
  }, method_1: (x, x$2, x$3, x$4) => {
    x.method_1(x.self, x$2, x$3, x$4);
  }, method_2: (x, x$2, x$3, x$4) => {
    x.method_2(x.self, x$2, x$3, x$4);
  }, method_3: (x, x$2) => {
    x.method_3(x.self, x$2);
  } }, self.lhs);
  logger.method_0(logger.self, " →");
  const _arr = self.rhs;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const symbol = _arr[_i];
      if (dot === undefined) {
      } else {
        const _Some = dot;
        const _d = _Some;
        if (_i === _d) {
          logger.method_0(logger.self, " •");
        }
      }
      logger.method_0(logger.self, " ");
      moonbitlang$core$builtin$$Logger$write_object$76$({ self: logger, method_0: (x, x$2) => {
        x.method_0(x.self, x$2);
      }, method_1: (x, x$2, x$3, x$4) => {
        x.method_1(x.self, x$2, x$3, x$4);
      }, method_2: (x, x$2, x$3, x$4) => {
        x.method_2(x.self, x$2, x$3, x$4);
      }, method_3: (x, x$2) => {
        x.method_3(x.self, x$2);
      } }, symbol);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (dot === undefined) {
    return;
  } else {
    const _Some = dot;
    const _d = _Some;
    if (_d === self.rhs.length) {
      logger.method_0(logger.self, " •");
      return;
    } else {
      return;
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$22$(_x_1113, _x_1114) {
  switch (_x_1113.$tag) {
    case 0: {
      const _Dollar = _x_1113;
      const _$42$x0_1115 = _Dollar._0;
      if (_x_1114.$tag === 0) {
        const _Dollar$2 = _x_1114;
        const _$42$y0_1116 = _Dollar$2._0;
        return _$42$x0_1115 === _$42$y0_1116;
      } else {
        return false;
      }
    }
    case 1: {
      if (_x_1114.$tag === 1) {
        return true;
      } else {
        return false;
      }
    }
    case 2: {
      if (_x_1114.$tag === 2) {
        return true;
      } else {
        return false;
      }
    }
    case 3: {
      if (_x_1114.$tag === 3) {
        return true;
      } else {
        return false;
      }
    }
    case 4: {
      const _StartPosOf = _x_1113;
      const _$42$x0_1117 = _StartPosOf._0;
      if (_x_1114.$tag === 4) {
        const _StartPosOf$2 = _x_1114;
        const _$42$y0_1118 = _StartPosOf$2._0;
        return moonbitlang$core$builtin$$Eq$op_equal$217$(_$42$x0_1117, _$42$y0_1118);
      } else {
        return false;
      }
    }
    case 5: {
      const _EndPosOf = _x_1113;
      const _$42$x0_1119 = _EndPosOf._0;
      if (_x_1114.$tag === 5) {
        const _EndPosOf$2 = _x_1114;
        const _$42$y0_1120 = _EndPosOf$2._0;
        return moonbitlang$core$builtin$$Eq$op_equal$217$(_$42$x0_1119, _$42$y0_1120);
      } else {
        return false;
      }
    }
    case 6: {
      const _LocOf = _x_1113;
      const _$42$x0_1121 = _LocOf._0;
      if (_x_1114.$tag === 6) {
        const _LocOf$2 = _x_1114;
        const _$42$y0_1122 = _LocOf$2._0;
        return moonbitlang$core$builtin$$Eq$op_equal$217$(_$42$x0_1121, _$42$y0_1122);
      } else {
        return false;
      }
    }
    case 7: {
      if (_x_1114.$tag === 7) {
        return true;
      } else {
        return false;
      }
    }
    default: {
      if (_x_1114.$tag === 8) {
        return true;
      } else {
        return false;
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$22$(_x_1093, _x_1094) {
  switch (_x_1093.$tag) {
    case 0: {
      const _Dollar = _x_1093;
      const _$42$x0_1095 = _Dollar._0;
      if (_x_1094.$tag === 0) {
        const _Dollar$2 = _x_1094;
        const _$42$y0_1096 = _Dollar$2._0;
        return $compare_int(_$42$x0_1095, _$42$y0_1096);
      } else {
        return -1;
      }
    }
    case 1: {
      switch (_x_1094.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 0;
        }
        default: {
          return -1;
        }
      }
    }
    case 2: {
      switch (_x_1094.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 0;
        }
        default: {
          return -1;
        }
      }
    }
    case 3: {
      switch (_x_1094.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 1;
        }
        case 3: {
          return 0;
        }
        default: {
          return -1;
        }
      }
    }
    case 4: {
      const _StartPosOf = _x_1093;
      const _$42$x0_1097 = _StartPosOf._0;
      switch (_x_1094.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 1;
        }
        case 3: {
          return 1;
        }
        case 4: {
          const _StartPosOf$2 = _x_1094;
          const _$42$y0_1098 = _StartPosOf$2._0;
          return moonbitlang$core$builtin$$Compare$compare$217$(_$42$x0_1097, _$42$y0_1098);
        }
        default: {
          return -1;
        }
      }
    }
    case 5: {
      const _EndPosOf = _x_1093;
      const _$42$x0_1099 = _EndPosOf._0;
      switch (_x_1094.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 1;
        }
        case 3: {
          return 1;
        }
        case 4: {
          return 1;
        }
        case 5: {
          const _EndPosOf$2 = _x_1094;
          const _$42$y0_1100 = _EndPosOf$2._0;
          return moonbitlang$core$builtin$$Compare$compare$217$(_$42$x0_1099, _$42$y0_1100);
        }
        default: {
          return -1;
        }
      }
    }
    case 6: {
      const _LocOf = _x_1093;
      const _$42$x0_1101 = _LocOf._0;
      switch (_x_1094.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 1;
        }
        case 3: {
          return 1;
        }
        case 4: {
          return 1;
        }
        case 5: {
          return 1;
        }
        case 6: {
          const _LocOf$2 = _x_1094;
          const _$42$y0_1102 = _LocOf$2._0;
          return moonbitlang$core$builtin$$Compare$compare$217$(_$42$x0_1101, _$42$y0_1102);
        }
        default: {
          return -1;
        }
      }
    }
    case 7: {
      switch (_x_1094.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 1;
        }
        case 3: {
          return 1;
        }
        case 4: {
          return 1;
        }
        case 5: {
          return 1;
        }
        case 6: {
          return 1;
        }
        case 7: {
          return 0;
        }
        default: {
          return -1;
        }
      }
    }
    default: {
      switch (_x_1094.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 1;
        }
        case 3: {
          return 1;
        }
        case 4: {
          return 1;
        }
        case 5: {
          return 1;
        }
        case 6: {
          return 1;
        }
        case 7: {
          return 1;
        }
        default: {
          return 0;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$217$(_x_1050, _x_1051) {
  if (_x_1050.$tag === 0) {
    const _Dollar = _x_1050;
    const _$42$x0_1052 = _Dollar._0;
    if (_x_1051.$tag === 0) {
      const _Dollar$2 = _x_1051;
      const _$42$y0_1053 = _Dollar$2._0;
      return _$42$x0_1052 === _$42$y0_1053;
    } else {
      return false;
    }
  } else {
    const _Name = _x_1050;
    const _$42$x0_1054 = _Name._0;
    if (_x_1051.$tag === 1) {
      const _Name$2 = _x_1051;
      const _$42$y0_1055 = _Name$2._0;
      return _$42$x0_1054 === _$42$y0_1055;
    } else {
      return false;
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$217$(_x_1038, _x_1039) {
  if (_x_1038.$tag === 0) {
    const _Dollar = _x_1038;
    const _$42$x0_1040 = _Dollar._0;
    if (_x_1039.$tag === 0) {
      const _Dollar$2 = _x_1039;
      const _$42$y0_1041 = _Dollar$2._0;
      return $compare_int(_$42$x0_1040, _$42$y0_1041);
    } else {
      return -1;
    }
  } else {
    const _Name = _x_1038;
    const _$42$x0_1042 = _Name._0;
    if (_x_1039.$tag === 0) {
      return 1;
    } else {
      const _Name$2 = _x_1039;
      const _$42$y0_1043 = _Name$2._0;
      return moonbitlang$core$builtin$$Compare$compare$11$(_$42$x0_1042, _$42$y0_1043);
    }
  }
}
function moonbitlang$yacc$lib$parser$$Lexbuf$from_string(content) {
  return { content: content, pos: 0 };
}
function moonbitlang$yacc$lib$parser$$Lexbuf$next(self) {
  if (self.pos < self.content.length) {
    const _tmp = self.content;
    const _tmp$2 = self.pos;
    $bound_check(_tmp, _tmp$2);
    const ch = _tmp.charCodeAt(_tmp$2);
    self.pos = self.pos + 1 | 0;
    return ch;
  } else {
    return -1;
  }
}
function moonbitlang$yacc$lib$parser$$Lexbuf$substring(self, start, end) {
  return moonbitlang$core$string$$String$substring(self.content, start, end);
}
function moonbitlang$yacc$lib$parser$$LexEngine$run(self, lexbuf) {
  let state = 0;
  let tagState = [];
  const backtrace = moonbitlang$core$array$$Array$make$194$(self.code_blocks_n, undefined);
  const _arr = self.start_tags;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const tag = _arr[_i];
      while (true) {
        if (tagState.length <= tag) {
          moonbitlang$core$array$$Array$push$115$(tagState, []);
          continue;
        } else {
          break;
        }
      }
      moonbitlang$core$array$$Array$push$10$(moonbitlang$core$array$$Array$op_get$115$(tagState, tag), lexbuf.pos);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  while (true) {
    if (state !== -1) {
      const _bind = moonbitlang$core$array$$Array$op_get$114$(self.end_nodes, state);
      if (_bind === undefined) {
      } else {
        const _Some = _bind;
        const _t = _Some;
        moonbitlang$core$array$$Array$op_set$194$(backtrace, _t._0, { _0: lexbuf.pos, _1: state, _2: tagState });
      }
      const _bind$2 = moonbitlang$yacc$lib$parser$$Lexbuf$next(lexbuf);
      let b;
      if (_bind$2 === -1) {
        b = -1;
      } else {
        const _Some = _bind$2;
        const _b = _Some;
        b = _b;
      }
      const _func = moonbitlang$core$array$$Array$op_get$113$(self.graph, state);
      const next = _func(b);
      state = next._0;
      const new_tagState = [];
      let _tmp$2 = 0;
      while (true) {
        const i = _tmp$2;
        if (i < next._1.length) {
          moonbitlang$core$array$$Array$push$115$(new_tagState, []);
          let _tmp$3 = 0;
          while (true) {
            const j = _tmp$3;
            if (j < moonbitlang$core$array$$Array$op_get$115$(next._1, i).length) {
              const t = moonbitlang$core$array$$Array$op_get$10$(moonbitlang$core$array$$Array$op_get$115$(next._1, i), j);
              if (t === -1) {
                moonbitlang$core$array$$Array$push$10$(moonbitlang$core$array$$Array$op_get$115$(new_tagState, i), lexbuf.pos);
              } else {
                moonbitlang$core$array$$Array$push$10$(moonbitlang$core$array$$Array$op_get$115$(new_tagState, i), moonbitlang$core$array$$Array$op_get$10$(moonbitlang$core$array$$Array$op_get$115$(tagState, i), t));
              }
              _tmp$3 = j + 1 | 0;
              continue;
            } else {
              break;
            }
          }
          _tmp$2 = i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      tagState = new_tagState;
      continue;
    } else {
      break;
    }
  }
  const _len$2 = backtrace.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len$2) {
      const b = backtrace[_i];
      if (b === undefined) {
      } else {
        const _Some = b;
        const _x = _Some;
        const _p = _x._0;
        const _state = _x._1;
        const _tagState = _x._2;
        lexbuf.pos = _p;
        const captures = moonbitlang$core$array$$Array$map$180$(moonbitlang$core$option$$Option$unwrap$151$(moonbitlang$core$array$$Array$op_get$114$(self.end_nodes, _state))._1, (_param1) => {
          const _x$2 = _param1._0;
          const _b_t = _x$2._0;
          const _b_r = _x$2._1;
          const _x$3 = _param1._1;
          const _e_t = _x$3._0;
          const _e_r = _x$3._1;
          return { _0: moonbitlang$core$array$$Array$op_get$10$(moonbitlang$core$array$$Array$op_get$115$(_tagState, _b_t), _b_r), _1: moonbitlang$core$array$$Array$op_get$10$(moonbitlang$core$array$$Array$op_get$115$(_tagState, _e_t), _e_r) };
        });
        return { _0: _i, _1: captures };
      }
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      return { _0: self.code_blocks_n, _1: [] };
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_0(input) {
  if (input === -1) {
    return { _0: 15, _1: moonbitlang$yacc$lib$parser$$token_tag_action_0 };
  } else {
    if (0 <= input && input <= 8) {
      return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
    } else {
      if (9 <= input && input <= 10) {
        return { _0: 9, _1: moonbitlang$yacc$lib$parser$$token_tag_action_2 };
      } else {
        if (11 <= input && input <= 31) {
          return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
        } else {
          switch (input) {
            case 32: {
              return { _0: 9, _1: moonbitlang$yacc$lib$parser$$token_tag_action_2 };
            }
            case 33: {
              return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
            }
            case 34: {
              return { _0: 1, _1: moonbitlang$yacc$lib$parser$$token_tag_action_3 };
            }
            default: {
              if (35 <= input && input <= 36) {
                return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
              } else {
                if (input === 37) {
                  return { _0: 22, _1: moonbitlang$yacc$lib$parser$$token_tag_action_4 };
                } else {
                  if (38 <= input && input <= 39) {
                    return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                  } else {
                    switch (input) {
                      case 40: {
                        return { _0: 19, _1: moonbitlang$yacc$lib$parser$$token_tag_action_5 };
                      }
                      case 41: {
                        return { _0: 3, _1: moonbitlang$yacc$lib$parser$$token_tag_action_6 };
                      }
                      default: {
                        if (42 <= input && input <= 43) {
                          return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                        } else {
                          switch (input) {
                            case 44: {
                              return { _0: 11, _1: moonbitlang$yacc$lib$parser$$token_tag_action_7 };
                            }
                            case 45: {
                              return { _0: 7, _1: moonbitlang$yacc$lib$parser$$token_tag_action_8 };
                            }
                            case 46: {
                              return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                            }
                            case 47: {
                              return { _0: 18, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                            }
                            default: {
                              if (48 <= input && input <= 57) {
                                return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                              } else {
                                switch (input) {
                                  case 58: {
                                    return { _0: 5, _1: moonbitlang$yacc$lib$parser$$token_tag_action_9 };
                                  }
                                  case 59: {
                                    return { _0: 4, _1: moonbitlang$yacc$lib$parser$$token_tag_action_10 };
                                  }
                                  case 60: {
                                    return { _0: 16, _1: moonbitlang$yacc$lib$parser$$token_tag_action_11 };
                                  }
                                  case 61: {
                                    return { _0: 10, _1: moonbitlang$yacc$lib$parser$$token_tag_action_12 };
                                  }
                                  case 62: {
                                    return { _0: 14, _1: moonbitlang$yacc$lib$parser$$token_tag_action_13 };
                                  }
                                  case 63: {
                                    return { _0: 20, _1: moonbitlang$yacc$lib$parser$$token_tag_action_14 };
                                  }
                                  case 64: {
                                    return { _0: 13, _1: moonbitlang$yacc$lib$parser$$token_tag_action_15 };
                                  }
                                  default: {
                                    if (65 <= input && input <= 90) {
                                      return { _0: 12, _1: moonbitlang$yacc$lib$parser$$token_tag_action_16 };
                                    } else {
                                      switch (input) {
                                        case 91: {
                                          return { _0: 17, _1: moonbitlang$yacc$lib$parser$$token_tag_action_17 };
                                        }
                                        case 92: {
                                          return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                                        }
                                        case 93: {
                                          return { _0: 21, _1: moonbitlang$yacc$lib$parser$$token_tag_action_18 };
                                        }
                                        case 94: {
                                          return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                                        }
                                        case 95: {
                                          return { _0: 12, _1: moonbitlang$yacc$lib$parser$$token_tag_action_16 };
                                        }
                                        case 96: {
                                          return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                                        }
                                        default: {
                                          if (97 <= input && input <= 122) {
                                            return { _0: 12, _1: moonbitlang$yacc$lib$parser$$token_tag_action_16 };
                                          } else {
                                            switch (input) {
                                              case 123: {
                                                return { _0: 8, _1: moonbitlang$yacc$lib$parser$$token_tag_action_19 };
                                              }
                                              case 124: {
                                                return { _0: 6, _1: moonbitlang$yacc$lib$parser$$token_tag_action_20 };
                                              }
                                              default: {
                                                return 125 <= input && input <= 1114111 ? { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 } : { _0: -1, _1: [] };
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_1(input) {
  return 0 <= input && input <= 33 ? { _0: 23, _1: moonbitlang$yacc$lib$parser$$token_tag_action_21 } : 35 <= input && input <= 1114111 ? { _0: 23, _1: moonbitlang$yacc$lib$parser$$token_tag_action_21 } : { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_2(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_3(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_4(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_5(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_6(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_7(input) {
  if (input === 62) {
    return { _0: 24, _1: moonbitlang$yacc$lib$parser$$token_tag_action_22 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_8(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_9(input) {
  if (input === -1) {
    return { _0: 15, _1: moonbitlang$yacc$lib$parser$$token_tag_action_0 };
  } else {
    if (0 <= input && input <= 8) {
      return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
    } else {
      if (9 <= input && input <= 10) {
        return { _0: 9, _1: moonbitlang$yacc$lib$parser$$token_tag_action_2 };
      } else {
        if (11 <= input && input <= 31) {
          return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
        } else {
          switch (input) {
            case 32: {
              return { _0: 9, _1: moonbitlang$yacc$lib$parser$$token_tag_action_2 };
            }
            case 33: {
              return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
            }
            case 34: {
              return { _0: 1, _1: moonbitlang$yacc$lib$parser$$token_tag_action_3 };
            }
            default: {
              if (35 <= input && input <= 36) {
                return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
              } else {
                if (input === 37) {
                  return { _0: 22, _1: moonbitlang$yacc$lib$parser$$token_tag_action_4 };
                } else {
                  if (38 <= input && input <= 39) {
                    return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                  } else {
                    switch (input) {
                      case 40: {
                        return { _0: 19, _1: moonbitlang$yacc$lib$parser$$token_tag_action_5 };
                      }
                      case 41: {
                        return { _0: 3, _1: moonbitlang$yacc$lib$parser$$token_tag_action_6 };
                      }
                      default: {
                        if (42 <= input && input <= 43) {
                          return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                        } else {
                          switch (input) {
                            case 44: {
                              return { _0: 11, _1: moonbitlang$yacc$lib$parser$$token_tag_action_7 };
                            }
                            case 45: {
                              return { _0: 7, _1: moonbitlang$yacc$lib$parser$$token_tag_action_8 };
                            }
                            case 46: {
                              return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                            }
                            case 47: {
                              return { _0: 18, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                            }
                            default: {
                              if (48 <= input && input <= 57) {
                                return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                              } else {
                                switch (input) {
                                  case 58: {
                                    return { _0: 5, _1: moonbitlang$yacc$lib$parser$$token_tag_action_9 };
                                  }
                                  case 59: {
                                    return { _0: 4, _1: moonbitlang$yacc$lib$parser$$token_tag_action_10 };
                                  }
                                  case 60: {
                                    return { _0: 16, _1: moonbitlang$yacc$lib$parser$$token_tag_action_11 };
                                  }
                                  case 61: {
                                    return { _0: 10, _1: moonbitlang$yacc$lib$parser$$token_tag_action_12 };
                                  }
                                  case 62: {
                                    return { _0: 14, _1: moonbitlang$yacc$lib$parser$$token_tag_action_13 };
                                  }
                                  case 63: {
                                    return { _0: 20, _1: moonbitlang$yacc$lib$parser$$token_tag_action_14 };
                                  }
                                  case 64: {
                                    return { _0: 13, _1: moonbitlang$yacc$lib$parser$$token_tag_action_15 };
                                  }
                                  default: {
                                    if (65 <= input && input <= 90) {
                                      return { _0: 12, _1: moonbitlang$yacc$lib$parser$$token_tag_action_16 };
                                    } else {
                                      switch (input) {
                                        case 91: {
                                          return { _0: 17, _1: moonbitlang$yacc$lib$parser$$token_tag_action_17 };
                                        }
                                        case 92: {
                                          return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                                        }
                                        case 93: {
                                          return { _0: 21, _1: moonbitlang$yacc$lib$parser$$token_tag_action_18 };
                                        }
                                        case 94: {
                                          return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                                        }
                                        case 95: {
                                          return { _0: 12, _1: moonbitlang$yacc$lib$parser$$token_tag_action_16 };
                                        }
                                        case 96: {
                                          return { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 };
                                        }
                                        default: {
                                          if (97 <= input && input <= 122) {
                                            return { _0: 12, _1: moonbitlang$yacc$lib$parser$$token_tag_action_16 };
                                          } else {
                                            switch (input) {
                                              case 123: {
                                                return { _0: 8, _1: moonbitlang$yacc$lib$parser$$token_tag_action_19 };
                                              }
                                              case 124: {
                                                return { _0: 6, _1: moonbitlang$yacc$lib$parser$$token_tag_action_20 };
                                              }
                                              default: {
                                                return 125 <= input && input <= 1114111 ? { _0: 2, _1: moonbitlang$yacc$lib$parser$$token_tag_action_1 } : { _0: -1, _1: [] };
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_10(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_11(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_12(input) {
  if (48 <= input && input <= 57) {
    return { _0: 25, _1: moonbitlang$yacc$lib$parser$$token_tag_action_23 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 25, _1: moonbitlang$yacc$lib$parser$$token_tag_action_23 };
    } else {
      if (input === 95) {
        return { _0: 25, _1: moonbitlang$yacc$lib$parser$$token_tag_action_23 };
      } else {
        return 97 <= input && input <= 122 ? { _0: 25, _1: moonbitlang$yacc$lib$parser$$token_tag_action_23 } : { _0: -1, _1: [] };
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_13(input) {
  if (65 <= input && input <= 90) {
    return { _0: 26, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
  } else {
    if (input === 95) {
      return { _0: 26, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
    } else {
      return 97 <= input && input <= 122 ? { _0: 26, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 } : { _0: -1, _1: [] };
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_14(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_15(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_16(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_17(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_18(input) {
  switch (input) {
    case 42: {
      return { _0: 28, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
    }
    case 47: {
      return { _0: 27, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
    }
    default: {
      return { _0: -1, _1: [] };
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_19(input) {
  if (input === 42) {
    return { _0: 29, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_20(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_21(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_22(input) {
  switch (input) {
    case 37: {
      return { _0: 30, _1: moonbitlang$yacc$lib$parser$$token_tag_action_26 };
    }
    case 100: {
      return { _0: 31, _1: moonbitlang$yacc$lib$parser$$token_tag_action_27 };
    }
    case 105: {
      return { _0: 35, _1: moonbitlang$yacc$lib$parser$$token_tag_action_28 };
    }
    case 108: {
      return { _0: 33, _1: moonbitlang$yacc$lib$parser$$token_tag_action_29 };
    }
    case 110: {
      return { _0: 34, _1: moonbitlang$yacc$lib$parser$$token_tag_action_30 };
    }
    case 112: {
      return { _0: 38, _1: moonbitlang$yacc$lib$parser$$token_tag_action_31 };
    }
    case 114: {
      return { _0: 32, _1: moonbitlang$yacc$lib$parser$$token_tag_action_32 };
    }
    case 115: {
      return { _0: 39, _1: moonbitlang$yacc$lib$parser$$token_tag_action_33 };
    }
    case 116: {
      return { _0: 36, _1: moonbitlang$yacc$lib$parser$$token_tag_action_34 };
    }
    case 123: {
      return { _0: 37, _1: moonbitlang$yacc$lib$parser$$token_tag_action_35 };
    }
    default: {
      return { _0: -1, _1: [] };
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_23(input) {
  if (0 <= input && input <= 33) {
    return { _0: 23, _1: moonbitlang$yacc$lib$parser$$token_tag_action_21 };
  } else {
    if (input === 34) {
      return { _0: 40, _1: moonbitlang$yacc$lib$parser$$token_tag_action_36 };
    } else {
      return 35 <= input && input <= 1114111 ? { _0: 23, _1: moonbitlang$yacc$lib$parser$$token_tag_action_21 } : { _0: -1, _1: [] };
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_24(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_25(input) {
  if (48 <= input && input <= 57) {
    return { _0: 25, _1: moonbitlang$yacc$lib$parser$$token_tag_action_23 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 25, _1: moonbitlang$yacc$lib$parser$$token_tag_action_23 };
    } else {
      if (input === 95) {
        return { _0: 25, _1: moonbitlang$yacc$lib$parser$$token_tag_action_23 };
      } else {
        return 97 <= input && input <= 122 ? { _0: 25, _1: moonbitlang$yacc$lib$parser$$token_tag_action_23 } : { _0: -1, _1: [] };
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_26(input) {
  switch (input) {
    case 46: {
      return { _0: 42, _1: moonbitlang$yacc$lib$parser$$token_tag_action_37 };
    }
    case 47: {
      return { _0: 43, _1: moonbitlang$yacc$lib$parser$$token_tag_action_38 };
    }
    default: {
      if (48 <= input && input <= 57) {
        return { _0: 41, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
      } else {
        if (65 <= input && input <= 90) {
          return { _0: 41, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
        } else {
          if (input === 95) {
            return { _0: 41, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
          } else {
            return 97 <= input && input <= 122 ? { _0: 41, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_27(input) {
  if (0 <= input && input <= 9) {
    return { _0: 44, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
  } else {
    if (input === 10) {
      return { _0: 45, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
    } else {
      return 11 <= input && input <= 1114111 ? { _0: 44, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 } : { _0: -1, _1: [] };
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_28(input) {
  if (0 <= input && input <= 41) {
    return { _0: 48, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
  } else {
    if (input === 42) {
      return { _0: 47, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
    } else {
      if (43 <= input && input <= 46) {
        return { _0: 48, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
      } else {
        if (input === 47) {
          return { _0: 46, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
        } else {
          return 48 <= input && input <= 1114111 ? { _0: 48, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 } : { _0: -1, _1: [] };
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_29(input) {
  if (input === 41) {
    return { _0: 49, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_30(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_31(input) {
  if (input === 101) {
    return { _0: 50, _1: moonbitlang$yacc$lib$parser$$token_tag_action_27 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_32(input) {
  if (input === 105) {
    return { _0: 51, _1: moonbitlang$yacc$lib$parser$$token_tag_action_32 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_33(input) {
  if (input === 101) {
    return { _0: 52, _1: moonbitlang$yacc$lib$parser$$token_tag_action_29 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_34(input) {
  if (input === 111) {
    return { _0: 53, _1: moonbitlang$yacc$lib$parser$$token_tag_action_30 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_35(input) {
  if (input === 110) {
    return { _0: 54, _1: moonbitlang$yacc$lib$parser$$token_tag_action_28 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_36(input) {
  switch (input) {
    case 111: {
      return { _0: 55, _1: moonbitlang$yacc$lib$parser$$token_tag_action_39 };
    }
    case 121: {
      return { _0: 56, _1: moonbitlang$yacc$lib$parser$$token_tag_action_40 };
    }
    default: {
      return { _0: -1, _1: [] };
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_37(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_38(input) {
  switch (input) {
    case 111: {
      return { _0: 58, _1: moonbitlang$yacc$lib$parser$$token_tag_action_41 };
    }
    case 114: {
      return { _0: 57, _1: moonbitlang$yacc$lib$parser$$token_tag_action_42 };
    }
    default: {
      return { _0: -1, _1: [] };
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_39(input) {
  if (input === 116) {
    return { _0: 59, _1: moonbitlang$yacc$lib$parser$$token_tag_action_33 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_40(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_41(input) {
  switch (input) {
    case 46: {
      return { _0: 42, _1: moonbitlang$yacc$lib$parser$$token_tag_action_37 };
    }
    case 47: {
      return { _0: 43, _1: moonbitlang$yacc$lib$parser$$token_tag_action_38 };
    }
    default: {
      if (48 <= input && input <= 57) {
        return { _0: 41, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
      } else {
        if (65 <= input && input <= 90) {
          return { _0: 41, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
        } else {
          if (input === 95) {
            return { _0: 41, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
          } else {
            return 97 <= input && input <= 122 ? { _0: 41, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_42(input) {
  if (65 <= input && input <= 90) {
    return { _0: 60, _1: moonbitlang$yacc$lib$parser$$token_tag_action_43 };
  } else {
    if (input === 95) {
      return { _0: 60, _1: moonbitlang$yacc$lib$parser$$token_tag_action_43 };
    } else {
      return 97 <= input && input <= 122 ? { _0: 60, _1: moonbitlang$yacc$lib$parser$$token_tag_action_43 } : { _0: -1, _1: [] };
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_43(input) {
  if (65 <= input && input <= 90) {
    return { _0: 61, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
  } else {
    if (input === 95) {
      return { _0: 61, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
    } else {
      return 97 <= input && input <= 122 ? { _0: 61, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 } : { _0: -1, _1: [] };
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_44(input) {
  if (0 <= input && input <= 9) {
    return { _0: 44, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
  } else {
    if (input === 10) {
      return { _0: 45, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
    } else {
      return 11 <= input && input <= 1114111 ? { _0: 44, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 } : { _0: -1, _1: [] };
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_45(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_46(input) {
  return 0 <= input && input <= 41 ? { _0: 62, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 } : 43 <= input && input <= 1114111 ? { _0: 62, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 } : { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_47(input) {
  if (0 <= input && input <= 41) {
    return { _0: 48, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
  } else {
    if (input === 42) {
      return { _0: 47, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
    } else {
      if (43 <= input && input <= 46) {
        return { _0: 48, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
      } else {
        if (input === 47) {
          return { _0: 63, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
        } else {
          return 48 <= input && input <= 1114111 ? { _0: 48, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 } : { _0: -1, _1: [] };
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_48(input) {
  if (0 <= input && input <= 41) {
    return { _0: 48, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
  } else {
    if (input === 42) {
      return { _0: 47, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
    } else {
      if (43 <= input && input <= 46) {
        return { _0: 48, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
      } else {
        if (input === 47) {
          return { _0: 46, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
        } else {
          return 48 <= input && input <= 1114111 ? { _0: 48, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 } : { _0: -1, _1: [] };
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_49(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_50(input) {
  if (input === 114) {
    return { _0: 64, _1: moonbitlang$yacc$lib$parser$$token_tag_action_27 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_51(input) {
  if (input === 103) {
    return { _0: 65, _1: moonbitlang$yacc$lib$parser$$token_tag_action_32 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_52(input) {
  if (input === 102) {
    return { _0: 66, _1: moonbitlang$yacc$lib$parser$$token_tag_action_29 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_53(input) {
  if (input === 110) {
    return { _0: 67, _1: moonbitlang$yacc$lib$parser$$token_tag_action_30 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_54(input) {
  if (input === 108) {
    return { _0: 68, _1: moonbitlang$yacc$lib$parser$$token_tag_action_28 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_55(input) {
  if (input === 107) {
    return { _0: 69, _1: moonbitlang$yacc$lib$parser$$token_tag_action_39 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_56(input) {
  if (input === 112) {
    return { _0: 70, _1: moonbitlang$yacc$lib$parser$$token_tag_action_40 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_57(input) {
  if (input === 101) {
    return { _0: 71, _1: moonbitlang$yacc$lib$parser$$token_tag_action_42 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_58(input) {
  if (input === 115) {
    return { _0: 72, _1: moonbitlang$yacc$lib$parser$$token_tag_action_41 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_59(input) {
  if (input === 97) {
    return { _0: 73, _1: moonbitlang$yacc$lib$parser$$token_tag_action_33 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_60(input) {
  if (48 <= input && input <= 57) {
    return { _0: 74, _1: moonbitlang$yacc$lib$parser$$token_tag_action_43 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 74, _1: moonbitlang$yacc$lib$parser$$token_tag_action_43 };
    } else {
      if (input === 95) {
        return { _0: 74, _1: moonbitlang$yacc$lib$parser$$token_tag_action_43 };
      } else {
        return 97 <= input && input <= 122 ? { _0: 74, _1: moonbitlang$yacc$lib$parser$$token_tag_action_43 } : { _0: -1, _1: [] };
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_61(input) {
  switch (input) {
    case 46: {
      return { _0: 42, _1: moonbitlang$yacc$lib$parser$$token_tag_action_37 };
    }
    case 47: {
      return { _0: 43, _1: moonbitlang$yacc$lib$parser$$token_tag_action_38 };
    }
    default: {
      if (48 <= input && input <= 57) {
        return { _0: 75, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
      } else {
        if (65 <= input && input <= 90) {
          return { _0: 75, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
        } else {
          if (input === 95) {
            return { _0: 75, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
          } else {
            return 97 <= input && input <= 122 ? { _0: 75, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_62(input) {
  if (0 <= input && input <= 41) {
    return { _0: 48, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
  } else {
    if (input === 42) {
      return { _0: 47, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
    } else {
      if (43 <= input && input <= 46) {
        return { _0: 48, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
      } else {
        if (input === 47) {
          return { _0: 46, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 };
        } else {
          return 48 <= input && input <= 1114111 ? { _0: 48, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 } : { _0: -1, _1: [] };
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_63(input) {
  return 0 <= input && input <= 41 ? { _0: 62, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 } : 43 <= input && input <= 1114111 ? { _0: 62, _1: moonbitlang$yacc$lib$parser$$token_tag_action_25 } : { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_64(input) {
  if (input === 105) {
    return { _0: 76, _1: moonbitlang$yacc$lib$parser$$token_tag_action_27 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_65(input) {
  if (input === 104) {
    return { _0: 77, _1: moonbitlang$yacc$lib$parser$$token_tag_action_32 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_66(input) {
  if (input === 116) {
    return { _0: 78, _1: moonbitlang$yacc$lib$parser$$token_tag_action_44 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_67(input) {
  if (input === 97) {
    return { _0: 79, _1: moonbitlang$yacc$lib$parser$$token_tag_action_30 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_68(input) {
  if (input === 105) {
    return { _0: 80, _1: moonbitlang$yacc$lib$parser$$token_tag_action_28 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_69(input) {
  if (input === 101) {
    return { _0: 81, _1: moonbitlang$yacc$lib$parser$$token_tag_action_39 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_70(input) {
  if (input === 101) {
    return { _0: 82, _1: moonbitlang$yacc$lib$parser$$token_tag_action_45 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_71(input) {
  if (input === 99) {
    return { _0: 83, _1: moonbitlang$yacc$lib$parser$$token_tag_action_46 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_72(input) {
  if (input === 105) {
    return { _0: 84, _1: moonbitlang$yacc$lib$parser$$token_tag_action_41 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_73(input) {
  if (input === 114) {
    return { _0: 85, _1: moonbitlang$yacc$lib$parser$$token_tag_action_33 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_74(input) {
  if (48 <= input && input <= 57) {
    return { _0: 74, _1: moonbitlang$yacc$lib$parser$$token_tag_action_43 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 74, _1: moonbitlang$yacc$lib$parser$$token_tag_action_43 };
    } else {
      if (input === 95) {
        return { _0: 74, _1: moonbitlang$yacc$lib$parser$$token_tag_action_43 };
      } else {
        return 97 <= input && input <= 122 ? { _0: 74, _1: moonbitlang$yacc$lib$parser$$token_tag_action_43 } : { _0: -1, _1: [] };
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_75(input) {
  switch (input) {
    case 46: {
      return { _0: 42, _1: moonbitlang$yacc$lib$parser$$token_tag_action_37 };
    }
    case 47: {
      return { _0: 43, _1: moonbitlang$yacc$lib$parser$$token_tag_action_38 };
    }
    default: {
      if (48 <= input && input <= 57) {
        return { _0: 75, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
      } else {
        if (65 <= input && input <= 90) {
          return { _0: 75, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
        } else {
          if (input === 95) {
            return { _0: 75, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 };
          } else {
            return 97 <= input && input <= 122 ? { _0: 75, _1: moonbitlang$yacc$lib$parser$$token_tag_action_24 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token_state_76(input) {
  if (input === 118) {
    return { _0: 86, _1: moonbitlang$yacc$lib$parser$$token_tag_action_27 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_77(input) {
  if (input === 116) {
    return { _0: 87, _1: moonbitlang$yacc$lib$parser$$token_tag_action_47 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_78(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_79(input) {
  if (input === 115) {
    return { _0: 88, _1: moonbitlang$yacc$lib$parser$$token_tag_action_30 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_80(input) {
  if (input === 110) {
    return { _0: 89, _1: moonbitlang$yacc$lib$parser$$token_tag_action_28 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_81(input) {
  if (input === 110) {
    return { _0: 90, _1: moonbitlang$yacc$lib$parser$$token_tag_action_48 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_82(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_83(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_84(input) {
  if (input === 116) {
    return { _0: 91, _1: moonbitlang$yacc$lib$parser$$token_tag_action_41 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_85(input) {
  if (input === 116) {
    return { _0: 92, _1: moonbitlang$yacc$lib$parser$$token_tag_action_49 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_86(input) {
  if (input === 101) {
    return { _0: 93, _1: moonbitlang$yacc$lib$parser$$token_tag_action_50 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_87(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_88(input) {
  if (input === 115) {
    return { _0: 94, _1: moonbitlang$yacc$lib$parser$$token_tag_action_30 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_89(input) {
  if (input === 101) {
    return { _0: 95, _1: moonbitlang$yacc$lib$parser$$token_tag_action_51 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_90(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_91(input) {
  if (input === 105) {
    return { _0: 96, _1: moonbitlang$yacc$lib$parser$$token_tag_action_41 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_92(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_93(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_94(input) {
  if (input === 111) {
    return { _0: 97, _1: moonbitlang$yacc$lib$parser$$token_tag_action_30 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_95(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_96(input) {
  if (input === 111) {
    return { _0: 98, _1: moonbitlang$yacc$lib$parser$$token_tag_action_41 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_97(input) {
  if (input === 99) {
    return { _0: 99, _1: moonbitlang$yacc$lib$parser$$token_tag_action_52 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_98(input) {
  if (input === 110) {
    return { _0: 100, _1: moonbitlang$yacc$lib$parser$$token_tag_action_53 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$token_state_99(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$token_state_100(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$code_eof_state_0(input) {
  if (input === -1) {
    return { _0: 2, _1: moonbitlang$yacc$lib$parser$$code_eof_tag_action_0 };
  } else {
    return 0 <= input && input <= 1114111 ? { _0: 1, _1: moonbitlang$yacc$lib$parser$$code_eof_tag_action_1 } : { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$code_eof_state_1(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$code_eof_state_2(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$code_eof(sb, lexbuf) {
  let _tmp = sb;
  let _tmp$2 = lexbuf;
  _L: while (true) {
    const sb$2 = _tmp;
    const lexbuf$2 = _tmp$2;
    const _bind = moonbitlang$yacc$lib$parser$$LexEngine$run(moonbitlang$yacc$lib$parser$$__mbtlex_engine_code_eof, lexbuf$2);
    const _x = _bind._0;
    switch (_x) {
      case 0: {
        const ___mbtlex_captures = _bind._1;
        const _bind$2 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures, 0);
        const __start_pos_of_t = _bind$2._0;
        const __end_pos_of_t = _bind$2._1;
        const t = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t, __end_pos_of_t);
        moonbitlang$core$builtin$$Logger$write_string$18$(sb$2, t);
        continue _L;
      }
      case 1: {
        return;
      }
      default: {
        moonbitlang$core$builtin$$abort$9$("lex: fail to match");
        return;
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_percent_rbrace_state_0(input) {
  if (input === -1) {
    return { _0: 2, _1: moonbitlang$yacc$lib$parser$$code_percent_rbrace_tag_action_0 };
  } else {
    if (0 <= input && input <= 36) {
      return { _0: 1, _1: moonbitlang$yacc$lib$parser$$code_percent_rbrace_tag_action_1 };
    } else {
      if (input === 37) {
        return { _0: 3, _1: moonbitlang$yacc$lib$parser$$code_percent_rbrace_tag_action_1 };
      } else {
        return 38 <= input && input <= 1114111 ? { _0: 1, _1: moonbitlang$yacc$lib$parser$$code_percent_rbrace_tag_action_1 } : { _0: -1, _1: [] };
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_percent_rbrace_state_1(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$code_percent_rbrace_state_2(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$code_percent_rbrace_state_3(input) {
  if (input === 125) {
    return { _0: 4, _1: moonbitlang$yacc$lib$parser$$code_percent_rbrace_tag_action_0 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$code_percent_rbrace_state_4(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$code_percent_rbrace(sb, lexbuf) {
  let _tmp = sb;
  let _tmp$2 = lexbuf;
  _L: while (true) {
    const sb$2 = _tmp;
    const lexbuf$2 = _tmp$2;
    const _bind = moonbitlang$yacc$lib$parser$$LexEngine$run(moonbitlang$yacc$lib$parser$$__mbtlex_engine_code_percent_rbrace, lexbuf$2);
    const _x = _bind._0;
    switch (_x) {
      case 0: {
        return new Result$Ok$15$(undefined);
      }
      case 1: {
        const ___mbtlex_captures = _bind._1;
        const _bind$2 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures, 0);
        const __start_pos_of_t = _bind$2._0;
        const __end_pos_of_t = _bind$2._1;
        const t = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t, __end_pos_of_t);
        moonbitlang$core$builtin$$Logger$write_string$18$(sb$2, t);
        continue _L;
      }
      case 2: {
        return new Result$Err$15$(Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$UnexpectedEndOfFile);
      }
      default: {
        return new Result$Ok$15$(moonbitlang$core$builtin$$abort$9$("lex: fail to match"));
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_0(input) {
  if (input === -1) {
    return { _0: 2, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_0 };
  } else {
    if (0 <= input && input <= 35) {
      return { _0: 1, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_1 };
    } else {
      if (input === 36) {
        return { _0: 5, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_2 };
      } else {
        if (37 <= input && input <= 122) {
          return { _0: 1, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_1 };
        } else {
          switch (input) {
            case 123: {
              return { _0: 4, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_1 };
            }
            case 124: {
              return { _0: 1, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_1 };
            }
            case 125: {
              return { _0: 3, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_1 };
            }
            default: {
              return 126 <= input && input <= 1114111 ? { _0: 1, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_1 } : { _0: -1, _1: [] };
            }
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_1(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_10(input) {
  return 48 <= input && input <= 57 ? { _0: 10, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_3 } : { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_11(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        return 97 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_12(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 98) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 99) {
            return { _0: 17, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_7 };
          } else {
            return 100 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_13(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 99) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 100) {
            return { _0: 18, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 };
          } else {
            return 101 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_14(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 110) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 111) {
            return { _0: 19, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 };
          } else {
            return 112 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_15(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 108) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 109) {
            return { _0: 20, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 };
          } else {
            return 110 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_16(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      switch (input) {
        case 95: {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        }
        case 97: {
          return { _0: 21, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 };
        }
        default: {
          return 98 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_17(input) {
  if (input === 40) {
    return { _0: 22, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_8 };
  } else {
    if (48 <= input && input <= 57) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (65 <= input && input <= 90) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (input === 95) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          return 97 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_18(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 111) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 112) {
            return { _0: 23, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 };
          } else {
            return 113 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_19(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 98) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 99) {
            return { _0: 24, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_9 };
          } else {
            return 100 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_2(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_20(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      switch (input) {
        case 95: {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        }
        case 97: {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        }
        case 98: {
          return { _0: 25, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 };
        }
        default: {
          return 99 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_21(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 113) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 114) {
            return { _0: 26, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 };
          } else {
            return 115 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_22(input) {
  switch (input) {
    case 9: {
      return { _0: 27, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_8 };
    }
    case 32: {
      return { _0: 27, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_8 };
    }
    case 36: {
      return { _0: 29, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_10 };
    }
    default: {
      if (65 <= input && input <= 90) {
        return { _0: 28, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 };
      } else {
        if (input === 95) {
          return { _0: 28, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 };
        } else {
          return 97 <= input && input <= 122 ? { _0: 28, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 } : { _0: -1, _1: [] };
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_23(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 110) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 111) {
            return { _0: 30, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 };
          } else {
            return 112 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_24(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        return 97 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_25(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 110) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 111) {
            return { _0: 31, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 };
          } else {
            return 112 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_26(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 115) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 116) {
            return { _0: 32, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 };
          } else {
            return 117 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_27(input) {
  switch (input) {
    case 9: {
      return { _0: 27, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_8 };
    }
    case 32: {
      return { _0: 27, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_8 };
    }
    case 36: {
      return { _0: 29, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_10 };
    }
    default: {
      if (65 <= input && input <= 90) {
        return { _0: 28, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 };
      } else {
        if (input === 95) {
          return { _0: 28, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 };
        } else {
          return 97 <= input && input <= 122 ? { _0: 28, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 } : { _0: -1, _1: [] };
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_28(input) {
  switch (input) {
    case 9: {
      return { _0: 34, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_12 };
    }
    case 32: {
      return { _0: 34, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_12 };
    }
    case 41: {
      return { _0: 35, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_13 };
    }
    default: {
      if (48 <= input && input <= 57) {
        return { _0: 33, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 };
      } else {
        if (65 <= input && input <= 90) {
          return { _0: 33, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 };
        } else {
          if (input === 95) {
            return { _0: 33, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 };
          } else {
            return 97 <= input && input <= 122 ? { _0: 33, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_29(input) {
  return 48 <= input && input <= 57 ? { _0: 36, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 } : { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_3(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_30(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 114) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 115) {
            return { _0: 37, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_7 };
          } else {
            return 116 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_31(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 107) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 108) {
            return { _0: 38, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 };
          } else {
            return 109 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_32(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 111) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 112) {
            return { _0: 39, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 };
          } else {
            return 113 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_33(input) {
  switch (input) {
    case 9: {
      return { _0: 34, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_12 };
    }
    case 32: {
      return { _0: 34, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_12 };
    }
    case 41: {
      return { _0: 35, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_13 };
    }
    default: {
      if (48 <= input && input <= 57) {
        return { _0: 33, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 };
      } else {
        if (65 <= input && input <= 90) {
          return { _0: 33, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 };
        } else {
          if (input === 95) {
            return { _0: 33, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 };
          } else {
            return 97 <= input && input <= 122 ? { _0: 33, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_34(input) {
  switch (input) {
    case 9: {
      return { _0: 34, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_12 };
    }
    case 32: {
      return { _0: 34, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_12 };
    }
    case 41: {
      return { _0: 35, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_13 };
    }
    default: {
      return { _0: -1, _1: [] };
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_35(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_36(input) {
  switch (input) {
    case 9: {
      return { _0: 34, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_12 };
    }
    case 32: {
      return { _0: 34, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_12 };
    }
    case 41: {
      return { _0: 35, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_13 };
    }
    default: {
      return 48 <= input && input <= 57 ? { _0: 36, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_11 } : { _0: -1, _1: [] };
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_37(input) {
  if (input === 40) {
    return { _0: 22, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_8 };
  } else {
    if (48 <= input && input <= 57) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (65 <= input && input <= 90) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (input === 95) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          return 97 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_38(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 114) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 115) {
            return { _0: 40, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 };
          } else {
            return 116 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_39(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 110) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 111) {
            return { _0: 41, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 };
          } else {
            return 112 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_4(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_40(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 115) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 116) {
            return { _0: 42, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 };
          } else {
            return 117 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_41(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 114) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 115) {
            return { _0: 43, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_7 };
          } else {
            return 116 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_42(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      switch (input) {
        case 95: {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        }
        case 97: {
          return { _0: 44, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 };
        }
        default: {
          return 98 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_43(input) {
  if (input === 40) {
    return { _0: 22, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_8 };
  } else {
    if (48 <= input && input <= 57) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (65 <= input && input <= 90) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (input === 95) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          return 97 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_44(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 113) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 114) {
            return { _0: 45, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 };
          } else {
            return 115 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_45(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 115) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 116) {
            return { _0: 46, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 };
          } else {
            return 117 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_46(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 111) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 112) {
            return { _0: 47, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 };
          } else {
            return 113 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_47(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 110) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 111) {
            return { _0: 48, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 };
          } else {
            return 112 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_48(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 114) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 115) {
            return { _0: 49, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_9 };
          } else {
            return 116 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_49(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        return 97 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_5(input) {
  if (48 <= input && input <= 57) {
    return { _0: 10, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_3 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 6, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 6, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 100) {
          return { _0: 6, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 101) {
            return { _0: 8, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 };
          } else {
            if (102 <= input && input <= 107) {
              return { _0: 6, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
            } else {
              if (input === 108) {
                return { _0: 7, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 };
              } else {
                if (109 <= input && input <= 114) {
                  return { _0: 6, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
                } else {
                  if (input === 115) {
                    return { _0: 9, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 };
                  } else {
                    return 116 <= input && input <= 122 ? { _0: 6, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_6(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        return 97 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_7(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 110) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 111) {
            return { _0: 12, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 };
          } else {
            return 112 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_8(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 109) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 110) {
            return { _0: 13, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 };
          } else {
            return 111 <= input && input <= 122 ? { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 } : { _0: -1, _1: [] };
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace_state_9(input) {
  if (48 <= input && input <= 57) {
    return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
  } else {
    if (65 <= input && input <= 90) {
      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
    } else {
      if (input === 95) {
        return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
      } else {
        if (97 <= input && input <= 107) {
          return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
        } else {
          if (input === 108) {
            return { _0: 14, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 };
          } else {
            if (109 <= input && input <= 115) {
              return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
            } else {
              if (input === 116) {
                return { _0: 16, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_5 };
              } else {
                if (117 <= input && input <= 120) {
                  return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
                } else {
                  switch (input) {
                    case 121: {
                      return { _0: 15, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_6 };
                    }
                    case 122: {
                      return { _0: 11, _1: moonbitlang$yacc$lib$parser$$code_rbrace_tag_action_4 };
                    }
                    default: {
                      return { _0: -1, _1: [] };
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$code_rbrace(sb, subst, base, lexbuf) {
  let _tmp = sb;
  let _tmp$2 = subst;
  let _tmp$3 = base;
  let _tmp$4 = lexbuf;
  _L: while (true) {
    const sb$2 = _tmp;
    const subst$2 = _tmp$2;
    const base$2 = _tmp$3;
    const lexbuf$2 = _tmp$4;
    const _bind = moonbitlang$yacc$lib$parser$$LexEngine$run(moonbitlang$yacc$lib$parser$$__mbtlex_engine_code_rbrace, lexbuf$2);
    const _x = _bind._0;
    switch (_x) {
      case 0: {
        moonbitlang$core$builtin$$Logger$write_string$18$(sb$2, "{");
        const _bind$2 = moonbitlang$yacc$lib$parser$$code_rbrace(sb$2, subst$2, base$2, lexbuf$2);
        if (_bind$2.$tag === 1) {
          const _ok = _bind$2;
          _ok._0;
        } else {
          return _bind$2;
        }
        moonbitlang$core$builtin$$Logger$write_string$18$(sb$2, "}");
        continue _L;
      }
      case 1: {
        return new Result$Ok$15$(undefined);
      }
      case 2: {
        const ___mbtlex_captures = _bind._1;
        const _bind$3 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures, 0);
        const __start_pos_of_t = _bind$3._0;
        const __end_pos_of_t = _bind$3._1;
        const t = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t, __end_pos_of_t);
        const _bind$4 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures, 1);
        const __start_pos_of_t1 = _bind$4._0;
        const __end_pos_of_t1 = _bind$4._1;
        const t1 = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t1, __end_pos_of_t1);
        moonbitlang$core$builtin$$Logger$write_string$18$(sb$2, t);
        let index;
        let _try_err;
        _L$2: {
          _L$3: {
            const _bind$5 = moonbitlang$core$strconv$$parse_int(t1, 10);
            if (_bind$5.$tag === 1) {
              const _ok = _bind$5;
              index = _ok._0;
            } else {
              const _err = _bind$5;
              const _tmp$5 = _err._0;
              _try_err = _tmp$5;
              break _L$3;
            }
            break _L$2;
          }
          index = moonbitlang$core$builtin$$abort$10$(moonbitlang$core$builtin$$Show$to_string$1$(_try_err));
        }
        moonbitlang$core$array$$Array$push$167$(subst$2, { start: __start_pos_of_t - base$2 | 0, end: __end_pos_of_t - base$2 | 0, desc: new $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$Dollar(index) });
        continue _L;
      }
      case 3: {
        const ___mbtlex_captures$2 = _bind._1;
        const _bind$5 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$2, 0);
        const __start_pos_of_t$2 = _bind$5._0;
        const __end_pos_of_t$2 = _bind$5._1;
        const t$2 = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$2, __end_pos_of_t$2);
        const _bind$6 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$2, 1);
        const __start_pos_of_t1$2 = _bind$6._0;
        const __end_pos_of_t1$2 = _bind$6._1;
        const t1$2 = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t1$2, __end_pos_of_t1$2);
        const _bind$7 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$2, 2);
        const __start_pos_of_t2 = _bind$7._0;
        const __end_pos_of_t2 = _bind$7._1;
        const t2 = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t2, __end_pos_of_t2);
        moonbitlang$core$builtin$$Logger$write_string$18$(sb$2, t$2);
        let arg;
        if (moonbitlang$core$string$$String$starts_with(t2, "$")) {
          let index$2;
          let _try_err$2;
          _L$3: {
            _L$4: {
              const _bind$8 = moonbitlang$core$strconv$$parse_int(moonbitlang$core$string$$String$substring(t2, 1, undefined), 10);
              if (_bind$8.$tag === 1) {
                const _ok = _bind$8;
                index$2 = _ok._0;
              } else {
                const _err = _bind$8;
                const _tmp$5 = _err._0;
                _try_err$2 = _tmp$5;
                break _L$4;
              }
              break _L$3;
            }
            index$2 = moonbitlang$core$builtin$$abort$10$(moonbitlang$core$builtin$$Show$to_string$1$(_try_err$2));
          }
          arg = new $64$moonbitlang$47$yacc$47$lib$47$parser$46$ClauseItemIdent$Dollar(index$2);
        } else {
          arg = new $64$moonbitlang$47$yacc$47$lib$47$parser$46$ClauseItemIdent$Name(t2);
        }
        const _tmp$5 = __start_pos_of_t$2 - base$2 | 0;
        const _tmp$6 = __end_pos_of_t$2 - base$2 | 0;
        let _tmp$7;
        switch (t1$2) {
          case "startpos": {
            _tmp$7 = new $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$StartPosOf(arg);
            break;
          }
          case "endpos": {
            _tmp$7 = new $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$EndPosOf(arg);
            break;
          }
          case "loc": {
            _tmp$7 = new $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$LocOf(arg);
            break;
          }
          default: {
            _tmp$7 = $panic();
          }
        }
        moonbitlang$core$array$$Array$push$167$(subst$2, { start: _tmp$5, end: _tmp$6, desc: _tmp$7 });
        continue _L;
      }
      case 4: {
        const ___mbtlex_captures$3 = _bind._1;
        const _bind$8 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$3, 0);
        const __start_pos_of_t$3 = _bind$8._0;
        const __end_pos_of_t$3 = _bind$8._1;
        const t$3 = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$3, __end_pos_of_t$3);
        const _bind$9 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$3, 1);
        const __start_pos_of_t1$3 = _bind$9._0;
        const __end_pos_of_t1$3 = _bind$9._1;
        const t1$3 = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t1$3, __end_pos_of_t1$3);
        moonbitlang$core$builtin$$Logger$write_string$18$(sb$2, t$3);
        const _tmp$8 = __start_pos_of_t$3 - base$2 | 0;
        const _tmp$9 = __end_pos_of_t$3 - base$2 | 0;
        let _tmp$10;
        switch (t1$3) {
          case "startpos": {
            _tmp$10 = $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$StartPos;
            break;
          }
          case "endpos": {
            _tmp$10 = $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$EndPos;
            break;
          }
          case "loc": {
            _tmp$10 = $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$Loc;
            break;
          }
          case "symbolstartpos": {
            _tmp$10 = $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$SymbolStartPos;
            break;
          }
          case "sloc": {
            _tmp$10 = $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$Sloc;
            break;
          }
          default: {
            _tmp$10 = $panic();
          }
        }
        moonbitlang$core$array$$Array$push$167$(subst$2, { start: _tmp$8, end: _tmp$9, desc: _tmp$10 });
        continue _L;
      }
      case 5: {
        const ___mbtlex_captures$4 = _bind._1;
        const _bind$10 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$4, 0);
        const __start_pos_of_t$4 = _bind$10._0;
        const __end_pos_of_t$4 = _bind$10._1;
        const t$4 = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$4, __end_pos_of_t$4);
        moonbitlang$core$builtin$$Logger$write_string$18$(sb$2, t$4);
        continue _L;
      }
      case 6: {
        const ___mbtlex_captures$5 = _bind._1;
        const _bind$11 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$5, 0);
        const __start_pos_of_t$5 = _bind$11._0;
        const __end_pos_of_t$5 = _bind$11._1;
        const t$5 = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$5, __end_pos_of_t$5);
        moonbitlang$core$builtin$$Logger$write_string$18$(sb$2, t$5);
        continue _L;
      }
      case 7: {
        return new Result$Err$15$(Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$UnexpectedEndOfFile);
      }
      default: {
        return new Result$Ok$15$(moonbitlang$core$builtin$$abort$9$("lex: fail to match"));
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$comment_star_rparen_state_0(input) {
  if (input === -1) {
    return { _0: 1, _1: moonbitlang$yacc$lib$parser$$comment_star_rparen_tag_action_0 };
  } else {
    if (0 <= input && input <= 39) {
      return { _0: 2, _1: moonbitlang$yacc$lib$parser$$comment_star_rparen_tag_action_0 };
    } else {
      switch (input) {
        case 40: {
          return { _0: 4, _1: moonbitlang$yacc$lib$parser$$comment_star_rparen_tag_action_0 };
        }
        case 41: {
          return { _0: 2, _1: moonbitlang$yacc$lib$parser$$comment_star_rparen_tag_action_0 };
        }
        case 42: {
          return { _0: 3, _1: moonbitlang$yacc$lib$parser$$comment_star_rparen_tag_action_0 };
        }
        default: {
          return 43 <= input && input <= 1114111 ? { _0: 2, _1: moonbitlang$yacc$lib$parser$$comment_star_rparen_tag_action_0 } : { _0: -1, _1: [] };
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$comment_star_rparen_state_1(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$comment_star_rparen_state_2(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$comment_star_rparen_state_3(input) {
  if (input === 41) {
    return { _0: 5, _1: moonbitlang$yacc$lib$parser$$comment_star_rparen_tag_action_0 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$comment_star_rparen_state_4(input) {
  if (input === 42) {
    return { _0: 6, _1: moonbitlang$yacc$lib$parser$$comment_star_rparen_tag_action_0 };
  } else {
    return { _0: -1, _1: [] };
  }
}
function moonbitlang$yacc$lib$parser$$comment_star_rparen_state_5(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$comment_star_rparen_state_6(input) {
  return { _0: -1, _1: [] };
}
function moonbitlang$yacc$lib$parser$$comment_star_rparen(lexbuf) {
  let _tmp = lexbuf;
  _L: while (true) {
    const lexbuf$2 = _tmp;
    const _bind = moonbitlang$yacc$lib$parser$$LexEngine$run(moonbitlang$yacc$lib$parser$$__mbtlex_engine_comment_star_rparen, lexbuf$2);
    const _x = _bind._0;
    switch (_x) {
      case 0: {
        const _bind$2 = moonbitlang$yacc$lib$parser$$comment_star_rparen(lexbuf$2);
        if (_bind$2.$tag === 1) {
          const _ok = _bind$2;
          _ok._0;
        } else {
          return _bind$2;
        }
        continue _L;
      }
      case 1: {
        return new Result$Ok$15$(undefined);
      }
      case 2: {
        continue _L;
      }
      case 3: {
        return new Result$Err$15$(Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$UnexpectedEndOfFile);
      }
      default: {
        return new Result$Ok$15$(moonbitlang$core$builtin$$abort$9$("lex: fail to match"));
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$token(phase, lexbuf) {
  let _tmp = phase;
  let _tmp$2 = lexbuf;
  _L: while (true) {
    const phase$2 = _tmp;
    const lexbuf$2 = _tmp$2;
    const _bind = moonbitlang$yacc$lib$parser$$LexEngine$run(moonbitlang$yacc$lib$parser$$__mbtlex_engine_token, lexbuf$2);
    const _x = _bind._0;
    switch (_x) {
      case 0: {
        continue _L;
      }
      case 1: {
        continue _L;
      }
      case 2: {
        const _bind$2 = moonbitlang$yacc$lib$parser$$comment_star_rparen(lexbuf$2);
        if (_bind$2.$tag === 1) {
          const _ok = _bind$2;
          _ok._0;
        } else {
          return _bind$2;
        }
        continue _L;
      }
      case 3: {
        continue _L;
      }
      case 4: {
        continue _L;
      }
      case 5: {
        const ___mbtlex_captures = _bind._1;
        const _bind$3 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures, 0);
        const __start_pos_of_t = _bind$3._0;
        const __end_pos_of_t = _bind$3._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t, __end_pos_of_t);
        const _bind$4 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures, 1);
        const __start_pos_of_id = _bind$4._0;
        const __end_pos_of_id = _bind$4._1;
        const id = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_id, __end_pos_of_id);
        const _bind$5 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures, 2);
        const __start_pos_of_pkg = _bind$5._0;
        const __end_pos_of_pkg = _bind$5._1;
        const pkg = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_pkg, __end_pos_of_pkg);
        return new Result$Ok$16$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PKG_AND_IDENT({ _0: pkg, _1: id }), _1: __start_pos_of_t, _2: __end_pos_of_t });
      }
      case 6: {
        const ___mbtlex_captures$2 = _bind._1;
        const _bind$6 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$2, 0);
        const __start_pos_of_t$2 = _bind$6._0;
        const __end_pos_of_t$2 = _bind$6._1;
        const t = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$2, __end_pos_of_t$2);
        return new Result$Ok$16$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$IDENT(t), _1: __start_pos_of_t$2, _2: __end_pos_of_t$2 });
      }
      case 7: {
        const ___mbtlex_captures$3 = _bind._1;
        const _bind$7 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$3, 0);
        const __start_pos_of_t$3 = _bind$7._0;
        const __end_pos_of_t$3 = _bind$7._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$3, __end_pos_of_t$3);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_START, _1: __start_pos_of_t$3, _2: __end_pos_of_t$3 });
      }
      case 8: {
        const ___mbtlex_captures$4 = _bind._1;
        const _bind$8 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$4, 0);
        const __start_pos_of_t$4 = _bind$8._0;
        const __end_pos_of_t$4 = _bind$8._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$4, __end_pos_of_t$4);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_TOKEN, _1: __start_pos_of_t$4, _2: __end_pos_of_t$4 });
      }
      case 9: {
        const ___mbtlex_captures$5 = _bind._1;
        const _bind$9 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$5, 0);
        const __start_pos_of_t$5 = _bind$9._0;
        const __end_pos_of_t$5 = _bind$9._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$5, __end_pos_of_t$5);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_TYPE, _1: __start_pos_of_t$5, _2: __end_pos_of_t$5 });
      }
      case 10: {
        const ___mbtlex_captures$6 = _bind._1;
        const _bind$10 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$6, 0);
        const __start_pos_of_t$6 = _bind$10._0;
        const __end_pos_of_t$6 = _bind$10._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$6, __end_pos_of_t$6);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_POSITION, _1: __start_pos_of_t$6, _2: __end_pos_of_t$6 });
      }
      case 11: {
        const ___mbtlex_captures$7 = _bind._1;
        const _bind$11 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$7, 0);
        const __start_pos_of_t$7 = _bind$11._0;
        const __end_pos_of_t$7 = _bind$11._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$7, __end_pos_of_t$7);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_LEFT, _1: __start_pos_of_t$7, _2: __end_pos_of_t$7 });
      }
      case 12: {
        const ___mbtlex_captures$8 = _bind._1;
        const _bind$12 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$8, 0);
        const __start_pos_of_t$8 = _bind$12._0;
        const __end_pos_of_t$8 = _bind$12._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$8, __end_pos_of_t$8);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_RIGHT, _1: __start_pos_of_t$8, _2: __end_pos_of_t$8 });
      }
      case 13: {
        const ___mbtlex_captures$9 = _bind._1;
        const _bind$13 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$9, 0);
        const __start_pos_of_t$9 = _bind$13._0;
        const __end_pos_of_t$9 = _bind$13._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$9, __end_pos_of_t$9);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_NONASSOC, _1: __start_pos_of_t$9, _2: __end_pos_of_t$9 });
      }
      case 14: {
        const ___mbtlex_captures$10 = _bind._1;
        const _bind$14 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$10, 0);
        const __start_pos_of_t$10 = _bind$14._0;
        const __end_pos_of_t$10 = _bind$14._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$10, __end_pos_of_t$10);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_PREC, _1: __start_pos_of_t$10, _2: __end_pos_of_t$10 });
      }
      case 15: {
        const ___mbtlex_captures$11 = _bind._1;
        const _bind$15 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$11, 0);
        const __start_pos_of_t$11 = _bind$15._0;
        const __end_pos_of_t$11 = _bind$15._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$11, __end_pos_of_t$11);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_DERIVE, _1: __start_pos_of_t$11, _2: __end_pos_of_t$11 });
      }
      case 16: {
        const ___mbtlex_captures$12 = _bind._1;
        const _bind$16 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$12, 0);
        const __start_pos_of_t$12 = _bind$16._0;
        const __end_pos_of_t$12 = _bind$16._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$12, __end_pos_of_t$12);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_INLINE, _1: __start_pos_of_t$12, _2: __end_pos_of_t$12 });
      }
      case 17: {
        const ___mbtlex_captures$13 = _bind._1;
        const _bind$17 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$13, 0);
        const __start_pos_of_t$13 = _bind$17._0;
        const __end_pos_of_t$13 = _bind$17._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$13, __end_pos_of_t$13);
        if (phase$2.val <= 0) {
          phase$2.val = phase$2.val + 1 | 0;
          return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_PERCENT, _1: __start_pos_of_t$13, _2: __end_pos_of_t$13 });
        } else {
          phase$2.val = phase$2.val + 1 | 0;
          const sb = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default());
          moonbitlang$yacc$lib$parser$$code_eof(sb, lexbuf$2);
          return new Result$Ok$16$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_PERCENT_CODE_EOF(moonbitlang$core$builtin$$StringBuilder$to_string(sb)), _1: __start_pos_of_t$13, _2: __end_pos_of_t$13 });
        }
      }
      case 18: {
        const ___mbtlex_captures$14 = _bind._1;
        const _bind$18 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$14, 0);
        const __start_pos_of_t$14 = _bind$18._0;
        const __end_pos_of_t$14 = _bind$18._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$14, __end_pos_of_t$14);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$ARROW, _1: __start_pos_of_t$14, _2: __end_pos_of_t$14 });
      }
      case 19: {
        const ___mbtlex_captures$15 = _bind._1;
        const _bind$19 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$15, 0);
        const __start_pos_of_t$15 = _bind$19._0;
        const __end_pos_of_t$15 = _bind$19._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$15, __end_pos_of_t$15);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$COLON, _1: __start_pos_of_t$15, _2: __end_pos_of_t$15 });
      }
      case 20: {
        const ___mbtlex_captures$16 = _bind._1;
        const _bind$20 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$16, 0);
        const __start_pos_of_t$16 = _bind$20._0;
        const __end_pos_of_t$16 = _bind$20._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$16, __end_pos_of_t$16);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$BAR, _1: __start_pos_of_t$16, _2: __end_pos_of_t$16 });
      }
      case 21: {
        const ___mbtlex_captures$17 = _bind._1;
        const _bind$21 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$17, 0);
        const __start_pos_of_t$17 = _bind$21._0;
        const __end_pos_of_t$17 = _bind$21._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$17, __end_pos_of_t$17);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$EQ, _1: __start_pos_of_t$17, _2: __end_pos_of_t$17 });
      }
      case 22: {
        const ___mbtlex_captures$18 = _bind._1;
        const _bind$22 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$18, 0);
        const __start_pos_of_t$18 = _bind$22._0;
        const __end_pos_of_t$18 = _bind$22._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$18, __end_pos_of_t$18);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$SEMI, _1: __start_pos_of_t$18, _2: __end_pos_of_t$18 });
      }
      case 23: {
        const ___mbtlex_captures$19 = _bind._1;
        const _bind$23 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$19, 0);
        const __start_pos_of_t$19 = _bind$23._0;
        const __end_pos_of_t$19 = _bind$23._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$19, __end_pos_of_t$19);
        const sb = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default());
        const _bind$24 = moonbitlang$yacc$lib$parser$$code_percent_rbrace(sb, lexbuf$2);
        if (_bind$24.$tag === 1) {
          const _ok = _bind$24;
          _ok._0;
        } else {
          return _bind$24;
        }
        return new Result$Ok$16$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$PERCENT_LBRACE_CODE_PERCENT_RBRACE(moonbitlang$core$builtin$$StringBuilder$to_string(sb)), _1: __start_pos_of_t$19, _2: __end_pos_of_t$19 });
      }
      case 24: {
        const ___mbtlex_captures$20 = _bind._1;
        const _bind$25 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$20, 0);
        const __start_pos_of_t$20 = _bind$25._0;
        const __end_pos_of_t$20 = _bind$25._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$20, __end_pos_of_t$20);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LANGLE, _1: __start_pos_of_t$20, _2: __end_pos_of_t$20 });
      }
      case 25: {
        const ___mbtlex_captures$21 = _bind._1;
        const _bind$26 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$21, 0);
        const __start_pos_of_t$21 = _bind$26._0;
        const __end_pos_of_t$21 = _bind$26._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$21, __end_pos_of_t$21);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$RANGLE, _1: __start_pos_of_t$21, _2: __end_pos_of_t$21 });
      }
      case 26: {
        const ___mbtlex_captures$22 = _bind._1;
        const _bind$27 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$22, 0);
        const __start_pos_of_t$22 = _bind$27._0;
        const __end_pos_of_t$22 = _bind$27._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$22, __end_pos_of_t$22);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LBRACKET, _1: __start_pos_of_t$22, _2: __end_pos_of_t$22 });
      }
      case 27: {
        const ___mbtlex_captures$23 = _bind._1;
        const _bind$28 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$23, 0);
        const __start_pos_of_t$23 = _bind$28._0;
        const __end_pos_of_t$23 = _bind$28._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$23, __end_pos_of_t$23);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$RBRACKET, _1: __start_pos_of_t$23, _2: __end_pos_of_t$23 });
      }
      case 28: {
        const ___mbtlex_captures$24 = _bind._1;
        const _bind$29 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$24, 0);
        const __start_pos_of_t$24 = _bind$29._0;
        const __end_pos_of_t$24 = _bind$29._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$24, __end_pos_of_t$24);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LPAREN, _1: __start_pos_of_t$24, _2: __end_pos_of_t$24 });
      }
      case 29: {
        const ___mbtlex_captures$25 = _bind._1;
        const _bind$30 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$25, 0);
        const __start_pos_of_t$25 = _bind$30._0;
        const __end_pos_of_t$25 = _bind$30._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$25, __end_pos_of_t$25);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$RPAREN, _1: __start_pos_of_t$25, _2: __end_pos_of_t$25 });
      }
      case 30: {
        const ___mbtlex_captures$26 = _bind._1;
        const _bind$31 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$26, 0);
        const __start_pos_of_t$26 = _bind$31._0;
        const __end_pos_of_t$26 = _bind$31._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$26, __end_pos_of_t$26);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$COMMA, _1: __start_pos_of_t$26, _2: __end_pos_of_t$26 });
      }
      case 31: {
        const ___mbtlex_captures$27 = _bind._1;
        const _bind$32 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$27, 0);
        const __start_pos_of_t$27 = _bind$32._0;
        const __end_pos_of_t$27 = _bind$32._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$27, __end_pos_of_t$27);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$QUESTION, _1: __start_pos_of_t$27, _2: __end_pos_of_t$27 });
      }
      case 32: {
        const ___mbtlex_captures$28 = _bind._1;
        const _bind$33 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$28, 0);
        const __start_pos_of_t$28 = _bind$33._0;
        const __end_pos_of_t$28 = _bind$33._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$28, __end_pos_of_t$28);
        const sb$2 = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default());
        const subst = [];
        const base = lexbuf$2.pos;
        const _bind$34 = moonbitlang$yacc$lib$parser$$code_rbrace(sb$2, subst, base, lexbuf$2);
        if (_bind$34.$tag === 1) {
          const _ok = _bind$34;
          _ok._0;
        } else {
          return _bind$34;
        }
        return new Result$Ok$16$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$LBRACE_CODE_RBRACE({ _0: moonbitlang$core$builtin$$StringBuilder$to_string(sb$2), _1: base, _2: subst }), _1: __start_pos_of_t$28, _2: lexbuf$2.pos });
      }
      case 33: {
        const ___mbtlex_captures$29 = _bind._1;
        const _bind$35 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$29, 0);
        const __start_pos_of_t$29 = _bind$35._0;
        const __end_pos_of_t$29 = _bind$35._1;
        const t$2 = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$29, __end_pos_of_t$29);
        return new Result$Ok$16$({ _0: new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$STRING(t$2), _1: __start_pos_of_t$29, _2: __end_pos_of_t$29 });
      }
      case 34: {
        const ___mbtlex_captures$30 = _bind._1;
        const _bind$36 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$30, 0);
        const __start_pos_of_t$30 = _bind$36._0;
        const __end_pos_of_t$30 = _bind$36._1;
        const t$3 = moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$30, __end_pos_of_t$30);
        return new Result$Err$16$(new Error$moonbitlang$47$yacc$47$lib$47$parser$46$LexError$46$Unrecognized(t$3));
      }
      case 35: {
        const ___mbtlex_captures$31 = _bind._1;
        const _bind$37 = moonbitlang$core$array$$Array$op_get$119$(___mbtlex_captures$31, 0);
        const __start_pos_of_t$31 = _bind$37._0;
        const __end_pos_of_t$31 = _bind$37._1;
        moonbitlang$yacc$lib$parser$$Lexbuf$substring(lexbuf$2, __start_pos_of_t$31, __end_pos_of_t$31);
        return new Result$Ok$16$({ _0: $64$moonbitlang$47$yacc$47$lib$47$parser$46$Token$EOF, _1: __start_pos_of_t$31, _2: __end_pos_of_t$31 });
      }
      default: {
        return new Result$Ok$16$(moonbitlang$core$builtin$$abort$20$("lex: fail to match"));
      }
    }
  }
}
function moonbitlang$yacc$lib$parser$$new_lexer(input) {
  return { buf: moonbitlang$yacc$lib$parser$$Lexbuf$from_string(input), phase: { val: 0 } };
}
function moonbitlang$yacc$lib$parser$$Lexer$next_token(self) {
  return moonbitlang$yacc$lib$parser$$token(self.phase, self.buf);
}
function moonbitlang$yacc$lib$parser$$Token$kind(self) {
  switch (self.$tag) {
    case 0: {
      return 0;
    }
    case 1: {
      return 1;
    }
    case 2: {
      return 2;
    }
    case 3: {
      return 3;
    }
    case 4: {
      return 4;
    }
    case 5: {
      return 5;
    }
    case 6: {
      return 6;
    }
    case 7: {
      return 7;
    }
    case 8: {
      return 8;
    }
    case 9: {
      return 9;
    }
    case 10: {
      return 10;
    }
    case 11: {
      return 11;
    }
    case 12: {
      return 12;
    }
    case 13: {
      return 13;
    }
    case 14: {
      return 14;
    }
    case 15: {
      return 15;
    }
    case 16: {
      return 16;
    }
    case 17: {
      return 17;
    }
    case 18: {
      return 18;
    }
    case 19: {
      return 19;
    }
    case 20: {
      return 20;
    }
    case 21: {
      return 21;
    }
    case 22: {
      return 22;
    }
    case 23: {
      return 23;
    }
    case 24: {
      return 24;
    }
    case 25: {
      return 25;
    }
    case 26: {
      return 26;
    }
    case 27: {
      return 27;
    }
    case 28: {
      return 28;
    }
    case 29: {
      return 29;
    }
    default: {
      return 30;
    }
  }
}
function moonbitlang$core$builtin$$Show$output$166$(self, logger) {
  let _tmp;
  switch (self) {
    case 0: {
      _tmp = "EOF";
      break;
    }
    case 1: {
      _tmp = "IDENT";
      break;
    }
    case 2: {
      _tmp = "STRING";
      break;
    }
    case 3: {
      _tmp = "LBRACE_CODE_RBRACE";
      break;
    }
    case 4: {
      _tmp = "PERCENT_LBRACE_CODE_PERCENT_RBRACE";
      break;
    }
    case 5: {
      _tmp = "PERCENT_PERCENT_CODE_EOF";
      break;
    }
    case 6: {
      _tmp = "PKG_AND_IDENT";
      break;
    }
    case 7: {
      _tmp = "\"%%\"";
      break;
    }
    case 8: {
      _tmp = "\"%start\"";
      break;
    }
    case 9: {
      _tmp = "\"%token\"";
      break;
    }
    case 10: {
      _tmp = "\"%type\"";
      break;
    }
    case 11: {
      _tmp = "\"%position\"";
      break;
    }
    case 12: {
      _tmp = "\"%left\"";
      break;
    }
    case 13: {
      _tmp = "\"%right\"";
      break;
    }
    case 14: {
      _tmp = "\"%nonassoc\"";
      break;
    }
    case 15: {
      _tmp = "\"%prec\"";
      break;
    }
    case 16: {
      _tmp = "\"%derive\"";
      break;
    }
    case 17: {
      _tmp = "\"%inline\"";
      break;
    }
    case 18: {
      _tmp = "\"<\"";
      break;
    }
    case 19: {
      _tmp = "\">\"";
      break;
    }
    case 20: {
      _tmp = "\"[\"";
      break;
    }
    case 21: {
      _tmp = "\"]\"";
      break;
    }
    case 22: {
      _tmp = "\"(\"";
      break;
    }
    case 23: {
      _tmp = "\")\"";
      break;
    }
    case 24: {
      _tmp = "\",\"";
      break;
    }
    case 25: {
      _tmp = "\"->\"";
      break;
    }
    case 26: {
      _tmp = "\"?\"";
      break;
    }
    case 27: {
      _tmp = "\":\"";
      break;
    }
    case 28: {
      _tmp = "\"|\"";
      break;
    }
    case 29: {
      _tmp = "\"=\"";
      break;
    }
    default: {
      _tmp = "\";\"";
    }
  }
  logger.method_0(logger.self, _tmp);
}
(() => {
})();
function moonbitlang$yacc$lib$parser$$yy_action_0(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 4) {
    const _YYObj__immut_list_T_Symbol_ = _bind;
    const _symbol_list = _YYObj__immut_list_T_Symbol_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Declaration$46$YYObj_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Start(moonbitlang$core$immut$list$$T$to_array$11$(_symbol_list)));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_1(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__String__TypeExpr___$46$YYObj__immut_list_T__String__TypeExpr___(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$17$({ _0: __dollar1, _1: undefined }, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$17$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_2(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const _type_ = _YYObj_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 4)._0;
    if (_bind$2.$tag === 9) {
      const _YYObj_Symbol = _bind$2;
      const _symbol = _YYObj_Symbol._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 5)._0;
      if (_bind$3.$tag === 6) {
        const _YYObj_String = _bind$3;
        const _image = _YYObj_String._0;
        return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Declaration$46$YYObj_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Token1(_symbol, _type_, _image));
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_3(_last_pos, _args) {
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Array_String_$46$YYObj_Array_String_([]);
}
function moonbitlang$yacc$lib$parser$$yy_action_4(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const __dollar2 = _YYObj_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 3)._0;
    if (_bind$2.$tag === 11) {
      const _YYObj__immut_list_T_TypeExpr_ = _bind$2;
      const __dollar4 = _YYObj__immut_list_T_TypeExpr_._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 6)._0;
      if (_bind$3.$tag === 8) {
        const _YYObj_TypeExpr$2 = _bind$3;
        const __dollar7 = _YYObj_TypeExpr$2._0;
        return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Arrow(moonbitlang$core$immut$list$$T$to_array$59$(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$18$(__dollar2, __dollar4)), __dollar7));
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_5(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj_Term = _bind;
    const _term = _YYObj_Term._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Term_$46$YYObj__immut_list_T_Term_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$19$(_term, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$19$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_6(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 9) {
    const _YYObj_Symbol = _bind;
    const _symbol = _YYObj_Symbol._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
    if (_bind$2.$tag === 6) {
      const _YYObj_String = _bind$2;
      const _image = _YYObj_String._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Declaration$46$YYObj_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Token1(_symbol, undefined, _image));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_7(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const __dollar1 = _YYObj_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_8(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 14) {
    const _YYObj_ClauseItem = _bind;
    const _item = _YYObj_ClauseItem._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
    if (_bind$2.$tag === 15) {
      const _YYObj__immut_list_T_ClauseItem_ = _bind$2;
      const _item_list = _YYObj__immut_list_T_ClauseItem_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_ClauseItem_$46$YYObj__immut_list_T_ClauseItem_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$20$(_item, _item_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_9(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 16) {
    const _YYObj__String__String_ = _bind;
    const __dollar1 = _YYObj__String__String_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
    if (_bind$2.$tag === 11) {
      const _YYObj__immut_list_T_TypeExpr_ = _bind$2;
      const __dollar3 = _YYObj__immut_list_T_TypeExpr_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Constr(__dollar1._0, __dollar1._1, moonbitlang$core$immut$list$$T$to_array$59$(__dollar3)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_10(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj_String = _bind;
    const _binder = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
    if (_bind$2.$tag === 12) {
      const _YYObj_Term = _bind$2;
      const _term = _YYObj_Term._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_ClauseItem$46$YYObj_ClauseItem({ binder: _binder, term: _term });
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_11(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj_String = _bind;
    const _image = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Term$46$YYObj_Term(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Term$Image(_image));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_12(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
    if (_bind$2.$tag === 8) {
      const _YYObj_TypeExpr = _bind$2;
      const __dollar3 = _YYObj_TypeExpr._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 4)._0;
      if (_bind$3.$tag === 7) {
        const _YYObj__immut_list_T__String__TypeExpr___ = _bind$3;
        const __dollar5 = _YYObj__immut_list_T__String__TypeExpr___._0;
        return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__String__TypeExpr___$46$YYObj__immut_list_T__String__TypeExpr___(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$17$({ _0: __dollar1, _1: __dollar3 }, __dollar5));
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_13(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 4) {
    const _YYObj__immut_list_T_Symbol_ = _bind;
    const _symbol_list = _YYObj__immut_list_T_Symbol_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Declaration$46$YYObj_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Token(moonbitlang$core$immut$list$$T$to_array$11$(_symbol_list), undefined));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_14(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj_String = _bind;
    const _code = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Code_$46$YYObj_Code_(_code);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_15(_last_pos, _args) {
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr_$46$YYObj_TypeExpr_(undefined);
}
function moonbitlang$yacc$lib$parser$$yy_action_16(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
    if (_bind$2.$tag === 11) {
      const _YYObj__immut_list_T_TypeExpr_ = _bind$2;
      const __dollar3 = _YYObj__immut_list_T_TypeExpr_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Constr(undefined, __dollar1, moonbitlang$core$immut$list$$T$to_array$59$(__dollar3)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_17(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 19) {
    const _YYObj_Rule = _bind;
    const __dollar2 = _YYObj_Rule._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Rule$46$YYObj_Rule({ inline: true, nonterminal: __dollar2.nonterminal, generic_params: __dollar2.generic_params, params: __dollar2.params, type_: __dollar2.type_, clauses: __dollar2.clauses });
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_18(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Constr(undefined, __dollar1, []));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_19(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 4) {
    const _YYObj__immut_list_T_Symbol_ = _bind;
    const _symbol_list = _YYObj__immut_list_T_Symbol_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Declaration$46$YYObj_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Left(moonbitlang$core$immut$list$$T$to_array$11$(_symbol_list)));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_20(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj_String = _bind;
    const _ident = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Symbol$46$YYObj_Symbol(_ident);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_21(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 3)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const __dollar4 = _YYObj_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Arrow([], __dollar4));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_22(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const _type_ = _YYObj_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 4)._0;
    if (_bind$2.$tag === 4) {
      const _YYObj__immut_list_T_Symbol_ = _bind$2;
      const _symbol_list = _YYObj__immut_list_T_Symbol_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Declaration$46$YYObj_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Token(moonbitlang$core$immut$list$$T$to_array$11$(_symbol_list), _type_));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_23(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 4) {
    const _YYObj__immut_list_T_Symbol_ = _bind;
    const _symbol_list = _YYObj__immut_list_T_Symbol_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Declaration$46$YYObj_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Nonassoc(moonbitlang$core$immut$list$$T$to_array$11$(_symbol_list)));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_24(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 9) {
    const _YYObj_Symbol = _bind;
    const _nonterminal = _YYObj_Symbol._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
    if (_bind$2.$tag === 18) {
      const _YYObj_TypeExpr_ = _bind$2;
      const _type_ = _YYObj_TypeExpr_._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 3)._0;
      if (_bind$3.$tag === 20) {
        const _YYObj__immut_list_T_Clause_ = _bind$3;
        const _clause_list = _YYObj__immut_list_T_Clause_._0;
        return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Rule$46$YYObj_Rule({ inline: false, nonterminal: _nonterminal, generic_params: [], params: [], type_: _type_, clauses: moonbitlang$core$immut$list$$T$to_array$56$(_clause_list) });
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_25(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 19) {
    const _YYObj_Rule = _bind;
    const _rule = _YYObj_Rule._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Rule_$46$YYObj__immut_list_T_Rule_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$21$(_rule, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$21$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_26(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 16) {
    const _YYObj__String__String_ = _bind;
    const __dollar1 = _YYObj__String__String_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Constr(__dollar1._0, __dollar1._1, []));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_27(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 9) {
    const _YYObj_Symbol = _bind;
    const _symbol = _YYObj_Symbol._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
    if (_bind$2.$tag === 4) {
      const _YYObj__immut_list_T_Symbol_ = _bind$2;
      const _symbol_list = _YYObj__immut_list_T_Symbol_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Symbol_$46$YYObj__immut_list_T_Symbol_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$22$(_symbol, _symbol_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_28(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 22) {
    const _YYObj_Clause = _bind;
    const _clause = _YYObj_Clause._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
    if (_bind$2.$tag === 20) {
      const _YYObj__immut_list_T_Clause_ = _bind$2;
      const _clause_list = _YYObj__immut_list_T_Clause_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Clause_$46$YYObj__immut_list_T_Clause_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$23$(_clause, _clause_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_29(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj_Term = _bind;
    const _term = _YYObj_Term._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
    if (_bind$2.$tag === 13) {
      const _YYObj__immut_list_T_Term_ = _bind$2;
      const _term_list = _YYObj__immut_list_T_Term_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Term_$46$YYObj__immut_list_T_Term_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$19$(_term, _term_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_30(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 9) {
    const _YYObj_Symbol = _bind;
    const _symbol = _YYObj_Symbol._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Symbol_$46$YYObj_Symbol_(_symbol);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_31(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const __dollar2 = _YYObj_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 3)._0;
    if (_bind$2.$tag === 11) {
      const _YYObj__immut_list_T_TypeExpr_ = _bind$2;
      const __dollar4 = _YYObj__immut_list_T_TypeExpr_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Tuple(moonbitlang$core$immut$list$$T$to_array$59$(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$18$(__dollar2, __dollar4))));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_32(_last_pos, _args) {
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Code_$46$YYObj_Code_(undefined);
}
function moonbitlang$yacc$lib$parser$$yy_action_33(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const _type_expr = _YYObj_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_TypeExpr_$46$YYObj__immut_list_T_TypeExpr_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$18$(_type_expr, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$18$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_34(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj_Term = _bind;
    const _term = _YYObj_Term._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_ClauseItem$46$YYObj_ClauseItem({ binder: undefined, term: _term });
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_35(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const _type_ = _YYObj_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr_$46$YYObj_TypeExpr_(_type_);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_36(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const __dollar2 = _YYObj_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 5)._0;
    if (_bind$2.$tag === 8) {
      const _YYObj_TypeExpr$2 = _bind$2;
      const __dollar6 = _YYObj_TypeExpr$2._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Arrow([__dollar2], __dollar6));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_37(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const _type_ = _YYObj_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Declaration$46$YYObj_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Position(_type_));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_38(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const __dollar2 = _YYObj_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 4)._0;
    if (_bind$2.$tag === 8) {
      const _YYObj_TypeExpr$2 = _bind$2;
      const __dollar5 = _YYObj_TypeExpr$2._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Arrow([__dollar2], __dollar5));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_39(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 9) {
    const _YYObj_Symbol = _bind;
    const _symbol = _YYObj_Symbol._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Term$46$YYObj_Term(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Term$Symbol(_symbol));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_40(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 17) {
    const _YYObj_Code_ = _bind;
    const _header = _YYObj_Code_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
    if (_bind$2.$tag === 24) {
      const _YYObj__immut_list_T_Declaration_ = _bind$2;
      const _decl_list = _YYObj__immut_list_T_Declaration_._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 3)._0;
      if (_bind$3.$tag === 21) {
        const _YYObj__immut_list_T_Rule_ = _bind$3;
        const _rule_list = _YYObj__immut_list_T_Rule_._0;
        const _bind$4 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 4)._0;
        if (_bind$4.$tag === 17) {
          const _YYObj_Code_$2 = _bind$4;
          const _trailer = _YYObj_Code_$2._0;
          return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_ParserSpec$46$YYObj_ParserSpec({ header: _header, trailer: _trailer, decls: moonbitlang$core$immut$list$$T$to_array$58$(_decl_list), rules: moonbitlang$core$immut$list$$T$to_array$57$(_rule_list) });
        } else {
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_41(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj_String = _bind;
    const _code = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Code_$46$YYObj_Code_(_code);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_42(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 19) {
    const _YYObj_Rule = _bind;
    const __dollar1 = _YYObj_Rule._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Rule$46$YYObj_Rule(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_43(_last_pos, _args) {
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Code_$46$YYObj_Code_(undefined);
}
function moonbitlang$yacc$lib$parser$$yy_action_44(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
    if (_bind$2.$tag === 26) {
      const _YYObj__immut_list_T_String_ = _bind$2;
      const __dollar3 = _YYObj__immut_list_T_String_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_String_$46$YYObj__immut_list_T_String_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$22$(__dollar1, __dollar3));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_45(_last_pos, _args) {
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_ClauseItem_$46$YYObj__immut_list_T_ClauseItem_($64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$20$);
}
function moonbitlang$yacc$lib$parser$$yy_action_46(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 9) {
    const _YYObj_Symbol = _bind;
    const _symbol = _YYObj_Symbol._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Symbol_$46$YYObj__immut_list_T_Symbol_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$22$(_symbol, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$22$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_47(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 9) {
    const _YYObj_Symbol = _bind;
    const _nonterminal = _YYObj_Symbol._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
    if (_bind$2.$tag === 10) {
      const _YYObj_Array_String_ = _bind$2;
      const _generic_params = _YYObj_Array_String_._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 3)._0;
      if (_bind$3.$tag === 7) {
        const _YYObj__immut_list_T__String__TypeExpr___ = _bind$3;
        const _param_list = _YYObj__immut_list_T__String__TypeExpr___._0;
        const _bind$4 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 5)._0;
        if (_bind$4.$tag === 18) {
          const _YYObj_TypeExpr_ = _bind$4;
          const _type_ = _YYObj_TypeExpr_._0;
          const _bind$5 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 7)._0;
          if (_bind$5.$tag === 20) {
            const _YYObj__immut_list_T_Clause_ = _bind$5;
            const _clause_list = _YYObj__immut_list_T_Clause_._0;
            return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Rule$46$YYObj_Rule({ inline: false, nonterminal: _nonterminal, generic_params: _generic_params, params: moonbitlang$core$immut$list$$T$to_array$53$(_param_list), type_: _type_, clauses: moonbitlang$core$immut$list$$T$to_array$56$(_clause_list) });
          } else {
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_48(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const __dollar1 = _YYObj_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_49(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
    if (_bind$2.$tag === 8) {
      const _YYObj_TypeExpr = _bind$2;
      const __dollar3 = _YYObj_TypeExpr._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__String__TypeExpr___$46$YYObj__immut_list_T__String__TypeExpr___(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$17$({ _0: __dollar1, _1: __dollar3 }, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$17$));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_50(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const _type_ = _YYObj_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 4)._0;
    if (_bind$2.$tag === 4) {
      const _YYObj__immut_list_T_Symbol_ = _bind$2;
      const _symbol_list = _YYObj__immut_list_T_Symbol_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Declaration$46$YYObj_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Type(moonbitlang$core$immut$list$$T$to_array$11$(_symbol_list), _type_));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_51(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
    if (_bind$2.$tag === 7) {
      const _YYObj__immut_list_T__String__TypeExpr___ = _bind$2;
      const __dollar3 = _YYObj__immut_list_T__String__TypeExpr___._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T__String__TypeExpr___$46$YYObj__immut_list_T__String__TypeExpr___(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$17$({ _0: __dollar1, _1: undefined }, __dollar3));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_52(_last_pos, _args) {
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Declaration_$46$YYObj__immut_list_T_Declaration_($64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$24$);
}
function moonbitlang$yacc$lib$parser$$yy_action_53(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
  if (_bind.$tag === 11) {
    const _YYObj__immut_list_T_TypeExpr_ = _bind;
    const _trait_list = _YYObj__immut_list_T_TypeExpr_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 4)._0;
    if (_bind$2.$tag === 6) {
      const _YYObj_String = _bind$2;
      const _type_ = _YYObj_String._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Declaration$46$YYObj_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Derive(moonbitlang$core$immut$list$$T$to_array$59$(_trait_list), _type_));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_54(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 15) {
    const _YYObj__immut_list_T_ClauseItem_ = _bind;
    const _item_list = _YYObj__immut_list_T_ClauseItem_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
    if (_bind$2.$tag === 23) {
      const _YYObj_Symbol_ = _bind$2;
      const _prec = _YYObj_Symbol_._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
      if (_bind$3.$tag === 27) {
        const _YYObj_ClauseAction = _bind$3;
        const _action = _YYObj_ClauseAction._0;
        return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Clause$46$YYObj_Clause({ items: moonbitlang$core$immut$list$$T$to_array$55$(_item_list), prec: _prec, action: _action });
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_55(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const __dollar1 = _YYObj_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$TypeExpr$Option(__dollar1));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_56(_last_pos, _args) {
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Symbol_$46$YYObj_Symbol_(undefined);
}
function moonbitlang$yacc$lib$parser$$yy_action_57(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 19) {
    const _YYObj_Rule = _bind;
    const _rule = _YYObj_Rule._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
    if (_bind$2.$tag === 21) {
      const _YYObj__immut_list_T_Rule_ = _bind$2;
      const _rule_list = _YYObj__immut_list_T_Rule_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Rule_$46$YYObj__immut_list_T_Rule_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$21$(_rule, _rule_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_58(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_String_$46$YYObj__immut_list_T_String_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$22$(__dollar1, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$22$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_59(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 6) {
    const _YYObj_String = _bind;
    const _code = _YYObj_String._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Code_$46$YYObj_Code_(_code);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_60(_last_pos, _args) {
  return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_ClauseAction$46$YYObj_ClauseAction({ code: undefined, start: _last_pos, end: _last_pos });
}
function moonbitlang$yacc$lib$parser$$yy_action_61(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 4) {
    const _YYObj__immut_list_T_Symbol_ = _bind;
    const _symbol_list = _YYObj__immut_list_T_Symbol_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Declaration$46$YYObj_Declaration(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Declaration$Right(moonbitlang$core$immut$list$$T$to_array$11$(_symbol_list)));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_62(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 22) {
    const _YYObj_Clause = _bind;
    const _clause = _YYObj_Clause._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Clause_$46$YYObj__immut_list_T_Clause_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$23$(_clause, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$23$));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_63(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const _type_expr = _YYObj_TypeExpr._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
    if (_bind$2.$tag === 11) {
      const _YYObj__immut_list_T_TypeExpr_ = _bind$2;
      const _type_expr_list = _YYObj__immut_list_T_TypeExpr_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_TypeExpr_$46$YYObj__immut_list_T_TypeExpr_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$18$(_type_expr, _type_expr_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_64(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 8) {
    const _YYObj_TypeExpr = _bind;
    const __dollar2 = _YYObj_TypeExpr._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_TypeExpr$46$YYObj_TypeExpr(__dollar2);
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_65(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 28) {
    const _YYObj__String__Int__Array_SubstItem__ = _bind;
    const _code = _YYObj__String__Int__Array_SubstItem__._0;
    const _start_pos = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._1;
    const _end_pos = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._2;
    const _code$2 = _code._0;
    const _utf8_pos = _code._1;
    const _subst = _code._2;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_ClauseAction$46$YYObj_ClauseAction({ code: { code: _code$2, utf8_pos: _utf8_pos, subst: _subst }, start: _start_pos, end: _end_pos });
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_66(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
  if (_bind.$tag === 26) {
    const _YYObj__immut_list_T_String_ = _bind;
    const __dollar2 = _YYObj__immut_list_T_String_._0;
    return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Array_String_$46$YYObj_Array_String_(moonbitlang$core$immut$list$$T$to_array$11$(__dollar2));
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_67(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 5) {
    const _YYObj_Declaration = _bind;
    const _decl = _YYObj_Declaration._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 1)._0;
    if (_bind$2.$tag === 24) {
      const _YYObj__immut_list_T_Declaration_ = _bind$2;
      const _decl_list = _YYObj__immut_list_T_Declaration_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__immut_list_T_Declaration_$46$YYObj__immut_list_T_Declaration_(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$(_decl, _decl_list));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_action_68(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 0)._0;
  if (_bind.$tag === 9) {
    const _YYObj_Symbol = _bind;
    const _symbol = _YYObj_Symbol._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$99$(_args, 2)._0;
    if (_bind$2.$tag === 13) {
      const _YYObj__immut_list_T_Term_ = _bind$2;
      const __dollar3 = _YYObj__immut_list_T_Term_._0;
      return new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Term$46$YYObj_Term(new $64$moonbitlang$47$yacc$47$lib$47$parser$46$Term$RuleCall(_symbol, moonbitlang$core$immut$list$$T$to_array$54$(__dollar3)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$parser$$yy_input(token, _start_pos, _end_pos) {
  switch (token.$tag) {
    case 0: {
      return { _0: 0, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 1: {
      const _IDENT = token;
      const _data = _IDENT._0;
      return { _0: 1, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_String$46$YYObj_String(_data) };
    }
    case 2: {
      const _STRING = token;
      const _data$2 = _STRING._0;
      return { _0: 2, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_String$46$YYObj_String(_data$2) };
    }
    case 3: {
      const _LBRACE_CODE_RBRACE = token;
      const _data$3 = _LBRACE_CODE_RBRACE._0;
      return { _0: 3, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__Int__Array_SubstItem__$46$YYObj__String__Int__Array_SubstItem__(_data$3) };
    }
    case 4: {
      const _PERCENT_LBRACE_CODE_PERCENT_RBRACE = token;
      const _data$4 = _PERCENT_LBRACE_CODE_PERCENT_RBRACE._0;
      return { _0: 4, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_String$46$YYObj_String(_data$4) };
    }
    case 5: {
      const _PERCENT_PERCENT_CODE_EOF = token;
      const _data$5 = _PERCENT_PERCENT_CODE_EOF._0;
      return { _0: 5, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_String$46$YYObj_String(_data$5) };
    }
    case 6: {
      const _PKG_AND_IDENT = token;
      const _data$6 = _PKG_AND_IDENT._0;
      return { _0: 6, _1: new Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj__String__String_$46$YYObj__String__String_(_data$6) };
    }
    case 7: {
      return { _0: 7, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 8: {
      return { _0: 8, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 9: {
      return { _0: 9, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 10: {
      return { _0: 10, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 11: {
      return { _0: 11, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 12: {
      return { _0: 12, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 13: {
      return { _0: 13, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 14: {
      return { _0: 14, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 15: {
      return { _0: 15, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 16: {
      return { _0: 16, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 17: {
      return { _0: 17, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 18: {
      return { _0: 18, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 19: {
      return { _0: 19, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 20: {
      return { _0: 20, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 21: {
      return { _0: 21, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 22: {
      return { _0: 22, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 23: {
      return { _0: 23, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 24: {
      return { _0: 24, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 25: {
      return { _0: 25, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 26: {
      return { _0: 26, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 27: {
      return { _0: 27, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 28: {
      return { _0: 28, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 29: {
      return { _0: 29, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    default: {
      return { _0: 30, _1: Error$moonbitlang$47$yacc$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_1(_lookahead) {
  return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Accept;
}
function moonbitlang$yacc$lib$parser$$yy_state_2(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 32, moonbitlang$yacc$lib$parser$$yy_action_41);
}
function moonbitlang$yacc$lib$parser$$yy_state_16(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 39, moonbitlang$yacc$lib$parser$$yy_action_16);
}
function moonbitlang$yacc$lib$parser$$yy_state_15(_lookahead) {
  if (_lookahead === 21) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_16);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_17(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 38, moonbitlang$yacc$lib$parser$$yy_action_7);
}
function moonbitlang$yacc$lib$parser$$yy_state_26(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 39, moonbitlang$yacc$lib$parser$$yy_action_64);
}
function moonbitlang$yacc$lib$parser$$yy_state_29(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(5, 39, moonbitlang$yacc$lib$parser$$yy_action_31);
}
function moonbitlang$yacc$lib$parser$$yy_state_28(_lookahead) {
  if (_lookahead === 23) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_29);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_31(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 38, moonbitlang$yacc$lib$parser$$yy_action_55);
}
function moonbitlang$yacc$lib$parser$$yy_state_30(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 26: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_31);
      }
      case 19: {
        break _L;
      }
      case 21: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 24: {
        break _L;
      }
      case 27: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 37, moonbitlang$yacc$lib$parser$$yy_action_48);
}
function moonbitlang$yacc$lib$parser$$yy_state_8(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 40, moonbitlang$yacc$lib$parser$$yy_action_63);
}
function moonbitlang$yacc$lib$parser$$yy_state_12(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 39, moonbitlang$yacc$lib$parser$$yy_action_9);
}
function moonbitlang$yacc$lib$parser$$yy_state_11(_lookahead) {
  if (_lookahead === 21) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_12);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_32(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 26: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_31);
      }
      case 19: {
        break _L;
      }
      case 21: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 24: {
        break _L;
      }
      case 27: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(7, 37, moonbitlang$yacc$lib$parser$$yy_action_4);
}
function moonbitlang$yacc$lib$parser$$yy_state_35(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 26: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_31);
      }
      case 19: {
        break _L;
      }
      case 21: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 24: {
        break _L;
      }
      case 27: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(6, 37, moonbitlang$yacc$lib$parser$$yy_action_36);
}
function moonbitlang$yacc$lib$parser$$yy_state_38(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 26: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_31);
      }
      case 19: {
        break _L;
      }
      case 21: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 24: {
        break _L;
      }
      case 27: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(5, 37, moonbitlang$yacc$lib$parser$$yy_action_38);
}
function moonbitlang$yacc$lib$parser$$yy_state_41(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 26: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_31);
      }
      case 19: {
        break _L;
      }
      case 21: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 24: {
        break _L;
      }
      case 27: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(4, 37, moonbitlang$yacc$lib$parser$$yy_action_21);
}
function moonbitlang$yacc$lib$parser$$yy_state_13(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 20: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_14);
      }
      case 19: {
        break _L;
      }
      case 21: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 24: {
        break _L;
      }
      case 26: {
        break _L;
      }
      case 27: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 39, moonbitlang$yacc$lib$parser$$yy_action_18);
}
function moonbitlang$yacc$lib$parser$$yy_state_14(_lookahead) {
  switch (_lookahead) {
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 40: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_15);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_30);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_18(_lookahead) {
  switch (_lookahead) {
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_19);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_30);
    }
    case 23: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_39);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_19(_lookahead) {
  switch (_lookahead) {
    case 24: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_20);
    }
    case 23: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_36);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_20(_lookahead) {
  switch (_lookahead) {
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 40: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_21);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_30);
    }
    case 23: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_33);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_21(_lookahead) {
  if (_lookahead === 23) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_22);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_22(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 25: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_23);
      }
      case 19: {
        break _L;
      }
      case 21: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 24: {
        break _L;
      }
      case 26: {
        break _L;
      }
      case 27: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(5, 39, moonbitlang$yacc$lib$parser$$yy_action_31);
}
function moonbitlang$yacc$lib$parser$$yy_state_23(_lookahead) {
  switch (_lookahead) {
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_24);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_32);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_24(_lookahead) {
  switch (_lookahead) {
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_25);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_30);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_25(_lookahead) {
  switch (_lookahead) {
    case 23: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_26);
    }
    case 24: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_27);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_27(_lookahead) {
  switch (_lookahead) {
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 40: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_28);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_30);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_6(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 24: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_7);
      }
      case 19: {
        break _L;
      }
      case 21: {
        break _L;
      }
      case 23: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 40, moonbitlang$yacc$lib$parser$$yy_action_33);
}
function moonbitlang$yacc$lib$parser$$yy_state_7(_lookahead) {
  switch (_lookahead) {
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 40: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_8);
    }
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_30);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_9(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 20: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_10);
      }
      case 19: {
        break _L;
      }
      case 21: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 24: {
        break _L;
      }
      case 26: {
        break _L;
      }
      case 27: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 39, moonbitlang$yacc$lib$parser$$yy_action_26);
}
function moonbitlang$yacc$lib$parser$$yy_state_10(_lookahead) {
  switch (_lookahead) {
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 40: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_11);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_30);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_33(_lookahead) {
  if (_lookahead === 25) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_34);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_34(_lookahead) {
  switch (_lookahead) {
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_24);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_35);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_36(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 25: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_37);
      }
      case 19: {
        break _L;
      }
      case 21: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 24: {
        break _L;
      }
      case 26: {
        break _L;
      }
      case 27: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(3, 39, moonbitlang$yacc$lib$parser$$yy_action_64);
}
function moonbitlang$yacc$lib$parser$$yy_state_37(_lookahead) {
  switch (_lookahead) {
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_24);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_38);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_39(_lookahead) {
  if (_lookahead === 25) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_40);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_40(_lookahead) {
  switch (_lookahead) {
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_24);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_41);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_44(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(5, 34, moonbitlang$yacc$lib$parser$$yy_action_53);
}
function moonbitlang$yacc$lib$parser$$yy_state_43(_lookahead) {
  if (_lookahead === 1) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_44);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_42(_lookahead) {
  if (_lookahead === 19) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_43);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_5(_lookahead) {
  switch (_lookahead) {
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_6);
    }
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_30);
    }
    case 40: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_42);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_4(_lookahead) {
  if (_lookahead === 18) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_5);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_46(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 36, moonbitlang$yacc$lib$parser$$yy_action_20);
}
function moonbitlang$yacc$lib$parser$$yy_state_48(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 35, moonbitlang$yacc$lib$parser$$yy_action_27);
}
function moonbitlang$yacc$lib$parser$$yy_state_47(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 1: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
      }
      case 36: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_47);
      }
      case 35: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_48);
      }
      case 7: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 9: {
        break _L;
      }
      case 10: {
        break _L;
      }
      case 11: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      case 16: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 35, moonbitlang$yacc$lib$parser$$yy_action_46);
}
function moonbitlang$yacc$lib$parser$$yy_state_49(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 34, moonbitlang$yacc$lib$parser$$yy_action_23);
}
function moonbitlang$yacc$lib$parser$$yy_state_45(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_47);
    }
    case 35: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_49);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_51(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 34, moonbitlang$yacc$lib$parser$$yy_action_61);
}
function moonbitlang$yacc$lib$parser$$yy_state_50(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_47);
    }
    case 35: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_51);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_53(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 34, moonbitlang$yacc$lib$parser$$yy_action_19);
}
function moonbitlang$yacc$lib$parser$$yy_state_52(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_47);
    }
    case 35: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_53);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_57(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 34, moonbitlang$yacc$lib$parser$$yy_action_37);
}
function moonbitlang$yacc$lib$parser$$yy_state_56(_lookahead) {
  if (_lookahead === 19) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_57);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_55(_lookahead) {
  switch (_lookahead) {
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_30);
    }
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_56);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_54(_lookahead) {
  if (_lookahead === 18) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_55);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_62(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(5, 34, moonbitlang$yacc$lib$parser$$yy_action_50);
}
function moonbitlang$yacc$lib$parser$$yy_state_61(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_47);
    }
    case 35: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_62);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_60(_lookahead) {
  if (_lookahead === 19) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_61);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_59(_lookahead) {
  switch (_lookahead) {
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_30);
    }
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_60);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_58(_lookahead) {
  if (_lookahead === 18) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_59);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_65(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 34, moonbitlang$yacc$lib$parser$$yy_action_6);
}
function moonbitlang$yacc$lib$parser$$yy_state_64(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 1: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
      }
      case 36: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_47);
      }
      case 35: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_48);
      }
      case 2: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_65);
      }
      case 7: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 9: {
        break _L;
      }
      case 10: {
        break _L;
      }
      case 11: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      case 16: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 35, moonbitlang$yacc$lib$parser$$yy_action_46);
}
function moonbitlang$yacc$lib$parser$$yy_state_70(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(6, 34, moonbitlang$yacc$lib$parser$$yy_action_2);
}
function moonbitlang$yacc$lib$parser$$yy_state_69(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 1: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
      }
      case 36: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_47);
      }
      case 35: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_48);
      }
      case 2: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_70);
      }
      case 7: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 9: {
        break _L;
      }
      case 10: {
        break _L;
      }
      case 11: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      case 16: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 35, moonbitlang$yacc$lib$parser$$yy_action_46);
}
function moonbitlang$yacc$lib$parser$$yy_state_71(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(5, 34, moonbitlang$yacc$lib$parser$$yy_action_22);
}
function moonbitlang$yacc$lib$parser$$yy_state_68(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_69);
    }
    case 35: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_71);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_67(_lookahead) {
  if (_lookahead === 19) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_68);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_66(_lookahead) {
  switch (_lookahead) {
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_30);
    }
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_67);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_72(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 34, moonbitlang$yacc$lib$parser$$yy_action_13);
}
function moonbitlang$yacc$lib$parser$$yy_state_63(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_64);
    }
    case 18: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_66);
    }
    case 35: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_72);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_74(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 34, moonbitlang$yacc$lib$parser$$yy_action_0);
}
function moonbitlang$yacc$lib$parser$$yy_state_73(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_47);
    }
    case 35: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_74);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_76(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 33, moonbitlang$yacc$lib$parser$$yy_action_67);
}
function moonbitlang$yacc$lib$parser$$yy_state_75(_lookahead) {
  switch (_lookahead) {
    case 16: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_4);
    }
    case 14: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_45);
    }
    case 13: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_50);
    }
    case 12: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_52);
    }
    case 11: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_54);
    }
    case 10: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_58);
    }
    case 9: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_63);
    }
    case 8: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_73);
    }
    case 34: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_75);
    }
    case 33: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_76);
    }
    case 7: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 33, moonbitlang$yacc$lib$parser$$yy_action_52);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_131(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 42, moonbitlang$yacc$lib$parser$$yy_action_17);
}
function moonbitlang$yacc$lib$parser$$yy_state_101(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 49, moonbitlang$yacc$lib$parser$$yy_action_11);
}
function moonbitlang$yacc$lib$parser$$yy_state_106(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 50, moonbitlang$yacc$lib$parser$$yy_action_29);
}
function moonbitlang$yacc$lib$parser$$yy_state_108(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 49, moonbitlang$yacc$lib$parser$$yy_action_68);
}
function moonbitlang$yacc$lib$parser$$yy_state_107(_lookahead) {
  if (_lookahead === 23) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_108);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_102(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 22: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_103);
      }
      case 1: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 3: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 24: {
        break _L;
      }
      case 28: {
        break _L;
      }
      case 30: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 49, moonbitlang$yacc$lib$parser$$yy_action_39);
}
function moonbitlang$yacc$lib$parser$$yy_state_103(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
    }
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_101);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_102);
    }
    case 49: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_104);
    }
    case 50: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_107);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_104(_lookahead) {
  switch (_lookahead) {
    case 24: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_105);
    }
    case 23: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 50, moonbitlang$yacc$lib$parser$$yy_action_5);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_105(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
    }
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_101);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_102);
    }
    case 49: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_104);
    }
    case 50: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_106);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_109(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 48, moonbitlang$yacc$lib$parser$$yy_action_34);
}
function moonbitlang$yacc$lib$parser$$yy_state_111(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 47, moonbitlang$yacc$lib$parser$$yy_action_8);
}
function moonbitlang$yacc$lib$parser$$yy_state_114(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 48, moonbitlang$yacc$lib$parser$$yy_action_10);
}
function moonbitlang$yacc$lib$parser$$yy_state_113(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
    }
    case 2: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_101);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_102);
    }
    case 49: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_114);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_112(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 29: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_113);
      }
      case 1: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 3: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 22: {
        break _L;
      }
      case 28: {
        break _L;
      }
      case 30: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 36, moonbitlang$yacc$lib$parser$$yy_action_20);
}
function moonbitlang$yacc$lib$parser$$yy_state_110(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 2: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_101);
      }
      case 36: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_102);
      }
      case 49: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_109);
      }
      case 48: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_110);
      }
      case 47: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_111);
      }
      case 1: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_112);
      }
      case 3: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 28: {
        break _L;
      }
      case 30: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 47, moonbitlang$yacc$lib$parser$$yy_action_45);
}
function moonbitlang$yacc$lib$parser$$yy_state_117(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 51, moonbitlang$yacc$lib$parser$$yy_action_30);
}
function moonbitlang$yacc$lib$parser$$yy_state_116(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_117);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_119(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 52, moonbitlang$yacc$lib$parser$$yy_action_65);
}
function moonbitlang$yacc$lib$parser$$yy_state_120(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 46, moonbitlang$yacc$lib$parser$$yy_action_54);
}
function moonbitlang$yacc$lib$parser$$yy_state_118(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 3: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_119);
      }
      case 52: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_120);
      }
      case 28: {
        break _L;
      }
      case 30: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 52, moonbitlang$yacc$lib$parser$$yy_action_60);
}
function moonbitlang$yacc$lib$parser$$yy_state_115(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 15: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_116);
      }
      case 51: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_118);
      }
      case 3: {
        break _L;
      }
      case 28: {
        break _L;
      }
      case 30: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 51, moonbitlang$yacc$lib$parser$$yy_action_56);
}
function moonbitlang$yacc$lib$parser$$yy_state_123(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 45, moonbitlang$yacc$lib$parser$$yy_action_28);
}
function moonbitlang$yacc$lib$parser$$yy_state_121(_lookahead) {
  switch (_lookahead) {
    case 28: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_122);
    }
    case 30: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 45, moonbitlang$yacc$lib$parser$$yy_action_62);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_122(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 2: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_101);
      }
      case 36: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_102);
      }
      case 49: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_109);
      }
      case 48: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_110);
      }
      case 1: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_112);
      }
      case 47: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_115);
      }
      case 46: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_121);
      }
      case 45: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_123);
      }
      case 3: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 28: {
        break _L;
      }
      case 30: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 47, moonbitlang$yacc$lib$parser$$yy_action_45);
}
function moonbitlang$yacc$lib$parser$$yy_state_129(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(5, 43, moonbitlang$yacc$lib$parser$$yy_action_24);
}
function moonbitlang$yacc$lib$parser$$yy_state_128(_lookahead) {
  if (_lookahead === 30) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_129);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_127(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 2: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_101);
      }
      case 36: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_102);
      }
      case 49: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_109);
      }
      case 48: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_110);
      }
      case 1: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_112);
      }
      case 47: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_115);
      }
      case 46: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_121);
      }
      case 45: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_128);
      }
      case 3: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 28: {
        break _L;
      }
      case 30: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 47, moonbitlang$yacc$lib$parser$$yy_action_45);
}
function moonbitlang$yacc$lib$parser$$yy_state_126(_lookahead) {
  if (_lookahead === 27) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_127);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_83(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 54, moonbitlang$yacc$lib$parser$$yy_action_44);
}
function moonbitlang$yacc$lib$parser$$yy_state_81(_lookahead) {
  switch (_lookahead) {
    case 24: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_82);
    }
    case 21: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 54, moonbitlang$yacc$lib$parser$$yy_action_58);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_82(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_81);
    }
    case 54: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_83);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_85(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 53, moonbitlang$yacc$lib$parser$$yy_action_66);
}
function moonbitlang$yacc$lib$parser$$yy_state_84(_lookahead) {
  if (_lookahead === 21) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_85);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_80(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_81);
    }
    case 54: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_84);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_87(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 44, moonbitlang$yacc$lib$parser$$yy_action_35);
}
function moonbitlang$yacc$lib$parser$$yy_state_86(_lookahead) {
  switch (_lookahead) {
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_30);
    }
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_87);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_92(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 55, moonbitlang$yacc$lib$parser$$yy_action_51);
}
function moonbitlang$yacc$lib$parser$$yy_state_96(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(5, 55, moonbitlang$yacc$lib$parser$$yy_action_12);
}
function moonbitlang$yacc$lib$parser$$yy_state_90(_lookahead) {
  switch (_lookahead) {
    case 24: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_91);
    }
    case 27: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_93);
    }
    case 23: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 55, moonbitlang$yacc$lib$parser$$yy_action_1);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_91(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_90);
    }
    case 55: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_92);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_93(_lookahead) {
  switch (_lookahead) {
    case 6: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_9);
    }
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_13);
    }
    case 39: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_17);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_18);
    }
    case 38: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_30);
    }
    case 37: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_94);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_94(_lookahead) {
  switch (_lookahead) {
    case 24: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_95);
    }
    case 23: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(3, 55, moonbitlang$yacc$lib$parser$$yy_action_49);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_95(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_90);
    }
    case 55: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_96);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_125(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(9, 43, moonbitlang$yacc$lib$parser$$yy_action_47);
}
function moonbitlang$yacc$lib$parser$$yy_state_124(_lookahead) {
  if (_lookahead === 30) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_125);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_100(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 2: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_101);
      }
      case 36: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_102);
      }
      case 49: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_109);
      }
      case 48: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_110);
      }
      case 1: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_112);
      }
      case 47: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_115);
      }
      case 46: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_121);
      }
      case 45: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_124);
      }
      case 3: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 28: {
        break _L;
      }
      case 30: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 47, moonbitlang$yacc$lib$parser$$yy_action_45);
}
function moonbitlang$yacc$lib$parser$$yy_state_99(_lookahead) {
  if (_lookahead === 27) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_100);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_98(_lookahead) {
  switch (_lookahead) {
    case 25: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_86);
    }
    case 44: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_99);
    }
    case 27: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 44, moonbitlang$yacc$lib$parser$$yy_action_15);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_97(_lookahead) {
  if (_lookahead === 23) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_98);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_89(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_90);
    }
    case 55: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_97);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_88(_lookahead) {
  if (_lookahead === 22) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_89);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_79(_lookahead) {
  switch (_lookahead) {
    case 20: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_80);
    }
    case 25: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_86);
    }
    case 53: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_88);
    }
    case 44: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_126);
    }
    case 27: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 44, moonbitlang$yacc$lib$parser$$yy_action_15);
    }
    case 22: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 53, moonbitlang$yacc$lib$parser$$yy_action_3);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_130(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_79);
    }
    case 43: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_131);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_132(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 42, moonbitlang$yacc$lib$parser$$yy_action_42);
}
function moonbitlang$yacc$lib$parser$$yy_state_134(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 41, moonbitlang$yacc$lib$parser$$yy_action_57);
}
function moonbitlang$yacc$lib$parser$$yy_state_133(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 1: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
      }
      case 36: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_79);
      }
      case 17: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_130);
      }
      case 43: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_132);
      }
      case 42: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_133);
      }
      case 41: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_134);
      }
      case 0: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 5: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(1, 41, moonbitlang$yacc$lib$parser$$yy_action_25);
}
function moonbitlang$yacc$lib$parser$$yy_state_136(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 56, moonbitlang$yacc$lib$parser$$yy_action_14);
}
function moonbitlang$yacc$lib$parser$$yy_state_137(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 56, moonbitlang$yacc$lib$parser$$yy_action_59);
}
function moonbitlang$yacc$lib$parser$$yy_state_139(_lookahead) {
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(6, 31, moonbitlang$yacc$lib$parser$$yy_action_40);
}
function moonbitlang$yacc$lib$parser$$yy_state_138(_lookahead) {
  if (_lookahead === 0) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_139);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_135(_lookahead) {
  switch (_lookahead) {
    case 5: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_136);
    }
    case 4: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_137);
    }
    case 56: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_138);
    }
    case 0: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 56, moonbitlang$yacc$lib$parser$$yy_action_43);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_78(_lookahead) {
  switch (_lookahead) {
    case 1: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_46);
    }
    case 36: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_79);
    }
    case 17: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_130);
    }
    case 43: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_132);
    }
    case 42: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_133);
    }
    case 41: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_135);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_77(_lookahead) {
  if (_lookahead === 7) {
    return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_78);
  } else {
    return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_3(_lookahead) {
  switch (_lookahead) {
    case 16: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_4);
    }
    case 14: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_45);
    }
    case 13: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_50);
    }
    case 12: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_52);
    }
    case 11: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_54);
    }
    case 10: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_58);
    }
    case 9: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_63);
    }
    case 8: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_73);
    }
    case 34: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_75);
    }
    case 33: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_77);
    }
    case 7: {
      return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 33, moonbitlang$yacc$lib$parser$$yy_action_52);
    }
    default: {
      return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$yacc$lib$parser$$yy_state_0(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 31: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_1);
      }
      case 4: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_2);
      }
      case 32: {
        return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$yacc$lib$parser$$yy_state_3);
      }
      case 7: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 9: {
        break _L;
      }
      case 10: {
        break _L;
      }
      case 11: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      case 16: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$yacc$47$lib$47$parser$46$YYDecision$Reduce(0, 32, moonbitlang$yacc$lib$parser$$yy_action_32);
}
function moonbitlang$yacc$lib$parser$$error(stack, token, loc) {
  const expected = [];
  const _arr = [{ _0: 0, _1: 0 }, { _0: 1, _1: 1 }, { _0: 2, _1: 2 }, { _0: 3, _1: 3 }, { _0: 4, _1: 4 }, { _0: 5, _1: 5 }, { _0: 6, _1: 6 }, { _0: 7, _1: 7 }, { _0: 8, _1: 8 }, { _0: 9, _1: 9 }, { _0: 10, _1: 10 }, { _0: 11, _1: 11 }, { _0: 12, _1: 12 }, { _0: 13, _1: 13 }, { _0: 14, _1: 14 }, { _0: 15, _1: 15 }, { _0: 16, _1: 16 }, { _0: 17, _1: 17 }, { _0: 18, _1: 18 }, { _0: 19, _1: 19 }, { _0: 20, _1: 20 }, { _0: 21, _1: 21 }, { _0: 22, _1: 22 }, { _0: 23, _1: 23 }, { _0: 24, _1: 24 }, { _0: 25, _1: 25 }, { _0: 26, _1: 26 }, { _0: 27, _1: 27 }, { _0: 28, _1: 28 }, { _0: 29, _1: 29 }, { _0: 30, _1: 30 }];
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const term = _arr[_i];
      const kind = term._1;
      const symbol = term._0;
      let stack$2;
      _L: {
        stack$2 = stack;
        break _L;
      }
      let _tmp$2 = stack$2;
      _L$2: while (true) {
        const stack$3 = _tmp$2;
        if (stack$3.$tag === 0) {
          break;
        } else {
          const _Cons = stack$3;
          const _state = _Cons._0;
          let count;
          let symbol$2;
          _L$3: {
            _L$4: {
              const _bind = _state(symbol);
              switch (_bind.$tag) {
                case 0: {
                  break _L$4;
                }
                case 1: {
                  break _L$4;
                }
                case 2: {
                  const _Reduce = _bind;
                  const _count = _Reduce._0;
                  const _symbol = _Reduce._1;
                  count = _count;
                  symbol$2 = _symbol;
                  break _L$3;
                }
                case 3: {
                  const _ReduceNoLookahead = _bind;
                  const _count$2 = _ReduceNoLookahead._0;
                  const _symbol$2 = _ReduceNoLookahead._1;
                  count = _count$2;
                  symbol$2 = _symbol$2;
                  break _L$3;
                }
                default: {
                  break _L$2;
                }
              }
            }
            moonbitlang$core$array$$Array$push$166$(expected, kind);
            break;
          }
          let stack$4;
          let count$2;
          let symbol$3;
          _L$4: {
            stack$4 = stack$3;
            count$2 = count;
            symbol$3 = symbol$2;
            break _L$4;
          }
          let _tmp$3 = stack$4;
          let _tmp$4 = count$2;
          let _tmp$5 = symbol$3;
          _L$5: while (true) {
            const stack$5 = _tmp$3;
            const count$3 = _tmp$4;
            const symbol$4 = _tmp$5;
            const stack$6 = moonbitlang$core$immut$list$$T$drop$60$(stack$5, count$3);
            if (stack$6.$tag === 1) {
              const _Cons$2 = stack$6;
              const _state$2 = _Cons$2._0;
              let count$4;
              let symbol$5;
              _L$6: {
                const _bind = _state$2(symbol$4);
                switch (_bind.$tag) {
                  case 1: {
                    const _Shift = _bind;
                    const _state$3 = _Shift._0;
                    _tmp$2 = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$6$(_state$3, stack$6);
                    continue _L$2;
                  }
                  case 2: {
                    const _Reduce = _bind;
                    const _count = _Reduce._0;
                    const _symbol = _Reduce._1;
                    count$4 = _count;
                    symbol$5 = _symbol;
                    break _L$6;
                  }
                  case 3: {
                    const _ReduceNoLookahead = _bind;
                    const _count$2 = _ReduceNoLookahead._0;
                    const _symbol$2 = _ReduceNoLookahead._1;
                    count$4 = _count$2;
                    symbol$5 = _symbol$2;
                    break _L$6;
                  }
                  default: {
                    $panic();
                    break _L$2;
                  }
                }
              }
              _tmp$3 = stack$6;
              _tmp$4 = count$4;
              _tmp$5 = symbol$5;
              continue;
            } else {
              $panic();
              break _L$2;
            }
          }
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return new Result$Err$25$(new Error$moonbitlang$47$yacc$47$lib$47$parser$46$ParseError$46$UnexpectedToken(token, loc, expected));
}
function moonbitlang$yacc$lib$parser$$yy_parse$218$(read_token, start_pos, start, return_) {
  const state_stack = { val: new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$6$(start, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$6$) };
  const data_stack = [];
  const last_pos = { val: start_pos };
  const state = { val: start };
  let lookahead = undefined;
  let last_shifted_state_stack = state_stack.val;
  while (true) {
    let decision;
    const _func = state.val;
    const _bind = _func(57);
    switch (_bind.$tag) {
      case 3: {
        decision = _bind;
        break;
      }
      case 0: {
        decision = _bind;
        break;
      }
      default: {
        const _bind$2 = lookahead;
        if (_bind$2 === undefined) {
          const _bind$3 = read_token();
          const _token = _bind$3._0;
          const _start_pos = _bind$3._1;
          const _end_pos = _bind$3._2;
          const _bind$4 = moonbitlang$yacc$lib$parser$$yy_input(_token, _start_pos, _end_pos);
          const _symbol = _bind$4._0;
          const _data = _bind$4._1;
          lookahead = { _0: _symbol, _1: { _0: _data, _1: _start_pos, _2: _end_pos }, _2: _token };
          const _func$2 = state.val;
          decision = _func$2(_symbol);
        } else {
          const _Some = _bind$2;
          const _la = _Some;
          const _func$2 = state.val;
          decision = _func$2(_la._0);
        }
      }
    }
    let action;
    let count;
    let symbol;
    _L: {
      _L$2: {
        switch (decision.$tag) {
          case 0: {
            return new Result$Ok$26$(return_(moonbitlang$core$array$$Array$unsafe_pop$99$(data_stack)._0));
          }
          case 1: {
            const _Shift = decision;
            const _next_state = _Shift._0;
            const _bind$3 = lookahead;
            if (_bind$3 === undefined) {
              $panic();
            } else {
              const _Some = _bind$3;
              const _la = _Some;
              moonbitlang$core$array$$Array$push$99$(data_stack, _la._1);
              state_stack.val = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$6$(_next_state, state_stack.val);
              last_shifted_state_stack = state_stack.val;
              state.val = _next_state;
              last_pos.val = _la._1._2;
              lookahead = undefined;
            }
            break;
          }
          case 2: {
            const _Reduce = decision;
            const _count = _Reduce._0;
            const _symbol = _Reduce._1;
            const _action = _Reduce._2;
            action = _action;
            count = _count;
            symbol = _symbol;
            break _L$2;
          }
          case 3: {
            const _ReduceNoLookahead = decision;
            const _count$2 = _ReduceNoLookahead._0;
            const _symbol$2 = _ReduceNoLookahead._1;
            const _action$2 = _ReduceNoLookahead._2;
            action = _action$2;
            count = _count$2;
            symbol = _symbol$2;
            break _L$2;
          }
          default: {
            const _bind$4 = moonbitlang$core$option$$Option$unwrap$154$(lookahead);
            const _x = _bind$4._1;
            const _start_pos = _x._1;
            const _end_pos = _x._2;
            const _token = _bind$4._2;
            const _bind$5 = moonbitlang$yacc$lib$parser$$error(last_shifted_state_stack, _token, { _0: _start_pos, _1: _end_pos });
            if (_bind$5.$tag === 1) {
              const _ok = _bind$5;
              _ok._0;
            } else {
              return _bind$5;
            }
          }
        }
        break _L;
      }
      let _tmp = count;
      let _tmp$2 = symbol;
      let _tmp$3 = action;
      _L$3: while (true) {
        const args = moonbitlang$core$array$$Array$op_as_view$99$(data_stack, data_stack.length - count | 0, undefined);
        const data = action(last_pos.val, args);
        let start_pos$2;
        let end_pos;
        _L$4: {
          if (moonbitlang$core$array$$ArrayView$length$99$(args) === 0) {
            const _tmp$4 = last_pos.val;
            const _tmp$5 = last_pos.val;
            start_pos$2 = _tmp$4;
            end_pos = _tmp$5;
            break _L$4;
          } else {
            const _tmp$4 = moonbitlang$core$array$$ArrayView$op_get$99$(args, 0)._1;
            const _tmp$5 = moonbitlang$core$array$$ArrayView$op_get$99$(args, moonbitlang$core$array$$ArrayView$length$99$(args) - 1 | 0)._2;
            start_pos$2 = _tmp$4;
            end_pos = _tmp$5;
            break _L$4;
          }
        }
        let _tmp$4 = 0;
        while (true) {
          const i = _tmp$4;
          if (i < count) {
            moonbitlang$core$array$$Array$unsafe_pop$99$(data_stack);
            state_stack.val = moonbitlang$core$immut$list$$T$tail$60$(state_stack.val);
            _tmp$4 = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        state.val = moonbitlang$core$immut$list$$T$unsafe_head$60$(state_stack.val);
        moonbitlang$core$array$$Array$push$99$(data_stack, { _0: data, _1: start_pos$2, _2: end_pos });
        let action$2;
        let count$2;
        let symbol$2;
        _L$5: {
          const _func$2 = state.val;
          const _bind$3 = _func$2(symbol);
          switch (_bind$3.$tag) {
            case 0: {
              return new Result$Ok$26$(return_(moonbitlang$core$array$$Array$unsafe_pop$99$(data_stack)._0));
            }
            case 1: {
              const _Shift = _bind$3;
              const _next_state = _Shift._0;
              state_stack.val = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$6$(_next_state, state_stack.val);
              state.val = _next_state;
              break _L$3;
            }
            case 2: {
              const _Reduce = _bind$3;
              const _count = _Reduce._0;
              const _symbol = _Reduce._1;
              const _action = _Reduce._2;
              action$2 = _action;
              count$2 = _count;
              symbol$2 = _symbol;
              break _L$5;
            }
            case 3: {
              const _ReduceNoLookahead = _bind$3;
              const _count$2 = _ReduceNoLookahead._0;
              const _symbol$2 = _ReduceNoLookahead._1;
              const _action$2 = _ReduceNoLookahead._2;
              action$2 = _action$2;
              count$2 = _count$2;
              symbol$2 = _symbol$2;
              break _L$5;
            }
            default: {
              $panic();
              break _L$3;
            }
          }
        }
        _tmp = count$2;
        _tmp$2 = symbol$2;
        _tmp$3 = action$2;
        continue;
      }
    }
    continue;
  }
}
function moonbitlang$yacc$lib$parser$$spec(read_token, start_pos) {
  return moonbitlang$yacc$lib$parser$$yy_parse$218$(read_token, start_pos, moonbitlang$yacc$lib$parser$$yy_state_0, (_param2) => {
    if (_param2.$tag === 25) {
      const _YYObj_ParserSpec = _param2;
      const _result = _YYObj_ParserSpec._0;
      return _result;
    } else {
      return $panic();
    }
  });
}
function moonbitlang$core$builtin$$Eq$op_equal$87$(_x_6, _x_7) {
  return _x_6 === _x_7;
}
function moonbitlang$core$builtin$$Hash$hash_combine$87$(_x_2, _x_3) {
  moonbitlang$core$builtin$$Hash$hash_combine$10$(_x_2, _x_3);
}
function moonbitlang$yacc$lib$util$stamp$$new() {
  const stamp = moonbitlang$yacc$lib$util$stamp$$next_stamp.val;
  moonbitlang$yacc$lib$util$stamp$$next_stamp.val = moonbitlang$yacc$lib$util$stamp$$next_stamp.val + 1 | 0;
  return stamp;
}
function moonbitlang$yacc$lib$util$stamp$$initial() {
  return moonbitlang$yacc$lib$util$stamp$$initial_stamp;
}
function moonbitlang$core$builtin$$Eq$op_equal$219$(_x_135, _x_136) {
  return moonbitlang$core$builtin$$Eq$op_equal$207$(_x_135, _x_136);
}
function moonbitlang$yacc$lib$util$small_int_set$$empty() {
  return moonbitlang$yacc$lib$util$small_int_set$$_empty;
}
function moonbitlang$yacc$lib$util$small_int_set$$singleton(key) {
  const word_index = key >> 5;
  const result = moonbitlang$core$array$$Array$make$10$(2, 0);
  moonbitlang$core$array$$Array$op_set$10$(result, 0, 1 << word_index);
  moonbitlang$core$array$$Array$op_set$10$(result, 1, 1 << (key & 31));
  return result;
}
function moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$is_singleton(self, key) {
  return self.length === 2 && (moonbitlang$core$array$$Array$op_get$10$(self, 0) === 1 << (key >> 5) && moonbitlang$core$array$$Array$op_get$10$(self, 1) === 1 << (key & 31));
}
function moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$iter(self) {
  return moonbitlang$core$builtin$$Iter$new$10$((yield_) => {
    let i = 0;
    let bitmask = moonbitlang$core$array$$Array$op_get$10$(self, 0);
    while (true) {
      if (bitmask === 0) {
        break;
      }
      const word_index = $i32_ctz(bitmask);
      let word = moonbitlang$core$array$$Array$op_get$10$(self, 1 + i | 0);
      while (true) {
        if (word === 0) {
          break;
        }
        const bit = $i32_ctz(word);
        const _bind = yield_((Math.imul(word_index, 32) | 0) + bit | 0);
        if (_bind === 0) {
          return 0;
        }
        word = word & ~(1 << bit);
        continue;
      }
      bitmask = bitmask & ~(1 << word_index);
      i = i + 1 | 0;
      continue;
    }
    return 1;
  });
}
function moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$union(self, other) {
  const bitmask1 = moonbitlang$core$array$$Array$op_get$10$(self, 0);
  if (bitmask1 === 0) {
    return other;
  }
  const bitmask2 = moonbitlang$core$array$$Array$op_get$10$(other, 0);
  if (bitmask2 === 0) {
    return self;
  }
  const bitmask = bitmask1 | bitmask2;
  if (bitmask === bitmask1) {
    if (self === other) {
      return self;
    }
    const result = moonbitlang$core$array$$Array$copy$10$(self);
    let bitmask2$2 = bitmask2;
    let j = 1;
    while (true) {
      const jb = $i32_ctz(bitmask2$2);
      if (jb === 32) {
        break;
      }
      const i = 1 + $i32_popcnt(bitmask1 & ((1 << jb) - 1 | 0)) | 0;
      moonbitlang$core$array$$Array$op_set$10$(result, i, moonbitlang$core$array$$Array$op_get$10$(result, i) | moonbitlang$core$array$$Array$op_get$10$(other, j));
      j = j + 1 | 0;
      bitmask2$2 = bitmask2$2 & (bitmask2$2 - 1 | 0);
      continue;
    }
    return result;
  } else {
    if (bitmask === bitmask2) {
      if (self === other) {
        return self;
      }
      const result = moonbitlang$core$array$$Array$copy$10$(other);
      let bitmask1$2 = bitmask1;
      let i = 1;
      while (true) {
        const ib = $i32_ctz(bitmask1$2);
        if (ib === 32) {
          break;
        }
        const j = 1 + $i32_popcnt(bitmask2 & ((1 << ib) - 1 | 0)) | 0;
        moonbitlang$core$array$$Array$op_set$10$(result, j, moonbitlang$core$array$$Array$op_get$10$(result, j) | moonbitlang$core$array$$Array$op_get$10$(self, i));
        i = i + 1 | 0;
        bitmask1$2 = bitmask1$2 & (bitmask1$2 - 1 | 0);
        continue;
      }
      return result;
    } else {
      const result = moonbitlang$core$array$$Array$make$10$(1 + $i32_popcnt(bitmask) | 0, 0);
      moonbitlang$core$array$$Array$op_set$10$(result, 0, bitmask);
      let i = 1;
      let j = 1;
      let k = 1;
      let bitmask1$2 = bitmask1;
      let bitmask2$2 = bitmask2;
      while (true) {
        const ib = $i32_ctz(bitmask1$2);
        const jb = $i32_ctz(bitmask2$2);
        if (ib < jb) {
          moonbitlang$core$array$$Array$op_set$10$(result, k, moonbitlang$core$array$$Array$op_get$10$(self, i));
          i = i + 1 | 0;
          bitmask1$2 = bitmask1$2 & (bitmask1$2 - 1 | 0);
        } else {
          if (ib > jb) {
            moonbitlang$core$array$$Array$op_set$10$(result, k, moonbitlang$core$array$$Array$op_get$10$(other, j));
            j = j + 1 | 0;
            bitmask2$2 = bitmask2$2 & (bitmask2$2 - 1 | 0);
          } else {
            if (ib === 32) {
              break;
            }
            moonbitlang$core$array$$Array$op_set$10$(result, k, moonbitlang$core$array$$Array$op_get$10$(self, i) | moonbitlang$core$array$$Array$op_get$10$(other, j));
            i = i + 1 | 0;
            j = j + 1 | 0;
            bitmask1$2 = bitmask1$2 & (bitmask1$2 - 1 | 0);
            bitmask2$2 = bitmask2$2 & (bitmask2$2 - 1 | 0);
          }
        }
        k = k + 1 | 0;
        continue;
      }
      return result;
    }
  }
}
function moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$disjoint(self, other) {
  const bitmask1 = moonbitlang$core$array$$Array$op_get$10$(self, 0);
  const bitmask2 = moonbitlang$core$array$$Array$op_get$10$(other, 0);
  if ((bitmask1 & bitmask2) !== 0) {
    return false;
  }
  let i = 1;
  let j = 1;
  let bitmask1$2 = bitmask1;
  let bitmask2$2 = bitmask2;
  while (true) {
    const ib = $i32_ctz(bitmask1$2);
    const jb = $i32_ctz(bitmask2$2);
    if (ib < jb) {
      i = i + 1 | 0;
      bitmask1$2 = bitmask1$2 & (bitmask1$2 - 1 | 0);
    } else {
      if (ib > jb) {
        j = j + 1 | 0;
        bitmask2$2 = bitmask2$2 & (bitmask2$2 - 1 | 0);
      } else {
        if (ib === 32) {
          break;
        }
        if ((moonbitlang$core$array$$Array$op_get$10$(self, i) & moonbitlang$core$array$$Array$op_get$10$(other, j)) !== 0) {
          return false;
        }
        i = i + 1 | 0;
        j = j + 1 | 0;
        bitmask1$2 = bitmask1$2 & (bitmask1$2 - 1 | 0);
        bitmask2$2 = bitmask2$2 & (bitmask2$2 - 1 | 0);
      }
    }
    continue;
  }
  return true;
}
function moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$subset(self, other) {
  const bitmask1 = moonbitlang$core$array$$Array$op_get$10$(self, 0);
  const bitmask2 = moonbitlang$core$array$$Array$op_get$10$(other, 0);
  if ((bitmask1 & bitmask2) !== bitmask1) {
    return false;
  }
  let i = 1;
  let j = 1;
  let bitmask1$2 = bitmask1;
  let bitmask2$2 = bitmask2;
  while (true) {
    const ib = $i32_ctz(bitmask1$2);
    const jb = $i32_ctz(bitmask2$2);
    if (ib < jb) {
      return false;
    } else {
      if (ib === 32) {
        break;
      }
      if (ib > jb) {
        i = i + 1 | 0;
        bitmask1$2 = bitmask1$2 & (bitmask1$2 - 1 | 0);
      } else {
        if ((moonbitlang$core$array$$Array$op_get$10$(self, i) & moonbitlang$core$array$$Array$op_get$10$(other, j)) !== moonbitlang$core$array$$Array$op_get$10$(self, i)) {
          return false;
        }
        i = i + 1 | 0;
        j = j + 1 | 0;
        bitmask1$2 = bitmask1$2 & (bitmask1$2 - 1 | 0);
        bitmask2$2 = bitmask2$2 & (bitmask2$2 - 1 | 0);
      }
    }
    continue;
  }
  return true;
}
function moonbitlang$yacc$lib$util$hashmap2$$new$220$(capacity) {
  const bucket = $make_array_len_and_init(capacity, undefined);
  return { bucket: bucket, entry: undefined, bitmask: capacity - 1 | 0, size: 0 };
}
function moonbitlang$yacc$lib$util$hashmap2$$new$221$(capacity) {
  const bucket = $make_array_len_and_init(capacity, undefined);
  return { bucket: bucket, entry: undefined, bitmask: capacity - 1 | 0, size: 0 };
}
function moonbitlang$yacc$lib$util$hashmap2$$new$222$(capacity) {
  const bucket = $make_array_len_and_init(capacity, undefined);
  return { bucket: bucket, entry: undefined, bitmask: capacity - 1 | 0, size: 0 };
}
function moonbitlang$yacc$lib$util$hashmap2$$new$164$(capacity) {
  const bucket = $make_array_len_and_init(capacity, undefined);
  return { bucket: bucket, entry: undefined, bitmask: capacity - 1 | 0, size: 0 };
}
function moonbitlang$yacc$lib$util$hashmap2$$new$223$(capacity) {
  const bucket = $make_array_len_and_init(capacity, undefined);
  return { bucket: bucket, entry: undefined, bitmask: capacity - 1 | 0, size: 0 };
}
function moonbitlang$yacc$lib$util$hashmap2$$T$size$223$(self) {
  return self.size;
}
function moonbitlang$yacc$lib$util$hashmap2$$T$iter$221$(self) {
  return moonbitlang$core$builtin$$Iter$new$161$((yield_) => {
    let _tmp = self.entry;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _entry = _Some;
        const _bind = yield_({ _0: _entry.key, _1: _entry.value });
        if (_bind === 0) {
          return 0;
        } else {
          _tmp = _entry.prev;
          continue;
        }
      }
    }
  });
}
function moonbitlang$yacc$lib$util$hashmap2$$T$iter$222$(self) {
  return moonbitlang$core$builtin$$Iter$new$162$((yield_) => {
    let _tmp = self.entry;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _entry = _Some;
        const _bind = yield_({ _0: _entry.key, _1: _entry.value });
        if (_bind === 0) {
          return 0;
        } else {
          _tmp = _entry.prev;
          continue;
        }
      }
    }
  });
}
function moonbitlang$yacc$lib$util$hashmap2$$T$iter2$164$(self) {
  return moonbitlang$core$builtin$$Iter2$new$164$((yield_) => {
    let _tmp = self.entry;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _entry = _Some;
        const _bind = yield_(_entry.key, _entry.value);
        if (_bind === 0) {
          return 0;
        } else {
          _tmp = _entry.prev;
          continue;
        }
      }
    }
  });
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$223$(self, key, hash) {
  const bucket = self.bucket;
  const bitmask = self.bitmask;
  const ideal_index = hash & bitmask;
  let _tmp = ideal_index;
  while (true) {
    const index = _tmp;
    $bound_check(bucket, index);
    const _bind = bucket[index];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$224$(_entry.key, key)) {
        return _entry;
      }
      if ((index - ideal_index | 0) > _entry.psl) {
        return undefined;
      }
      _tmp = index + 1 & bitmask;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$221$(self, key, hash) {
  const bucket = self.bucket;
  const bitmask = self.bitmask;
  const ideal_index = hash & bitmask;
  let _tmp = ideal_index;
  while (true) {
    const index = _tmp;
    $bound_check(bucket, index);
    const _bind = bucket[index];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$76$(_entry.key, key)) {
        return _entry;
      }
      if ((index - ideal_index | 0) > _entry.psl) {
        return undefined;
      }
      _tmp = index + 1 & bitmask;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$220$(self, key, hash) {
  const bucket = self.bucket;
  const bitmask = self.bitmask;
  const ideal_index = hash & bitmask;
  let _tmp = ideal_index;
  while (true) {
    const index = _tmp;
    $bound_check(bucket, index);
    const _bind = bucket[index];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry;
      }
      if ((index - ideal_index | 0) > _entry.psl) {
        return undefined;
      }
      _tmp = index + 1 & bitmask;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$222$(self, key, hash) {
  const bucket = self.bucket;
  const bitmask = self.bitmask;
  const ideal_index = hash & bitmask;
  let _tmp = ideal_index;
  while (true) {
    const index = _tmp;
    $bound_check(bucket, index);
    const _bind = bucket[index];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$76$(_entry.key, key)) {
        return _entry;
      }
      if ((index - ideal_index | 0) > _entry.psl) {
        return undefined;
      }
      _tmp = index + 1 & bitmask;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$164$(self, key, hash) {
  const bucket = self.bucket;
  const bitmask = self.bitmask;
  const ideal_index = hash & bitmask;
  let _tmp = ideal_index;
  while (true) {
    const index = _tmp;
    $bound_check(bucket, index);
    const _bind = bucket[index];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$126$(_entry.key, key)) {
        return _entry;
      }
      if ((index - ideal_index | 0) > _entry.psl) {
        return undefined;
      }
      _tmp = index + 1 & bitmask;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get$220$(self, key) {
  const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$220$(self, key, moonbitlang$core$builtin$$Hash$hash$150$(key));
  if (_bind === undefined) {
    return Option$None$27$;
  } else {
    const _Some = _bind;
    const _entry = _Some;
    return new Option$Some$27$(_entry.value);
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$223$(self, index, bitmask, entry) {
  const bucket = self.bucket;
  let _tmp = index;
  let _tmp$2 = entry;
  while (true) {
    const index$2 = _tmp;
    const entry$2 = _tmp$2;
    $bound_check(bucket, index$2);
    const _bind = bucket[index$2];
    if (_bind === undefined) {
      $bound_check(bucket, index$2);
      bucket[index$2] = entry$2;
      break;
    } else {
      const _Some = _bind;
      const _old_entry = _Some;
      let entry$3;
      if (entry$2.psl > _old_entry.psl) {
        $bound_check(bucket, index$2);
        bucket[index$2] = entry$2;
        entry$3 = _old_entry;
      } else {
        entry$3 = entry$2;
      }
      entry$3.psl = entry$3.psl + 1 | 0;
      const _tmp$3 = index$2 + 1 & bitmask;
      _tmp = _tmp$3;
      _tmp$2 = entry$3;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$221$(self, index, bitmask, entry) {
  const bucket = self.bucket;
  let _tmp = index;
  let _tmp$2 = entry;
  while (true) {
    const index$2 = _tmp;
    const entry$2 = _tmp$2;
    $bound_check(bucket, index$2);
    const _bind = bucket[index$2];
    if (_bind === undefined) {
      $bound_check(bucket, index$2);
      bucket[index$2] = entry$2;
      break;
    } else {
      const _Some = _bind;
      const _old_entry = _Some;
      let entry$3;
      if (entry$2.psl > _old_entry.psl) {
        $bound_check(bucket, index$2);
        bucket[index$2] = entry$2;
        entry$3 = _old_entry;
      } else {
        entry$3 = entry$2;
      }
      entry$3.psl = entry$3.psl + 1 | 0;
      const _tmp$3 = index$2 + 1 & bitmask;
      _tmp = _tmp$3;
      _tmp$2 = entry$3;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$220$(self, index, bitmask, entry) {
  const bucket = self.bucket;
  let _tmp = index;
  let _tmp$2 = entry;
  while (true) {
    const index$2 = _tmp;
    const entry$2 = _tmp$2;
    $bound_check(bucket, index$2);
    const _bind = bucket[index$2];
    if (_bind === undefined) {
      $bound_check(bucket, index$2);
      bucket[index$2] = entry$2;
      break;
    } else {
      const _Some = _bind;
      const _old_entry = _Some;
      let entry$3;
      if (entry$2.psl > _old_entry.psl) {
        $bound_check(bucket, index$2);
        bucket[index$2] = entry$2;
        entry$3 = _old_entry;
      } else {
        entry$3 = entry$2;
      }
      entry$3.psl = entry$3.psl + 1 | 0;
      const _tmp$3 = index$2 + 1 & bitmask;
      _tmp = _tmp$3;
      _tmp$2 = entry$3;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$222$(self, index, bitmask, entry) {
  const bucket = self.bucket;
  let _tmp = index;
  let _tmp$2 = entry;
  while (true) {
    const index$2 = _tmp;
    const entry$2 = _tmp$2;
    $bound_check(bucket, index$2);
    const _bind = bucket[index$2];
    if (_bind === undefined) {
      $bound_check(bucket, index$2);
      bucket[index$2] = entry$2;
      break;
    } else {
      const _Some = _bind;
      const _old_entry = _Some;
      let entry$3;
      if (entry$2.psl > _old_entry.psl) {
        $bound_check(bucket, index$2);
        bucket[index$2] = entry$2;
        entry$3 = _old_entry;
      } else {
        entry$3 = entry$2;
      }
      entry$3.psl = entry$3.psl + 1 | 0;
      const _tmp$3 = index$2 + 1 & bitmask;
      _tmp = _tmp$3;
      _tmp$2 = entry$3;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$164$(self, index, bitmask, entry) {
  const bucket = self.bucket;
  let _tmp = index;
  let _tmp$2 = entry;
  while (true) {
    const index$2 = _tmp;
    const entry$2 = _tmp$2;
    $bound_check(bucket, index$2);
    const _bind = bucket[index$2];
    if (_bind === undefined) {
      $bound_check(bucket, index$2);
      bucket[index$2] = entry$2;
      break;
    } else {
      const _Some = _bind;
      const _old_entry = _Some;
      let entry$3;
      if (entry$2.psl > _old_entry.psl) {
        $bound_check(bucket, index$2);
        bucket[index$2] = entry$2;
        entry$3 = _old_entry;
      } else {
        entry$3 = entry$2;
      }
      entry$3.psl = entry$3.psl + 1 | 0;
      const _tmp$3 = index$2 + 1 & bitmask;
      _tmp = _tmp$3;
      _tmp$2 = entry$3;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$grow$223$(self) {
  const capacity = Math.imul(self.bitmask + 1 | 0, 2) | 0;
  const bitmask = capacity - 1 | 0;
  const bucket = $make_array_len_and_init(capacity, undefined);
  self.bucket = bucket;
  self.bitmask = bitmask;
  let _tmp = self.entry;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _entry = _Some;
      _entry.psl = 0;
      moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$223$(self, _entry.hash & bitmask, bitmask, _entry);
      _tmp = _entry.prev;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$grow$221$(self) {
  const capacity = Math.imul(self.bitmask + 1 | 0, 2) | 0;
  const bitmask = capacity - 1 | 0;
  const bucket = $make_array_len_and_init(capacity, undefined);
  self.bucket = bucket;
  self.bitmask = bitmask;
  let _tmp = self.entry;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _entry = _Some;
      _entry.psl = 0;
      moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$221$(self, _entry.hash & bitmask, bitmask, _entry);
      _tmp = _entry.prev;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$grow$220$(self) {
  const capacity = Math.imul(self.bitmask + 1 | 0, 2) | 0;
  const bitmask = capacity - 1 | 0;
  const bucket = $make_array_len_and_init(capacity, undefined);
  self.bucket = bucket;
  self.bitmask = bitmask;
  let _tmp = self.entry;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _entry = _Some;
      _entry.psl = 0;
      moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$220$(self, _entry.hash & bitmask, bitmask, _entry);
      _tmp = _entry.prev;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$grow$222$(self) {
  const capacity = Math.imul(self.bitmask + 1 | 0, 2) | 0;
  const bitmask = capacity - 1 | 0;
  const bucket = $make_array_len_and_init(capacity, undefined);
  self.bucket = bucket;
  self.bitmask = bitmask;
  let _tmp = self.entry;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _entry = _Some;
      _entry.psl = 0;
      moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$222$(self, _entry.hash & bitmask, bitmask, _entry);
      _tmp = _entry.prev;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$grow$164$(self) {
  const capacity = Math.imul(self.bitmask + 1 | 0, 2) | 0;
  const bitmask = capacity - 1 | 0;
  const bucket = $make_array_len_and_init(capacity, undefined);
  self.bucket = bucket;
  self.bitmask = bitmask;
  let _tmp = self.entry;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _entry = _Some;
      _entry.psl = 0;
      moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$164$(self, _entry.hash & bitmask, bitmask, _entry);
      _tmp = _entry.prev;
      continue;
    }
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_or_init$220$(self, key, init) {
  const hash = moonbitlang$core$builtin$$Hash$hash$150$(key);
  const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$220$(self, key, hash);
  if (_bind === undefined) {
    if (self.size > (self.bitmask / 2 | 0)) {
      moonbitlang$yacc$lib$util$hashmap2$$T$grow$220$(self);
    }
    const value = init(key);
    const entry = { value: value, psl: 0, key: key, hash: hash, prev: self.entry };
    self.entry = entry;
    self.size = self.size + 1 | 0;
    moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$220$(self, hash & self.bitmask, self.bitmask, entry);
    return value;
  } else {
    const _Some = _bind;
    const _entry = _Some;
    return _entry.value;
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_or_init$221$(self, key, init) {
  const hash = moonbitlang$core$builtin$$Hash$hash$197$(key);
  const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$221$(self, key, hash);
  if (_bind === undefined) {
    if (self.size > (self.bitmask / 2 | 0)) {
      moonbitlang$yacc$lib$util$hashmap2$$T$grow$221$(self);
    }
    const value = init(key);
    const entry = { value: value, psl: 0, key: key, hash: hash, prev: self.entry };
    self.entry = entry;
    self.size = self.size + 1 | 0;
    moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$221$(self, hash & self.bitmask, self.bitmask, entry);
    return value;
  } else {
    const _Some = _bind;
    const _entry = _Some;
    return _entry.value;
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$get_or_init$223$(self, key, init) {
  const hash = moonbitlang$core$builtin$$Hash$hash$224$(key);
  const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$223$(self, key, hash);
  if (_bind === undefined) {
    if (self.size > (self.bitmask / 2 | 0)) {
      moonbitlang$yacc$lib$util$hashmap2$$T$grow$223$(self);
    }
    const value = init(key);
    const entry = { value: value, psl: 0, key: key, hash: hash, prev: self.entry };
    self.entry = entry;
    self.size = self.size + 1 | 0;
    moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$223$(self, hash & self.bitmask, self.bitmask, entry);
    return value;
  } else {
    const _Some = _bind;
    const _entry = _Some;
    return _entry.value;
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$set$164$(self, key, value) {
  const hash = moonbitlang$core$builtin$$Hash$hash$198$(key);
  const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$164$(self, key, hash);
  if (_bind === undefined) {
    if (self.size > (self.bitmask / 2 | 0)) {
      moonbitlang$yacc$lib$util$hashmap2$$T$grow$164$(self);
    }
    const entry = { value: value, psl: 0, key: key, hash: hash, prev: self.entry };
    self.entry = entry;
    self.size = self.size + 1 | 0;
    moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$164$(self, hash & self.bitmask, self.bitmask, entry);
    return;
  } else {
    const _Some = _bind;
    const _entry = _Some;
    _entry.value = value;
    return;
  }
}
function moonbitlang$yacc$lib$util$hashmap2$$T$set$222$(self, key, value) {
  const hash = moonbitlang$core$builtin$$Hash$hash$197$(key);
  const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$get_entry_with_hash$222$(self, key, hash);
  if (_bind === undefined) {
    if (self.size > (self.bitmask / 2 | 0)) {
      moonbitlang$yacc$lib$util$hashmap2$$T$grow$222$(self);
    }
    const entry = { value: value, psl: 0, key: key, hash: hash, prev: self.entry };
    self.entry = entry;
    self.size = self.size + 1 | 0;
    moonbitlang$yacc$lib$util$hashmap2$$T$put_entry$222$(self, hash & self.bitmask, self.bitmask, entry);
    return;
  } else {
    const _Some = _bind;
    const _entry = _Some;
    _entry.value = value;
    return;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$126$(_x_500, _x_501) {
  return moonbitlang$core$builtin$$Eq$op_equal$157$(_x_500.state, _x_501.state) && moonbitlang$core$builtin$$Eq$op_equal$73$(_x_500.input, _x_501.input);
}
function moonbitlang$core$builtin$$Hash$hash_combine$126$(_x_496, _x_497) {
  moonbitlang$core$builtin$$Hash$hash_combine$157$(_x_496.state, _x_497);
  moonbitlang$core$builtin$$Hash$hash_combine$73$(_x_496.input, _x_497);
}
function moonbitlang$core$builtin$$Eq$op_equal$45$(_x_478, _x_479) {
  return _x_478 === _x_479;
}
function moonbitlang$core$builtin$$Compare$compare$45$(_x_474, _x_475) {
  return $compare_int(_x_474, _x_475);
}
function moonbitlang$core$builtin$$Hash$hash_combine$45$(_x_470, _x_471) {
  moonbitlang$core$builtin$$Hash$hash_combine$10$(_x_470, _x_471);
}
function moonbitlang$core$builtin$$Eq$op_equal$73$(_x_462, _x_463) {
  if (_x_462.$tag === 0) {
    if (_x_463.$tag === 0) {
      return true;
    } else {
      return false;
    }
  } else {
    const _Input = _x_462;
    const _$42$x0_464 = _Input._0;
    if (_x_463.$tag === 1) {
      const _Input$2 = _x_463;
      const _$42$y0_465 = _Input$2._0;
      return moonbitlang$core$builtin$$Eq$op_equal$95$(_$42$x0_464, _$42$y0_465);
    } else {
      return false;
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$73$(_x_454, _x_455) {
  if (_x_454.$tag === 0) {
    if (_x_455.$tag === 0) {
      return 0;
    } else {
      return -1;
    }
  } else {
    const _Input = _x_454;
    const _$42$x0_456 = _Input._0;
    if (_x_455.$tag === 0) {
      return 1;
    } else {
      const _Input$2 = _x_455;
      const _$42$y0_457 = _Input$2._0;
      return moonbitlang$core$builtin$$Compare$compare$95$(_$42$x0_456, _$42$y0_457);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$51$(_x_438, _x_439) {
  switch (_x_438.$tag) {
    case 0: {
      const _Shift = _x_438;
      const _$42$x0_440 = _Shift._0;
      if (_x_439.$tag === 0) {
        const _Shift$2 = _x_439;
        const _$42$y0_441 = _Shift$2._0;
        return moonbitlang$core$builtin$$Eq$op_equal$157$(_$42$x0_440, _$42$y0_441);
      } else {
        return false;
      }
    }
    case 1: {
      const _Reduce = _x_438;
      const _$42$x0_442 = _Reduce._0;
      if (_x_439.$tag === 1) {
        const _Reduce$2 = _x_439;
        const _$42$y0_443 = _Reduce$2._0;
        return moonbitlang$core$builtin$$Eq$op_equal$40$(_$42$x0_442, _$42$y0_443);
      } else {
        return false;
      }
    }
    case 2: {
      if (_x_439.$tag === 2) {
        return true;
      } else {
        return false;
      }
    }
    default: {
      const _Conflict = _x_438;
      const _$42$x0_444 = _Conflict._0;
      if (_x_439.$tag === 3) {
        const _Conflict$2 = _x_439;
        const _$42$y0_445 = _Conflict$2._0;
        return moonbitlang$core$builtin$$Eq$op_equal$50$(_$42$x0_444, _$42$y0_445);
      } else {
        return false;
      }
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$118$(_x_422, _x_423) {
  return moonbitlang$core$builtin$$Eq$op_equal$219$(_x_422, _x_423);
}
function moonbitlang$core$builtin$$Hash$hash_combine$73$(self, hasher) {
  if (self.$tag === 0) {
    moonbitlang$core$builtin$$Hasher$combine_int(hasher, -1);
    return;
  } else {
    const _Input = self;
    const _t = _Input._0;
    moonbitlang$core$builtin$$Hasher$combine_int(hasher, _t.num);
    return;
  }
}
function moonbitlang$core$builtin$$Show$output$73$(self, logger) {
  if (self.$tag === 1) {
    const _Input = self;
    const _t = _Input._0;
    moonbitlang$core$builtin$$Logger$write_object$95$(logger, _t);
    return;
  } else {
    logger.method_0(logger.self, "$");
    return;
  }
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$is_singleton(self, key) {
  let _tmp;
  if (key.$tag === 0) {
    _tmp = 0;
  } else {
    const _Input = key;
    const _key = _Input._0;
    _tmp = _key.num + 1 | 0;
  }
  return moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$is_singleton(self, _tmp);
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$empty() {
  return moonbitlang$yacc$lib$util$small_int_set$$empty();
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$terminal(t) {
  return moonbitlang$yacc$lib$util$small_int_set$$singleton(t.num + 1 | 0);
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$end_of_input() {
  return moonbitlang$yacc$lib$util$small_int_set$$singleton(0);
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$singleton(input) {
  if (input.$tag === 1) {
    const _Input = input;
    const _t = _Input._0;
    return moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$terminal(_t);
  } else {
    return moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$end_of_input();
  }
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$decode_iter(self, grammar) {
  const _bind = moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$iter(self);
  return (_p) => _bind((_p$2) => _p(_p$2 === 0 ? $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$EndOfInput : new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$Input(moonbitlang$core$array$$Array$op_get$95$(grammar.terminals, _p$2 - 1 | 0))));
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$union(self, other) {
  return moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$union(self, other);
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$disjoint(self, other) {
  return moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$disjoint(self, other);
}
function moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$subset(self, other) {
  return moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$subset(self, other);
}
function moonbitlang$core$builtin$$Eq$op_equal$224$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$208$(self.items, other.items);
}
function moonbitlang$core$builtin$$Hash$hash$224$(self) {
  const _bind = self.hash;
  if (_bind === undefined) {
    const hasher = moonbitlang$core$builtin$$Hasher$new(moonbitlang$core$builtin$$Hasher$new$46$seed$46$default());
    const _arr = self.items;
    const _len = _arr.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const item = _arr[_i];
        moonbitlang$core$builtin$$Hasher$combine_int(hasher, item);
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const hash = moonbitlang$core$builtin$$Hasher$finalize(hasher);
    self.hash = hash;
    return hash;
  } else {
    const _Some = _bind;
    const _hash = _Some;
    return _hash;
  }
}
function moonbitlang$yacc$lib$lr1$$EncodedLR0ItemSet$from_sorted_array(items) {
  return { items: items, hash: undefined };
}
function moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode(self, grammar) {
  const production = moonbitlang$core$array$$Array$op_get$40$(grammar.productions, self >> 10);
  const dot = self & 1023;
  return { production: production, dot: dot };
}
function moonbitlang$yacc$lib$lr1$$EncodedLR0ItemSet$decode_iter(self, grammar) {
  return moonbitlang$core$builtin$$Iter$new$163$((yield_) => {
    let index = 0;
    const _arr = self.items;
    const _len = _arr.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const item = _arr[_i];
        const _bind = yield_({ _0: index, _1: moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode(item, grammar) });
        if (_bind === 0) {
          return 0;
        }
        index = index + 1 | 0;
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return 1;
  });
}
function moonbitlang$yacc$lib$lr1$$EncodedSymbolicLookaheadSet$interpret(self, subst) {
  const _bind = moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$iter(self.vars);
  const _bind$2 = self.concrete_set;
  const _acc = { val: _bind$2 };
  _bind((_p) => {
    const _p$2 = moonbitlang$core$array$$Array$op_get$118$(subst, _p);
    _acc.val = moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$union(_acc.val, _p$2);
    return 1;
  });
  return _acc.val;
}
function moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$decode_item_groups(self, grammar) {
  return moonbitlang$core$builtin$$Iter$new$160$((yield_) => {
    const lookahead_set_array = moonbitlang$core$array$$Array$map$188$(self.core.closure_symbolic_lookahead_set, (symbolic_lookahead_set) => moonbitlang$yacc$lib$lr1$$EncodedSymbolicLookaheadSet$interpret(symbolic_lookahead_set, self.kernel_lookahead_set_table));
    const _foreach_result = { val: $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$28$ };
    const _bind = moonbitlang$yacc$lib$lr1$$EncodedLR0ItemSet$decode_iter(self.core.closure_items, grammar);
    _bind((item) => {
      const _index = item._0;
      const _item = item._1;
      const lookahead_set = moonbitlang$core$array$$Array$op_get$118$(lookahead_set_array, _index);
      const _bind$2 = yield_({ core: _item, lookahead_set: moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$decode_iter(lookahead_set, grammar) });
      if (_bind$2 === 0) {
        _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$28$(0);
        return 0;
      }
      return 1;
    });
    const _tmp = _foreach_result.val;
    switch (_tmp.$tag) {
      case 0: {
        break;
      }
      case 1: {
        const _break = _tmp;
        _break._0;
        break;
      }
      case 2: {
        const _return = _tmp;
        return _return._0;
      }
      case 3: {
        $panic();
        break;
      }
      default: {
        $panic();
      }
    }
    return 1;
  });
}
function moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$merge(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$225$(self.core, other.core) ? { core: self.core, kernel_lookahead_set_table: moonbitlang$core$array$$Array$mapi$210$(self.kernel_lookahead_set_table, (i, lookahead_set) => moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$union(lookahead_set, moonbitlang$core$array$$Array$op_get$118$(other.kernel_lookahead_set_table, i))) } : $panic();
}
function moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$subsume(self, other) {
  if (moonbitlang$core$builtin$$Eq$op_equal$225$(self.core, other.core)) {
    const len = self.kernel_lookahead_set_table.length;
    const self_table = self.kernel_lookahead_set_table;
    const other_table = other.kernel_lookahead_set_table;
    switch (len) {
      case 1: {
        return moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$subset(moonbitlang$core$array$$Array$op_get$118$(self_table, 0), moonbitlang$core$array$$Array$op_get$118$(other_table, 0));
      }
      case 2: {
        return moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$subset(moonbitlang$core$array$$Array$op_get$118$(self_table, 0), moonbitlang$core$array$$Array$op_get$118$(other_table, 0)) && moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$subset(moonbitlang$core$array$$Array$op_get$118$(self_table, 1), moonbitlang$core$array$$Array$op_get$118$(other_table, 1));
      }
      default: {
        let _tmp = 0;
        while (true) {
          const i = _tmp;
          if (i < len) {
            if (!moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$subset(moonbitlang$core$array$$Array$op_get$118$(self_table, i), moonbitlang$core$array$$Array$op_get$118$(other_table, i))) {
              return false;
            }
            _tmp = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        return true;
      }
    }
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$weak_compat(self, other) {
  if (moonbitlang$core$builtin$$Eq$op_equal$225$(self.core, other.core)) {
    const len = self.kernel_lookahead_set_table.length;
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const la_set1i = moonbitlang$core$array$$Array$op_get$118$(self.kernel_lookahead_set_table, i);
        const la_set2i = moonbitlang$core$array$$Array$op_get$118$(other.kernel_lookahead_set_table, i);
        let _tmp$2 = i;
        while (true) {
          const j = _tmp$2;
          if (j < len) {
            _L: {
              if (i !== j) {
                const la_set1j = moonbitlang$core$array$$Array$op_get$118$(self.kernel_lookahead_set_table, j);
                const la_set2j = moonbitlang$core$array$$Array$op_get$118$(other.kernel_lookahead_set_table, j);
                const compat = moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$disjoint(la_set1i, la_set2j) && moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$disjoint(la_set2i, la_set1j) || (!moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$disjoint(la_set1i, la_set1j) || !moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$disjoint(la_set2i, la_set2j));
                if (!compat) {
                  return false;
                }
              } else {
                break _L;
              }
              break _L;
            }
            _tmp$2 = j + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return true;
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$eoi_compact(self, other) {
  if (moonbitlang$core$builtin$$Eq$op_equal$225$(self.core, other.core)) {
    const len = self.kernel_lookahead_set_table.length;
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const la_set1 = moonbitlang$core$array$$Array$op_get$118$(self.kernel_lookahead_set_table, i);
        const la_set2 = moonbitlang$core$array$$Array$op_get$118$(other.kernel_lookahead_set_table, i);
        if (moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$is_singleton(la_set1, $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$EndOfInput)) {
          if (!moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$is_singleton(la_set2, $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$EndOfInput)) {
            return false;
          }
        } else {
          if (moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$is_singleton(la_set2, $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$EndOfInput)) {
            if (!moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$is_singleton(la_set1, $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$EndOfInput)) {
              return false;
            }
          }
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return true;
  } else {
    return $panic();
  }
}
function moonbitlang$yacc$lib$lr1$$EncodedLR0Item$new(production, dot) {
  return production.num << 10 | dot;
}
function moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode_production(self, grammar) {
  return moonbitlang$core$array$$Array$op_get$40$(grammar.productions, self >> 10);
}
function moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode_postdot(self, grammar) {
  const production = moonbitlang$core$array$$Array$op_get$40$(grammar.productions, self >> 10);
  const dot = self & 1023;
  return moonbitlang$core$array$$Array$get$76$(production.rhs, dot);
}
function moonbitlang$yacc$lib$lr1$$EncodedLR0Item$unsafe_shift(self) {
  return self + 1 | 0;
}
function moonbitlang$yacc$lib$lr1$$EpsilonLookaheadSet$op_add$170$(set1, set2) {
  return set1.nullable ? { set: moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$union$170$(set1.set, set2.set), nullable: set2.nullable } : set1;
}
function moonbitlang$yacc$lib$lr1$$EpsilonLookaheadSet$union$170$(set1, set2) {
  return { set: moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$union$170$(set1.set, set2.set), nullable: set1.nullable || set2.nullable };
}
function moonbitlang$yacc$lib$lr1$$compute_first_fn$170$(grammar) {
  const nt_first_map = moonbitlang$core$array$$Array$make$117$(grammar.nonterminals.length, { set: moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$empty$170$(), nullable: false });
  const first = (symbols) => {
    if (symbols.len === 0) {
      return { set: moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$empty$170$(), nullable: true };
    } else {
      const _symbol = symbols.buf[symbols.start + 0 | 0];
      const _tmp = symbols.buf;
      const _tmp$2 = 1 + symbols.start | 0;
      const _some = symbols.len - 0 | 0;
      const _x = { buf: _tmp, start: _tmp$2, len: _some - 1 | 0 };
      let _tmp$3;
      if (_symbol.$tag === 0) {
        const _T = _symbol;
        const _t = _T._0;
        _tmp$3 = { set: moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$singleton$170$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$Input(_t)), nullable: false };
      } else {
        const _NT = _symbol;
        const _nt = _NT._0;
        _tmp$3 = moonbitlang$core$array$$Array$op_get$117$(nt_first_map, _nt.num);
      }
      return moonbitlang$yacc$lib$lr1$$EpsilonLookaheadSet$op_add$170$(_tmp$3, first(_x));
    }
  };
  let fixedpoint_reached = false;
  while (true) {
    if (!fixedpoint_reached) {
      fixedpoint_reached = true;
      const _arr = grammar.nonterminals;
      const _len = _arr.length;
      let _tmp = 0;
      while (true) {
        const _i = _tmp;
        if (_i < _len) {
          const nt = _arr[_i];
          const old_set = moonbitlang$core$array$$Array$op_get$117$(nt_first_map, nt.num);
          const new_set = moonbitlang$core$array$$Array$fold$212$(nt.productions, { set: moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$empty$170$(), nullable: false }, (acc, p) => {
            const _bind = p.rhs;
            return moonbitlang$yacc$lib$lr1$$EpsilonLookaheadSet$union$170$(acc, first({ buf: _bind, start: 0, len: _bind.length }));
          });
          if (!moonbitlang$core$builtin$$Eq$op_equal$226$(old_set, new_set)) {
            fixedpoint_reached = false;
            moonbitlang$core$array$$Array$op_set$117$(nt_first_map, nt.num, new_set);
          }
          _tmp = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      continue;
    } else {
      break;
    }
  }
  return first;
}
function moonbitlang$yacc$lib$lr1$$build_closure_fn$170$(grammar) {
  const first = moonbitlang$yacc$lib$lr1$$compute_first_fn$170$(grammar);
  const node_by_item = moonbitlang$core$hashmap$$new$86$(moonbitlang$core$hashmap$$new$46$capacity$46$default$86$());
  const _arr = grammar.productions;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const production = _arr[_i];
      const _end218 = production.rhs.length;
      let _tmp$2 = 0;
      while (true) {
        const dot = _tmp$2;
        if (dot <= _end218) {
          const item = moonbitlang$yacc$lib$lr1$$EncodedLR0Item$new(production, dot);
          const partial_lookahead_set = dot < production.rhs.length ? first(moonbitlang$core$array$$Array$op_as_view$76$(production.rhs, dot + 1 | 0, undefined)) : { set: moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$empty$170$(), nullable: false };
          const node = { item: item, partial_lookahead_set: partial_lookahead_set, epsilon_transitions: [], stamp: moonbitlang$yacc$lib$util$stamp$$initial(), predecessors: $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$29$, lookahead_set: moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$empty$170$() };
          moonbitlang$core$hashmap$$T$op_set$86$(node_by_item, item, node);
          _tmp$2 = dot + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _bind = moonbitlang$core$hashmap$$T$iter$86$(node_by_item);
  _bind((pair) => {
    const node = pair._1;
    const _bind$2 = moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode_postdot(node.item, grammar);
    if (_bind$2 === undefined) {
    } else {
      const _Some = _bind$2;
      const _x = _Some;
      if (_x.$tag === 0) {
      } else {
        const _NT = _x;
        const _nt = _NT._0;
        const _arr$2 = _nt.productions;
        const _len$2 = _arr$2.length;
        let _tmp$2 = 0;
        while (true) {
          const _i = _tmp$2;
          if (_i < _len$2) {
            const production = _arr$2[_i];
            const encoded_item = moonbitlang$yacc$lib$lr1$$EncodedLR0Item$new(production, 0);
            moonbitlang$core$array$$Array$push$52$(node.epsilon_transitions, moonbitlang$core$option$$Option$unwrap$52$(moonbitlang$core$hashmap$$T$op_get$86$(node_by_item, encoded_item)));
            _tmp$2 = _i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
      }
    }
    return 1;
  });
  return (item_set) => {
    const stamp = moonbitlang$yacc$lib$util$stamp$$new();
    const nodes = [];
    const _env = { _0: nodes, _1: stamp };
    item_set((item) => {
      const _item = item._0;
      const _lookahead_set = item._1;
      const node = moonbitlang$core$option$$Option$unwrap$52$(moonbitlang$core$hashmap$$T$op_get$86$(node_by_item, _item));
      node.lookahead_set = _lookahead_set;
      moonbitlang$yacc$lib$lr1$$build_closure_fn$46$follow$47$5608(_env, node);
      return 1;
    });
    const stamp$2 = moonbitlang$yacc$lib$util$stamp$$new();
    const _len$2 = nodes.length;
    let _tmp$2 = 0;
    while (true) {
      const _i = _tmp$2;
      if (_i < _len$2) {
        const node = nodes[_i];
        moonbitlang$yacc$lib$lr1$$build_closure_fn$46$walk$47$5609(stamp$2, node);
        _tmp$2 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const closure = moonbitlang$core$array$$Array$map$183$(nodes, (node) => ({ _0: node.item, _1: node.lookahead_set }));
    const _len$3 = nodes.length;
    let _tmp$3 = 0;
    while (true) {
      const _i = _tmp$3;
      if (_i < _len$3) {
        const node = nodes[_i];
        node.predecessors = $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$29$;
        node.lookahead_set = moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$empty$170$();
        _tmp$3 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    moonbitlang$core$array$$Array$sort_by_key$44$(closure, (pair) => pair._0);
    return closure;
  };
}
function moonbitlang$yacc$lib$lr1$$build_closure_fn$46$visit$47$5607(_env, node, lookahead_set, parent) {
  const stamp = _env._1;
  if (lookahead_set.nullable) {
    node.predecessors = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$29$(parent, node.predecessors);
  }
  if (moonbitlang$core$builtin$$Eq$op_equal$87$(node.stamp, stamp)) {
    node.lookahead_set = moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$union$170$(node.lookahead_set, lookahead_set.set);
    return;
  } else {
    node.lookahead_set = lookahead_set.set;
    moonbitlang$yacc$lib$lr1$$build_closure_fn$46$follow$47$5608(_env, node);
    return;
  }
}
function moonbitlang$yacc$lib$lr1$$build_closure_fn$46$follow$47$5608(_env, node) {
  const stamp = _env._1;
  const nodes = _env._0;
  node.stamp = stamp;
  moonbitlang$core$array$$Array$push$52$(nodes, node);
  const _arr = node.epsilon_transitions;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const epsilon_transition = _arr[_i];
      moonbitlang$yacc$lib$lr1$$build_closure_fn$46$visit$47$5607(_env, epsilon_transition, node.partial_lookahead_set, node);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$yacc$lib$lr1$$build_closure_fn$46$walk$47$5609(stamp, node) {
  if (moonbitlang$core$builtin$$op_notequal$87$(node.stamp, stamp)) {
    node.stamp = stamp;
    const _bind = moonbitlang$core$immut$list$$T$iter$52$(node.predecessors);
    _bind((predecessor) => {
      moonbitlang$yacc$lib$lr1$$build_closure_fn$46$walk$47$5609(stamp, predecessor);
      node.lookahead_set = moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$union$170$(node.lookahead_set, predecessor.lookahead_set);
      return 1;
    });
    return;
  } else {
    return;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$226$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$170$(self.set, other.set) && self.nullable === other.nullable;
}
function moonbitlang$yacc$lib$lr1$$resolve_conflicts(conflicts) {
  const errors = [];
  const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$iter2$164$(conflicts);
  _bind((location, decisions) => {
    const _state = location.state;
    const _input = location.input;
    const shift = [];
    const reduce = [];
    const _bind$2 = moonbitlang$core$immut$list$$T$iter$51$(decisions);
    _bind$2((decision) => {
      switch (decision.$tag) {
        case 0: {
          const _Shift = decision;
          const _state$2 = _Shift._0;
          moonbitlang$core$array$$Array$push$120$(shift, { _0: _input, _1: _state$2 });
          break;
        }
        case 1: {
          const _Reduce = decision;
          const _production = _Reduce._0;
          moonbitlang$core$array$$Array$push$40$(reduce, _production);
          break;
        }
        case 2: {
          $panic();
          break;
        }
        default: {
          $panic();
        }
      }
      return 1;
    });
    if (shift.length <= 1) {
      if (reduce.length >= 1) {
        moonbitlang$core$array$$Array$sort_by_key$46$(reduce, (prod) => prod.num);
        const best_reduce = moonbitlang$core$array$$Array$op_get$40$(reduce, 0);
        moonbitlang$core$array$$Array$push$172$(errors, new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Reduce_conflict_resolved_by_presentation_order(_state, _input, reduce, best_reduce));
        let decision;
        if (shift.length === 0) {
          decision = new Result$Ok$30$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Reduce(best_reduce));
        } else {
          if (shift.length === 1) {
            const _x = moonbitlang$core$array$$Array$op_get$120$(shift, 0);
            const _input$2 = _x._0;
            const _shift_state = _x._1;
            let term_prec;
            if (_input$2.$tag === 1) {
              const _Input = _input$2;
              const _term = _Input._0;
              term_prec = _term.prec;
            } else {
              term_prec = undefined;
            }
            const _bind$3 = best_reduce.prec;
            if (term_prec === undefined) {
              if (_bind$3 === undefined) {
                moonbitlang$core$array$$Array$push$172$(errors, new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Shift_reduce_conflict_resolved_without_precedence(_state, _input$2, _shift_state, best_reduce));
                decision = new Result$Ok$30$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Shift(_shift_state));
              } else {
                decision = new Result$Ok$30$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Reduce(best_reduce));
              }
            } else {
              const _Some = term_prec;
              if (_bind$3 === undefined) {
                decision = new Result$Ok$30$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Shift(_shift_state));
              } else {
                const _x$2 = _Some;
                const _prec1 = _x$2._0;
                const _assoc1 = _x$2._1;
                const _Some$2 = _bind$3;
                const _prec2 = _Some$2;
                if (_prec1 > _prec2) {
                  decision = new Result$Ok$30$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Shift(_shift_state));
                } else {
                  if (_prec2 > _prec1) {
                    decision = new Result$Ok$30$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Reduce(best_reduce));
                  } else {
                    switch (_assoc1) {
                      case 0: {
                        decision = new Result$Ok$30$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Reduce(best_reduce));
                        break;
                      }
                      case 1: {
                        decision = new Result$Ok$30$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Shift(_shift_state));
                        break;
                      }
                      default: {
                        decision = new Result$Err$30$(new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$ResolveConflictError$Shift_reduce_conflict_not_resolved_because_of_non_assoc(_state, _input$2, _shift_state, best_reduce));
                      }
                    }
                  }
                }
              }
            }
          } else {
            decision = $panic();
          }
        }
        if (decision.$tag === 1) {
          const _Ok = decision;
          const _decision = _Ok._0;
          moonbitlang$core$sorted_map$$T$op_set$69$(_state.action, _input, _decision);
        } else {
          const _Err = decision;
          const _error = _Err._0;
          moonbitlang$core$array$$Array$push$172$(errors, _error);
        }
      } else {
        $panic();
      }
    } else {
      $panic();
    }
    return 1;
  });
  return errors;
}
function moonbitlang$core$builtin$$Eq$op_equal$170$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$118$(self.concrete_set, other.concrete_set) && moonbitlang$core$builtin$$Eq$op_equal$219$(self.vars, other.vars);
}
function moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$empty$170$() {
  return moonbitlang$yacc$lib$lr1$$_empty;
}
function moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$singleton$170$(lookahead) {
  return { concrete_set: moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$singleton(lookahead), vars: moonbitlang$yacc$lib$util$small_int_set$$empty() };
}
function moonbitlang$yacc$lib$lr1$$EncodedSymbolicLookaheadSet$variable(var_) {
  return { concrete_set: moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$empty(), vars: moonbitlang$yacc$lib$util$small_int_set$$singleton(var_) };
}
function moonbitlang$yacc$lib$lr1$$AbstractLookaheadSet$union$170$(self, other) {
  return { concrete_set: moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$union(self.concrete_set, other.concrete_set), vars: moonbitlang$yacc$lib$util$small_int_set$$SmallIntSet$union(self.vars, other.vars) };
}
function moonbitlang$core$builtin$$Show$output$160$(self, logger) {
  logger.method_0(logger.self, "[");
  moonbitlang$core$builtin$$Logger$write_object$10$(logger, self.core.production.num);
  logger.method_0(logger.self, ", ");
  moonbitlang$yacc$lib$grm$$Production$output_with_opt_dot$216$(self.core.production, logger, self.core.dot);
  logger.method_0(logger.self, ", ");
  const first = { val: true };
  const _bind = self.lookahead_set;
  _bind((lookahead) => {
    if (!first.val) {
      logger.method_0(logger.self, " / ");
    }
    moonbitlang$core$builtin$$Logger$write_object$73$(logger, lookahead);
    first.val = false;
    return 1;
  });
  logger.method_0(logger.self, "]");
}
function moonbitlang$core$builtin$$Eq$op_equal$225$(self, other) {
  return self.num === other.num;
}
function moonbitlang$core$builtin$$Eq$op_equal$157$(self, other) {
  return self.num === other.num;
}
function moonbitlang$core$builtin$$Hash$hash_combine$157$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_int(hasher, self.num);
}
function moonbitlang$yacc$lib$lr1$$LR1State$iter_item_groups(self) {
  return moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$decode_item_groups(self.items, self.grammar);
}
function moonbitlang$yacc$lib$lr1$$LR1State$set_action(self, input, decision) {
  const _bind = moonbitlang$core$sorted_map$$T$op_get$69$(self.action, input);
  if (_bind === undefined) {
    moonbitlang$core$sorted_map$$T$op_set$69$(self.action, input, decision);
    return;
  } else {
    const _Some = _bind;
    const _x = _Some;
    if (_x.$tag === 3) {
      const _Conflict = _x;
      const _decisions = _Conflict._0;
      if (!moonbitlang$core$immut$list$$T$contains$51$(_decisions, decision)) {
        moonbitlang$core$sorted_map$$T$op_set$69$(self.action, input, new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Conflict(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$31$(decision, _decisions)));
        return;
      } else {
        return;
      }
    } else {
      if (moonbitlang$core$builtin$$op_notequal$51$(_x, decision)) {
        moonbitlang$core$sorted_map$$T$op_set$69$(self.action, input, new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Conflict(new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$31$(decision, new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$31$(_x, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$31$))));
        return;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$yacc$lib$lr1$$build$46$explore$227$(_env, kernel_items) {
  const grammar = _env._4;
  const node_by_kernel_items = _env._3;
  const node_reductions = _env._2;
  const closure = _env._1;
  const node_transitions = _env._0;
  const defer = { val: Option$None$32$ };
  const node = moonbitlang$yacc$lib$util$hashmap2$$T$get_or_init$223$(node_by_kernel_items, kernel_items, (kernel_items$2) => {
    const symbolic_items = closure(moonbitlang$core$array$$Array$iter$39$(moonbitlang$core$array$$Array$mapi$211$(kernel_items$2.items, (index, item) => ({ _0: item, _1: moonbitlang$yacc$lib$lr1$$EncodedSymbolicLookaheadSet$variable(index) }))));
    const node$2 = { num: moonbitlang$yacc$lib$util$hashmap2$$T$size$223$(node_by_kernel_items), closure_items: moonbitlang$yacc$lib$lr1$$EncodedLR0ItemSet$from_sorted_array(moonbitlang$core$array$$Array$map$44$(symbolic_items, (item) => item._0)), closure_symbolic_lookahead_set: moonbitlang$core$array$$Array$map$184$(symbolic_items, (item) => item._1) };
    defer.val = new Option$Some$32$(symbolic_items);
    return node$2;
  });
  const _bind = defer.val;
  if (_bind.$tag === 1) {
    const _Some = _bind;
    const _symbolic_items = _Some._0;
    const result = [];
    const _len = _symbolic_items.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const symbolic_item = _symbolic_items[_i];
        const _item = symbolic_item._0;
        const _symbolic_lookahead_set = symbolic_item._1;
        const _bind$2 = moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode_postdot(_item, grammar);
        if (_bind$2 === undefined) {
          moonbitlang$core$array$$Array$push$171$(result, { _0: _symbolic_lookahead_set, _1: moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode_production(_item, grammar) });
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    moonbitlang$core$array$$Array$push$122$(node_reductions, result);
    moonbitlang$core$array$$Array$push$123$(node_transitions, moonbitlang$yacc$lib$util$hashmap2$$new$222$(16));
    const trans = moonbitlang$yacc$lib$util$hashmap2$$new$221$(16);
    const _len$2 = _symbolic_items.length;
    let _tmp$2 = 0;
    while (true) {
      const _i = _tmp$2;
      if (_i < _len$2) {
        const entry = _symbolic_items[_i];
        const _item = entry._0;
        const _symbolic_lookahead_set = entry._1;
        const _bind$2 = moonbitlang$yacc$lib$lr1$$EncodedLR0Item$decode_postdot(_item, grammar);
        if (_bind$2 === undefined) {
        } else {
          const _Some$2 = _bind$2;
          const _symbol = _Some$2;
          const next_item = moonbitlang$yacc$lib$lr1$$EncodedLR0Item$unsafe_shift(_item);
          const _bind$3 = moonbitlang$yacc$lib$util$hashmap2$$T$get_or_init$221$(trans, _symbol, (_arg) => ({ _0: [], _1: [] }));
          const _kernel_items = _bind$3._0;
          const _symbolic_lookahead_set_table = _bind$3._1;
          moonbitlang$core$array$$Array$push$45$(_kernel_items, next_item);
          moonbitlang$core$array$$Array$push$170$(_symbolic_lookahead_set_table, _symbolic_lookahead_set);
        }
        _tmp$2 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const _bind$2 = moonbitlang$yacc$lib$util$hashmap2$$T$iter$221$(trans);
    _bind$2((tran) => {
      const _symbol = tran._0;
      const _x = tran._1;
      const _kernel_items = _x._0;
      const _kernel_symbolic_lookahead_set_table = _x._1;
      const target = moonbitlang$yacc$lib$lr1$$build$46$explore$227$(_env, moonbitlang$yacc$lib$lr1$$EncodedLR0ItemSet$from_sorted_array(_kernel_items));
      moonbitlang$yacc$lib$util$hashmap2$$T$set$222$(moonbitlang$core$array$$Array$op_get$123$(node_transitions, node.num), _symbol, { _0: target, _1: _kernel_symbolic_lookahead_set_table });
      return 1;
    });
  }
  return node;
}
function moonbitlang$yacc$lib$lr1$$build$46$fuse$228$(_env, family, candidate) {
  const queue = _env._1;
  const user_eoi = _env._0;
  let _tmp = family;
  let _tmp$2 = candidate;
  _L: while (true) {
    const family$2 = _tmp;
    const candidate$2 = _tmp$2;
    const _len = family$2.length;
    let _tmp$3 = 0;
    while (true) {
      const _i = _tmp$3;
      if (_i < _len) {
        const state = family$2[_i];
        if (moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$weak_compat(state.items, candidate$2.items) && (user_eoi ? moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$eoi_compact(state.items, candidate$2.items) : true)) {
          const new_state = { items: moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$merge(candidate$2.items, state.items), state: undefined };
          const _bind = moonbitlang$core$array$$Array$search_by$103$(family$2, (it) => it === state);
          if (_bind === undefined) {
          } else {
            const _Some = _bind;
            const _index = _Some;
            moonbitlang$core$array$$Array$remove$103$(family$2, _index);
          }
          _tmp$2 = new_state;
          continue _L;
        }
        _tmp$3 = _i + 1 | 0;
        continue;
      } else {
        moonbitlang$core$array$$Array$push$103$(family$2, candidate$2);
        moonbitlang$core$array$$Array$push$103$(queue, candidate$2);
        return;
      }
    }
  }
}
function moonbitlang$yacc$lib$lr1$$build$46$state_from_pre$229$(_env, pre_state) {
  const grammar = _env._1;
  const next_state_num = _env._0;
  const _bind = pre_state.state;
  if (_bind === undefined) {
    const state = { grammar: grammar, num: next_state_num.val, items: pre_state.items, goto: moonbitlang$core$sorted_map$$new$67$(), action: moonbitlang$core$sorted_map$$new$69$(), stamp: moonbitlang$yacc$lib$util$stamp$$initial() };
    next_state_num.val = next_state_num.val + 1 | 0;
    pre_state.state = state;
    return state;
  } else {
    const _Some = _bind;
    const _state = _Some;
    return _state;
  }
}
function moonbitlang$yacc$lib$lr1$$build$46$check_add_conflict$230$(conflicts, state, input) {
  const _bind = moonbitlang$core$sorted_map$$T$op_get$69$(state.action, input);
  if (_bind === undefined) {
    return;
  } else {
    const _Some = _bind;
    const _x = _Some;
    if (_x.$tag === 3) {
      const _Conflict = _x;
      const _decisions = _Conflict._0;
      moonbitlang$yacc$lib$util$hashmap2$$T$set$164$(conflicts, { state: state, input: input }, _decisions);
      return;
    } else {
      return;
    }
  }
}
function moonbitlang$yacc$lib$lr1$$Automaton$build(grammar, user_eoi) {
  const closure = moonbitlang$yacc$lib$lr1$$build_closure_fn$170$(grammar);
  const node_by_kernel_items = moonbitlang$yacc$lib$util$hashmap2$$new$223$(65536);
  const node_transitions = [];
  const node_reductions = [];
  const node_starts = [];
  const _env = { _0: node_transitions, _1: closure, _2: node_reductions, _3: node_by_kernel_items, _4: grammar };
  const _arr = grammar.starts;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const start_production = _arr[_i];
      moonbitlang$core$array$$Array$push$174$(node_starts, { _0: moonbitlang$yacc$lib$lr1$$build$46$explore$227$(_env, moonbitlang$yacc$lib$lr1$$EncodedLR0ItemSet$from_sorted_array([moonbitlang$yacc$lib$lr1$$EncodedLR0Item$new(start_production, 0)])), _1: start_production });
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const next_state_num = { val: 0 };
  const starts = [];
  const families = moonbitlang$core$array$$FixedArray$makei$43$(moonbitlang$yacc$lib$util$hashmap2$$T$size$223$(node_by_kernel_items), (_i) => []);
  const queue = [];
  const _len$2 = node_starts.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len$2) {
      const entry = node_starts[_i];
      const _node = entry._0;
      const _start_production = entry._1;
      const start_state = { items: { core: _node, kernel_lookahead_set_table: [moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$end_of_input()] }, state: undefined };
      const _tmp$3 = start_state.items.core.num;
      $bound_check(families, _tmp$3);
      moonbitlang$core$array$$Array$push$103$(families[_tmp$3], start_state);
      moonbitlang$core$array$$Array$push$173$(starts, { _0: _start_production, _1: start_state });
      moonbitlang$core$array$$Array$push$103$(queue, start_state);
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _env$2 = { _0: user_eoi, _1: queue };
  while (true) {
    if (!moonbitlang$core$array$$Array$is_empty$103$(queue)) {
      const state = moonbitlang$core$array$$Array$unsafe_pop$103$(queue);
      const trans = moonbitlang$core$array$$Array$op_get$123$(node_transitions, state.items.core.num);
      const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$iter$222$(trans);
      _bind((entry) => {
        const _x = entry._1;
        const _target_node = _x._0;
        const _kernel_symbolic_lookahead_set_array = _x._1;
        const kernel_lookahead_set_table = moonbitlang$core$array$$Array$map$188$(_kernel_symbolic_lookahead_set_array, (symbolic_lookahead_set) => moonbitlang$yacc$lib$lr1$$EncodedSymbolicLookaheadSet$interpret(symbolic_lookahead_set, state.items.kernel_lookahead_set_table));
        const target_state = { items: { core: _target_node, kernel_lookahead_set_table: kernel_lookahead_set_table }, state: undefined };
        let _return_value;
        _L: {
          _L$2: {
            const _tmp$3 = target_state.items.core.num;
            $bound_check(families, _tmp$3);
            const family = families[_tmp$3];
            const _len$3 = family.length;
            let _tmp$4 = 0;
            while (true) {
              const _i = _tmp$4;
              if (_i < _len$3) {
                const state$2 = family[_i];
                if (moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$subsume(target_state.items, state$2.items)) {
                  _return_value = undefined;
                  break _L$2;
                }
                _tmp$4 = _i + 1 | 0;
                continue;
              } else {
                break;
              }
            }
            moonbitlang$yacc$lib$lr1$$build$46$fuse$228$(_env$2, family, target_state);
            break _L;
          }
        }
        return 1;
      });
      continue;
    } else {
      break;
    }
  }
  const states = [];
  const _env$3 = { _0: next_state_num, _1: grammar };
  const queue$2 = [];
  const _len$3 = starts.length;
  let _tmp$3 = 0;
  while (true) {
    const _i = _tmp$3;
    if (_i < _len$3) {
      const entry = starts[_i];
      const _pre_state = entry._1;
      moonbitlang$core$array$$Array$push$157$(queue$2, moonbitlang$yacc$lib$lr1$$build$46$state_from_pre$229$(_env$3, _pre_state));
      _tmp$3 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const stamp = moonbitlang$yacc$lib$util$stamp$$new();
  while (true) {
    if (!moonbitlang$core$array$$Array$is_empty$157$(queue$2)) {
      const state = moonbitlang$core$array$$Array$unsafe_pop$157$(queue$2);
      if (moonbitlang$core$builtin$$Eq$op_equal$87$(state.stamp, stamp)) {
        continue;
      }
      state.stamp = stamp;
      moonbitlang$core$array$$Array$push$157$(states, state);
      const trans = moonbitlang$core$array$$Array$op_get$123$(node_transitions, state.items.core.num);
      const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$iter$222$(trans);
      _bind((entry) => {
        const _symbol = entry._0;
        const _x = entry._1;
        const _target_node = _x._0;
        const _symbolic_lookahead_set_array = _x._1;
        const _tmp$4 = _target_node.num;
        $bound_check(families, _tmp$4);
        const family = families[_tmp$4];
        let pre_state;
        if (family.length === 0) {
          pre_state = $panic();
        } else {
          if (family.length === 1) {
            const _target_state = moonbitlang$core$array$$Array$op_get$103$(family, 0);
            pre_state = _target_state;
          } else {
            const kernel_lookahead_set_table = moonbitlang$core$array$$Array$map$188$(_symbolic_lookahead_set_array, (symbolic_lookahead_set) => moonbitlang$yacc$lib$lr1$$EncodedSymbolicLookaheadSet$interpret(symbolic_lookahead_set, state.items.kernel_lookahead_set_table));
            const next_items = { core: _target_node, kernel_lookahead_set_table: kernel_lookahead_set_table };
            pre_state = moonbitlang$core$option$$Option$unwrap$103$(moonbitlang$core$builtin$$Iter$find_first$103$(moonbitlang$core$array$$Array$iter$103$(family), (state$2) => moonbitlang$yacc$lib$lr1$$EncodedLR1ItemSet$subsume(next_items, state$2.items)));
          }
        }
        const target_state = moonbitlang$yacc$lib$lr1$$build$46$state_from_pre$229$(_env$3, pre_state);
        moonbitlang$core$sorted_map$$T$op_set$67$(state.goto, _symbol, target_state);
        if (moonbitlang$core$builtin$$op_notequal$87$(target_state.stamp, stamp)) {
          moonbitlang$core$array$$Array$push$157$(queue$2, target_state);
        }
        return 1;
      });
      continue;
    } else {
      break;
    }
  }
  const _len$4 = states.length;
  let _tmp$4 = 0;
  while (true) {
    const _i = _tmp$4;
    if (_i < _len$4) {
      const state = states[_i];
      state.num = _i;
      _tmp$4 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const conflicts = moonbitlang$yacc$lib$util$hashmap2$$new$164$(16);
  const _len$5 = states.length;
  let _tmp$5 = 0;
  while (true) {
    const _i = _tmp$5;
    if (_i < _len$5) {
      const state = states[_i];
      const core = state.items.core;
      const _bind = moonbitlang$yacc$lib$util$hashmap2$$T$iter$222$(moonbitlang$core$array$$Array$op_get$123$(node_transitions, core.num));
      _bind((tran) => {
        const _symbol = tran._0;
        if (_symbol.$tag === 1) {
        } else {
          const _T = _symbol;
          const _term = _T._0;
          moonbitlang$yacc$lib$lr1$$LR1State$set_action(state, new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$Input(_term), new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Shift(moonbitlang$core$option$$Option$unwrap$157$(moonbitlang$core$sorted_map$$T$op_get$67$(state.goto, new $64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$T(_term)))));
          moonbitlang$yacc$lib$lr1$$build$46$check_add_conflict$230$(conflicts, state, new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$Input(_term));
        }
        return 1;
      });
      const _arr$2 = moonbitlang$core$array$$Array$op_get$122$(node_reductions, core.num);
      const _len$6 = _arr$2.length;
      let _tmp$6 = 0;
      while (true) {
        const _i$2 = _tmp$6;
        if (_i$2 < _len$6) {
          const reduction = _arr$2[_i$2];
          const _symbolic_lookahead_set = reduction._0;
          const _production = reduction._1;
          const lookahead_set = moonbitlang$yacc$lib$lr1$$EncodedSymbolicLookaheadSet$interpret(_symbolic_lookahead_set, state.items.kernel_lookahead_set_table);
          const _bind$2 = moonbitlang$yacc$lib$lr1$$EncodedLR0ItemSet$decode_iter(core.closure_items, grammar);
          _bind$2((item) => {
            const _bind$3 = moonbitlang$yacc$lib$lr1$$EncodedLookaheadSet$decode_iter(lookahead_set, grammar);
            _bind$3((lookahead) => {
              if (moonbitlang$core$builtin$$Eq$op_equal$73$(lookahead, $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Lookahead$EndOfInput) && (moonbitlang$core$array$$Array$contains$40$(grammar.starts, _production) && item._1.dot === 1)) {
                moonbitlang$yacc$lib$lr1$$LR1State$set_action(state, lookahead, $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Accept);
              } else {
                moonbitlang$yacc$lib$lr1$$LR1State$set_action(state, lookahead, new $64$moonbitlang$47$yacc$47$lib$47$lr1$46$Decision$Reduce(_production));
              }
              moonbitlang$yacc$lib$lr1$$build$46$check_add_conflict$230$(conflicts, state, lookahead);
              return 1;
            });
            return 1;
          });
          _tmp$6 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp$5 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const starts$2 = moonbitlang$core$array$$Array$map$187$(starts, (entry) => {
    const _production = entry._0;
    const _pre_state = entry._1;
    return { _0: _production, _1: moonbitlang$yacc$lib$lr1$$build$46$state_from_pre$229$(_env$3, _pre_state) };
  });
  return { states: states, starts: starts$2, conflicts: conflicts };
}
function moonbitlang$yacc$lib$util$logger_with_cursor$$new(logger, cursor) {
  return { logger: logger, cursor: cursor };
}
function moonbitlang$yacc$lib$util$logger_with_cursor$$new$46$cursor$46$default() {
  return 0;
}
function moonbitlang$yacc$lib$util$logger_with_cursor$$LoggerWithCursor$cursor(self) {
  return self.cursor;
}
function moonbitlang$core$builtin$$Logger$write_char$200$(self, char) {
  const _tmp = self.logger;
  _tmp.method_3(_tmp.self, char);
  self.cursor = self.cursor + 1 | 0;
}
function moonbitlang$core$builtin$$Logger$write_string$200$(self, str) {
  const _tmp = self.logger;
  _tmp.method_0(_tmp.self, str);
  self.cursor = self.cursor + str.length | 0;
}
function moonbitlang$core$builtin$$Logger$write_substring$200$(self, str, start, len) {
  const _tmp = self.logger;
  _tmp.method_2(_tmp.self, str, start, len);
  self.cursor = self.cursor + len | 0;
}
function moonbitlang$yacc$lib$util$array_multimap$$new$132$() {
  return moonbitlang$yacc$lib$util$hashmap2$$new$220$(16);
}
function moonbitlang$yacc$lib$util$array_multimap$$T$add$132$(self, key, value) {
  const arr = moonbitlang$yacc$lib$util$hashmap2$$T$get_or_init$220$(self, key, (_discard_) => []);
  if (!moonbitlang$core$array$$Array$contains$23$(arr, value)) {
    moonbitlang$core$array$$Array$push$23$(arr, value);
    return;
  } else {
    return;
  }
}
function moonbitlang$yacc$lib$util$array_multimap$$T$get$132$(self, key) {
  return moonbitlang$core$option$$Option$or$63$(moonbitlang$yacc$lib$util$hashmap2$$T$get$220$(self, key), []);
}
function moonbitlang$core$builtin$$Eq$op_equal$23$(_x_232, _x_233) {
  let _tmp = _x_232;
  let _tmp$2 = _x_233;
  _L: while (true) {
    const _x_232$2 = _tmp;
    const _x_233$2 = _tmp$2;
    switch (_x_232$2.$tag) {
      case 0: {
        const _Constr = _x_232$2;
        const _$42$x0_234 = _Constr._0;
        const _$42$x1_235 = _Constr._1;
        const _$42$x2_236 = _Constr._2;
        if (_x_233$2.$tag === 0) {
          const _Constr$2 = _x_233$2;
          const _$42$y0_237 = _Constr$2._0;
          const _$42$y1_238 = _Constr$2._1;
          const _$42$y2_239 = _Constr$2._2;
          return moonbitlang$core$builtin$$Eq$op_equal$65$(_$42$x0_234, _$42$y0_237) && (_$42$x1_235 === _$42$y1_238 && moonbitlang$core$builtin$$Eq$op_equal$209$(_$42$x2_236, _$42$y2_239));
        } else {
          return false;
        }
      }
      case 1: {
        const _Option = _x_232$2;
        const _$42$x0_240 = _Option._0;
        if (_x_233$2.$tag === 1) {
          const _Option$2 = _x_233$2;
          const _$42$y0_241 = _Option$2._0;
          _tmp = _$42$x0_240;
          _tmp$2 = _$42$y0_241;
          continue _L;
        } else {
          return false;
        }
      }
      case 2: {
        const _Tuple = _x_232$2;
        const _$42$x0_242 = _Tuple._0;
        if (_x_233$2.$tag === 2) {
          const _Tuple$2 = _x_233$2;
          const _$42$y0_243 = _Tuple$2._0;
          return moonbitlang$core$builtin$$Eq$op_equal$209$(_$42$x0_242, _$42$y0_243);
        } else {
          return false;
        }
      }
      default: {
        const _Arrow = _x_232$2;
        const _$42$x0_244 = _Arrow._0;
        const _$42$x1_245 = _Arrow._1;
        if (_x_233$2.$tag === 3) {
          const _Arrow$2 = _x_233$2;
          const _$42$y0_246 = _Arrow$2._0;
          const _$42$y1_247 = _Arrow$2._1;
          if (moonbitlang$core$builtin$$Eq$op_equal$209$(_$42$x0_244, _$42$y0_246)) {
            _tmp = _$42$x1_245;
            _tmp$2 = _$42$y1_247;
            continue _L;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$23$(_x_194, _x_195) {
  let _tmp = _x_194;
  let _tmp$2 = _x_195;
  _L: while (true) {
    const _x_194$2 = _tmp;
    const _x_195$2 = _tmp$2;
    switch (_x_194$2.$tag) {
      case 0: {
        const _Constr = _x_194$2;
        const _$42$x0_196 = _Constr._0;
        const _$42$x1_197 = _Constr._1;
        const _$42$x2_198 = _Constr._2;
        if (_x_195$2.$tag === 0) {
          const _Constr$2 = _x_195$2;
          const _$42$y0_199 = _Constr$2._0;
          const _$42$y1_200 = _Constr$2._1;
          const _$42$y2_201 = _Constr$2._2;
          const _bind = moonbitlang$core$builtin$$Compare$compare$65$(_$42$x0_196, _$42$y0_199);
          if (_bind === 0) {
            const _bind$2 = moonbitlang$core$builtin$$Compare$compare$11$(_$42$x1_197, _$42$y1_200);
            if (_bind$2 === 0) {
              return moonbitlang$core$builtin$$Compare$compare$209$(_$42$x2_198, _$42$y2_201);
            } else {
              return _bind$2;
            }
          } else {
            return _bind;
          }
        } else {
          return -1;
        }
      }
      case 1: {
        const _Option = _x_194$2;
        const _$42$x0_204 = _Option._0;
        switch (_x_195$2.$tag) {
          case 0: {
            return 1;
          }
          case 1: {
            const _Option$2 = _x_195$2;
            const _$42$y0_205 = _Option$2._0;
            _tmp = _$42$x0_204;
            _tmp$2 = _$42$y0_205;
            continue _L;
          }
          default: {
            return -1;
          }
        }
      }
      case 2: {
        const _Tuple = _x_194$2;
        const _$42$x0_206 = _Tuple._0;
        switch (_x_195$2.$tag) {
          case 0: {
            return 1;
          }
          case 1: {
            return 1;
          }
          case 2: {
            const _Tuple$2 = _x_195$2;
            const _$42$y0_207 = _Tuple$2._0;
            return moonbitlang$core$builtin$$Compare$compare$209$(_$42$x0_206, _$42$y0_207);
          }
          default: {
            return -1;
          }
        }
      }
      default: {
        const _Arrow = _x_194$2;
        const _$42$x0_208 = _Arrow._0;
        const _$42$x1_209 = _Arrow._1;
        switch (_x_195$2.$tag) {
          case 0: {
            return 1;
          }
          case 1: {
            return 1;
          }
          case 2: {
            return 1;
          }
          default: {
            const _Arrow$2 = _x_195$2;
            const _$42$y0_210 = _Arrow$2._0;
            const _$42$y1_211 = _Arrow$2._1;
            const _bind = moonbitlang$core$builtin$$Compare$compare$209$(_$42$x0_208, _$42$y0_210);
            if (_bind === 0) {
              _tmp = _$42$x1_209;
              _tmp$2 = _$42$y1_211;
              continue _L;
            } else {
              return _bind;
            }
          }
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$elab$$Item$type_(self) {
  const _bind = self.term;
  switch (_bind.$tag) {
    case 0: {
      const _Token = _bind;
      const _token = _Token._0;
      return _token.type_;
    }
    case 1: {
      const _Param = _bind;
      const _type_ = _Param._1;
      return _type_;
    }
    default: {
      const _RuleCall = _bind;
      const _rule = _RuleCall._0;
      return _rule.type_;
    }
  }
}
function moonbitlang$yacc$lib$elab$$elaborate_action$46$item_ident_to_index$231$(name_to_index, ident) {
  if (ident.$tag === 0) {
    const _Dollar = ident;
    const _index = _Dollar._0;
    return _index;
  } else {
    const _Name = ident;
    const _name = _Name._0;
    return moonbitlang$core$option$$Option$unwrap$10$(moonbitlang$core$builtin$$Map$op_get$128$(name_to_index, _name));
  }
}
function moonbitlang$yacc$lib$elab$$elaborate_action$46$add_binding$232$(_env, desc) {
  const name_to_index = _env._4;
  const visited = _env._3;
  const items = _env._2;
  const bindings = _env._1;
  const arity = _env._0;
  let _tmp = desc;
  _L: while (true) {
    const desc$2 = _tmp;
    if (!moonbitlang$core$sorted_set$$T$contains$22$(visited, desc$2)) {
      moonbitlang$core$sorted_set$$T$add$22$(visited, desc$2);
      switch (desc$2.$tag) {
        case 0: {
          const _Dollar = desc$2;
          const _index = _Dollar._0;
          const name = `_dollar${moonbitlang$core$builtin$$Show$to_string$10$(_index)}`;
          moonbitlang$core$array$$Array$push$42$(bindings, { _0: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$Data(_index - 1 | 0, moonbitlang$yacc$lib$elab$$Item$type_(moonbitlang$core$array$$Array$op_get$116$(items, _index - 1 | 0))), _1: name });
          return;
        }
        case 1: {
          if (arity === 0) {
            moonbitlang$core$array$$Array$push$42$(bindings, { _0: $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$LastPos, _1: "_start_pos" });
            return;
          } else {
            moonbitlang$core$array$$Array$push$42$(bindings, { _0: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$StartPos(0), _1: "_start_pos" });
            return;
          }
        }
        case 3: {
          moonbitlang$yacc$lib$elab$$elaborate_action$46$add_binding$232$(_env, $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$StartPos);
          _tmp = $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$EndPos;
          continue _L;
        }
        case 2: {
          if (arity === 0) {
            moonbitlang$core$array$$Array$push$42$(bindings, { _0: $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$LastPos, _1: "_end_pos" });
            return;
          } else {
            moonbitlang$core$array$$Array$push$42$(bindings, { _0: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$EndPos(arity - 1 | 0), _1: "_end_pos" });
            return;
          }
        }
        case 4: {
          const _StartPosOf = desc$2;
          const _arg = _StartPosOf._0;
          const index = moonbitlang$yacc$lib$elab$$elaborate_action$46$item_ident_to_index$231$(name_to_index, _arg);
          moonbitlang$core$array$$Array$push$42$(bindings, { _0: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$StartPos(index), _1: `_start_pos_of_item${moonbitlang$core$builtin$$Show$to_string$10$(index)}` });
          return;
        }
        case 5: {
          const _EndPosOf = desc$2;
          const _arg$2 = _EndPosOf._0;
          const index$2 = moonbitlang$yacc$lib$elab$$elaborate_action$46$item_ident_to_index$231$(name_to_index, _arg$2);
          moonbitlang$core$array$$Array$push$42$(bindings, { _0: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$EndPos(index$2), _1: `_end_pos_of_item${moonbitlang$core$builtin$$Show$to_string$10$(index$2)}` });
          return;
        }
        case 6: {
          const _LocOf = desc$2;
          const _arg$3 = _LocOf._0;
          moonbitlang$yacc$lib$elab$$elaborate_action$46$add_binding$232$(_env, new $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$StartPosOf(_arg$3));
          _tmp = new $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$EndPosOf(_arg$3);
          continue _L;
        }
        case 7: {
          moonbitlang$core$array$$Array$push$42$(bindings, { _0: $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$SymbolStartPos, _1: "_symbol_start_pos" });
          return;
        }
        default: {
          moonbitlang$yacc$lib$elab$$elaborate_action$46$add_binding$232$(_env, $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$SymbolStartPos);
          _tmp = $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$EndPos;
          continue _L;
        }
      }
    } else {
      return;
    }
  }
}
function moonbitlang$yacc$lib$elab$$elaborate_action(items, ast_action, rule_index, clause_index, nonterminal_name, type_, json_cst) {
  const arity = items.length;
  const name_to_index = moonbitlang$core$builtin$$Map$from_array$128$([]);
  const _len = items.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const item = items[_i];
      const _bind = item.binder;
      if (_bind === undefined) {
      } else {
        const _Some = _bind;
        const _name = _Some;
        moonbitlang$core$builtin$$Map$op_set$128$(name_to_index, _name, _i);
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const bindings = [];
  const visited = moonbitlang$core$sorted_set$$new$22$();
  const _env = { _0: arity, _1: bindings, _2: items, _3: visited, _4: name_to_index };
  const body = [];
  if (json_cst.$tag === 0) {
    const _len$2 = items.length;
    let _tmp$2 = 0;
    while (true) {
      const _i = _tmp$2;
      if (_i < _len$2) {
        const item = items[_i];
        const _x = item.binder;
        if (_x === undefined) {
        } else {
          const _Some = _x;
          const _name = _Some;
          moonbitlang$core$array$$Array$push$42$(bindings, { _0: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$Data(_i, moonbitlang$yacc$lib$elab$$Item$type_(item)), _1: _name });
        }
        _tmp$2 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const _bind = ast_action.code;
    if (_bind === undefined) {
      moonbitlang$core$array$$Array$push$169$(body, { _0: "()", _1: undefined });
    } else {
      const _Some = _bind;
      const _code = _Some;
      let last_index = 0;
      const _arr = _code.subst;
      const _len$3 = _arr.length;
      let _tmp$3 = 0;
      while (true) {
        const _i = _tmp$3;
        if (_i < _len$3) {
          const item = _arr[_i];
          if (item.start > last_index) {
            const len = item.start - last_index | 0;
            moonbitlang$core$array$$Array$push$169$(body, { _0: moonbitlang$core$string$$String$substring(_code.code, last_index, item.start), _1: { _0: _code.utf8_pos + last_index | 0, _1: len } });
          }
          moonbitlang$yacc$lib$elab$$elaborate_action$46$add_binding$232$(_env, item.desc);
          const _bind$2 = item.desc;
          let _tmp$4;
          switch (_bind$2.$tag) {
            case 0: {
              const _Dollar = _bind$2;
              const _index = _Dollar._0;
              _tmp$4 = `_dollar${moonbitlang$core$builtin$$Show$to_string$10$(_index)}`;
              break;
            }
            case 1: {
              _tmp$4 = "_start_pos";
              break;
            }
            case 2: {
              _tmp$4 = "_end_pos";
              break;
            }
            case 3: {
              _tmp$4 = "(_start_pos, _end_pos)";
              break;
            }
            case 4: {
              const _StartPosOf = _bind$2;
              const _arg = _StartPosOf._0;
              _tmp$4 = `_start_pos_of_item${moonbitlang$core$builtin$$Show$to_string$10$(moonbitlang$yacc$lib$elab$$elaborate_action$46$item_ident_to_index$231$(name_to_index, _arg))}`;
              break;
            }
            case 5: {
              const _EndPosOf = _bind$2;
              const _arg$2 = _EndPosOf._0;
              _tmp$4 = `_end_pos_of_item${moonbitlang$core$builtin$$Show$to_string$10$(moonbitlang$yacc$lib$elab$$elaborate_action$46$item_ident_to_index$231$(name_to_index, _arg$2))}`;
              break;
            }
            case 6: {
              const _LocOf = _bind$2;
              const _arg$3 = _LocOf._0;
              const index = moonbitlang$yacc$lib$elab$$elaborate_action$46$item_ident_to_index$231$(name_to_index, _arg$3);
              _tmp$4 = `(_start_pos_of_item${moonbitlang$core$builtin$$Show$to_string$10$(index)}, _end_pos_of_item${moonbitlang$core$builtin$$Show$to_string$10$(index)})`;
              break;
            }
            case 7: {
              _tmp$4 = "_symbol_start_pos";
              break;
            }
            default: {
              _tmp$4 = "(_symbol_start_pos, _end_pos)";
            }
          }
          moonbitlang$core$array$$Array$push$169$(body, { _0: _tmp$4, _1: { _0: _code.utf8_pos + item.start | 0, _1: item.end - item.start | 0 } });
          last_index = item.end;
          _tmp$3 = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      if (last_index < _code.code.length) {
        const len = _code.code.length - last_index | 0;
        moonbitlang$core$array$$Array$push$169$(body, { _0: moonbitlang$core$string$$String$substring(_code.code, last_index, _code.code.length), _1: { _0: _code.utf8_pos + last_index | 0, _1: len } });
      }
    }
  } else {
    moonbitlang$yacc$lib$elab$$elaborate_action$46$add_binding$232$(_env, $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$StartPos);
    moonbitlang$yacc$lib$elab$$elaborate_action$46$add_binding$232$(_env, $64$moonbitlang$47$yacc$47$lib$47$parser$46$SubstItemDesc$EndPos);
    moonbitlang$core$array$$Array$push$169$(body, { _0: `{\n  \"type\": \"NONTERMINAL\",\n  \"name\": \"${moonbitlang$core$builtin$$Show$to_string$11$(nonterminal_name)}\",\n  \"rule_index\": ${moonbitlang$core$builtin$$Show$to_string$10$(rule_index)},\n  \"clause_index\": ${moonbitlang$core$builtin$$Show$to_string$10$(clause_index)},\n  \"children\": args_to_json(_args),\n  \"start\": _start_pos.to_json(),\n  \"end\": _end_pos.to_json(),\n}\n`, _1: undefined });
  }
  return { stamp: moonbitlang$yacc$lib$util$stamp$$new(), arity: arity, type_: type_, sub_actions: [], bindings: bindings, body: body };
}
function moonbitlang$yacc$lib$elab$$elaborate_type_expr(ast_type_expr) {
  switch (ast_type_expr.$tag) {
    case 0: {
      const _Constr = ast_type_expr;
      const _pkg = _Constr._0;
      const _name = _Constr._1;
      const _args = _Constr._2;
      return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(_pkg, _name, moonbitlang$core$array$$Array$map$61$(_args, moonbitlang$yacc$lib$elab$$elaborate_type_expr));
    }
    case 1: {
      const _Option = ast_type_expr;
      const _inner = _Option._0;
      return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Option(moonbitlang$yacc$lib$elab$$elaborate_type_expr(_inner));
    }
    case 2: {
      const _Tuple = ast_type_expr;
      const _args$2 = _Tuple._0;
      return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Tuple(moonbitlang$core$array$$Array$map$61$(_args$2, moonbitlang$yacc$lib$elab$$elaborate_type_expr));
    }
    default: {
      const _Arrow = ast_type_expr;
      const _args$3 = _Arrow._0;
      const _ret = _Arrow._1;
      return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Arrow(moonbitlang$core$array$$Array$map$61$(_args$3, moonbitlang$yacc$lib$elab$$elaborate_type_expr), moonbitlang$yacc$lib$elab$$elaborate_type_expr(_ret));
    }
  }
}
function moonbitlang$yacc$lib$elab$$elaborate$46$get_token_by_name$233$(_env, name) {
  const tokens = _env._1;
  const token_by_name = _env._0;
  const _bind = moonbitlang$core$builtin$$Map$get$131$(token_by_name, name);
  if (_bind === undefined) {
    const token = { name: name, prec: undefined, type_: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", []), image: undefined };
    moonbitlang$core$builtin$$Map$op_set$131$(token_by_name, name, token);
    moonbitlang$core$array$$Array$push$153$(tokens, token);
    return token;
  } else {
    const _Some = _bind;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$yacc$lib$elab$$elaborate$46$map_term$234$(_env, ast_term, rule_param_map) {
  const rule_by_name = _env._2;
  const token_by_image = _env._1;
  const token_by_name = _env._0;
  switch (ast_term.$tag) {
    case 0: {
      const _Symbol = ast_term;
      const _symbol = _Symbol._0;
      const _bind = moonbitlang$core$builtin$$Map$op_get$131$(token_by_name, _symbol);
      if (_bind === undefined) {
        const _bind$2 = moonbitlang$core$builtin$$Map$op_get$132$(rule_param_map, _symbol);
        if (_bind$2 === undefined) {
          return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall(moonbitlang$core$option$$Option$unwrap$156$(moonbitlang$core$builtin$$Map$op_get$130$(rule_by_name, _symbol)), []);
        } else {
          const _Some = _bind$2;
          const _type_ = _Some;
          return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$Param(_symbol, _type_);
        }
      } else {
        const _Some = _bind;
        const _token = _Some;
        return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$Token(_token);
      }
    }
    case 1: {
      const _Image = ast_term;
      const _image = _Image._0;
      return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$Token(moonbitlang$core$option$$Option$unwrap$153$(moonbitlang$core$builtin$$Map$op_get$131$(token_by_image, _image)));
    }
    default: {
      const _RuleCall = ast_term;
      const _symbol$2 = _RuleCall._0;
      const _args = _RuleCall._1;
      return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall(moonbitlang$core$option$$Option$unwrap$156$(moonbitlang$core$builtin$$Map$op_get$130$(rule_by_name, _symbol$2)), moonbitlang$core$array$$Array$map$182$(_args, (arg) => moonbitlang$yacc$lib$elab$$elaborate$46$map_term$234$(_env, arg, rule_param_map)));
    }
  }
}
function moonbitlang$yacc$lib$elab$$elaborate(ast_spec, json_cst) {
  let header = ast_spec.header;
  let trailer = ast_spec.trailer;
  const token_by_name = moonbitlang$core$builtin$$Map$from_array$131$([]);
  const rule_by_name = moonbitlang$core$builtin$$Map$from_array$130$([]);
  const token_by_image = moonbitlang$core$builtin$$Map$from_array$131$([]);
  const tokens = [];
  const rules = [];
  const _env = { _0: token_by_name, _1: tokens };
  const _arr = ast_spec.decls;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const ast_decl = _arr[_i];
      switch (ast_decl.$tag) {
        case 1: {
          const _Token = ast_decl;
          const _names = _Token._0;
          const _type_ = _Token._1;
          const _len$2 = _names.length;
          let _tmp$2 = 0;
          while (true) {
            const _i$2 = _tmp$2;
            if (_i$2 < _len$2) {
              const name = _names[_i$2];
              const token = moonbitlang$yacc$lib$elab$$elaborate$46$get_token_by_name$233$(_env, name);
              token.type_ = moonbitlang$core$option$$Option$or$23$(moonbitlang$core$option$$Option$map$61$(_type_, moonbitlang$yacc$lib$elab$$elaborate_type_expr), new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", []));
              _tmp$2 = _i$2 + 1 | 0;
              continue;
            } else {
              break;
            }
          }
          break;
        }
        case 2: {
          const _Token1 = ast_decl;
          const _name = _Token1._0;
          const _type_$2 = _Token1._1;
          const _image = _Token1._2;
          const token = moonbitlang$yacc$lib$elab$$elaborate$46$get_token_by_name$233$(_env, _name);
          token.type_ = moonbitlang$core$option$$Option$or$23$(moonbitlang$core$option$$Option$map$61$(_type_$2, moonbitlang$yacc$lib$elab$$elaborate_type_expr), new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", []));
          token.image = _image;
          moonbitlang$core$builtin$$Map$op_set$131$(token_by_image, _image, token);
          break;
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _arr$2 = ast_spec.rules;
  const _len$2 = _arr$2.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len$2) {
      const ast_rule = _arr$2[_i];
      const rule = { name: ast_rule.nonterminal, inline: ast_rule.inline, generic_params: ast_rule.generic_params, params: moonbitlang$core$array$$Array$map$186$(ast_rule.params, (param) => ({ _0: param._0, _1: moonbitlang$core$option$$Option$or$23$(moonbitlang$core$option$$Option$map$61$(param._1, moonbitlang$yacc$lib$elab$$elaborate_type_expr), new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", [])) })), type_: moonbitlang$core$option$$Option$or$23$(moonbitlang$core$option$$Option$map$61$(ast_rule.type_, moonbitlang$yacc$lib$elab$$elaborate_type_expr), new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", [])), clauses: [] };
      moonbitlang$core$array$$Array$push$156$(rules, rule);
      moonbitlang$core$builtin$$Map$op_set$130$(rule_by_name, rule.name, rule);
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const curr_prec = { val: 0 };
  const prec_map = moonbitlang$core$sorted_map$$new$68$();
  const _arr$3 = ast_spec.decls;
  const _len$3 = _arr$3.length;
  let _tmp$3 = 0;
  while (true) {
    const _i = _tmp$3;
    if (_i < _len$3) {
      const ast_decl = _arr$3[_i];
      let idents;
      _L: {
        _L$2: {
          switch (ast_decl.$tag) {
            case 6: {
              const _Left = ast_decl;
              const _idents = _Left._0;
              idents = _idents;
              break _L$2;
            }
            case 7: {
              const _Right = ast_decl;
              const _idents$2 = _Right._0;
              idents = _idents$2;
              break _L$2;
            }
            case 8: {
              const _Nonassoc = ast_decl;
              const _idents$3 = _Nonassoc._0;
              idents = _idents$3;
              break _L$2;
            }
            case 3: {
              const _Type = ast_decl;
              const _idents$4 = _Type._0;
              const _type_ = _Type._1;
              const _len$4 = _idents$4.length;
              let _tmp$4 = 0;
              while (true) {
                const _i$2 = _tmp$4;
                if (_i$2 < _len$4) {
                  const ident = _idents$4[_i$2];
                  const _bind = moonbitlang$core$builtin$$Map$op_get$131$(token_by_name, ident);
                  if (_bind === undefined) {
                    const _bind$2 = moonbitlang$core$builtin$$Map$op_get$130$(rule_by_name, ident);
                    if (_bind$2 === undefined) {
                      $panic();
                    } else {
                      const _Some = _bind$2;
                      const _rule = _Some;
                      _rule.type_ = moonbitlang$yacc$lib$elab$$elaborate_type_expr(_type_);
                    }
                  } else {
                    const _Some = _bind;
                    const _token = _Some;
                    _token.type_ = moonbitlang$yacc$lib$elab$$elaborate_type_expr(_type_);
                  }
                  _tmp$4 = _i$2 + 1 | 0;
                  continue;
                } else {
                  break;
                }
              }
              break;
            }
          }
          break _L;
        }
        let assoc;
        switch (ast_decl.$tag) {
          case 6: {
            assoc = 0;
            break;
          }
          case 7: {
            assoc = 1;
            break;
          }
          case 8: {
            assoc = 2;
            break;
          }
          default: {
            assoc = $panic();
          }
        }
        const prec = curr_prec.val;
        curr_prec.val = curr_prec.val + 1 | 0;
        const _len$4 = idents.length;
        let _tmp$4 = 0;
        while (true) {
          const _i$2 = _tmp$4;
          if (_i$2 < _len$4) {
            const ident = idents[_i$2];
            moonbitlang$core$sorted_map$$T$op_set$68$(prec_map, ident, { _0: prec, _1: assoc });
            const _bind = moonbitlang$core$builtin$$Map$op_get$131$(token_by_name, ident);
            if (_bind === undefined) {
            } else {
              const _Some = _bind;
              const _token = _Some;
              _token.prec = { _0: prec, _1: assoc };
            }
            _tmp$4 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
      }
      _tmp$3 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _env$2 = { _0: token_by_name, _1: token_by_image, _2: rule_by_name };
  const _arr$4 = ast_spec.rules;
  const _len$4 = _arr$4.length;
  let _tmp$4 = 0;
  while (true) {
    const _i = _tmp$4;
    if (_i < _len$4) {
      const ast_rule = _arr$4[_i];
      const rule = moonbitlang$core$option$$Option$unwrap$156$(moonbitlang$core$builtin$$Map$op_get$130$(rule_by_name, ast_rule.nonterminal));
      let _tmp$5;
      if (json_cst.$tag === 0) {
        _tmp$5 = rule.type_;
      } else {
        _tmp$5 = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Json", []);
      }
      rule.type_ = _tmp$5;
      const rule_param_map = moonbitlang$core$builtin$$Map$from_array$132$(rule.params);
      const _arr$5 = ast_rule.clauses;
      const _len$5 = _arr$5.length;
      let _tmp$6 = 0;
      while (true) {
        const _i$2 = _tmp$6;
        if (_i$2 < _len$5) {
          const ast_clause = _arr$5[_i$2];
          const items = moonbitlang$core$array$$Array$map$185$(ast_clause.items, (ast_item) => ({ binder: ast_item.binder, term: moonbitlang$yacc$lib$elab$$elaborate$46$map_term$234$(_env$2, ast_item.term, rule_param_map) }));
          const _bind = ast_clause.prec;
          let prec;
          if (_bind === undefined) {
            const last_prec = { val: undefined };
            const _foreach_result = { val: $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$33$ };
            const _bind$2 = moonbitlang$core$array$$Array$rev_iter$116$(items);
            _bind$2((item) => {
              const _bind$3 = item.term;
              switch (_bind$3.$tag) {
                case 0: {
                  const _Token = _bind$3;
                  const _token = _Token._0;
                  const _bind$4 = _token.prec;
                  let _tmp$7;
                  if (_bind$4 === undefined) {
                    _tmp$7 = undefined;
                  } else {
                    const _Some = _bind$4;
                    const _x = _Some;
                    const _prec = _x._0;
                    _tmp$7 = _prec;
                  }
                  last_prec.val = _tmp$7;
                  _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$33$(undefined);
                  return 0;
                }
                case 1: {
                  break;
                }
              }
              return 1;
            });
            const _tmp$7 = _foreach_result.val;
            switch (_tmp$7.$tag) {
              case 0: {
                break;
              }
              case 1: {
                const _break = _tmp$7;
                _break._0;
                break;
              }
              case 2: {
                const _return = _tmp$7;
                return _return._0;
              }
              case 3: {
                $panic();
                break;
              }
              default: {
                $panic();
              }
            }
            prec = last_prec.val;
          } else {
            const _Some = _bind;
            const _prec = _Some;
            const _bind$2 = moonbitlang$core$option$$Option$unwrap$155$(moonbitlang$core$sorted_map$$T$op_get$68$(prec_map, _prec));
            const _prec$2 = _bind$2._0;
            prec = _prec$2;
          }
          const clause = { items: items, prec: prec, action: moonbitlang$yacc$lib$elab$$elaborate_action(items, ast_clause.action, _i, _i$2, rule.name, rule.type_, json_cst) };
          moonbitlang$core$array$$Array$push$41$(rule.clauses, clause);
          _tmp$6 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp$4 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const start_rules = [];
  let position_type = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", []);
  const derive_map = moonbitlang$yacc$lib$util$array_multimap$$new$132$();
  const _arr$5 = ast_spec.decls;
  const _len$5 = _arr$5.length;
  let _tmp$5 = 0;
  while (true) {
    const _i = _tmp$5;
    if (_i < _len$5) {
      const ast_decl = _arr$5[_i];
      switch (ast_decl.$tag) {
        case 0: {
          const _Start = ast_decl;
          const _symbols = _Start._0;
          const _len$6 = _symbols.length;
          let _tmp$6 = 0;
          while (true) {
            const _i$2 = _tmp$6;
            if (_i$2 < _len$6) {
              const symbol = _symbols[_i$2];
              moonbitlang$core$array$$Array$push$156$(start_rules, moonbitlang$core$option$$Option$unwrap$156$(moonbitlang$core$builtin$$Map$op_get$130$(rule_by_name, symbol)));
              _tmp$6 = _i$2 + 1 | 0;
              continue;
            } else {
              break;
            }
          }
          break;
        }
        case 5: {
          const _Position = ast_decl;
          const _type_ = _Position._0;
          position_type = moonbitlang$yacc$lib$elab$$elaborate_type_expr(_type_);
          break;
        }
        case 4: {
          const _Derive = ast_decl;
          const _traits = _Derive._0;
          const _type_$2 = _Derive._1;
          const _len$7 = _traits.length;
          let _tmp$7 = 0;
          while (true) {
            const _i$2 = _tmp$7;
            if (_i$2 < _len$7) {
              const trait_ = _traits[_i$2];
              moonbitlang$yacc$lib$util$array_multimap$$T$add$132$(derive_map, _type_$2, moonbitlang$yacc$lib$elab$$elaborate_type_expr(trait_));
              _tmp$7 = _i$2 + 1 | 0;
              continue;
            } else {
              break;
            }
          }
          break;
        }
      }
      _tmp$5 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (json_cst.$tag === 0) {
  } else {
    const _Yes = json_cst;
    const _rewrite = _Yes._0;
    header = undefined;
    trailer = undefined;
    position_type = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Int", []);
    if (_rewrite === undefined) {
    } else {
      moonbitlang$yacc$lib$util$array_multimap$$T$add$132$(derive_map, "Token", new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Show", []));
    }
  }
  if (json_cst.$tag === 0) {
  } else {
    const _Yes = json_cst;
    const _x = _Yes._0;
    if (_x === undefined) {
    } else {
      const _Some = _x;
      const _x$2 = _Some;
      if (_x$2 === 0) {
        const _len$6 = tokens.length;
        let _tmp$6 = 0;
        while (true) {
          const _i = _tmp$6;
          if (_i < _len$6) {
            const token = tokens[_i];
            token.type_ = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", []);
            _tmp$6 = _i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
      } else {
        const _len$6 = tokens.length;
        let _tmp$6 = 0;
        while (true) {
          const _i = _tmp$6;
          if (_i < _len$6) {
            const token = tokens[_i];
            token.type_ = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Json", []);
            _tmp$6 = _i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
      }
    }
  }
  return { header: header, trailer: trailer, tokens: tokens, rules: rules, start_rules: start_rules, position_type: position_type, derive_map: derive_map };
}
function moonbitlang$core$builtin$$Show$output$23$(self, logger) {
  let _tmp;
  switch (self.$tag) {
    case 0: {
      const _Constr = self;
      const _pkg = _Constr._0;
      const _name = _Constr._1;
      const _args = _Constr._2;
      let primary;
      if (_pkg === undefined) {
        primary = _name;
      } else {
        const _Some = _pkg;
        const _pkg$2 = _Some;
        primary = `@${moonbitlang$core$builtin$$Show$to_string$11$(_pkg$2)}.${moonbitlang$core$builtin$$Show$to_string$11$(_name)}`;
      }
      if (_args.length === 0) {
        _tmp = primary;
      } else {
        const _bind = moonbitlang$core$array$$Array$iter$23$(_args);
        _tmp = `${primary}[${moonbitlang$core$builtin$$Iter$join((_p) => _bind((_p$2) => _p(moonbitlang$core$builtin$$Show$to_string$203$(_p$2))), ", ")}]`;
      }
      break;
    }
    case 1: {
      const _Option = self;
      const _type_ = _Option._0;
      if (_type_.$tag === 3) {
        _tmp = `(${moonbitlang$core$builtin$$Show$to_string$203$(_type_)})?`;
      } else {
        _tmp = `${moonbitlang$core$builtin$$Show$to_string$203$(_type_)}?`;
      }
      break;
    }
    case 2: {
      const _Tuple = self;
      const _types = _Tuple._0;
      const _bind = moonbitlang$core$array$$Array$iter$23$(_types);
      _tmp = `(${moonbitlang$core$builtin$$Iter$join((_p) => _bind((_p$2) => _p(moonbitlang$core$builtin$$Show$to_string$203$(_p$2))), ", ")})`;
      break;
    }
    default: {
      const _Arrow = self;
      const _args$2 = _Arrow._0;
      const _ret = _Arrow._1;
      const _bind$2 = moonbitlang$core$array$$Array$iter$23$(_args$2);
      _tmp = `(${moonbitlang$core$builtin$$Iter$join((_p) => _bind$2((_p$2) => _p(moonbitlang$core$builtin$$Show$to_string$203$(_p$2))), ", ")}) -> ${moonbitlang$core$builtin$$Show$to_string$203$(_ret)}`;
    }
  }
  logger.method_0(logger.self, _tmp);
}
function moonbitlang$core$builtin$$ToJson$to_json$175$(_x_9) {
  const $36$map = moonbitlang$core$builtin$$Map$from_array$93$([]);
  moonbitlang$core$builtin$$Map$set$93$($36$map, "source", moonbitlang$core$builtin$$ToJson$to_json$11$(_x_9.source));
  moonbitlang$core$builtin$$Map$set$93$($36$map, "original_offset", moonbitlang$core$builtin$$ToJson$to_json$10$(_x_9.original_offset));
  moonbitlang$core$builtin$$Map$set$93$($36$map, "generated_offset", moonbitlang$core$builtin$$ToJson$to_json$10$(_x_9.generated_offset));
  moonbitlang$core$builtin$$Map$set$93$($36$map, "length", moonbitlang$core$builtin$$ToJson$to_json$10$(_x_9.length));
  return new $64$moonbitlang$47$core$47$builtin$46$Json$Object($36$map);
}
function moonbitlang$core$builtin$$ToJson$to_json$235$(_x_6) {
  const $36$map = moonbitlang$core$builtin$$Map$from_array$93$([]);
  moonbitlang$core$builtin$$Map$set$93$($36$map, "mappings", moonbitlang$core$builtin$$ToJson$to_json$193$(_x_6.mappings));
  return new $64$moonbitlang$47$core$47$builtin$46$Json$Object($36$map);
}
function moonbitlang$yacc$lib$codegen$$SourceMap$new() {
  return { mappings: [] };
}
function moonbitlang$yacc$lib$codegen$$SourceMapBuilder$add_mapping$235$(self, source, original_offset_in_utf8, generated_offset_in_utf8, length_in_utf8) {
  moonbitlang$core$array$$Array$push$175$(self.mappings, { source: source, original_offset: original_offset_in_utf8, generated_offset: generated_offset_in_utf8, length: length_in_utf8 });
}
function moonbitlang$yacc$lib$driver$util$$path_basename(path) {
  const arg = moonbitlang$core$string$$String$last_index_of$46$from$46$default(path);
  const lastSlashIndex = moonbitlang$core$string$$String$last_index_of(path, moonbitlang$yacc$lib$driver$util$$path_basename$46$arg$2$, arg);
  if (lastSlashIndex === -1) {
    const arg$2 = moonbitlang$core$string$$String$last_index_of$46$from$46$default(path);
    const lastBackslashIndex = moonbitlang$core$string$$String$last_index_of(path, moonbitlang$yacc$lib$driver$util$$path_basename$46$arg$3$, arg$2);
    return lastBackslashIndex === -1 ? path : moonbitlang$core$string$$String$substring(path, lastBackslashIndex + 1 | 0, undefined);
  } else {
    return moonbitlang$core$string$$String$substring(path, lastSlashIndex + 1 | 0, undefined);
  }
}
function moonbitlang$yacc$lib$driver$util$$exit$218$(code) {
  moonbitlang$yacc$lib$driver$util$$ffi_exit(code);
  return $panic();
}
function moonbitlang$yacc$lib$driver$util$$exit$9$(code) {
  moonbitlang$yacc$lib$driver$util$$ffi_exit(code);
  $panic();
}
function moonbitlang$yacc$lib$driver$util$$exit$37$(code) {
  moonbitlang$yacc$lib$driver$util$$ffi_exit(code);
  return $panic();
}
function moonbitlang$yacc$lib$desugar$$find_leaf_inline_rules(rules) {
  const all_inline_rules = moonbitlang$core$builtin$$Map$from_array$130$([]);
  const _len = rules.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const rule = rules[_i];
      if (rule.inline) {
        moonbitlang$core$builtin$$Map$op_set$130$(all_inline_rules, rule.name, rule);
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _bind = moonbitlang$core$builtin$$Map$iter$130$(all_inline_rules);
  return moonbitlang$core$builtin$$Map$from_iter$130$((_p) => _bind((_p$2) => {
    const _rule = _p$2._1;
    return moonbitlang$core$builtin$$Iter$all$41$(moonbitlang$core$array$$Array$iter$41$(_rule.clauses), (clause) => moonbitlang$core$builtin$$Iter$all$116$(moonbitlang$core$array$$Array$iter$116$(clause.items), (item) => {
      _L: {
        const _bind$2 = item.term;
        switch (_bind$2.$tag) {
          case 0: {
            return true;
          }
          case 2: {
            const _RuleCall = _bind$2;
            const _rule$2 = _RuleCall._0;
            const _x = _RuleCall._1;
            if (_x.length === 0) {
              return !moonbitlang$core$builtin$$Map$contains$130$(all_inline_rules, _rule$2.name);
            } else {
              break _L;
            }
          }
          default: {
            break _L;
          }
        }
      }
      return $panic();
    })) ? _p(_p$2) : 1;
  }));
}
function moonbitlang$yacc$lib$desugar$$eliminate_inline_rules$46$yield_$236$(new_clauses, new_clause) {
  moonbitlang$core$array$$Array$push$41$(new_clauses, new_clause);
}
function moonbitlang$yacc$lib$desugar$$eliminate_inline_rules(spec, inline_rules) {
  const rules = [];
  const _arr = spec.rules;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      _L: {
        const rule = _arr[_i];
        if (!moonbitlang$core$builtin$$Map$contains$130$(inline_rules, rule.name)) {
          const new_clauses = [];
          const _arr$2 = rule.clauses;
          const _len$2 = _arr$2.length;
          let _tmp$2 = 0;
          while (true) {
            const _i$2 = _tmp$2;
            if (_i$2 < _len$2) {
              const clause = _arr$2[_i$2];
              const items = clause.items;
              if (moonbitlang$core$builtin$$Iter$any$116$(moonbitlang$core$array$$Array$iter$116$(items), (item) => {
                _L$2: {
                  const _bind = item.term;
                  switch (_bind.$tag) {
                    case 0: {
                      return false;
                    }
                    case 2: {
                      const _RuleCall = _bind;
                      const _rule = _RuleCall._0;
                      const _x = _RuleCall._1;
                      if (_x.length === 0) {
                        return moonbitlang$core$builtin$$Map$contains$130$(inline_rules, _rule.name);
                      } else {
                        break _L$2;
                      }
                    }
                    default: {
                      break _L$2;
                    }
                  }
                }
                return $panic();
              })) {
                const expand_points = moonbitlang$core$builtin$$Map$from_array$129$([]);
                const _arr$3 = clause.items;
                const _len$3 = _arr$3.length;
                let _tmp$3 = 0;
                while (true) {
                  const _i$3 = _tmp$3;
                  if (_i$3 < _len$3) {
                    const item = _arr$3[_i$3];
                    _L$2: {
                      _L$3: {
                        const _bind = item.term;
                        switch (_bind.$tag) {
                          case 0: {
                            break;
                          }
                          case 2: {
                            const _RuleCall = _bind;
                            const _rule = _RuleCall._0;
                            const _x = _RuleCall._1;
                            if (_x.length === 0) {
                              if (moonbitlang$core$builtin$$Map$contains$130$(inline_rules, _rule.name)) {
                                moonbitlang$core$builtin$$Map$op_set$129$(expand_points, _i$3, { _0: { val: 0 }, _1: _rule.clauses.length - 1 | 0 });
                              }
                            } else {
                              break _L$3;
                            }
                            break;
                          }
                          default: {
                            break _L$3;
                          }
                        }
                        break _L$2;
                      }
                      $panic();
                    }
                    _tmp$3 = _i$3 + 1 | 0;
                    continue;
                  } else {
                    break;
                  }
                }
                const expand_point_indexes = moonbitlang$core$builtin$$Iter$to_array$10$(moonbitlang$core$builtin$$Map$keys$129$(expand_points));
                const expand_cursor = { val: expand_point_indexes.length - 1 | 0 };
                while (true) {
                  const expand_point_index = moonbitlang$core$array$$Array$op_get$10$(expand_point_indexes, expand_cursor.val);
                  const new_items = [];
                  const sub_actions = [];
                  const bindings = moonbitlang$core$array$$Array$copy$42$(clause.action.bindings);
                  const _arr$4 = clause.items;
                  const _len$4 = _arr$4.length;
                  let _tmp$4 = 0;
                  while (true) {
                    const _i$3 = _tmp$4;
                    if (_i$3 < _len$4) {
                      const item = _arr$4[_i$3];
                      _L$2: {
                        _L$3: {
                          const _bind = item.term;
                          switch (_bind.$tag) {
                            case 0: {
                              moonbitlang$core$array$$Array$push$116$(new_items, item);
                              break;
                            }
                            case 2: {
                              const _RuleCall = _bind;
                              const _rule = _RuleCall._0;
                              const _x = _RuleCall._1;
                              if (_x.length === 0) {
                                if (moonbitlang$core$builtin$$Map$contains$130$(inline_rules, _rule.name)) {
                                  const _bind$2 = moonbitlang$core$option$$Option$unwrap$152$(moonbitlang$core$builtin$$Map$op_get$129$(expand_points, _i$3));
                                  const _curr = _bind$2._0;
                                  const _max = _bind$2._1;
                                  const inline_items = moonbitlang$core$array$$Array$op_get$41$(_rule.clauses, _curr.val).items;
                                  const start_index = new_items.length;
                                  const _len$5 = inline_items.length;
                                  let _tmp$5 = 0;
                                  while (true) {
                                    const _i$4 = _tmp$5;
                                    if (_i$4 < _len$5) {
                                      const inline_item = inline_items[_i$4];
                                      moonbitlang$core$array$$Array$push$116$(new_items, inline_item);
                                      _tmp$5 = _i$4 + 1 | 0;
                                      continue;
                                    } else {
                                      break;
                                    }
                                  }
                                  const end_index = new_items.length;
                                  moonbitlang$core$array$$Array$push$168$(sub_actions, { start: start_index, end: end_index, action: moonbitlang$core$array$$Array$op_get$41$(_rule.clauses, _curr.val).action });
                                  const _len$6 = bindings.length;
                                  let _tmp$6 = 0;
                                  while (true) {
                                    const _i$4 = _tmp$6;
                                    if (_i$4 < _len$6) {
                                      const binding = bindings[_i$4];
                                      const _subject = binding._0;
                                      const _code = binding._1;
                                      if (_subject.$tag === 0) {
                                        const _Data = _subject;
                                        const _data_index = _Data._0;
                                        const _type_ = _Data._1;
                                        if (_data_index === _i$3) {
                                          moonbitlang$core$array$$Array$op_set$42$(bindings, _i$4, { _0: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$SubAction(start_index, _type_), _1: _code });
                                        } else {
                                          if (_data_index > _i$3) {
                                            moonbitlang$core$array$$Array$op_set$42$(bindings, _i$4, { _0: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$Data(((_data_index + end_index | 0) - start_index | 0) - 1 | 0, _type_), _1: _code });
                                          }
                                        }
                                      }
                                      _tmp$6 = _i$4 + 1 | 0;
                                      continue;
                                    } else {
                                      break;
                                    }
                                  }
                                  if (expand_point_index === _i$3) {
                                    if (_curr.val >= _max) {
                                      _curr.val = 0;
                                      _L$4: {
                                        break _L$4;
                                      }
                                      while (true) {
                                        expand_cursor.val = expand_cursor.val - 1 | 0;
                                        if (expand_cursor.val >= 0) {
                                          const _bind$3 = moonbitlang$core$option$$Option$unwrap$152$(moonbitlang$core$builtin$$Map$op_get$129$(expand_points, moonbitlang$core$array$$Array$op_get$10$(expand_point_indexes, expand_cursor.val)));
                                          const _curr$2 = _bind$3._0;
                                          const _max$2 = _bind$3._1;
                                          if (_curr$2.val >= _max$2) {
                                            continue;
                                          } else {
                                            break;
                                          }
                                        } else {
                                          break;
                                        }
                                      }
                                    } else {
                                      _curr.val = _curr.val + 1 | 0;
                                    }
                                  }
                                } else {
                                  moonbitlang$core$array$$Array$push$116$(new_items, item);
                                }
                              } else {
                                break _L$3;
                              }
                              break;
                            }
                            default: {
                              break _L$3;
                            }
                          }
                          break _L$2;
                        }
                        $panic();
                      }
                      _tmp$4 = _i$3 + 1 | 0;
                      continue;
                    } else {
                      break;
                    }
                  }
                  const _tmp$5 = clause.prec;
                  const _bind = clause.action;
                  moonbitlang$yacc$lib$desugar$$eliminate_inline_rules$46$yield_$236$(new_clauses, { items: new_items, prec: _tmp$5, action: { stamp: moonbitlang$yacc$lib$util$stamp$$new(), arity: _bind.arity, type_: _bind.type_, sub_actions: sub_actions, bindings: bindings, body: _bind.body } });
                  if (expand_cursor.val < 0) {
                    break;
                  }
                  continue;
                }
              } else {
                moonbitlang$core$array$$Array$push$41$(new_clauses, clause);
              }
              _tmp$2 = _i$2 + 1 | 0;
              continue;
            } else {
              break;
            }
          }
          const new_rule = { name: rule.name, inline: rule.inline, generic_params: rule.generic_params, params: rule.params, type_: rule.type_, clauses: new_clauses };
          moonbitlang$core$array$$Array$push$156$(rules, new_rule);
        } else {
          break _L;
        }
        break _L;
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _bind = moonbitlang$core$array$$Array$iter$156$(rules);
  const rule_by_name = moonbitlang$core$builtin$$Map$from_iter$130$((_p) => _bind((_p$2) => _p({ _0: _p$2.name, _1: _p$2 })));
  const _len$2 = rules.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len$2) {
      const rule = rules[_i];
      const _arr$2 = rule.clauses;
      const _len$3 = _arr$2.length;
      let _tmp$3 = 0;
      while (true) {
        const _i$2 = _tmp$3;
        if (_i$2 < _len$3) {
          const clause = _arr$2[_i$2];
          const _arr$3 = clause.items;
          const _len$4 = _arr$3.length;
          let _tmp$4 = 0;
          while (true) {
            const _i$3 = _tmp$4;
            if (_i$3 < _len$4) {
              const item = _arr$3[_i$3];
              _L: {
                _L$2: {
                  const _bind$2 = item.term;
                  switch (_bind$2.$tag) {
                    case 0: {
                      break;
                    }
                    case 2: {
                      const _RuleCall = _bind$2;
                      const _rule = _RuleCall._0;
                      const _x = _RuleCall._1;
                      if (_x.length === 0) {
                        moonbitlang$core$array$$Array$op_set$116$(clause.items, _i$3, { binder: item.binder, term: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall(moonbitlang$core$option$$Option$unwrap$156$(moonbitlang$core$builtin$$Map$op_get$130$(rule_by_name, _rule.name)), []) });
                      } else {
                        break _L$2;
                      }
                      break;
                    }
                    default: {
                      break _L$2;
                    }
                  }
                  break _L;
                }
                $panic();
              }
              _tmp$4 = _i$3 + 1 | 0;
              continue;
            } else {
              break;
            }
          }
          _tmp$3 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return { ...spec, rules: rules };
}
function moonbitlang$yacc$lib$desugar$$eliminate_inline(spec) {
  let spec$2 = spec;
  while (true) {
    const inline_rules = moonbitlang$yacc$lib$desugar$$find_leaf_inline_rules(spec$2.rules);
    if (moonbitlang$core$builtin$$Map$is_empty$130$(inline_rules)) {
      break;
    } else {
      spec$2 = moonbitlang$yacc$lib$desugar$$eliminate_inline_rules(spec$2, inline_rules);
    }
    continue;
  }
  return spec$2;
}
function moonbitlang$yacc$lib$desugar$$derive_term_ident(term) {
  switch (term.$tag) {
    case 0: {
      const _Token = term;
      const _token = _Token._0;
      return _token.name;
    }
    case 1: {
      return $panic();
    }
    default: {
      const _RuleCall = term;
      const _rule = _RuleCall._0;
      const _x = _RuleCall._1;
      if (_x.length === 0) {
        return _rule.name;
      } else {
        const _tmp = _rule.name;
        const _bind = moonbitlang$core$array$$Array$iter$112$(_x);
        return `${_tmp}__${moonbitlang$core$builtin$$Iter$join((_p) => _bind((_p$2) => _p(moonbitlang$yacc$lib$desugar$$derive_term_ident(_p$2))), "_")}`;
      }
    }
  }
}
function moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$process_rule$237$(specialized_rules, rule, args) {
  const name = moonbitlang$yacc$lib$desugar$$derive_term_ident(new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall(rule, args));
  const defer = [];
  const specialized_rule = moonbitlang$core$builtin$$Map$get_or_init$130$(specialized_rules, name, () => moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$specialize_rule$227$(specialized_rules, name, rule, args, defer));
  const _len = defer.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const f = defer[_i];
      f();
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return specialized_rule;
}
function moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$unify$238$(_env, t1, t2) {
  const generic_param_map = _env._1;
  const rule = _env._0;
  let _tmp = t1;
  let _tmp$2 = t2;
  _L: while (true) {
    const t1$2 = _tmp;
    const t2$2 = _tmp$2;
    _L$2: {
      let args1;
      let pkg1;
      let name1;
      let name2;
      let pkg2;
      let args2;
      _L$3: {
        switch (t1$2.$tag) {
          case 0: {
            const _Constr = t1$2;
            const _x = _Constr._0;
            if (_x === undefined) {
              const _name = _Constr._1;
              const _x$2 = _Constr._2;
              if (_x$2.length === 0) {
                if (moonbitlang$core$array$$Array$contains$11$(rule.generic_params, _name)) {
                  moonbitlang$core$builtin$$Map$op_set$132$(generic_param_map, _name, t2$2);
                  return;
                } else {
                  if (t2$2.$tag === 0) {
                    const _Constr$2 = t2$2;
                    const _pkg2 = _Constr$2._0;
                    const _name2 = _Constr$2._1;
                    const _args2 = _Constr$2._2;
                    args1 = _x$2;
                    pkg1 = _x;
                    name1 = _name;
                    name2 = _name2;
                    pkg2 = _pkg2;
                    args2 = _args2;
                    break _L$3;
                  } else {
                    break _L$2;
                  }
                }
              } else {
                if (t2$2.$tag === 0) {
                  const _Constr$2 = t2$2;
                  const _pkg2 = _Constr$2._0;
                  const _name2 = _Constr$2._1;
                  const _args2 = _Constr$2._2;
                  args1 = _x$2;
                  pkg1 = _x;
                  name1 = _name;
                  name2 = _name2;
                  pkg2 = _pkg2;
                  args2 = _args2;
                  break _L$3;
                } else {
                  break _L$2;
                }
              }
            } else {
              const _name1 = _Constr._1;
              const _args1 = _Constr._2;
              if (t2$2.$tag === 0) {
                const _Constr$2 = t2$2;
                const _pkg2 = _Constr$2._0;
                const _name2 = _Constr$2._1;
                const _args2 = _Constr$2._2;
                args1 = _args1;
                pkg1 = _x;
                name1 = _name1;
                name2 = _name2;
                pkg2 = _pkg2;
                args2 = _args2;
                break _L$3;
              } else {
                break _L$2;
              }
            }
          }
          case 1: {
            const _Option = t1$2;
            const _t1 = _Option._0;
            if (t2$2.$tag === 1) {
              const _Option$2 = t2$2;
              const _t2 = _Option$2._0;
              _tmp = _t1;
              _tmp$2 = _t2;
              continue _L;
            } else {
              break _L$2;
            }
          }
          case 2: {
            const _Tuple = t1$2;
            const _types1 = _Tuple._0;
            if (t2$2.$tag === 2) {
              const _Tuple$2 = t2$2;
              const _types2 = _Tuple$2._0;
              if (_types1.length === _types2.length) {
                const _len = _types1.length;
                let _tmp$3 = 0;
                while (true) {
                  const _i = _tmp$3;
                  if (_i < _len) {
                    const type1 = _types1[_i];
                    moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$unify$238$(_env, type1, moonbitlang$core$array$$Array$op_get$23$(_types2, _i));
                    _tmp$3 = _i + 1 | 0;
                    continue;
                  } else {
                    return;
                  }
                }
              } else {
                $panic();
                return;
              }
            } else {
              break _L$2;
            }
          }
          default: {
            const _Arrow = t1$2;
            const _params1 = _Arrow._0;
            const _ret1 = _Arrow._1;
            if (t2$2.$tag === 3) {
              const _Arrow$2 = t2$2;
              const _params2 = _Arrow$2._0;
              const _ret2 = _Arrow$2._1;
              if (_params1.length === _params2.length) {
                const _len = _params1.length;
                let _tmp$3 = 0;
                while (true) {
                  const _i = _tmp$3;
                  if (_i < _len) {
                    const param1 = _params1[_i];
                    moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$unify$238$(_env, param1, moonbitlang$core$array$$Array$op_get$23$(_params2, _i));
                    _tmp$3 = _i + 1 | 0;
                    continue;
                  } else {
                    break;
                  }
                }
                _tmp = _ret1;
                _tmp$2 = _ret2;
                continue _L;
              } else {
                $panic();
                return;
              }
            } else {
              break _L$2;
            }
          }
        }
      }
      if (moonbitlang$core$builtin$$Eq$op_equal$65$(pkg1, pkg2) && (name1 === name2 && args1.length === args2.length)) {
        const _len = args1.length;
        let _tmp$3 = 0;
        while (true) {
          const _i = _tmp$3;
          if (_i < _len) {
            const arg1 = args1[_i];
            moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$unify$238$(_env, arg1, moonbitlang$core$array$$Array$op_get$23$(args2, _i));
            _tmp$3 = _i + 1 | 0;
            continue;
          } else {
            return;
          }
        }
      } else {
        $panic();
        return;
      }
    }
    $panic();
    return;
  }
}
function moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$specialize_rule$227$(specialized_rules, name, rule, args, defer) {
  const param_map = moonbitlang$core$builtin$$Map$from_array$127$([]);
  const process_term = (term) => {
    switch (term.$tag) {
      case 0: {
        return term;
      }
      case 1: {
        const _Param = term;
        const _name = _Param._0;
        return moonbitlang$core$option$$Option$unwrap$112$(moonbitlang$core$builtin$$Map$get$127$(param_map, _name));
      }
      default: {
        const _RuleCall = term;
        const _rule = _RuleCall._0;
        const _args = _RuleCall._1;
        return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall(moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$process_rule$237$(specialized_rules, _rule, _args), []);
      }
    }
  };
  const _arr = rule.params;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const param = _arr[_i];
      moonbitlang$core$builtin$$Map$op_set$127$(param_map, param._0, process_term(moonbitlang$core$array$$Array$op_get$112$(args, _i)));
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const generic_param_map = moonbitlang$core$builtin$$Map$from_array$132$([]);
  const _env = { _0: rule, _1: generic_param_map };
  const _arr$2 = rule.params;
  const _len$2 = _arr$2.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len$2) {
      const param = _arr$2[_i];
      const arg = moonbitlang$core$option$$Option$unwrap$112$(moonbitlang$core$builtin$$Map$op_get$127$(param_map, param._0));
      const _tmp$3 = param._1;
      let _tmp$4;
      switch (arg.$tag) {
        case 0: {
          const _Token = arg;
          const _token = _Token._0;
          _tmp$4 = _token.type_;
          break;
        }
        case 1: {
          const _Param = arg;
          const _type_ = _Param._1;
          _tmp$4 = _type_;
          break;
        }
        default: {
          const _RuleCall = arg;
          const _rule = _RuleCall._0;
          _tmp$4 = _rule.type_;
        }
      }
      moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$unify$238$(_env, _tmp$3, _tmp$4);
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const process_type = (type_) => {
    let name$2;
    let pkg;
    let args$2;
    _L: {
      switch (type_.$tag) {
        case 0: {
          const _Constr = type_;
          const _x = _Constr._0;
          if (_x === undefined) {
            const _name = _Constr._1;
            const _x$2 = _Constr._2;
            if (_x$2.length === 0) {
              if (moonbitlang$core$builtin$$Map$contains$132$(generic_param_map, _name)) {
                return moonbitlang$core$option$$Option$unwrap$23$(moonbitlang$core$builtin$$Map$op_get$132$(generic_param_map, _name));
              } else {
                name$2 = _name;
                pkg = _x;
                args$2 = _x$2;
                break _L;
              }
            } else {
              name$2 = _name;
              pkg = _x;
              args$2 = _x$2;
              break _L;
            }
          } else {
            const _name = _Constr._1;
            const _args = _Constr._2;
            name$2 = _name;
            pkg = _x;
            args$2 = _args;
            break _L;
          }
        }
        case 1: {
          const _Option = type_;
          const _type_ = _Option._0;
          return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Option(process_type(_type_));
        }
        case 2: {
          const _Tuple = type_;
          const _types = _Tuple._0;
          return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Tuple(moonbitlang$core$array$$Array$map$179$(_types, process_type));
        }
        default: {
          const _Arrow = type_;
          const _params = _Arrow._0;
          const _ret = _Arrow._1;
          return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Arrow(moonbitlang$core$array$$Array$map$179$(_params, process_type), process_type(_ret));
        }
      }
    }
    return new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(pkg, name$2, moonbitlang$core$array$$Array$map$179$(args$2, process_type));
  };
  const type_ = process_type(rule.type_);
  const clauses = moonbitlang$core$array$$Array$copy$41$(rule.clauses);
  moonbitlang$core$array$$Array$push$165$(defer, () => {
    const _len$3 = clauses.length;
    let _tmp$3 = 0;
    while (true) {
      const _i = _tmp$3;
      if (_i < _len$3) {
        const clause = clauses[_i];
        const items = moonbitlang$core$array$$Array$map$178$(clause.items, (item) => {
          const _bind = item.term;
          switch (_bind.$tag) {
            case 0: {
              return item;
            }
            case 1: {
              const _Param = _bind;
              const _name = _Param._0;
              const term = moonbitlang$core$option$$Option$unwrap$112$(moonbitlang$core$builtin$$Map$get$127$(param_map, _name));
              return { binder: item.binder, term: term };
            }
            default: {
              const _RuleCall = _bind;
              const _rule = _RuleCall._0;
              const _args = _RuleCall._1;
              const args$2 = moonbitlang$core$array$$Array$map$177$(_args, process_term);
              const rule$2 = moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$process_rule$237$(specialized_rules, _rule, args$2);
              return { binder: item.binder, term: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$Term$RuleCall(rule$2, []) };
            }
          }
        });
        const _tmp$4 = clause.prec;
        const _bind = clause.action;
        const new_clause = { items: items, prec: _tmp$4, action: { stamp: _bind.stamp, arity: _bind.arity, type_: type_, sub_actions: _bind.sub_actions, bindings: moonbitlang$core$array$$Array$map$176$(clause.action.bindings, (binding) => {
          const _subject = binding._0;
          const _code = binding._1;
          let new_subject;
          if (_subject.$tag === 0) {
            const _Data = _subject;
            const _index = _Data._0;
            const item = moonbitlang$core$array$$Array$op_get$116$(items, _index);
            new_subject = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$BindingSubject$Data(_index, moonbitlang$yacc$lib$elab$$Item$type_(item));
          } else {
            new_subject = _subject;
          }
          return { _0: new_subject, _1: _code };
        }), body: _bind.body } };
        moonbitlang$core$array$$Array$op_set$41$(clauses, _i, new_clause);
        _tmp$3 = _i + 1 | 0;
        continue;
      } else {
        return;
      }
    }
  });
  return { name: name, inline: rule.inline, generic_params: [], params: [], type_: type_, clauses: clauses };
}
function moonbitlang$yacc$lib$desugar$$eliminate_rule_args(spec) {
  const specialized_rules = moonbitlang$core$builtin$$Map$from_array$130$([]);
  const _arr = spec.rules;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      _L: {
        const rule = _arr[_i];
        if (moonbitlang$core$array$$Array$is_empty$144$(rule.params)) {
          moonbitlang$yacc$lib$desugar$$eliminate_rule_args$46$process_rule$237$(specialized_rules, rule, []);
        } else {
          break _L;
        }
        break _L;
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const new_rules = moonbitlang$core$builtin$$Iter$to_array$156$(moonbitlang$core$builtin$$Map$values$130$(specialized_rules));
  return { ...spec, rules: new_rules };
}
function moonbitlang$yacc$lib$driver$$offset_to_line_column(content, offset) {
  let line = 1;
  let column = 1;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < offset) {
      $bound_check(content, i);
      if (content.charCodeAt(i) === 10) {
        line = line + 1 | 0;
        column = 1;
      } else {
        column = column + 1 | 0;
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return { _0: line, _1: column };
}
function moonbitlang$yacc$lib$driver$$array_to_or_list(arr) {
  if (arr.len === 0) {
    return $panic();
  } else {
    if (arr.len === 1) {
      const _x = arr.buf[arr.start + 0 | 0];
      return _x;
    } else {
      const _x = arr.buf[arr.start + ((arr.len - 1 | 0) - 0 | 0) | 0];
      const _tmp = arr.buf;
      const _tmp$2 = 0 + arr.start | 0;
      const _some = arr.len - 1 | 0;
      const _x$2 = { buf: _tmp, start: _tmp$2, len: _some - 0 | 0 };
      const self = [];
      moonbitlang$core$array$$Array$push_iter$11$(self, moonbitlang$core$array$$ArrayView$iter$11$(_x$2));
      const left = moonbitlang$core$string$$String$concat(self, ", ");
      return `${moonbitlang$core$builtin$$Show$to_string$11$(left)} or ${moonbitlang$core$builtin$$Show$to_string$11$(_x)}`;
    }
  }
}
function moonbitlang$yacc$lib$driver$$loc_to_string(filename, content, loc) {
  const _bind = moonbitlang$yacc$lib$driver$$offset_to_line_column(content, loc._0);
  const _start_line = _bind._0;
  const _start_column = _bind._1;
  const _bind$2 = moonbitlang$yacc$lib$driver$$offset_to_line_column(content, loc._1);
  const _end_line = _bind$2._0;
  const _end_column = _bind$2._1;
  return _start_line === _end_line ? `${moonbitlang$core$builtin$$Show$to_string$11$(filename)}:${moonbitlang$core$builtin$$Show$to_string$10$(_start_line)}:${moonbitlang$core$builtin$$Show$to_string$10$(_start_column)}-${moonbitlang$core$builtin$$Show$to_string$10$(_end_column)}` : `${moonbitlang$core$builtin$$Show$to_string$11$(filename)}:${moonbitlang$core$builtin$$Show$to_string$10$(_start_line)}:${moonbitlang$core$builtin$$Show$to_string$10$(_start_column)}-${moonbitlang$core$builtin$$Show$to_string$10$(_end_line)}:${moonbitlang$core$builtin$$Show$to_string$10$(_end_column)}`;
}
function moonbitlang$yacc$lib$driver$$compile$46$get_terminal_by_name$239$(terminal_by_name, name) {
  return moonbitlang$core$option$$Option$unwrap$95$(moonbitlang$core$builtin$$Map$get$133$(terminal_by_name, name));
}
function moonbitlang$yacc$lib$driver$$compile$46$get_nonterminal_by_name$240$(nonterminal_by_name, name) {
  return moonbitlang$core$option$$Option$unwrap$96$(moonbitlang$core$builtin$$Map$get$134$(nonterminal_by_name, name));
}
function moonbitlang$yacc$lib$driver$$compile(parser_spec_str, mode, input_mode, filename, external_tokens, no_comments, source_map_builder, generator) {
  const lexer = moonbitlang$yacc$lib$parser$$new_lexer(parser_spec_str);
  const token = () => moonbitlang$core$result$$Result$unwrap$19$(moonbitlang$yacc$lib$parser$$Lexer$next_token(lexer));
  let spec;
  let _try_err;
  _L: {
    _L$2: {
      const _bind = moonbitlang$yacc$lib$parser$$spec(token, 0);
      if (_bind.$tag === 1) {
        const _ok = _bind;
        spec = _ok._0;
      } else {
        const _err = _bind;
        const _tmp = _err._0;
        _try_err = _tmp;
        break _L$2;
      }
      break _L;
    }
    const _UnexpectedToken = _try_err;
    const _token = _UnexpectedToken._0;
    const _loc = _UnexpectedToken._1;
    const _expected = _UnexpectedToken._2;
    const loc_str = moonbitlang$yacc$lib$driver$$loc_to_string(filename, parser_spec_str, _loc);
    const _bind = moonbitlang$core$array$$Array$map$192$(_expected, moonbitlang$core$builtin$$Show$to_string$204$);
    const expected_str = moonbitlang$yacc$lib$driver$$array_to_or_list({ buf: _bind, start: 0, len: _bind.length });
    moonbitlang$yacc$lib$driver$util$$println_to_stderr(`SyntaxError: Unexpected token ${moonbitlang$core$builtin$$Show$to_string$204$(moonbitlang$yacc$lib$parser$$Token$kind(_token))}, expected ${moonbitlang$core$builtin$$Show$to_string$11$(expected_str)}.\n  at ${moonbitlang$core$builtin$$Show$to_string$11$(loc_str)}`);
    spec = moonbitlang$yacc$lib$driver$util$$exit$218$(1);
  }
  let _tmp;
  _L$2: {
    _L$3: {
      switch (mode.$tag) {
        case 1: {
          const _JsonCst = mode;
          const _x = _JsonCst._0;
          if (_x === undefined) {
            _tmp = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$JsonCst$Yes(undefined);
          } else {
            const _Some = _x;
            const _x$2 = _Some;
            if (_x$2 === 0) {
              _tmp = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$JsonCst$Yes(0);
            } else {
              _tmp = new $64$moonbitlang$47$yacc$47$lib$47$elab$46$JsonCst$Yes(1);
            }
          }
          break;
        }
        case 0: {
          break _L$3;
        }
        default: {
          break _L$3;
        }
      }
      break _L$2;
    }
    _tmp = $64$moonbitlang$47$yacc$47$lib$47$elab$46$JsonCst$No;
  }
  const spec$2 = moonbitlang$yacc$lib$elab$$elaborate(spec, _tmp);
  const spec$3 = moonbitlang$yacc$lib$desugar$$eliminate_rule_args(spec$2);
  const spec$4 = moonbitlang$yacc$lib$desugar$$eliminate_inline(spec$3);
  const terminals = [];
  const nonterminals = [];
  const terminal_by_name = moonbitlang$core$builtin$$Map$from_array$133$([]);
  const nonterminal_by_name = moonbitlang$core$builtin$$Map$from_array$134$([]);
  const _arr = spec$4.tokens;
  const _len = _arr.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len) {
      const token$2 = _arr[_i];
      const _tmp$3 = terminals.length;
      const _tmp$4 = token$2.name;
      const _bind = token$2.prec;
      let _tmp$5;
      if (_bind === undefined) {
        _tmp$5 = undefined;
      } else {
        const _Some = _bind;
        const _x = _Some;
        const _prec = _x._0;
        const _x$2 = _x._1;
        switch (_x$2) {
          case 2: {
            _tmp$5 = { _0: _prec, _1: 2 };
            break;
          }
          case 0: {
            _tmp$5 = { _0: _prec, _1: 0 };
            break;
          }
          default: {
            _tmp$5 = { _0: _prec, _1: 1 };
          }
        }
      }
      const terminal = { num: _tmp$3, name: _tmp$4, prec: _tmp$5 };
      moonbitlang$core$builtin$$Map$op_set$133$(terminal_by_name, token$2.name, terminal);
      moonbitlang$core$array$$Array$push$95$(terminals, terminal);
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _arr$2 = spec$4.rules;
  const _len$2 = _arr$2.length;
  let _tmp$3 = 0;
  while (true) {
    const _i = _tmp$3;
    if (_i < _len$2) {
      const rule = _arr$2[_i];
      const nonterminal = { num: nonterminals.length, name: rule.name, productions: [] };
      moonbitlang$core$builtin$$Map$op_set$134$(nonterminal_by_name, rule.name, nonterminal);
      moonbitlang$core$array$$Array$push$96$(nonterminals, nonterminal);
      _tmp$3 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const production_meta_map = moonbitlang$core$builtin$$Map$from_array$135$([]);
  const terminal_meta_map = moonbitlang$core$builtin$$Map$from_array$136$([]);
  const nonterminal_meta_map = moonbitlang$core$builtin$$Map$from_array$137$([]);
  const productions = [];
  const starts = moonbitlang$core$array$$Array$map$191$(spec$4.start_rules, (rule) => rule.name);
  const position_data_type = spec$4.position_type;
  const derive_map = spec$4.derive_map;
  const _arr$3 = spec$4.tokens;
  const _len$3 = _arr$3.length;
  let _tmp$4 = 0;
  while (true) {
    const _i = _tmp$4;
    if (_i < _len$3) {
      const token$2 = _arr$3[_i];
      const terminal = moonbitlang$yacc$lib$driver$$compile$46$get_terminal_by_name$239$(terminal_by_name, token$2.name);
      moonbitlang$core$builtin$$Map$op_set$136$(terminal_meta_map, terminal.num, { data_type: token$2.type_, image: token$2.image });
      _tmp$4 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (mode.$tag === 2) {
    const output = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default());
    generator.method_2(generator.self, terminals, (name) => moonbitlang$core$builtin$$Map$get_or_init$136$(terminal_meta_map, moonbitlang$yacc$lib$driver$$compile$46$get_terminal_by_name$239$(terminal_by_name, name).num, () => ({ data_type: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", []), image: undefined })), { self: output, method_0: moonbitlang$core$builtin$$Logger$write_string$18$, method_1: moonbitlang$core$builtin$$Logger$write_substring$18$, method_2: moonbitlang$core$builtin$$Logger$write_sub_string$111$, method_3: moonbitlang$core$builtin$$Logger$write_char$18$ }, no_comments, spec$4.derive_map);
    return moonbitlang$core$builtin$$StringBuilder$to_string(output);
  }
  const _arr$4 = spec$4.rules;
  const _len$4 = _arr$4.length;
  let _tmp$5 = 0;
  while (true) {
    const _i = _tmp$5;
    if (_i < _len$4) {
      const rule = _arr$4[_i];
      const lhs = moonbitlang$yacc$lib$driver$$compile$46$get_nonterminal_by_name$240$(nonterminal_by_name, rule.name);
      moonbitlang$core$builtin$$Map$op_set$137$(nonterminal_meta_map, lhs.num, { data_type: rule.type_ });
      const _arr$5 = rule.clauses;
      const _len$5 = _arr$5.length;
      let _tmp$6 = 0;
      while (true) {
        const _i$2 = _tmp$6;
        if (_i$2 < _len$5) {
          const clause = _arr$5[_i$2];
          const production_num = productions.length;
          const production = { num: production_num, lhs: lhs, rhs: moonbitlang$core$array$$Array$map$190$(clause.items, (item) => {
            _L$3: {
              const _bind = item.term;
              switch (_bind.$tag) {
                case 0: {
                  const _Token = _bind;
                  const _token = _Token._0;
                  return new $64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$T(moonbitlang$yacc$lib$driver$$compile$46$get_terminal_by_name$239$(terminal_by_name, _token.name));
                }
                case 2: {
                  const _RuleCall = _bind;
                  const _rule = _RuleCall._0;
                  const _x = _RuleCall._1;
                  if (_x.length === 0) {
                    return new $64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$NT(moonbitlang$yacc$lib$driver$$compile$46$get_nonterminal_by_name$240$(nonterminal_by_name, _rule.name));
                  } else {
                    break _L$3;
                  }
                }
                default: {
                  break _L$3;
                }
              }
            }
            return $panic();
          }), prec: clause.prec };
          moonbitlang$core$array$$Array$push$40$(productions, production);
          moonbitlang$core$array$$Array$push$40$(lhs.productions, production);
          moonbitlang$core$builtin$$Map$op_set$135$(production_meta_map, production_num, { action: clause.action });
          _tmp$6 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp$5 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const starts$2 = moonbitlang$core$array$$Array$map$189$(starts, (name) => {
    const start_nt = moonbitlang$yacc$lib$driver$$compile$46$get_nonterminal_by_name$240$(nonterminal_by_name, name);
    const augmented_start_nt = { num: nonterminals.length, name: `${moonbitlang$core$builtin$$Show$to_string$11$(name)}_prime`, productions: [] };
    moonbitlang$core$builtin$$Map$op_set$134$(nonterminal_by_name, augmented_start_nt.name, augmented_start_nt);
    moonbitlang$core$array$$Array$push$96$(nonterminals, augmented_start_nt);
    moonbitlang$core$builtin$$Map$op_set$137$(nonterminal_meta_map, augmented_start_nt.num, moonbitlang$core$option$$Option$unwrap$159$(moonbitlang$core$builtin$$Map$op_get$137$(nonterminal_meta_map, start_nt.num)));
    const production = { num: productions.length, lhs: augmented_start_nt, rhs: [new $64$moonbitlang$47$yacc$47$lib$47$grm$46$Symbol$NT(start_nt)], prec: undefined };
    moonbitlang$core$array$$Array$push$40$(productions, production);
    moonbitlang$core$array$$Array$push$40$(augmented_start_nt.productions, production);
    return production;
  });
  const grammar = { starts: starts$2, terminals: terminals, nonterminals: nonterminals, productions: productions };
  let _tmp$6;
  if (input_mode === 1) {
    _tmp$6 = true;
  } else {
    _tmp$6 = false;
  }
  const automaton = moonbitlang$yacc$lib$lr1$$Automaton$build(grammar, _tmp$6);
  const errors = moonbitlang$yacc$lib$lr1$$resolve_conflicts(automaton.conflicts);
  const _len$5 = errors.length;
  let _tmp$7 = 0;
  while (true) {
    const _i = _tmp$7;
    if (_i < _len$5) {
      const error = errors[_i];
      switch (error.$tag) {
        case 0: {
          moonbitlang$yacc$lib$driver$util$$println_to_stderr("Reduce conflict resolved by presentation order");
          break;
        }
        case 1: {
          moonbitlang$yacc$lib$driver$util$$println_to_stderr("Shift-reduce conflict resolved without precedence");
          break;
        }
        default: {
          moonbitlang$yacc$lib$driver$util$$println_to_stderr("Shift-reduce conflict not resolved because of non-associativity");
        }
      }
      _tmp$7 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const meta = { header: moonbitlang$core$option$$Option$or_default$11$(spec$4.header), footer: moonbitlang$core$option$$Option$or_default$11$(spec$4.trailer), position_data_type: position_data_type, terminal_meta: (name) => moonbitlang$core$builtin$$Map$get_or_init$136$(terminal_meta_map, moonbitlang$yacc$lib$driver$$compile$46$get_terminal_by_name$239$(terminal_by_name, name).num, () => ({ data_type: new $64$moonbitlang$47$yacc$47$lib$47$elab$46$TypeExpr$Constr(undefined, "Unit", []), image: undefined })), nonterminal_meta: (name) => moonbitlang$core$option$$Option$unwrap$159$(moonbitlang$core$builtin$$Map$op_get$137$(nonterminal_meta_map, moonbitlang$yacc$lib$driver$$compile$46$get_nonterminal_by_name$240$(nonterminal_by_name, name).num)), production_meta: (num) => moonbitlang$core$option$$Option$unwrap$158$(moonbitlang$core$builtin$$Map$op_get$135$(production_meta_map, num)), derive_map: derive_map };
  const output_buffer = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$builtin$$StringBuilder$new$46$size_hint$46$default());
  const output = moonbitlang$yacc$lib$util$logger_with_cursor$$new({ self: output_buffer, method_0: moonbitlang$core$builtin$$Logger$write_string$18$, method_1: moonbitlang$core$builtin$$Logger$write_substring$18$, method_2: moonbitlang$core$builtin$$Logger$write_sub_string$111$, method_3: moonbitlang$core$builtin$$Logger$write_char$18$ }, moonbitlang$yacc$lib$util$logger_with_cursor$$new$46$cursor$46$default());
  const _tmp$8 = moonbitlang$yacc$lib$driver$util$$path_basename(filename);
  let _tmp$9;
  switch (mode.$tag) {
    case 2: {
      _tmp$9 = $panic();
      break;
    }
    case 0: {
      _tmp$9 = $64$moonbitlang$47$yacc$47$lib$47$codegen$46$Mode$Default;
      break;
    }
    default: {
      const _JsonCst = mode;
      const _x = _JsonCst._0;
      if (_x === undefined) {
        _tmp$9 = new $64$moonbitlang$47$yacc$47$lib$47$codegen$46$Mode$JsonCst(undefined);
      } else {
        const _Some = _x;
        const _x$2 = _Some;
        if (_x$2 === 0) {
          _tmp$9 = new $64$moonbitlang$47$yacc$47$lib$47$codegen$46$Mode$JsonCst(0);
        } else {
          _tmp$9 = new $64$moonbitlang$47$yacc$47$lib$47$codegen$46$Mode$JsonCst(1);
        }
      }
    }
  }
  const _tmp$10 = _tmp$9;
  let _tmp$11;
  if (input_mode === 0) {
    _tmp$11 = 0;
  } else {
    _tmp$11 = 1;
  }
  generator.method_3(generator.self, grammar, automaton, meta, output, source_map_builder, _tmp$8, external_tokens, no_comments, _tmp$10, _tmp$11);
  return moonbitlang$core$builtin$$StringBuilder$to_string(output_buffer);
}
function moonbitlang$yacc$lib$util$default_hashmap$$new$84$(default_fn) {
  return { map: moonbitlang$core$hashmap$$new$84$(moonbitlang$core$hashmap$$new$46$capacity$46$default$84$()), default_fn: default_fn };
}
function moonbitlang$yacc$lib$util$default_hashmap$$DefaultHashMap$get$84$(self, key) {
  return moonbitlang$core$hashmap$$T$get_or_init$84$(self.map, key, () => {
    const _func = self.default_fn;
    return _func(key);
  });
}
function moonbitlang$core$builtin$$Eq$op_equal$71$(_x_313, _x_314) {
  switch (_x_313.$tag) {
    case 0: {
      if (_x_314.$tag === 0) {
        return true;
      } else {
        return false;
      }
    }
    case 1: {
      const _Shift = _x_313;
      const _$42$x0_315 = _Shift._0;
      if (_x_314.$tag === 1) {
        const _Shift$2 = _x_314;
        const _$42$y0_316 = _Shift$2._0;
        return _$42$x0_315 === _$42$y0_316;
      } else {
        return false;
      }
    }
    case 2: {
      const _Reduce = _x_313;
      const _$42$x0_317 = _Reduce._0;
      const _$42$x1_318 = _Reduce._1;
      const _$42$x2_319 = _Reduce._2;
      if (_x_314.$tag === 2) {
        const _Reduce$2 = _x_314;
        const _$42$y0_320 = _Reduce$2._0;
        const _$42$y1_321 = _Reduce$2._1;
        const _$42$y2_322 = _Reduce$2._2;
        return _$42$x0_317 === _$42$y0_320 && (_$42$x1_318 === _$42$y1_321 && _$42$x2_319 === _$42$y2_322);
      } else {
        return false;
      }
    }
    default: {
      const _ReduceNoLookahead = _x_313;
      const _$42$x0_323 = _ReduceNoLookahead._0;
      const _$42$x1_324 = _ReduceNoLookahead._1;
      const _$42$x2_325 = _ReduceNoLookahead._2;
      if (_x_314.$tag === 3) {
        const _ReduceNoLookahead$2 = _x_314;
        const _$42$y0_326 = _ReduceNoLookahead$2._0;
        const _$42$y1_327 = _ReduceNoLookahead$2._1;
        const _$42$y2_328 = _ReduceNoLookahead$2._2;
        return _$42$x0_323 === _$42$y0_326 && (_$42$x1_324 === _$42$y1_327 && _$42$x2_325 === _$42$y2_328);
      } else {
        return false;
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$71$(_x_273, _x_274) {
  switch (_x_273.$tag) {
    case 0: {
      if (_x_274.$tag === 0) {
        return 0;
      } else {
        return -1;
      }
    }
    case 1: {
      const _Shift = _x_273;
      const _$42$x0_275 = _Shift._0;
      switch (_x_274.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          const _Shift$2 = _x_274;
          const _$42$y0_276 = _Shift$2._0;
          return $compare_int(_$42$x0_275, _$42$y0_276);
        }
        default: {
          return -1;
        }
      }
    }
    case 2: {
      const _Reduce = _x_273;
      const _$42$x0_277 = _Reduce._0;
      const _$42$x1_278 = _Reduce._1;
      const _$42$x2_279 = _Reduce._2;
      switch (_x_274.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          const _Reduce$2 = _x_274;
          const _$42$y0_280 = _Reduce$2._0;
          const _$42$y1_281 = _Reduce$2._1;
          const _$42$y2_282 = _Reduce$2._2;
          const _bind = $compare_int(_$42$x0_277, _$42$y0_280);
          if (_bind === 0) {
            const _bind$2 = moonbitlang$core$builtin$$Compare$compare$11$(_$42$x1_278, _$42$y1_281);
            if (_bind$2 === 0) {
              return $compare_int(_$42$x2_279, _$42$y2_282);
            } else {
              return _bind$2;
            }
          } else {
            return _bind;
          }
        }
        default: {
          return -1;
        }
      }
    }
    default: {
      const _ReduceNoLookahead = _x_273;
      const _$42$x0_285 = _ReduceNoLookahead._0;
      const _$42$x1_286 = _ReduceNoLookahead._1;
      const _$42$x2_287 = _ReduceNoLookahead._2;
      switch (_x_274.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        case 2: {
          return 1;
        }
        default: {
          const _ReduceNoLookahead$2 = _x_274;
          const _$42$y0_288 = _ReduceNoLookahead$2._0;
          const _$42$y1_289 = _ReduceNoLookahead$2._1;
          const _$42$y2_290 = _ReduceNoLookahead$2._2;
          const _bind$2 = $compare_int(_$42$x0_285, _$42$y0_288);
          if (_bind$2 === 0) {
            const _bind$3 = moonbitlang$core$builtin$$Compare$compare$11$(_$42$x1_286, _$42$y1_289);
            if (_bind$3 === 0) {
              return $compare_int(_$42$x2_287, _$42$y2_290);
            } else {
              return _bind$3;
            }
          } else {
            return _bind$2;
          }
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$47$(_x_229, _x_230) {
  switch (_x_229.$tag) {
    case 0: {
      const _T = _x_229;
      const _$42$x0_231 = _T._0;
      const _$42$x1_232 = _T._1;
      if (_x_230.$tag === 0) {
        const _T$2 = _x_230;
        const _$42$y0_233 = _T$2._0;
        const _$42$y1_234 = _T$2._1;
        const _bind = $compare_int(_$42$x0_231, _$42$y0_233);
        if (_bind === 0) {
          return moonbitlang$core$builtin$$Compare$compare$11$(_$42$x1_232, _$42$y1_234);
        } else {
          return _bind;
        }
      } else {
        return -1;
      }
    }
    case 1: {
      const _NT = _x_229;
      const _$42$x0_236 = _NT._0;
      const _$42$x1_237 = _NT._1;
      switch (_x_230.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          const _NT$2 = _x_230;
          const _$42$y0_238 = _NT$2._0;
          const _$42$y1_239 = _NT$2._1;
          const _bind = $compare_int(_$42$x0_236, _$42$y0_238);
          if (_bind === 0) {
            return moonbitlang$core$builtin$$Compare$compare$11$(_$42$x1_237, _$42$y1_239);
          } else {
            return _bind;
          }
        }
        default: {
          return -1;
        }
      }
    }
    default: {
      switch (_x_230.$tag) {
        case 0: {
          return 1;
        }
        case 1: {
          return 1;
        }
        default: {
          return 0;
        }
      }
    }
  }
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$CodegenSymbol$to_string(self) {
  switch (self.$tag) {
    case 0: {
      const _T = self;
      const _name = _T._1;
      return `T_${moonbitlang$core$builtin$$Show$to_string$11$(_name)}`;
    }
    case 1: {
      const _NT = self;
      const _name$2 = _NT._1;
      return `NT_${moonbitlang$core$builtin$$Show$to_string$11$(_name$2)}`;
    }
    default: {
      return "EOI";
    }
  }
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(type_) {
  switch (type_.$tag) {
    case 0: {
      const _Constr = type_;
      const _pkg = _Constr._0;
      const _name = _Constr._1;
      const _args = _Constr._2;
      let primary;
      if (_pkg === undefined) {
        primary = _name;
      } else {
        const _Some = _pkg;
        const _pkg$2 = _Some;
        const pkg2 = moonbitlang$core$string$$String$replace_all(_pkg$2, "/", "_");
        primary = `_${moonbitlang$core$builtin$$Show$to_string$11$(pkg2)}_${moonbitlang$core$builtin$$Show$to_string$11$(_name)}`;
      }
      if (_args.length === 0) {
        return primary;
      } else {
        const _bind = moonbitlang$core$array$$Array$iter$23$(_args);
        return `${primary}_${moonbitlang$core$builtin$$Iter$join((_p) => _bind((_p$2) => _p(moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_p$2))), "__")}_`;
      }
    }
    case 1: {
      const _Option = type_;
      const _type_ = _Option._0;
      if (_type_.$tag === 3) {
        return `_${moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_type_)}__`;
      } else {
        return `${moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_type_)}_`;
      }
    }
    case 2: {
      const _Tuple = type_;
      const _types = _Tuple._0;
      const _bind = moonbitlang$core$array$$Array$iter$23$(_types);
      return `_${moonbitlang$core$builtin$$Iter$join((_p) => _bind((_p$2) => _p(moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_p$2))), "__")}_`;
    }
    default: {
      const _Arrow = type_;
      const _args$2 = _Arrow._0;
      const _ret = _Arrow._1;
      const _bind$2 = moonbitlang$core$array$$Array$iter$23$(_args$2);
      return `_${moonbitlang$core$builtin$$Iter$join((_p) => _bind$2((_p$2) => _p(moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_p$2))), "__")}_ -> ${moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_ret)}`;
    }
  }
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen_tokens$46$inject_derive$241$(derive_map, type_) {
  const _bind = moonbitlang$yacc$lib$util$array_multimap$$T$get$132$(derive_map, type_);
  if (_bind.length === 0) {
    return "";
  } else {
    const _bind$2 = moonbitlang$core$array$$Array$iter$23$(_bind);
    const joined = moonbitlang$core$builtin$$Iter$join((_p) => _bind$2((_p$2) => _p(moonbitlang$core$builtin$$Show$to_string$203$(_p$2))), ", ");
    return ` derive(${moonbitlang$core$builtin$$Show$to_string$11$(joined)})`;
  }
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen_tokens(terminals, terminal_meta, output, no_comments, derive_map) {
  output.method_0(output.self, "pub(all) enum Token {\n");
  const _len = terminals.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const term = terminals[_i];
      const meta = terminal_meta(term.name);
      _L: {
        _L$2: {
          const _bind = meta.data_type;
          if (_bind.$tag === 0) {
            const _Constr = _bind;
            const _x = _Constr._0;
            if (_x === undefined) {
              const _x$2 = _Constr._1;
              if (_x$2 === "Unit") {
                const _x$3 = _Constr._2;
                if (_x$3.length === 0) {
                  output.method_0(output.self, `  ${moonbitlang$core$builtin$$Show$to_string$11$(term.name)}\n`);
                } else {
                  break _L$2;
                }
              } else {
                break _L$2;
              }
            } else {
              break _L$2;
            }
          } else {
            break _L$2;
          }
          break _L;
        }
        output.method_0(output.self, `  ${moonbitlang$core$builtin$$Show$to_string$11$(term.name)}(${moonbitlang$core$builtin$$Show$to_string$203$(meta.data_type)})\n`);
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  output.method_0(output.self, `}${moonbitlang$core$builtin$$Show$to_string$11$(moonbitlang$yacc$lib$codegen$gen_mbt$$codegen_tokens$46$inject_derive$241$(derive_map, "Token"))}\n\npub fn Token::kind(self : Token) -> TokenKind {\n  match self {\n`);
  const _len$2 = terminals.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len$2) {
      const term = terminals[_i];
      const meta = terminal_meta(term.name);
      _L: {
        _L$2: {
          const _bind = meta.data_type;
          if (_bind.$tag === 0) {
            const _Constr = _bind;
            const _x = _Constr._0;
            if (_x === undefined) {
              const _x$2 = _Constr._1;
              if (_x$2 === "Unit") {
                const _x$3 = _Constr._2;
                if (_x$3.length === 0) {
                  output.method_0(output.self, `    ${moonbitlang$core$builtin$$Show$to_string$11$(term.name)} => TK_${moonbitlang$core$builtin$$Show$to_string$11$(term.name)}\n`);
                } else {
                  break _L$2;
                }
              } else {
                break _L$2;
              }
            } else {
              break _L$2;
            }
          } else {
            break _L$2;
          }
          break _L;
        }
        output.method_0(output.self, `    ${moonbitlang$core$builtin$$Show$to_string$11$(term.name)}(_) => TK_${moonbitlang$core$builtin$$Show$to_string$11$(term.name)}\n`);
      }
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  output.method_0(output.self, "  }\n}\n\n");
  output.method_0(output.self, "pub(all) enum TokenKind {\n");
  const _len$3 = terminals.length;
  let _tmp$3 = 0;
  while (true) {
    const _i = _tmp$3;
    if (_i < _len$3) {
      const term = terminals[_i];
      output.method_0(output.self, `  TK_${moonbitlang$core$builtin$$Show$to_string$11$(term.name)}\n`);
      _tmp$3 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  output.method_0(output.self, `}${moonbitlang$core$builtin$$Show$to_string$11$(moonbitlang$yacc$lib$codegen$gen_mbt$$codegen_tokens$46$inject_derive$241$(derive_map, "TokenKind"))}\n\n`);
  output.method_0(output.self, "pub impl Show for TokenKind with output(self, logger) {\n  logger.write_string(\n    match self {\n");
  const _len$4 = terminals.length;
  let _tmp$4 = 0;
  while (true) {
    const _i = _tmp$4;
    if (_i < _len$4) {
      const term = terminals[_i];
      const _bind = terminal_meta(term.name).image;
      let name;
      if (_bind === undefined) {
        name = term.name;
      } else {
        const _Some = _bind;
        const _image = _Some;
        name = _image;
      }
      output.method_0(output.self, `      TK_${moonbitlang$core$builtin$$Show$to_string$11$(term.name)} => ${moonbitlang$core$builtin$$Show$to_string$11$(moonbitlang$core$string$$String$escape(name))}\n`);
      _tmp$4 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  output.method_0(output.self, "    }\n  )\n}\n\n");
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_action$242$(actions, action) {
  const _arr = action.sub_actions;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const sub_action = _arr[_i];
      moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_action$242$(actions, sub_action.action);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$hashmap$$T$op_set$85$(actions, action.stamp, action);
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$get_action_id$243$(stamp_to_action_id, action) {
  return moonbitlang$yacc$lib$util$default_hashmap$$DefaultHashMap$get$84$(stamp_to_action_id, action.stamp);
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_symbol_decision$244$(_env, symbol, decision) {
  const decision_groups = _env._2;
  const sum = _env._1;
  const grammar = _env._0;
  moonbitlang$core$sorted_map$$T$op_set$66$(decision_groups, decision, moonbitlang$core$immut$sorted_set$$T$add$47$(moonbitlang$core$option$$Option$or$48$(moonbitlang$core$sorted_map$$T$op_get$66$(decision_groups, decision), moonbitlang$core$immut$sorted_set$$new$47$()), symbol));
  switch (symbol.$tag) {
    case 0: {
      const _T = symbol;
      const _num = _T._0;
      sum.val = sum.val + _num | 0;
      return;
    }
    case 1: {
      const _NT = symbol;
      const _num$2 = _NT._0;
      sum.val = sum.val + (grammar.terminals.length + _num$2 | 0) | 0;
      return;
    }
    default: {
      sum.val = sum.val + (grammar.terminals.length + grammar.nonterminals.length | 0) | 0;
      return;
    }
  }
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$get_action_id_by_prod_num$245$(_env, prod_num) {
  const _production_meta = _env._1;
  const stamp_to_action_id = _env._0;
  return moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$get_action_id$243$(stamp_to_action_id, _production_meta(prod_num).action);
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$gen_decision$246$(_env, decision) {
  const _production_meta = _env._1;
  const stamp_to_action_id = _env._0;
  const _env$2 = { _0: stamp_to_action_id, _1: _production_meta };
  switch (decision.$tag) {
    case 0: {
      return "Accept";
    }
    case 1: {
      const _Shift = decision;
      const _state_num = _Shift._0;
      return `Shift(yy_state_${moonbitlang$core$builtin$$Show$to_string$10$(_state_num)})`;
    }
    case 2: {
      const _Reduce = decision;
      const _num_symbols = _Reduce._0;
      const _nonterm = _Reduce._1;
      const _prod_num = _Reduce._2;
      return `Reduce(${moonbitlang$core$builtin$$Show$to_string$10$(_num_symbols)}, NT_${moonbitlang$core$builtin$$Show$to_string$11$(_nonterm)}, yy_action_${moonbitlang$core$builtin$$Show$to_string$10$(moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$get_action_id_by_prod_num$245$(_env$2, _prod_num))})`;
    }
    default: {
      const _ReduceNoLookahead = decision;
      const _num_symbols$2 = _ReduceNoLookahead._0;
      const _nonterm$2 = _ReduceNoLookahead._1;
      const _prod_num$2 = _ReduceNoLookahead._2;
      return `ReduceNoLookahead(${moonbitlang$core$builtin$$Show$to_string$10$(_num_symbols$2)}, NT_${moonbitlang$core$builtin$$Show$to_string$11$(_nonterm$2)}, yy_action_${moonbitlang$core$builtin$$Show$to_string$10$(moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$get_action_id_by_prod_num$245$(_env$2, _prod_num$2))})`;
    }
  }
}
function moonbitlang$yacc$lib$codegen$gen_mbt$$codegen(grammar, automaton, meta, output, source_map_builder, grammar_filename, external_tokens, no_comments, mode, input_mode) {
  const used_runtime_funcs = moonbitlang$core$sorted_set$$new$11$();
  const _terminal_meta = meta.terminal_meta;
  const _nonterminal_meta = meta.nonterminal_meta;
  const _production_meta = meta.production_meta;
  moonbitlang$core$builtin$$Logger$write_string$200$(output, meta.header);
  moonbitlang$core$builtin$$Logger$write_string$200$(output, `pub(all) typealias Position = ${moonbitlang$core$builtin$$Show$to_string$203$(meta.position_data_type)}\n\n`);
  if (external_tokens) {
  } else {
    moonbitlang$yacc$lib$codegen$gen_mbt$$codegen_tokens(grammar.terminals, _terminal_meta, { self: output, method_0: moonbitlang$core$builtin$$Logger$write_string$200$, method_1: moonbitlang$core$builtin$$Logger$write_substring$200$, method_2: moonbitlang$core$builtin$$Logger$write_sub_string$199$, method_3: moonbitlang$core$builtin$$Logger$write_char$200$ }, no_comments, meta.derive_map);
  }
  moonbitlang$core$builtin$$Logger$write_string$200$(output, "pub type! ParseError {\n  UnexpectedToken(Token, (Position, Position), Array[TokenKind])\n");
  if (input_mode === 0) {
    moonbitlang$core$builtin$$Logger$write_string$200$(output, "  UnexpectedEndOfInput(Position, Array[TokenKind])\n");
  }
  const _bind = moonbitlang$yacc$lib$util$array_multimap$$T$get$132$(meta.derive_map, moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$type_$4$);
  let _tmp;
  if (_bind.length === 0) {
    _tmp = "";
  } else {
    const _bind$2 = moonbitlang$core$array$$Array$iter$23$(_bind);
    const joined = moonbitlang$core$builtin$$Iter$join((_p) => _bind$2((_p$2) => _p(moonbitlang$core$builtin$$Show$to_string$203$(_p$2))), ", ");
    _tmp = ` derive(${moonbitlang$core$builtin$$Show$to_string$11$(joined)})`;
  }
  moonbitlang$core$builtin$$Logger$write_string$200$(output, `}${moonbitlang$core$builtin$$Show$to_string$11$(_tmp)}\n\n`);
  moonbitlang$core$builtin$$Logger$write_string$200$(output, "typealias YYObj = Error\n\n");
  if (mode.$tag === 0) {
    const data_types = moonbitlang$core$sorted_set$$new$23$();
    const _arr = grammar.terminals;
    const _len = _arr.length;
    let _tmp$2 = 0;
    while (true) {
      const _i = _tmp$2;
      if (_i < _len) {
        const term = _arr[_i];
        const meta$2 = _terminal_meta(term.name);
        _L: {
          _L$2: {
            const _bind$2 = meta$2.data_type;
            if (_bind$2.$tag === 0) {
              const _Constr = _bind$2;
              const _x = _Constr._0;
              if (_x === undefined) {
                const _x$2 = _Constr._1;
                if (_x$2 === "Unit") {
                  const _x$3 = _Constr._2;
                  if (_x$3.length === 0) {
                  } else {
                    break _L$2;
                  }
                } else {
                  break _L$2;
                }
              } else {
                break _L$2;
              }
            } else {
              break _L$2;
            }
            break _L;
          }
          moonbitlang$core$sorted_set$$T$add$23$(data_types, meta$2.data_type);
        }
        _tmp$2 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const _arr$2 = grammar.nonterminals;
    const _len$2 = _arr$2.length;
    let _tmp$3 = 0;
    while (true) {
      const _i = _tmp$3;
      if (_i < _len$2) {
        _L: {
          const nonterm = _arr$2[_i];
          const _bind$2 = moonbitlang$core$array$$Array$iter$40$(grammar.starts);
          if (!moonbitlang$core$builtin$$Iter$contains$96$((_p) => _bind$2((_p$2) => _p(_p$2.lhs)), nonterm)) {
            const meta$2 = _nonterminal_meta(nonterm.name);
            moonbitlang$core$sorted_set$$T$add$23$(data_types, meta$2.data_type);
          } else {
            break _L;
          }
          break _L;
        }
        _tmp$3 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    moonbitlang$core$builtin$$Logger$write_string$200$(output, "priv type! YYObj_Void\n\n");
    const _bind$2 = moonbitlang$core$sorted_set$$T$iter$23$(data_types);
    _bind$2((data_type) => {
      moonbitlang$core$builtin$$Logger$write_string$200$(output, `priv type! YYObj_${moonbitlang$core$builtin$$Show$to_string$11$(moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(data_type))} ${moonbitlang$core$builtin$$Show$to_string$203$(data_type)}\n\n`);
      return 1;
    });
  } else {
    moonbitlang$core$builtin$$Logger$write_string$200$(output, "priv type! YYObj_Json Json\n\n");
  }
  moonbitlang$core$builtin$$Logger$write_string$200$(output, "typealias YYState = (YYSymbol) -> YYDecision\n\ntypealias YYAction = (Position, ArrayView[(YYObj, Position, Position)]) -> YYObj\n\npriv enum YYDecision {\n  Accept\n  Shift(YYState)\n  Reduce(Int, YYSymbol, YYAction)\n  ReduceNoLookahead(Int, YYSymbol, YYAction)\n  Error\n}\n\n");
  moonbitlang$core$builtin$$Logger$write_string$200$(output, "priv enum YYSymbol {\n");
  const _arr = grammar.terminals;
  const _len = _arr.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len) {
      const term = _arr[_i];
      moonbitlang$core$builtin$$Logger$write_string$200$(output, `  T_${moonbitlang$core$builtin$$Show$to_string$11$(term.name)}\n`);
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _arr$2 = grammar.nonterminals;
  const _len$2 = _arr$2.length;
  let _tmp$3 = 0;
  while (true) {
    const _i = _tmp$3;
    if (_i < _len$2) {
      _L: {
        const nonterm = _arr$2[_i];
        const _bind$2 = moonbitlang$core$array$$Array$iter$40$(grammar.starts);
        if (!moonbitlang$core$builtin$$Iter$contains$96$((_p) => _bind$2((_p$2) => _p(_p$2.lhs)), nonterm)) {
          moonbitlang$core$builtin$$Logger$write_string$200$(output, `  NT_${moonbitlang$core$builtin$$Show$to_string$11$(nonterm.name)}\n`);
        } else {
          break _L;
        }
        break _L;
      }
      _tmp$3 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$200$(output, "  EOI\n}\n\n// Workaround for EOI unused warning\nfn init {\n  match (EOI : YYSymbol) {\n    EOI => ()\n    _ => ()\n  }\n}\n\n");
  const actions = moonbitlang$core$hashmap$$new$85$(moonbitlang$core$hashmap$$new$46$capacity$46$default$85$());
  const _arr$3 = grammar.productions;
  const _len$3 = _arr$3.length;
  let _tmp$4 = 0;
  while (true) {
    const _i = _tmp$4;
    if (_i < _len$3) {
      _L: {
        const production = _arr$3[_i];
        if (!moonbitlang$core$array$$Array$contains$40$(grammar.starts, production)) {
          const meta$2 = _production_meta(production.num);
          moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_action$242$(actions, meta$2.action);
        } else {
          break _L;
        }
        break _L;
      }
      _tmp$4 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const next_action_id = { val: 0 };
  const stamp_to_action_id = moonbitlang$yacc$lib$util$default_hashmap$$new$84$((_key) => {
    const action_id = next_action_id.val;
    next_action_id.val = next_action_id.val + 1 | 0;
    return action_id;
  });
  const _bind$2 = moonbitlang$core$hashmap$$T$iter2$85$(actions);
  _bind$2((__, action) => {
    moonbitlang$core$builtin$$Logger$write_string$200$(output, `fn yy_action_${moonbitlang$core$builtin$$Show$to_string$10$(moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$get_action_id$243$(stamp_to_action_id, action))}(_last_pos : Position, _args : ArrayView[(YYObj, Position, Position)]) -> YYObj {\n`);
    const _arr$4 = action.sub_actions;
    const _len$4 = _arr$4.length;
    let _tmp$5 = 0;
    while (true) {
      const _i = _tmp$5;
      if (_i < _len$4) {
        const sub_action = _arr$4[_i];
        const _start = sub_action.start;
        const _end = sub_action.end;
        const _action2 = sub_action.action;
        const last_pos_code = _start === 0 ? "_last_pos" : `_args[${moonbitlang$core$builtin$$Show$to_string$10$(_start - 1 | 0)}].2`;
        moonbitlang$core$builtin$$Logger$write_string$200$(output, `  let _sub_action_${moonbitlang$core$builtin$$Show$to_string$10$(_start)}_result = yy_action_${moonbitlang$core$builtin$$Show$to_string$10$(moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$get_action_id$243$(stamp_to_action_id, _action2))}(${moonbitlang$core$builtin$$Show$to_string$11$(last_pos_code)}, _args[${moonbitlang$core$builtin$$Show$to_string$10$(_start)}:${moonbitlang$core$builtin$$Show$to_string$10$(_end)}])\n`);
        _tmp$5 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const _arr$5 = action.bindings;
    const _len$5 = _arr$5.length;
    let _tmp$6 = 0;
    while (true) {
      const _i = _tmp$6;
      if (_i < _len$5) {
        const binding = _arr$5[_i];
        let index;
        _L: {
          _L$2: {
            const _bind$3 = binding._0;
            switch (_bind$3.$tag) {
              case 0: {
                const _Data = _bind$3;
                const _index = _Data._0;
                const _type_ = _Data._1;
                moonbitlang$core$builtin$$Logger$write_string$200$(output, `  guard _args[${moonbitlang$core$builtin$$Show$to_string$10$(_index)}].0 is YYObj_${moonbitlang$core$builtin$$Show$to_string$11$(moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_type_))}(${moonbitlang$core$builtin$$Show$to_string$11$(binding._1)})\n`);
                break;
              }
              case 1: {
                moonbitlang$core$builtin$$Logger$write_string$200$(output, `  let ${moonbitlang$core$builtin$$Show$to_string$11$(binding._1)} = _last_pos\n`);
                break;
              }
              case 2: {
                const _StartPos = _bind$3;
                const _index$2 = _StartPos._0;
                index = _index$2;
                break _L$2;
              }
              case 3: {
                const _EndPos = _bind$3;
                const _index$3 = _EndPos._0;
                index = _index$3;
                break _L$2;
              }
              case 4: {
                moonbitlang$core$sorted_set$$T$add$11$(used_runtime_funcs, "_get_symbol_start_pos");
                moonbitlang$core$builtin$$Logger$write_string$200$(output, `  let ${moonbitlang$core$builtin$$Show$to_string$11$(binding._1)} = _get_symbol_start_pos(_args, _last_pos)\n`);
                break;
              }
              default: {
                const _SubAction = _bind$3;
                const _start = _SubAction._0;
                const _type_$2 = _SubAction._1;
                moonbitlang$core$builtin$$Logger$write_string$200$(output, `  guard _sub_action_${moonbitlang$core$builtin$$Show$to_string$10$(_start)}_result is YYObj_${moonbitlang$core$builtin$$Show$to_string$11$(moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_type_$2))}(${moonbitlang$core$builtin$$Show$to_string$11$(binding._1)})\n`);
              }
            }
            break _L;
          }
          if (action.arity === 0) {
            moonbitlang$core$builtin$$Logger$write_string$200$(output, `  let ${moonbitlang$core$builtin$$Show$to_string$11$(binding._1)} = _last_pos\n`);
          } else {
            const _bind$3 = binding._0;
            let field;
            switch (_bind$3.$tag) {
              case 2: {
                field = 1;
                break;
              }
              case 3: {
                field = 2;
                break;
              }
              default: {
                field = $panic();
              }
            }
            moonbitlang$core$builtin$$Logger$write_string$200$(output, `  let ${moonbitlang$core$builtin$$Show$to_string$11$(binding._1)} = _args[${moonbitlang$core$builtin$$Show$to_string$10$(index)}].${moonbitlang$core$builtin$$Show$to_string$10$(field)}\n`);
          }
        }
        _tmp$6 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const result_data_type = action.type_;
    moonbitlang$core$builtin$$Logger$write_string$200$(output, `  YYObj_${moonbitlang$core$builtin$$Show$to_string$11$(moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(result_data_type))}({(); `);
    const _arr$6 = action.body;
    const _len$6 = _arr$6.length;
    let _tmp$7 = 0;
    while (true) {
      const _i = _tmp$7;
      if (_i < _len$6) {
        const part = _arr$6[_i];
        const _code = part._0;
        const _original_range = part._1;
        if (_original_range === undefined) {
        } else {
          const _Some = _original_range;
          const _x = _Some;
          const _original_utf8_pos = _x._0;
          const _original_utf8_len = _x._1;
          const generated_utf8_pos = moonbitlang$yacc$lib$util$logger_with_cursor$$LoggerWithCursor$cursor(output);
          if (source_map_builder === undefined) {
          } else {
            const _Some$2 = source_map_builder;
            const _source_map_builder = _Some$2;
            if (_code.length === _original_utf8_len) {
              _source_map_builder.method_0(_source_map_builder.self, grammar_filename, _original_utf8_pos, generated_utf8_pos, _code.length);
            }
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$200$(output, _code);
        _tmp$7 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    moonbitlang$core$builtin$$Logger$write_string$200$(output, "})\n");
    moonbitlang$core$builtin$$Logger$write_string$200$(output, "}\n\n");
    return 1;
  });
  moonbitlang$core$builtin$$Logger$write_string$200$(output, "fn yy_input(token : Token, _start_pos : Position, _end_pos : Position) -> (YYSymbol, YYObj) {\n  match token {\n");
  const _arr$4 = grammar.terminals;
  const _len$4 = _arr$4.length;
  let _tmp$5 = 0;
  while (true) {
    const _i = _tmp$5;
    if (_i < _len$4) {
      const term = _arr$4[_i];
      const meta$2 = _terminal_meta(term.name);
      if (mode.$tag === 0) {
        _L: {
          _L$2: {
            const _bind$3 = meta$2.data_type;
            if (_bind$3.$tag === 0) {
              const _Constr = _bind$3;
              const _x = _Constr._0;
              if (_x === undefined) {
                const _x$2 = _Constr._1;
                if (_x$2 === "Unit") {
                  const _x$3 = _Constr._2;
                  if (_x$3.length === 0) {
                    moonbitlang$core$builtin$$Logger$write_string$200$(output, `    ${moonbitlang$core$builtin$$Show$to_string$11$(term.name)} => (T_${moonbitlang$core$builtin$$Show$to_string$11$(term.name)}, YYObj_Void)\n`);
                  } else {
                    break _L$2;
                  }
                } else {
                  break _L$2;
                }
              } else {
                break _L$2;
              }
            } else {
              break _L$2;
            }
            break _L;
          }
          moonbitlang$core$builtin$$Logger$write_string$200$(output, `    ${moonbitlang$core$builtin$$Show$to_string$11$(term.name)}(data) => (T_${moonbitlang$core$builtin$$Show$to_string$11$(term.name)}, YYObj_${moonbitlang$core$builtin$$Show$to_string$11$(moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(meta$2.data_type))}(data))\n`);
        }
      } else {
        const _bind$3 = meta$2.data_type;
        let payload_code;
        if (_bind$3.$tag === 0) {
          const _Constr = _bind$3;
          const _x = _Constr._0;
          if (_x === undefined) {
            const _x$2 = _Constr._1;
            if (_x$2 === "Unit") {
              const _x$3 = _Constr._2;
              payload_code = _x$3.length === 0 ? "" : "(data)";
            } else {
              payload_code = "(data)";
            }
          } else {
            payload_code = "(data)";
          }
        } else {
          payload_code = "(data)";
        }
        const _bind$4 = meta$2.data_type;
        let data_code;
        if (_bind$4.$tag === 0) {
          const _Constr = _bind$4;
          const _x = _Constr._0;
          if (_x === undefined) {
            const _x$2 = _Constr._1;
            if (_x$2 === "Unit") {
              const _x$3 = _Constr._2;
              data_code = _x$3.length === 0 ? "Null" : "data.to_json()";
            } else {
              data_code = "data.to_json()";
            }
          } else {
            data_code = "data.to_json()";
          }
        } else {
          data_code = "data.to_json()";
        }
        moonbitlang$core$builtin$$Logger$write_string$200$(output, `    ${moonbitlang$core$builtin$$Show$to_string$11$(term.name)}${moonbitlang$core$builtin$$Show$to_string$11$(payload_code)} => (T_${moonbitlang$core$builtin$$Show$to_string$11$(term.name)}, YYObj_Json({\n      \"type\": \"TERMINAL\",\n      \"name\": \"${moonbitlang$core$builtin$$Show$to_string$11$(term.name)}\",\n      \"data\": ${moonbitlang$core$builtin$$Show$to_string$11$(data_code)},\n      \"start\": _start_pos.to_json(),\n      \"end\": _end_pos.to_json()\n    }))\n`);
      }
      _tmp$5 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$200$(output, "  }\n}\n\n");
  const _arr$5 = automaton.states;
  const _len$5 = _arr$5.length;
  let _tmp$6 = 0;
  while (true) {
    const _i = _tmp$6;
    if (_i < _len$5) {
      const state = _arr$5[_i];
      if (!no_comments) {
        const _bind$3 = moonbitlang$yacc$lib$lr1$$LR1State$iter_item_groups(state);
        _bind$3((item) => {
          moonbitlang$core$builtin$$Logger$write_string$200$(output, `// ${moonbitlang$core$builtin$$Show$to_string$202$(item)}\n`);
          return 1;
        });
      }
      moonbitlang$core$builtin$$Logger$write_string$200$(output, `fn yy_state_${moonbitlang$core$builtin$$Show$to_string$10$(state.num)}(_lookahead : YYSymbol) -> YYDecision {\n`);
      const sum = { val: 0 };
      const decision_groups = moonbitlang$core$sorted_map$$new$66$();
      const _env = { _0: grammar, _1: sum, _2: decision_groups };
      const _bind$3 = moonbitlang$core$sorted_map$$T$iter2$69$(state.action);
      _bind$3((input, decision) => {
        let _tmp$7;
        if (input.$tag === 1) {
          const _Input = input;
          const _term = _Input._0;
          _tmp$7 = new $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$T(_term.num, _term.name);
        } else {
          _tmp$7 = $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$EOI;
        }
        const _tmp$8 = _tmp$7;
        let _tmp$9;
        switch (decision.$tag) {
          case 2: {
            _tmp$9 = $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Accept;
            break;
          }
          case 0: {
            const _Shift = decision;
            const _next_state = _Shift._0;
            _tmp$9 = new $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Shift(_next_state.num);
            break;
          }
          case 1: {
            const _Reduce = decision;
            const _production = _Reduce._0;
            _tmp$9 = new $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Reduce(_production.rhs.length, _production.lhs.name, _production.num);
            break;
          }
          default: {
            _tmp$9 = $panic();
          }
        }
        moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_symbol_decision$244$(_env, _tmp$8, _tmp$9);
        return 1;
      });
      const _bind$4 = moonbitlang$core$sorted_map$$T$iter2$67$(state.goto);
      _bind$4((symbol, state$2) => {
        if (symbol.$tag === 1) {
          const _NT = symbol;
          const _nonterm = _NT._0;
          moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$add_symbol_decision$244$(_env, new $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenSymbol$NT(_nonterm.num, _nonterm.name), new $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$Shift(state$2.num));
        }
        return 1;
      });
      let total = 0;
      const _arr$6 = grammar.terminals;
      const _len$6 = _arr$6.length;
      let _tmp$7 = 0;
      while (true) {
        const _i$2 = _tmp$7;
        if (_i$2 < _len$6) {
          const term = _arr$6[_i$2];
          total = total + term.num | 0;
          _tmp$7 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const _arr$7 = grammar.nonterminals;
      const _len$7 = _arr$7.length;
      let _tmp$8 = 0;
      while (true) {
        const _i$2 = _tmp$8;
        if (_i$2 < _len$7) {
          _L: {
            const nonterm = _arr$7[_i$2];
            const _bind$5 = moonbitlang$core$array$$Array$iter$40$(grammar.starts);
            if (!moonbitlang$core$builtin$$Iter$contains$96$((_p) => _bind$5((_p$2) => _p(_p$2.lhs)), nonterm)) {
              total = total + (grammar.terminals.length + nonterm.num | 0) | 0;
            } else {
              break _L;
            }
            break _L;
          }
          _tmp$8 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      total = total + (grammar.terminals.length + grammar.nonterminals.length | 0) | 0;
      const _env$2 = { _0: stamp_to_action_id, _1: _production_meta };
      let _tmp$9;
      if (moonbitlang$core$sorted_map$$T$size$66$(decision_groups) === 1) {
        const _bind$5 = moonbitlang$core$array$$Array$op_get$71$(moonbitlang$core$sorted_map$$T$keys$66$(decision_groups), 0);
        let _tmp$10;
        switch (_bind$5.$tag) {
          case 2: {
            _tmp$10 = true;
            break;
          }
          case 0: {
            _tmp$10 = true;
            break;
          }
          default: {
            _tmp$10 = false;
          }
        }
        _tmp$9 = _tmp$10;
      } else {
        _tmp$9 = false;
      }
      if (_tmp$9) {
        const decision = moonbitlang$core$array$$Array$op_get$71$(moonbitlang$core$sorted_map$$T$keys$66$(decision_groups), 0);
        let decision$2;
        if (decision.$tag === 2) {
          const _Reduce = decision;
          const _num_symbols = _Reduce._0;
          const _nonterm = _Reduce._1;
          const _prod_num = _Reduce._2;
          decision$2 = new $64$moonbitlang$47$yacc$47$lib$47$codegen$47$gen_mbt$46$CodegenDecision$ReduceNoLookahead(_num_symbols, _nonterm, _prod_num);
        } else {
          decision$2 = decision;
        }
        moonbitlang$core$builtin$$Logger$write_string$200$(output, `  ${moonbitlang$core$builtin$$Show$to_string$11$(moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$gen_decision$246$(_env$2, decision$2))}\n`);
      } else {
        moonbitlang$core$builtin$$Logger$write_string$200$(output, "  match _lookahead {\n");
        const _bind$5 = moonbitlang$core$sorted_map$$T$iter2$66$(decision_groups);
        _bind$5((decision, symbols) => {
          const _bind$6 = moonbitlang$core$immut$sorted_set$$T$iter$47$(symbols);
          const pattern = moonbitlang$core$string$$String$concat(moonbitlang$core$builtin$$Iter$to_array$11$((_p) => _bind$6((_p$2) => _p(moonbitlang$yacc$lib$codegen$gen_mbt$$CodegenSymbol$to_string(_p$2)))), " | ");
          moonbitlang$core$builtin$$Logger$write_string$200$(output, `    ${moonbitlang$core$builtin$$Show$to_string$11$(pattern)} => ${moonbitlang$core$builtin$$Show$to_string$11$(moonbitlang$yacc$lib$codegen$gen_mbt$$codegen$46$gen_decision$246$(_env$2, decision))}\n`);
          return 1;
        });
        const exhaustive = sum.val === total;
        if (!exhaustive) {
          moonbitlang$core$builtin$$Logger$write_string$200$(output, "    _ => Error\n");
        }
        moonbitlang$core$builtin$$Logger$write_string$200$(output, "  }\n");
      }
      moonbitlang$core$builtin$$Logger$write_string$200$(output, "}\n\n");
      _tmp$6 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (input_mode === 0) {
    moonbitlang$core$builtin$$Logger$write_string$200$(output, "fn yy_parse[T](\n  tokens : Array[(Token, Position, Position)],\n  start : YYState,\n  return_ : (YYObj) -> T,\n  initial_pos? : Position,\n) -> T!ParseError {\n  let mut cursor = 0\n  let mut state_stack : @immut/list.T[YYState] = Cons(start, Nil)\n  let data_stack : Array[(YYObj, Position, Position)] = []\n  let mut last_pos = initial_pos.or(tokens[0].1)\n  let mut state = start\n  let mut lookahead : Option[(YYSymbol, (YYObj, Position, Position), Token?)] = None\n  let mut last_shifted_state_stack = state_stack\n  while true {\n    let decision = match state(EOI) {\n      ReduceNoLookahead(_) | Accept as t => t\n      _ => {\n        match lookahead {\n          Some(la) => state(la.0)\n          None => {\n            if cursor < tokens.length() {\n              let (token, start_pos, end_pos) = tokens[cursor]\n              cursor += 1\n              let (symbol, data) = yy_input(token, start_pos, end_pos)\n              lookahead = Some((symbol, (data, start_pos, end_pos), Some(token)))\n              state(symbol)\n            } else {\n              lookahead = Some((EOI, (YYObj_Void, last_pos, last_pos), None))\n              state(EOI)\n            }\n          }\n        }\n      }\n    }\n    match decision {\n      Accept => return return_(data_stack.unsafe_pop().0)\n      Shift(next_state) => {\n        guard lookahead is Some(la)\n        data_stack.push(la.1)\n        state_stack = Cons(next_state, state_stack)\n        last_shifted_state_stack = state_stack\n        state = next_state\n        last_pos = la.1.2\n        lookahead = None\n      }\n      Reduce(count, symbol, action)\n      | ReduceNoLookahead(count, symbol, action) => {\n        loop (count, symbol, action) {\n          _ => {\n            let args = data_stack[data_stack.length() - count:]\n            let data = action(last_pos, args)\n            let (start_pos, end_pos) = if args.length() == 0 {\n              (last_pos, last_pos)\n            } else {\n              (args[0].1, args[args.length() - 1].2)\n            }\n            for i in 0..<count {\n              ignore(data_stack.unsafe_pop())\n              state_stack = state_stack.tail()\n            }\n            state = state_stack.unsafe_head()\n            data_stack.push((data, start_pos, end_pos))\n            match state(symbol) {\n              Accept => return return_(data_stack.unsafe_pop().0)\n              Shift(next_state) => {\n                state_stack = Cons(next_state, state_stack)\n                state = next_state\n              }\n              Reduce(count, symbol, action)\n              | ReduceNoLookahead(count, symbol, action) => continue (count, symbol, action)\n              _ => panic()\n            }\n          }\n        }\n      }\n      Error => {\n        let (_, (_, start_pos, end_pos), token) = lookahead.unwrap()\n        error!(last_shifted_state_stack, token, (start_pos, end_pos))\n      }\n    }\n  }\n  panic()\n}\n\n");
  } else {
    moonbitlang$core$builtin$$Logger$write_string$200$(output, "fn yy_parse[T](\n  read_token : () -> (Token, Position, Position),\n  start_pos : Position,\n  start : YYState,\n  return_ : (YYObj) -> T\n) -> T!ParseError {\n  let mut state_stack : @immut/list.T[YYState] = Cons(start, Nil)\n  let data_stack : Array[(YYObj, Position, Position)] = []\n  let mut last_pos = start_pos\n  let mut state = start\n  let mut lookahead : Option[(YYSymbol, (YYObj, Position, Position), Token)] = None\n  let mut last_shifted_state_stack = state_stack\n  while true {\n    let decision = match state(EOI) {\n      ReduceNoLookahead(_) | Accept as t => t\n      _ => {\n        match lookahead {\n          Some(la) => state(la.0)\n          None => {\n            let (token, start_pos, end_pos) = read_token()\n            let (symbol, data) = yy_input(token, start_pos, end_pos)\n            lookahead = Some((symbol, (data, start_pos, end_pos), token))\n            state(symbol)\n          }\n        }\n      }\n    }\n    match decision {\n      Accept => return return_(data_stack.unsafe_pop().0)\n      Shift(next_state) => {\n        guard lookahead is Some(la)\n        data_stack.push(la.1)\n        state_stack = Cons(next_state, state_stack)\n        last_shifted_state_stack = state_stack\n        state = next_state\n        last_pos = la.1.2\n        lookahead = None\n      }\n      Reduce(count, symbol, action)\n      | ReduceNoLookahead(count, symbol, action) => {\n        loop (count, symbol, action) {\n          _ => {\n            let args = data_stack[data_stack.length() - count:]\n            let data = action(last_pos, args)\n            let (start_pos, end_pos) = if args.length() == 0 {\n              (last_pos, last_pos)\n            } else {\n              (args[0].1, args[args.length() - 1].2)\n            }\n            for i in 0..<count {\n              ignore(data_stack.unsafe_pop())\n              state_stack = state_stack.tail()\n            }\n            state = state_stack.unsafe_head()\n            data_stack.push((data, start_pos, end_pos))\n            match state(symbol) {\n              Accept => return return_(data_stack.unsafe_pop().0)\n              Shift(next_state) => {\n                state_stack = Cons(next_state, state_stack)\n                state = next_state\n              }\n              Reduce(count, symbol, action)\n              | ReduceNoLookahead(count, symbol, action) => continue (count, symbol, action)\n              _ => panic()\n            }\n          }\n        }\n      }\n      Error => {\n        let (_, (_, start_pos, end_pos), token) = lookahead.unwrap()\n        error!(last_shifted_state_stack, token, (start_pos, end_pos))\n      }\n    }\n  }\n  panic()\n}\n\n");
  }
  if (input_mode === 0) {
    moonbitlang$core$builtin$$Logger$write_string$200$(output, "fn error(stack : @immut/list.T[YYState], token : Token?, loc : (Position, Position)) -> Unit!ParseError {\n");
  } else {
    moonbitlang$core$builtin$$Logger$write_string$200$(output, "fn error(stack : @immut/list.T[YYState], token : Token, loc : (Position, Position)) -> Unit!ParseError {\n");
  }
  moonbitlang$core$builtin$$Logger$write_string$200$(output, "  let expected = []\n  fn try_add(symbol : YYSymbol, kind : TokenKind) {\n    fn go(stack : @immut/list.T[YYState]) {\n      match stack {\n        Nil => ()\n        Cons(state, _) => {\n          match state(symbol) {\n            Accept | Shift(_) => expected.push(kind)\n            Reduce(count, symbol, _) | ReduceNoLookahead(count, symbol, _) => {\n              fn inner_go(stack : @immut/list.T[YYState], count, symbol) {\n                let stack = stack.drop(count)\n                guard stack is Cons(state, _)\n                match state(symbol) {\n                  Shift(state) => go(Cons(state, stack))\n                  Reduce(count, symbol, _) | ReduceNoLookahead(count, symbol, _) => inner_go(stack, count, symbol)\n                  _ => panic()\n                }\n              }\n              inner_go(stack, count, symbol)\n            }\n            Error => ()\n          }\n        }\n      }\n    }\n    go(stack)\n  }\n");
  moonbitlang$core$builtin$$Logger$write_string$200$(output, "  for term in ([");
  const _arr$6 = grammar.terminals;
  const _len$6 = _arr$6.length;
  let _tmp$7 = 0;
  while (true) {
    const _i = _tmp$7;
    if (_i < _len$6) {
      const term = _arr$6[_i];
      if (_i > 0) {
        moonbitlang$core$builtin$$Logger$write_string$200$(output, ", ");
      }
      moonbitlang$core$builtin$$Logger$write_string$200$(output, `(T_${moonbitlang$core$builtin$$Show$to_string$11$(term.name)}, TK_${moonbitlang$core$builtin$$Show$to_string$11$(term.name)})`);
      _tmp$7 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$200$(output, "] : Array[(YYSymbol, TokenKind)]) {\n");
  moonbitlang$core$builtin$$Logger$write_string$200$(output, "    try_add(term.0, term.1)\n  }\n");
  if (input_mode === 0) {
    moonbitlang$core$builtin$$Logger$write_string$200$(output, "  match token {\n    None => raise UnexpectedEndOfInput(loc.1, expected)\n    Some(token) => raise UnexpectedToken(token, loc, expected)\n  }\n");
  } else {
    moonbitlang$core$builtin$$Logger$write_string$200$(output, "  raise UnexpectedToken(token, loc, expected)\n");
  }
  moonbitlang$core$builtin$$Logger$write_string$200$(output, "}\n\n");
  const _arr$7 = automaton.starts;
  const _len$7 = _arr$7.length;
  let _tmp$8 = 0;
  while (true) {
    const _i = _tmp$8;
    if (_i < _len$7) {
      const start = _arr$7[_i];
      const _start_production = start._0;
      const _start_state = start._1;
      const name = _start_production.lhs.name;
      const original_name = moonbitlang$core$string$$String$substring(name, 0, name.length - "_prime".length | 0);
      if (input_mode === 0) {
        moonbitlang$core$builtin$$Logger$write_string$200$(output, `pub fn ${moonbitlang$core$builtin$$Show$to_string$11$(original_name)}(tokens : Array[(Token, Position, Position)], initial_pos? : Position) -> ${moonbitlang$core$builtin$$Show$to_string$203$(_nonterminal_meta(name).data_type)}!ParseError {\n  yy_parse!(\n    tokens,\n    yy_state_${moonbitlang$core$builtin$$Show$to_string$10$(_start_state.num)},\n    fn {\n      YYObj_${moonbitlang$core$builtin$$Show$to_string$11$(moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_nonterminal_meta(name).data_type))}(result) => result\n      _ => panic()\n    },\n    initial_pos?,\n  )\n}\n`);
      } else {
        moonbitlang$core$builtin$$Logger$write_string$200$(output, `pub fn ${moonbitlang$core$builtin$$Show$to_string$11$(original_name)}(read_token : () -> (Token, Position, Position), start_pos : Position) -> ${moonbitlang$core$builtin$$Show$to_string$203$(_nonterminal_meta(name).data_type)}!ParseError {\n  yy_parse!(\n    read_token,\n    start_pos,\n    yy_state_${moonbitlang$core$builtin$$Show$to_string$10$(_start_state.num)},\n    fn {\n      YYObj_${moonbitlang$core$builtin$$Show$to_string$11$(moonbitlang$yacc$lib$codegen$gen_mbt$$derive_type_ident(_nonterminal_meta(name).data_type))}(result) => result\n      _ => panic()\n    },\n  )\n}\n`);
      }
      _tmp$8 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _bind$3 = moonbitlang$core$sorted_set$$T$iter$11$(used_runtime_funcs);
  _bind$3((func) => {
    if (func === "_get_symbol_start_pos") {
      moonbitlang$core$builtin$$Logger$write_string$200$(output, "\nfn _get_symbol_start_pos(args : ArrayView[(YYObj, Position, Position)], last_pos : Position) -> Position {\n  if args.length() == 0 {\n    last_pos\n  } else {\n    for i = 0; i < args.length(); i = i + 1 {\n      let (_, start_pos, end_pos) = args[i]\n      if start_pos == end_pos {\n        continue\n      }\n      return start_pos\n    }\n    args[args.length() - 1].2\n  }\n}\n");
    } else {
      $panic();
    }
    return 1;
  });
  if (mode.$tag === 0) {
  } else {
    moonbitlang$core$builtin$$Logger$write_string$200$(output, "\nfn args_to_json(args : ArrayView[(YYObj, Position, Position)]) -> Json {\n  Array(args.iter().map(fn {\n    (YYObj_Json(json), _, _) => json\n    _ => panic()\n  }).to_array())\n}\n");
  }
  moonbitlang$core$builtin$$Logger$write_string$200$(output, meta.footer);
}
function moonbitlang$yacc$lib$codegen$$CodeGenerator$void_type$6$(self) {
  return "Unit";
}
function moonbitlang$yacc$lib$codegen$$CodeGenerator$void_action_code$6$(self) {
  return "()";
}
function moonbitlang$yacc$lib$codegen$$CodeGenerator$codegen_tokens$6$(self, terminals, terminal_meta, output, no_comments, derive_map) {
  moonbitlang$yacc$lib$codegen$gen_mbt$$codegen_tokens(terminals, terminal_meta, output, no_comments, derive_map);
}
function moonbitlang$yacc$lib$codegen$$CodeGenerator$codegen$6$(self, grammar, automaton, meta, output, source_map_builder, grammar_filename, external_tokens, no_comments, mode, input_mode) {
  moonbitlang$yacc$lib$codegen$gen_mbt$$codegen(grammar, automaton, meta, output, source_map_builder, grammar_filename, external_tokens, no_comments, mode, input_mode);
}
function moonbitlang$yacc$main$$_init$42$46$write_map_file$247$(source_map, file) {
  return moonbitlang$x$fs$$write_string_to_file(file, moonbitlang$core$json$$Json$stringify(moonbitlang$core$builtin$$ToJson$to_json$235$(source_map), moonbitlang$core$json$$Json$stringify$46$escape_slash$46$default(), 2), moonbitlang$x$fs$$write_string_to_file$46$encoding$46$default());
}
(() => {
  const output_file = moonbitlang$core$ref$$new$11$("");
  const output_map_file = moonbitlang$core$ref$$new$38$(undefined);
  const input_file = moonbitlang$core$ref$$new$11$("");
  const mode = moonbitlang$core$ref$$new$37$($64$moonbitlang$47$yacc$47$lib$47$driver$46$Mode$Default);
  const input_mode = moonbitlang$core$ref$$new$36$(0);
  const external_tokens = moonbitlang$core$ref$$new$35$(false);
  const no_comments = moonbitlang$core$ref$$new$35$(false);
  const token_payload_rewrite = moonbitlang$core$ref$$new$34$(undefined);
  Yoorkin$ArgParser$$parse([{ _0: "--output-file", _1: "-o", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Set_string(output_file), _3: "Output file" }, { _0: "--output-map-file", _1: "--output-map-file", _2: new $64$Yoorkin$47$ArgParser$46$Spec$String((file) => {
    output_map_file.val = file;
  }), _3: "Output source map file, if not specified, it will be the output file with .map.json extension" }, { _0: "--mode", _1: "--mode", _2: new $64$Yoorkin$47$ArgParser$46$Spec$String((mode_sym) => {
    let _tmp;
    switch (mode_sym) {
      case "default": {
        _tmp = $64$moonbitlang$47$yacc$47$lib$47$driver$46$Mode$Default;
        break;
      }
      case "json-cst": {
        _tmp = new $64$moonbitlang$47$yacc$47$lib$47$driver$46$Mode$JsonCst(undefined);
        break;
      }
      case "only-tokens": {
        _tmp = $64$moonbitlang$47$yacc$47$lib$47$driver$46$Mode$OnlyTokens;
        break;
      }
      default: {
        moonbitlang$yacc$lib$driver$util$$println_to_stderr(`Unsupported mode: ${moonbitlang$core$builtin$$Show$to_string$11$(mode_sym)}`);
        _tmp = moonbitlang$yacc$lib$driver$util$$exit$37$(1);
      }
    }
    mode.val = _tmp;
  }), _3: "Specify mode (default, json-cst)" }, { _0: "--input-mode", _1: "--input-mode", _2: new $64$Yoorkin$47$ArgParser$46$Spec$String((input_mode_sym) => {
    switch (input_mode_sym) {
      case "array": {
        input_mode.val = 0;
        return;
      }
      case "pull": {
        input_mode.val = 1;
        return;
      }
      default: {
        moonbitlang$yacc$lib$driver$util$$println_to_stderr(`Unsupported input mode: ${moonbitlang$core$builtin$$Show$to_string$11$(input_mode_sym)}`);
        moonbitlang$yacc$lib$driver$util$$exit$9$(1);
        return;
      }
    }
  }), _3: "Specify input mode (array, pull). Default is array" }, { _0: "--external-tokens", _1: "--external-tokens", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    external_tokens.val = true;
  }), _3: "Use external tokens" }, { _0: "--force-token-json-payload", _1: "--force-token-json-payload", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    token_payload_rewrite.val = 1;
  }), _3: "Force token to use JSON payload (only for json-cst mode)" }, { _0: "--force-token-no-payload", _1: "--force-token-no-payload", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    token_payload_rewrite.val = 0;
  }), _3: "Force token to not use payload (only for json-cst mode)" }, { _0: "--no-comments", _1: "--no-comments", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    no_comments.val = true;
  }), _3: "Do not include comments in the output" }, { _0: "--version", _1: "-v", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    moonbitlang$core$builtin$$println$11$("moonyacc 0.1.0");
    moonbitlang$yacc$lib$driver$util$$exit$9$(0);
  }), _3: "Show version" }], (rest) => {
    input_file.val = rest;
  }, moonbitlang$yacc$main$$_init$42$46$usage$5$, moonbitlang$x$sys$$get_cli_args());
  if (moonbitlang$core$builtin$$op_notequal$11$(input_file.val, "")) {
    let parser_spec_src;
    let _try_err;
    _L: {
      _L$2: {
        const _bind = moonbitlang$x$fs$$read_file_to_string(input_file.val, moonbitlang$x$fs$$read_file_to_string$46$encoding$46$default());
        if (_bind.$tag === 1) {
          const _ok = _bind;
          parser_spec_src = _ok._0;
        } else {
          const _err = _bind;
          const _tmp = _err._0;
          _try_err = _tmp;
          break _L$2;
        }
        break _L;
      }
      parser_spec_src = moonbitlang$core$builtin$$abort$11$(moonbitlang$core$builtin$$Show$to_string$205$(_try_err));
    }
    const _bind = mode.val;
    let mode$2;
    if (_bind.$tag === 1) {
      mode$2 = new $64$moonbitlang$47$yacc$47$lib$47$driver$46$Mode$JsonCst(token_payload_rewrite.val);
    } else {
      mode$2 = _bind;
    }
    const source_map = moonbitlang$yacc$lib$codegen$$SourceMap$new();
    const output = moonbitlang$yacc$lib$driver$$compile(parser_spec_src, mode$2, input_mode.val, input_file.val, external_tokens.val, no_comments.val, { self: source_map, method_0: moonbitlang$yacc$lib$codegen$$SourceMapBuilder$add_mapping$235$ }, moonbitlang$yacc$lib$codegen$gen_mbt$$generator);
    if (output_file.val === "") {
      moonbitlang$core$builtin$$println$11$(output);
      const _bind$2 = output_map_file.val;
      if (_bind$2 === undefined) {
        return;
      } else {
        const _Some = _bind$2;
        const _file = _Some;
        moonbitlang$core$result$$Result$unwrap$21$(moonbitlang$yacc$main$$_init$42$46$write_map_file$247$(source_map, _file));
        return;
      }
    } else {
      moonbitlang$core$result$$Result$unwrap$21$(moonbitlang$x$fs$$write_string_to_file(output_file.val, output, moonbitlang$x$fs$$write_string_to_file$46$encoding$46$default()));
      moonbitlang$core$result$$Result$unwrap$21$(moonbitlang$yacc$main$$_init$42$46$write_map_file$247$(source_map, moonbitlang$core$option$$Option$or$11$(output_map_file.val, `${moonbitlang$core$builtin$$Show$to_string$11$(output_file.val)}.map.json`)));
      return;
    }
  } else {
    moonbitlang$yacc$lib$driver$util$$println_to_stderr("Input file is required");
    moonbitlang$yacc$lib$driver$util$$exit$9$(1);
    return;
  }
})();
