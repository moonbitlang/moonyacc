const $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$EOF = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Character(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Character.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Repetition(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Repetition.prototype.$tag = 2;
const $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Epsilon = { $tag: 3 };
function $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Alter(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Alter.prototype.$tag = 4;
function $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Concat(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Concat.prototype.$tag = 5;
function $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Capture(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Capture.prototype.$tag = 6;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INT.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTE.prototype.$tag = 2;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTES(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTES.prototype.$tag = 3;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FLOAT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FLOAT.prototype.$tag = 4;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$STRING(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$STRING.prototype.$tag = 5;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MULTILINE_STRING(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MULTILINE_STRING.prototype.$tag = 6;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MULTILINE_INTERP(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MULTILINE_INTERP.prototype.$tag = 7;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INTERP(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INTERP.prototype.$tag = 8;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ATTRIBUTE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ATTRIBUTE.prototype.$tag = 9;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LIDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LIDENT.prototype.$tag = 10;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$UIDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$UIDENT.prototype.$tag = 11;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LIDENT_LEX = { $tag: 12 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$UIDENT_REGEX = { $tag: 13 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$POST_LABEL(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$POST_LABEL.prototype.$tag = 14;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COMMENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COMMENT.prototype.$tag = 15;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$NEWLINE = { $tag: 16 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1.prototype.$tag = 17;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX2(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX2.prototype.$tag = 18;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX3(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX3.prototype.$tag = 19;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX4(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX4.prototype.$tag = 20;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AUGMENTED_ASSIGNMENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AUGMENTED_ASSIGNMENT.prototype.$tag = 21;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EOF = { $tag: 22 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FALSE = { $tag: 23 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRUE = { $tag: 24 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PUB = { $tag: 25 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PRIV = { $tag: 26 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$READONLY = { $tag: 27 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IMPORT = { $tag: 28 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EXTERN = { $tag: 29 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BREAK = { $tag: 30 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CONTINUE = { $tag: 31 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$STRUCT = { $tag: 32 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ENUM = { $tag: 33 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRAIT = { $tag: 34 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DERIVE = { $tag: 35 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IMPL = { $tag: 36 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$WITH = { $tag: 37 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RAISE = { $tag: 38 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$THROW = { $tag: 39 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRY = { $tag: 40 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CATCH = { $tag: 41 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ASYNC = { $tag: 42 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TYPEALIAS = { $tag: 43 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRAITALIAS = { $tag: 44 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FNALIAS = { $tag: 45 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EQUAL = { $tag: 46 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LPAREN = { $tag: 47 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RPAREN = { $tag: 48 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COMMA = { $tag: 49 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MINUS = { $tag: 50 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$QUESTION = { $tag: 51 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EXCLAMATION = { $tag: 52 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_LIDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_LIDENT.prototype.$tag = 53;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_UIDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_UIDENT.prototype.$tag = 54;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_INT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_INT.prototype.$tag = 55;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_LPAREN = { $tag: 56 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COLONCOLON = { $tag: 57 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COLON = { $tag: 58 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$SEMI(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$SEMI.prototype.$tag = 59;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LBRACKET = { $tag: 60 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PLUS = { $tag: 61 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RBRACKET = { $tag: 62 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$UNDERSCORE = { $tag: 63 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BAR = { $tag: 64 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LBRACE = { $tag: 65 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RBRACE = { $tag: 66 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AMPERAMPER = { $tag: 67 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AMPER = { $tag: 68 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CARET = { $tag: 69 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BARBAR = { $tag: 70 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PACKAGE_NAME(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PACKAGE_NAME.prototype.$tag = 71;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AS = { $tag: 72 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PIPE = { $tag: 73 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ELSE = { $tag: 74 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FN = { $tag: 75 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IF = { $tag: 76 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LET = { $tag: 77 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CONST = { $tag: 78 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MATCH = { $tag: 79 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MUTABLE = { $tag: 80 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TYPE = { $tag: 81 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FAT_ARROW = { $tag: 82 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$THIN_ARROW = { $tag: 83 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$WHILE = { $tag: 84 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RETURN = { $tag: 85 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOTDOT = { $tag: 86 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RANGE_INCLUSIVE = { $tag: 87 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RANGE_EXCLUSIVE = { $tag: 88 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ELLIPSIS = { $tag: 89 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TEST = { $tag: 90 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LOOP = { $tag: 91 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$GUARD = { $tag: 92 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FOR = { $tag: 93 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IN = { $tag: 94 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IS = { $tag: 95 };
const $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$ = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Node$0$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Node$0$.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$ = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Node$1$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Node$1$.prototype.$tag = 1;
class $PanicError extends Error {}
function $panic() {
  throw new $PanicError();
}
function $compare_int(a, b) {
  return (a >= b) - (a <= b);
}
function $make_array_len_and_init(a, b) {
  const arr = new Array(a);
  for (let i = 0; i < a; i++) {
    arr[i] = b;
  }
  return arr;
}
function $bound_check(arr, index) {
  if (index < 0 || index >= arr.length) throw new Error("Index out of bounds");
}
const $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$2$(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$2$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$3$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$3$(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$3$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$4$(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$4$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$5$(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$5$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$6$(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$6$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$7$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$7$(param0, param1, param2, param3) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
}
$64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$7$.prototype.$tag = 1;
function Result$Err$8$(param0) {
  this._0 = param0;
}
Result$Err$8$.prototype.$tag = 0;
function Result$Ok$8$(param0) {
  this._0 = param0;
}
Result$Ok$8$.prototype.$tag = 1;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T.prototype.$tag = 49;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex.prototype.$tag = 48;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_String$46$YYObj_String(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_String$46$YYObj_String.prototype.$tag = 47;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Int__Int__$46$YYObj__Int__Int__(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Int__Int__$46$YYObj__Int__Int__.prototype.$tag = 46;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Char__String_$46$YYObj__Char__String_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Char__String_$46$YYObj__Char__String_.prototype.$tag = 45;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Char$46$YYObj_Char(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Char$46$YYObj_Char.prototype.$tag = 44;
const Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void = { $tag: 43 };
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Bool$46$YYObj_Bool(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Bool$46$YYObj_Bool.prototype.$tag = 42;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Int$46$YYObj_Int(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Int$46$YYObj_Int.prototype.$tag = 41;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Comment$46$YYObj_Comment(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Comment$46$YYObj_Comment.prototype.$tag = 40;
const Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void = { $tag: 39 };
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_CharLiteral$46$YYObj_CharLiteral(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_CharLiteral$46$YYObj_CharLiteral.prototype.$tag = 38;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_InterpLiteral$46$YYObj_InterpLiteral(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_InterpLiteral$46$YYObj_InterpLiteral.prototype.$tag = 37;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String.prototype.$tag = 36;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_StringLiteral$46$YYObj_StringLiteral(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_StringLiteral$46$YYObj_StringLiteral.prototype.$tag = 35;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Program$46$YYObj__ast_Program(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Program$46$YYObj__ast_Program.prototype.$tag = 34;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__Location__Array__ast_Term___Location_$46$YYObj__Location__Array__ast_Term___Location_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__Location__Array__ast_Term___Location_$46$YYObj__Location__Array__ast_Term___Location_.prototype.$tag = 33;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Code$46$YYObj__ast_Code(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Code$46$YYObj__ast_Code.prototype.$tag = 32;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexCase_$46$YYObj__list_T__ast_LexCase_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexCase_$46$YYObj__list_T__ast_LexCase_.prototype.$tag = 31;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexCase$46$YYObj__ast_LexCase(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexCase$46$YYObj__ast_LexCase.prototype.$tag = 30;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPatternItem$46$YYObj__ast_LexPatternItem(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPatternItem$46$YYObj__ast_LexPatternItem.prototype.$tag = 29;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexPatternItem_$46$YYObj__list_T__ast_LexPatternItem_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexPatternItem_$46$YYObj__list_T__ast_LexPatternItem_.prototype.$tag = 28;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Regex$46$YYObj__ast_Regex(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Regex$46$YYObj__ast_Regex.prototype.$tag = 27;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Array__ast_Term_$46$YYObj_Array__ast_Term_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Array__ast_Term_$46$YYObj_Array__ast_Term_.prototype.$tag = 26;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_Term_$46$YYObj__list_T__ast_Term_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_Term_$46$YYObj__list_T__ast_Term_.prototype.$tag = 25;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern.prototype.$tag = 24;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident$46$YYObj__ast_Ident(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident$46$YYObj__ast_Ident.prototype.$tag = 23;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___.prototype.$tag = 22;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident_$46$YYObj__ast_Ident_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident_$46$YYObj__ast_Ident_.prototype.$tag = 21;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term.prototype.$tag = 20;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit.prototype.$tag = 19;
function Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError.prototype.$tag = 18;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______immut_list_T__type_Rule_$46$YYObj__Context______immut_list_T__type_Rule_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______immut_list_T__type_Rule_$46$YYObj__Context______immut_list_T__type_Rule_.prototype.$tag = 17;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Rule$46$YYObj__Context______type_Rule(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Rule$46$YYObj__Context______type_Rule.prototype.$tag = 16;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_______type_Regex__String____type_CodeBlock_$46$YYObj__Context_______type_Regex__String____type_CodeBlock_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_______type_Regex__String____type_CodeBlock_$46$YYObj__Context_______type_Regex__String____type_CodeBlock_.prototype.$tag = 15;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______immut_list_T___type_Regex__String____type_CodeBlock__$46$YYObj__Context______immut_list_T___type_Regex__String____type_CodeBlock__(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______immut_list_T___type_Regex__String____type_CodeBlock__$46$YYObj__Context______immut_list_T___type_Regex__String____type_CodeBlock__.prototype.$tag = 14;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T.prototype.$tag = 13;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex.prototype.$tag = 12;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_____Context$46$YYObj__Context_____Context(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_____Context$46$YYObj__Context_____Context.prototype.$tag = 11;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Lex$46$YYObj__Context______type_Lex(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Lex$46$YYObj__Context______type_Lex.prototype.$tag = 10;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Char$46$YYObj_Char(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Char$46$YYObj_Char.prototype.$tag = 9;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String.prototype.$tag = 8;
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__String__String_$46$YYObj__String__String_(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__String__String_$46$YYObj__String__String_.prototype.$tag = 7;
const Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void = { $tag: 6 };
function Error$moonbitlang$47$ulex$47$lib$47$parser$46$ParseError$46$UnexpectedToken(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
Error$moonbitlang$47$ulex$47$lib$47$parser$46$ParseError$46$UnexpectedToken.prototype.$tag = 5;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$ParseError$46$UnexpectedToken(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$ParseError$46$UnexpectedToken.prototype.$tag = 4;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$ParseError$46$UnexpectedEndOfInput(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$ParseError$46$UnexpectedEndOfInput.prototype.$tag = 3;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$ParseError$46$UnexpectedToken(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$ParseError$46$UnexpectedToken.prototype.$tag = 2;
function Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$ParseError$46$UnexpectedEndOfInput(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$ParseError$46$UnexpectedEndOfInput.prototype.$tag = 1;
function Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(param0) {
  this._0 = param0;
}
Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError.prototype.$tag = 0;
const $9223372036854775807L = { hi: 2147483647, lo: -1 };
const $10L = { hi: 0, lo: 10 };
const $1L = { hi: 0, lo: 1 };
const $16L = { hi: 0, lo: 16 };
const $_9223372036854775808L = { hi: -2147483648, lo: 0 };
function Result$Err$9$(param0) {
  this._0 = param0;
}
Result$Err$9$.prototype.$tag = 0;
function Result$Ok$9$(param0) {
  this._0 = param0;
}
Result$Ok$9$.prototype.$tag = 1;
function Result$Err$10$(param0) {
  this._0 = param0;
}
Result$Err$10$.prototype.$tag = 0;
function Result$Ok$10$(param0) {
  this._0 = param0;
}
Result$Ok$10$.prototype.$tag = 1;
function Result$Err$11$(param0) {
  this._0 = param0;
}
Result$Err$11$.prototype.$tag = 0;
function Result$Ok$11$(param0) {
  this._0 = param0;
}
Result$Ok$11$.prototype.$tag = 1;
const $0L = { hi: 0, lo: 0 };
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$12$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$12$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$12$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$13$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$13$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$13$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$14$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$14$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$14$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$15$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$15$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$15$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$16$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$16$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$16$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$17$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$17$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$17$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$18$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$18$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$18$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$19$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$19$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$19$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$20$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$20$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$20$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$21$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$21$(param0, param1, param2, param3, param4) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
  this._3 = param3;
  this._4 = param4;
}
$64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$21$.prototype.$tag = 1;
const Option$None$22$ = { $tag: 0 };
function Option$Some$22$(param0) {
  this._0 = param0;
}
Option$Some$22$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$23$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$23$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$23$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$24$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$25$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$25$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$25$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$26$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$26$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$26$.prototype.$tag = 1;
const $bytes_literal$0 = new Uint8Array();
function $unsafe_make_string(a, b) {
  return String.fromCodePoint(b).repeat(a);
}
const Option$None$27$ = { $tag: 0 };
function Option$Some$27$(param0) {
  this._0 = param0;
}
Option$Some$27$.prototype.$tag = 1;
const moonbitlang$core$builtin$$JSArray$set_length = (arr, len) => { arr.length = len; };
const moonbitlang$core$builtin$$JSArray$push = (arr, val) => { arr.push(val); };
const moonbitlang$core$builtin$$JSArray$pop = (arr) => arr.pop();
const moonbitlang$core$builtin$$JSArray$splice1 = (arr, idx, cnt, val) => arr.splice(idx, cnt, val);
function $makebytes(a, b) {
  const arr = new Uint8Array(a);
  for (let i = 0; i < a; i++) {
    arr[i] = b;
  }
  return arr;
}
const moonbitlang$core$builtin$$get_int64_wasm_helper = function f() {
  if (f._exports) return f._exports;
  return f._exports = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
};
const moonbitlang$core$builtin$$MyInt64$compare = (a, b) => {
  const ahi = a.hi;
  const bhi = b.hi;
  if (ahi < bhi) {
    return -1;
  }
  if (ahi > bhi) {
    return 1;
  }
  const alo = a.lo >>> 0;
  const blo = b.lo >>> 0;
  if (alo < blo) {
    return -1;
  }
  if (alo > blo) {
    return 1;
  }
  return 0;
};
const $64$moonbitlang$47$core$47$list$46$T$Empty$28$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$list$46$T$More$28$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$list$46$T$More$28$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$list$46$T$Empty$29$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$list$46$T$More$29$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$list$46$T$More$29$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$list$46$T$Empty$30$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$list$46$T$More$30$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$list$46$T$More$30$.prototype.$tag = 1;
const $64$moonbitlang$47$x$47$encoding$46$Decode$End = { $tag: 0 };
function $64$moonbitlang$47$x$47$encoding$46$Decode$Refill(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$x$47$encoding$46$Decode$Refill.prototype.$tag = 1;
function $64$moonbitlang$47$x$47$encoding$46$Decode$Malformed(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$x$47$encoding$46$Decode$Malformed.prototype.$tag = 2;
function $64$moonbitlang$47$x$47$encoding$46$Decode$Uchar(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$x$47$encoding$46$Decode$Uchar.prototype.$tag = 3;
function $64$moonbitlang$47$x$47$encoding$46$UTF16Decode$Hi(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$x$47$encoding$46$UTF16Decode$Hi.prototype.$tag = 0;
function $64$moonbitlang$47$x$47$encoding$46$UTF16Decode$UTF16Malformed(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$x$47$encoding$46$UTF16Decode$UTF16Malformed.prototype.$tag = 1;
function $64$moonbitlang$47$x$47$encoding$46$UTF16Decode$UTF16Uchar(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$x$47$encoding$46$UTF16Decode$UTF16Uchar.prototype.$tag = 2;
function $bytes_equal(a, b) {
    if (a.length !== b.length) return false;
  for (let i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) return false;
  }
  return true;
}
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$EOI = { $tag: 0 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$EOF = { $tag: 1 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$PARSE_LBRACE = { $tag: 2 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$REGEX = { $tag: 3 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$AS = { $tag: 4 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$UNDERSCORE = { $tag: 5 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RBRACE = { $tag: 6 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LPAREN = { $tag: 7 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RPAREN = { $tag: 8 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LBRACKET = { $tag: 9 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RBRACKET = { $tag: 10 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$EQ = { $tag: 11 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$SEMICOLON = { $tag: 12 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$FAT_ARROW = { $tag: 13 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$BAR = { $tag: 14 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$STAR = { $tag: 15 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$PLUS = { $tag: 16 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$QUESTION = { $tag: 17 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$MINUS = { $tag: 18 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CARET = { $tag: 19 };
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$BACKSLASH = { $tag: 20 };
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RULE_LC_IDENT_LPAREN_CODE_RPAREN_ARROW_CODE_LBRACE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RULE_LC_IDENT_LPAREN_CODE_RPAREN_ARROW_CODE_LBRACE.prototype.$tag = 21;
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LBRACE_CODE_RBRACE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LBRACE_CODE_RBRACE.prototype.$tag = 22;
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LC_IDENT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LC_IDENT.prototype.$tag = 23;
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR.prototype.$tag = 24;
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$STRING(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$STRING.prototype.$tag = 25;
function Result$Err$31$(param0) {
  this._0 = param0;
}
Result$Err$31$.prototype.$tag = 0;
function Result$Ok$31$(param0) {
  this._0 = param0;
}
Result$Ok$31$.prototype.$tag = 1;
function Result$Err$32$(param0) {
  this._0 = param0;
}
Result$Err$32$.prototype.$tag = 0;
function Result$Ok$32$(param0) {
  this._0 = param0;
}
Result$Ok$32$.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Accept = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce.prototype.$tag = 2;
function $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead.prototype.$tag = 3;
const $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error = { $tag: 4 };
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$33$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$33$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$33$.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$34$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$34$(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$34$.prototype.$tag = 1;
function Result$Err$35$(param0) {
  this._0 = param0;
}
Result$Err$35$.prototype.$tag = 0;
function Result$Ok$35$(param0) {
  this._0 = param0;
}
Result$Ok$35$.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Eof = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Char(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Char.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToStart(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToStart.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToEnd(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToEnd.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$36$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$36$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$36$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$36$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$36$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$36$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$36$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$36$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$36$.prototype.$tag = 4;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Set(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Set.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Copy(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Copy.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Dynamic_dfa(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Dynamic_dfa.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Static_dfa(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Static_dfa.prototype.$tag = 1;
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$37$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$37$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$37$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$37$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$37$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$37$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$37$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$37$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$37$.prototype.$tag = 4;
const $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EpsWithTag(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EpsWithTag.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EChar(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EChar.prototype.$tag = 2;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Dynamic_nfa(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Dynamic_nfa.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Static_nfa(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Static_nfa.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$StartPosOf(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$StartPosOf.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$EndPosOf(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$EndPosOf.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$StartPos = { $tag: 2 };
const $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$EndPos = { $tag: 3 };
function $64$Yoorkin$47$ArgParser$46$Spec$Unit(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Unit.prototype.$tag = 0;
function $64$Yoorkin$47$ArgParser$46$Spec$String(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$String.prototype.$tag = 1;
function $64$Yoorkin$47$ArgParser$46$Spec$Set_string(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Set_string.prototype.$tag = 2;
function $64$Yoorkin$47$ArgParser$46$Spec$Set(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Set.prototype.$tag = 3;
function $64$Yoorkin$47$ArgParser$46$Spec$Clear(param0) {
  this._0 = param0;
}
$64$Yoorkin$47$ArgParser$46$Spec$Clear.prototype.$tag = 4;
const moonbitlang$x$sys$internal$ffi$$get_cli_args_internal = function() {
  return process.argv;
 };
const moonbitlang$x$fs$$read_file_ffi = function(path) {
   var fs = require('fs');
   try {
     const content = fs.readFileSync(path);
     globalThis.fileContent = content;
     return 0;
   } catch (error) {
     globalThis.errorMessage = error.message;
     return -1;
   }
 };
const moonbitlang$x$fs$$write_file_ffi = function(path, content) {
   var fs = require('fs');
   try {
     fs.writeFileSync(path, Buffer.from(content));
     return 0;
   } catch (error) {
     globalThis.errorMessage = error.message;
     return -1;
   }
 };
const moonbitlang$x$fs$$get_file_content_ffi = function() {
   return globalThis.fileContent;
 };
const moonbitlang$x$fs$$get_error_message_ffi = function() {
   return globalThis.errorMessage || '';
 };
function Result$Err$38$(param0) {
  this._0 = param0;
}
Result$Err$38$.prototype.$tag = 0;
function Result$Ok$38$(param0) {
  this._0 = param0;
}
Result$Ok$38$.prototype.$tag = 1;
function Result$Err$39$(param0) {
  this._0 = param0;
}
Result$Err$39$.prototype.$tag = 0;
function Result$Ok$39$(param0) {
  this._0 = param0;
}
Result$Ok$39$.prototype.$tag = 1;
function Result$Err$40$(param0) {
  this._0 = param0;
}
Result$Err$40$.prototype.$tag = 0;
function Result$Ok$40$(param0) {
  this._0 = param0;
}
Result$Ok$40$.prototype.$tag = 1;
function Result$Err$41$(param0) {
  this._0 = param0;
}
Result$Err$41$.prototype.$tag = 0;
function Result$Ok$41$(param0) {
  this._0 = param0;
}
Result$Ok$41$.prototype.$tag = 1;
function Result$Err$42$(param0) {
  this._0 = param0;
}
Result$Err$42$.prototype.$tag = 0;
function Result$Ok$42$(param0) {
  this._0 = param0;
}
Result$Ok$42$.prototype.$tag = 1;
function Result$Err$43$(param0) {
  this._0 = param0;
}
Result$Err$43$.prototype.$tag = 0;
function Result$Ok$43$(param0) {
  this._0 = param0;
}
Result$Ok$43$.prototype.$tag = 1;
const moonbitlang$ulex$main$util$$ffi_exit = (code) => { process.exit(code); };
const moonbitlang$ulex$main$util$$println_to_stderr = (msg) => { console.error("%s", msg); };
const $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$44$ = { $tag: 0 };
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$44$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$44$.prototype.$tag = 1;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$44$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$44$.prototype.$tag = 2;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$44$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$Error$44$.prototype.$tag = 3;
function $64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$44$(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$core$47$builtin$46$ForeachResult$JumpOuter$44$.prototype.$tag = 4;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$IllegalCharacter(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$IllegalCharacter.prototype.$tag = 0;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$UnterminatedString = { $tag: 1 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$UnterminatedStringInVariableInterploation = { $tag: 2 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpInvalidMultilineString = { $tag: 3 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpInvalidComment = { $tag: 4 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpInvalidAttribute = { $tag: 5 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpMissingExpression = { $tag: 6 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence.prototype.$tag = 7;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidDotInt(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidDotInt.prototype.$tag = 8;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidByteLiteral(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidByteLiteral.prototype.$tag = 9;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$Reserved_keyword(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$Reserved_keyword.prototype.$tag = 10;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpLit(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpLit.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpSource(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpSource.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$CommentKind$InlineTrailing = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$CommentKind$Ownline(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$CommentKind$Ownline.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Nested(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Nested.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$NamedRegex(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$NamedRegex.prototype.$tag = 2;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$LexDef(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$LexDef.prototype.$tag = 3;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$GeneratedCode(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$GeneratedCode.prototype.$tag = 4;
const Option$None$45$ = { $tag: 0 };
function Option$Some$45$(param0) {
  this._0 = param0;
}
Option$Some$45$.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$OpenPattern(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$OpenPattern.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$ClosedPattern(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$ClosedPattern.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Literal(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Literal.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Interp(param0, param1) {
  this._0 = param0;
  this._1 = param1;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Interp.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Named(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Named.prototype.$tag = 2;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPatternItem$Regex(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPatternItem$Regex.prototype.$tag = 0;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPatternItem$RegexAs(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPatternItem$RegexAs.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Accept = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce.prototype.$tag = 2;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead.prototype.$tag = 3;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error = { $tag: 4 };
function Result$Err$46$(param0) {
  this._0 = param0;
}
Result$Err$46$.prototype.$tag = 0;
function Result$Ok$46$(param0) {
  this._0 = param0;
}
Result$Ok$46$.prototype.$tag = 1;
function Result$Err$47$(param0) {
  this._0 = param0;
}
Result$Err$47$.prototype.$tag = 0;
function Result$Ok$47$(param0) {
  this._0 = param0;
}
Result$Ok$47$.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$EOF = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE.prototype.$tag = 2;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$DOT = { $tag: 3 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$DOLLAR = { $tag: 4 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$LBRACKET = { $tag: 5 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$RBRACKET = { $tag: 6 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CARET = { $tag: 7 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$MINUS = { $tag: 8 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$STAR = { $tag: 9 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$PLUS = { $tag: 10 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$QUESTION = { $tag: 11 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$REPEAT(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$REPEAT.prototype.$tag = 12;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$LPAREN = { $tag: 13 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$RPAREN = { $tag: 14 };
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$BAR = { $tag: 15 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$TOKEN(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$TOKEN.prototype.$tag = 16;
function Result$Err$48$(param0) {
  this._0 = param0;
}
Result$Err$48$.prototype.$tag = 0;
function Result$Ok$48$(param0) {
  this._0 = param0;
}
Result$Ok$48$.prototype.$tag = 1;
function Result$Err$49$(param0) {
  this._0 = param0;
}
Result$Err$49$.prototype.$tag = 0;
function Result$Ok$49$(param0) {
  this._0 = param0;
}
Result$Ok$49$.prototype.$tag = 1;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Accept = { $tag: 0 };
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(param0) {
  this._0 = param0;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift.prototype.$tag = 1;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce.prototype.$tag = 2;
function $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(param0, param1, param2) {
  this._0 = param0;
  this._1 = param1;
  this._2 = param2;
}
$64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead.prototype.$tag = 3;
const $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error = { $tag: 4 };
const moonbitlang$core$strconv$$base_err_str = "invalid base";
const moonbitlang$core$strconv$$range_err_str = "value out of range";
const moonbitlang$core$strconv$$syntax_err_str = "invalid syntax";
const moonbitlang$core$int$$max_value = 2147483647;
const moonbitlang$x$encoding$$utf_8_len = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
const moonbitlang$ulex$lib$regex$$eof = { desc: $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$EOF, class: 1, len: undefined };
const moonbitlang$ulex$lib$regex$$epsilon = { desc: $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Epsilon, class: 1, len: 0 };
const moonbitlang$ulex$main$$_init$42$46$usage$124$1 = "Usage: moonlex [options] <input-file>";
const moonbitlang$ulex$lib$new_frontend$lexer$$invalid_byte_repr_buf = moonbitlang$core$builtin$$StringBuilder$new(0);
const moonbitlang$ulex$lib$new_frontend$lexer$$reserved_keyword_table = moonbitlang$core$hashset$$from_array$0$(["module", "move", "ref", "static", "super", "unsafe", "use", "where", "await", "dyn", "abstract", "do", "final", "macro", "override", "typeof", "virtual", "yield", "local", "method", "alias", "assert"]);
const moonbitlang$ulex$lib$new_frontend$lexer$$keyword_table = moonbitlang$core$hashmap$$from_array$1$([{ _0: "as", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AS }, { _0: "else", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ELSE }, { _0: "extern", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EXTERN }, { _0: "fn", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FN }, { _0: "fnalias", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FNALIAS }, { _0: "if", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IF }, { _0: "let", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LET }, { _0: "const", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CONST }, { _0: "match", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MATCH }, { _0: "mut", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MUTABLE }, { _0: "type", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TYPE }, { _0: "typealias", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TYPEALIAS }, { _0: "struct", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$STRUCT }, { _0: "enum", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ENUM }, { _0: "trait", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRAIT }, { _0: "traitalias", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRAITALIAS }, { _0: "derive", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DERIVE }, { _0: "while", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$WHILE }, { _0: "break", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BREAK }, { _0: "continue", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CONTINUE }, { _0: "import", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IMPORT }, { _0: "return", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RETURN }, { _0: "throw", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$THROW }, { _0: "raise", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RAISE }, { _0: "try", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRY }, { _0: "catch", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CATCH }, { _0: "pub", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PUB }, { _0: "priv", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PRIV }, { _0: "readonly", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$READONLY }, { _0: "true", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TRUE }, { _0: "false", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FALSE }, { _0: "_", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$UNDERSCORE }, { _0: "test", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$TEST }, { _0: "loop", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LOOP }, { _0: "for", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FOR }, { _0: "in", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IN }, { _0: "impl", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IMPL }, { _0: "with", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$WITH }, { _0: "guard", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$GUARD }, { _0: "async", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ASYNC }, { _0: "is", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$IS }, { _0: "lex", _1: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LIDENT_LEX }]);
const moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf = moonbitlang$core$builtin$$StringBuilder$new(0);
const moonbitlang$ulex$lib$new_frontend$lexer$$string_interps = moonbitlang$core$ref$$new$2$([]);
const moonbitlang$ulex$lib$util$char_set$$empty = $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$;
const moonbitlang$ulex$lib$util$char_set$$any = moonbitlang$ulex$lib$util$char_set$$range(0, 1114111);
const moonbitlang$ulex$lib$util$eof_char_set$$empty = $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
const moonbitlang$ulex$lib$util$eof_char_set$$eof = moonbitlang$ulex$lib$util$diet$$singleton$3$(-1);
function moonbitlang$core$abort$$abort$4$(msg) {
  $panic();
}
function moonbitlang$core$abort$$abort$5$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$0$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$6$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$7$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$8$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$9$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$10$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$11$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$12$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$13$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$14$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$15$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$16$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$17$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$18$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$19$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$20$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$21$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$22$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$23$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$24$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$25$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$26$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$27$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$28$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$29$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$30$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$31$(msg) {
  return $panic();
}
function moonbitlang$core$abort$$abort$32$(msg) {
  return $panic();
}
function moonbitlang$core$ref$$new$0$(x) {
  return { val: x };
}
function moonbitlang$core$ref$$new$33$(x) {
  return { val: x };
}
function moonbitlang$core$ref$$new$34$(x) {
  return { val: x };
}
function moonbitlang$core$ref$$new$2$(x) {
  return { val: x };
}
function moonbitlang$core$array$$get_limit(len) {
  let len$2 = len;
  let limit = 0;
  while (true) {
    if (len$2 > 0) {
      len$2 = len$2 / 2 | 0;
      limit = limit + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return limit;
}
function moonbitlang$core$array$$ArrayView$rev_inplace$24$(self) {
  const mid_len = self.len / 2 | 0;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < mid_len) {
      const j = (self.len - i | 0) - 1 | 0;
      moonbitlang$core$array$$ArrayView$swap$24$(self, i, j);
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$ArrayView$rev_inplace$25$(self) {
  const mid_len = self.len / 2 | 0;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < mid_len) {
      const j = (self.len - i | 0) - 1 | 0;
      moonbitlang$core$array$$ArrayView$swap$25$(self, i, j);
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$choose_pivot$46$sort_2$47$49(_env, a, b) {
  const arr = _env._1;
  const swaps = _env._0;
  if (moonbitlang$core$builtin$$op_gt$24$(moonbitlang$core$array$$ArrayView$op_get$24$(arr, a), moonbitlang$core$array$$ArrayView$op_get$24$(arr, b))) {
    moonbitlang$core$array$$ArrayView$swap$24$(arr, a, b);
    swaps.val = swaps.val + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$array$$choose_pivot$46$sort_3$47$50(_env, a, b, c) {
  moonbitlang$core$array$$choose_pivot$46$sort_2$47$49(_env, a, b);
  moonbitlang$core$array$$choose_pivot$46$sort_2$47$49(_env, b, c);
  moonbitlang$core$array$$choose_pivot$46$sort_2$47$49(_env, a, b);
}
function moonbitlang$core$array$$choose_pivot$24$(arr) {
  const len = arr.len;
  const swaps = { val: 0 };
  const b = Math.imul(len / 4 | 0, 2) | 0;
  if (len >= 8) {
    const a = Math.imul(len / 4 | 0, 1) | 0;
    const c = Math.imul(len / 4 | 0, 3) | 0;
    const _env = { _0: swaps, _1: arr };
    if (len > 50) {
      moonbitlang$core$array$$choose_pivot$46$sort_3$47$50(_env, a - 1 | 0, a, a + 1 | 0);
      moonbitlang$core$array$$choose_pivot$46$sort_3$47$50(_env, b - 1 | 0, b, b + 1 | 0);
      moonbitlang$core$array$$choose_pivot$46$sort_3$47$50(_env, c - 1 | 0, c, c + 1 | 0);
    }
    moonbitlang$core$array$$choose_pivot$46$sort_3$47$50(_env, a, b, c);
  }
  if (swaps.val === 12) {
    moonbitlang$core$array$$ArrayView$rev_inplace$24$(arr);
    return { _0: (len - b | 0) - 1 | 0, _1: true };
  } else {
    return { _0: b, _1: swaps.val === 0 };
  }
}
function moonbitlang$core$array$$choose_pivot$46$sort_2$47$67(_env, a, b) {
  const arr = _env._1;
  const swaps = _env._0;
  if (moonbitlang$core$builtin$$op_gt$25$(moonbitlang$core$array$$ArrayView$op_get$25$(arr, a), moonbitlang$core$array$$ArrayView$op_get$25$(arr, b))) {
    moonbitlang$core$array$$ArrayView$swap$25$(arr, a, b);
    swaps.val = swaps.val + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$array$$choose_pivot$46$sort_3$47$68(_env, a, b, c) {
  moonbitlang$core$array$$choose_pivot$46$sort_2$47$67(_env, a, b);
  moonbitlang$core$array$$choose_pivot$46$sort_2$47$67(_env, b, c);
  moonbitlang$core$array$$choose_pivot$46$sort_2$47$67(_env, a, b);
}
function moonbitlang$core$array$$choose_pivot$25$(arr) {
  const len = arr.len;
  const swaps = { val: 0 };
  const b = Math.imul(len / 4 | 0, 2) | 0;
  if (len >= 8) {
    const a = Math.imul(len / 4 | 0, 1) | 0;
    const c = Math.imul(len / 4 | 0, 3) | 0;
    const _env = { _0: swaps, _1: arr };
    if (len > 50) {
      moonbitlang$core$array$$choose_pivot$46$sort_3$47$68(_env, a - 1 | 0, a, a + 1 | 0);
      moonbitlang$core$array$$choose_pivot$46$sort_3$47$68(_env, b - 1 | 0, b, b + 1 | 0);
      moonbitlang$core$array$$choose_pivot$46$sort_3$47$68(_env, c - 1 | 0, c, c + 1 | 0);
    }
    moonbitlang$core$array$$choose_pivot$46$sort_3$47$68(_env, a, b, c);
  }
  if (swaps.val === 12) {
    moonbitlang$core$array$$ArrayView$rev_inplace$25$(arr);
    return { _0: (len - b | 0) - 1 | 0, _1: true };
  } else {
    return { _0: b, _1: swaps.val === 0 };
  }
}
function moonbitlang$core$array$$sift_down$24$(arr, index) {
  let index$2 = index;
  const len = arr.len;
  let child = (Math.imul(index$2, 2) | 0) + 1 | 0;
  while (true) {
    if (child < len) {
      if ((child + 1 | 0) < len && moonbitlang$core$builtin$$op_lt$24$(moonbitlang$core$array$$ArrayView$op_get$24$(arr, child), moonbitlang$core$array$$ArrayView$op_get$24$(arr, child + 1 | 0))) {
        child = child + 1 | 0;
      }
      if (moonbitlang$core$builtin$$op_ge$24$(moonbitlang$core$array$$ArrayView$op_get$24$(arr, index$2), moonbitlang$core$array$$ArrayView$op_get$24$(arr, child))) {
        return undefined;
      }
      moonbitlang$core$array$$ArrayView$swap$24$(arr, index$2, child);
      index$2 = child;
      child = (Math.imul(index$2, 2) | 0) + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$sift_down$25$(arr, index) {
  let index$2 = index;
  const len = arr.len;
  let child = (Math.imul(index$2, 2) | 0) + 1 | 0;
  while (true) {
    if (child < len) {
      if ((child + 1 | 0) < len && moonbitlang$core$builtin$$op_lt$25$(moonbitlang$core$array$$ArrayView$op_get$25$(arr, child), moonbitlang$core$array$$ArrayView$op_get$25$(arr, child + 1 | 0))) {
        child = child + 1 | 0;
      }
      if (moonbitlang$core$builtin$$op_ge$25$(moonbitlang$core$array$$ArrayView$op_get$25$(arr, index$2), moonbitlang$core$array$$ArrayView$op_get$25$(arr, child))) {
        return undefined;
      }
      moonbitlang$core$array$$ArrayView$swap$25$(arr, index$2, child);
      index$2 = child;
      child = (Math.imul(index$2, 2) | 0) + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$heap_sort$24$(arr) {
  const len = arr.len;
  let _tmp = (len / 2 | 0) - 1 | 0;
  while (true) {
    const i = _tmp;
    if (i >= 0) {
      moonbitlang$core$array$$sift_down$24$(arr, i);
      _tmp = i - 1 | 0;
      continue;
    } else {
      break;
    }
  }
  let _tmp$2 = len - 1 | 0;
  while (true) {
    const i = _tmp$2;
    if (i > 0) {
      moonbitlang$core$array$$ArrayView$swap$24$(arr, 0, i);
      moonbitlang$core$array$$sift_down$24$(moonbitlang$core$array$$ArrayView$op_as_view$24$(arr, 0, i), 0);
      _tmp$2 = i - 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$heap_sort$25$(arr) {
  const len = arr.len;
  let _tmp = (len / 2 | 0) - 1 | 0;
  while (true) {
    const i = _tmp;
    if (i >= 0) {
      moonbitlang$core$array$$sift_down$25$(arr, i);
      _tmp = i - 1 | 0;
      continue;
    } else {
      break;
    }
  }
  let _tmp$2 = len - 1 | 0;
  while (true) {
    const i = _tmp$2;
    if (i > 0) {
      moonbitlang$core$array$$ArrayView$swap$25$(arr, 0, i);
      moonbitlang$core$array$$sift_down$25$(moonbitlang$core$array$$ArrayView$op_as_view$25$(arr, 0, i), 0);
      _tmp$2 = i - 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$minimum(x, y) {
  return x > y ? y : x;
}
function moonbitlang$core$array$$partition$24$(arr, pivot_index) {
  moonbitlang$core$array$$ArrayView$swap$24$(arr, pivot_index, arr.len - 1 | 0);
  const pivot = moonbitlang$core$array$$ArrayView$op_get$24$(arr, arr.len - 1 | 0);
  let i = 0;
  let partitioned = true;
  const _end1023 = arr.len - 1 | 0;
  let _tmp = 0;
  while (true) {
    const j = _tmp;
    if (j < _end1023) {
      if (moonbitlang$core$builtin$$op_lt$24$(moonbitlang$core$array$$ArrayView$op_get$24$(arr, j), pivot)) {
        if (i !== j) {
          moonbitlang$core$array$$ArrayView$swap$24$(arr, i, j);
          partitioned = false;
        }
        i = i + 1 | 0;
      }
      _tmp = j + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$array$$ArrayView$swap$24$(arr, i, arr.len - 1 | 0);
  return { _0: i, _1: partitioned };
}
function moonbitlang$core$array$$partition$25$(arr, pivot_index) {
  moonbitlang$core$array$$ArrayView$swap$25$(arr, pivot_index, arr.len - 1 | 0);
  const pivot = moonbitlang$core$array$$ArrayView$op_get$25$(arr, arr.len - 1 | 0);
  let i = 0;
  let partitioned = true;
  const _end1023 = arr.len - 1 | 0;
  let _tmp = 0;
  while (true) {
    const j = _tmp;
    if (j < _end1023) {
      if (moonbitlang$core$builtin$$op_lt$25$(moonbitlang$core$array$$ArrayView$op_get$25$(arr, j), pivot)) {
        if (i !== j) {
          moonbitlang$core$array$$ArrayView$swap$25$(arr, i, j);
          partitioned = false;
        }
        i = i + 1 | 0;
      }
      _tmp = j + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$array$$ArrayView$swap$25$(arr, i, arr.len - 1 | 0);
  return { _0: i, _1: partitioned };
}
function moonbitlang$core$array$$try_bubble_sort$24$(arr) {
  let tries = 0;
  const _end1038 = arr.len;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < _end1038) {
      let sorted = true;
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && moonbitlang$core$builtin$$op_gt$24$(moonbitlang$core$array$$ArrayView$op_get$24$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$24$(arr, j))) {
          sorted = false;
          moonbitlang$core$array$$ArrayView$swap$24$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      if (!sorted) {
        tries = tries + 1 | 0;
        if (tries > 8) {
          return false;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return true;
}
function moonbitlang$core$array$$try_bubble_sort$25$(arr) {
  let tries = 0;
  const _end1038 = arr.len;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < _end1038) {
      let sorted = true;
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && moonbitlang$core$builtin$$op_gt$25$(moonbitlang$core$array$$ArrayView$op_get$25$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$25$(arr, j))) {
          sorted = false;
          moonbitlang$core$array$$ArrayView$swap$25$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      if (!sorted) {
        tries = tries + 1 | 0;
        if (tries > 8) {
          return false;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return true;
}
function moonbitlang$core$array$$ArrayView$insertion_sort$24$(arr) {
  const _end1029 = arr.len;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < _end1029) {
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && moonbitlang$core$builtin$$op_gt$24$(moonbitlang$core$array$$ArrayView$op_get$24$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$24$(arr, j))) {
          moonbitlang$core$array$$ArrayView$swap$24$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$ArrayView$insertion_sort$25$(arr) {
  const _end1029 = arr.len;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < _end1029) {
      let _tmp$2 = i;
      while (true) {
        const j = _tmp$2;
        if (j > 0 && moonbitlang$core$builtin$$op_gt$25$(moonbitlang$core$array$$ArrayView$op_get$25$(arr, j - 1 | 0), moonbitlang$core$array$$ArrayView$op_get$25$(arr, j))) {
          moonbitlang$core$array$$ArrayView$swap$25$(arr, j, j - 1 | 0);
          _tmp$2 = j - 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$quick_sort$24$(arr, pred, limit) {
  let limit$2 = limit;
  let arr$2 = arr;
  let pred$2 = pred;
  let was_partitioned = true;
  let balanced = true;
  while (true) {
    const _p = arr$2;
    const len = _p.len;
    if (len <= 16) {
      if (len >= 2) {
        moonbitlang$core$array$$ArrayView$insertion_sort$24$(arr$2);
      }
      return undefined;
    }
    if (limit$2 === 0) {
      moonbitlang$core$array$$heap_sort$24$(arr$2);
      return undefined;
    }
    const _bind = moonbitlang$core$array$$choose_pivot$24$(arr$2);
    const _pivot_index = _bind._0;
    const _likely_sorted = _bind._1;
    if (was_partitioned && (balanced && _likely_sorted)) {
      if (moonbitlang$core$array$$try_bubble_sort$24$(arr$2)) {
        return undefined;
      }
    }
    const _bind$2 = moonbitlang$core$array$$partition$24$(arr$2, _pivot_index);
    const _pivot = _bind$2._0;
    const _partitioned = _bind$2._1;
    was_partitioned = _partitioned;
    balanced = moonbitlang$core$array$$minimum(_pivot, len - _pivot | 0) >= (len / 8 | 0);
    if (!balanced) {
      limit$2 = limit$2 - 1 | 0;
    }
    const _bind$3 = pred$2;
    if (_bind$3 === undefined) {
    } else {
      const _Some = _bind$3;
      const _pred = _Some;
      if (moonbitlang$core$builtin$$Eq$op_equal$35$(_pred, moonbitlang$core$array$$ArrayView$op_get$24$(arr$2, _pivot))) {
        let i = _pivot;
        while (true) {
          if (i < len && moonbitlang$core$builtin$$Eq$op_equal$35$(_pred, moonbitlang$core$array$$ArrayView$op_get$24$(arr$2, i))) {
            i = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        arr$2 = moonbitlang$core$array$$ArrayView$op_as_view$24$(arr$2, i, len);
        continue;
      }
    }
    const left = moonbitlang$core$array$$ArrayView$op_as_view$24$(arr$2, 0, _pivot);
    const right = moonbitlang$core$array$$ArrayView$op_as_view$24$(arr$2, _pivot + 1 | 0, len);
    if (left.len < right.len) {
      moonbitlang$core$array$$quick_sort$24$(left, pred$2, limit$2);
      pred$2 = moonbitlang$core$array$$ArrayView$op_get$24$(arr$2, _pivot);
      arr$2 = right;
    } else {
      moonbitlang$core$array$$quick_sort$24$(right, moonbitlang$core$array$$ArrayView$op_get$24$(arr$2, _pivot), limit$2);
      arr$2 = left;
    }
    continue;
  }
}
function moonbitlang$core$array$$quick_sort$25$(arr, pred, limit) {
  let limit$2 = limit;
  let arr$2 = arr;
  let pred$2 = pred;
  let was_partitioned = true;
  let balanced = true;
  while (true) {
    const _p = arr$2;
    const len = _p.len;
    if (len <= 16) {
      if (len >= 2) {
        moonbitlang$core$array$$ArrayView$insertion_sort$25$(arr$2);
      }
      return undefined;
    }
    if (limit$2 === 0) {
      moonbitlang$core$array$$heap_sort$25$(arr$2);
      return undefined;
    }
    const _bind = moonbitlang$core$array$$choose_pivot$25$(arr$2);
    const _pivot_index = _bind._0;
    const _likely_sorted = _bind._1;
    if (was_partitioned && (balanced && _likely_sorted)) {
      if (moonbitlang$core$array$$try_bubble_sort$25$(arr$2)) {
        return undefined;
      }
    }
    const _bind$2 = moonbitlang$core$array$$partition$25$(arr$2, _pivot_index);
    const _pivot = _bind$2._0;
    const _partitioned = _bind$2._1;
    was_partitioned = _partitioned;
    balanced = moonbitlang$core$array$$minimum(_pivot, len - _pivot | 0) >= (len / 8 | 0);
    if (!balanced) {
      limit$2 = limit$2 - 1 | 0;
    }
    const _bind$3 = pred$2;
    if (_bind$3 === undefined) {
    } else {
      const _Some = _bind$3;
      const _pred = _Some;
      if (moonbitlang$core$builtin$$Eq$op_equal$25$(_pred, moonbitlang$core$array$$ArrayView$op_get$25$(arr$2, _pivot))) {
        let i = _pivot;
        while (true) {
          if (i < len && moonbitlang$core$builtin$$Eq$op_equal$25$(_pred, moonbitlang$core$array$$ArrayView$op_get$25$(arr$2, i))) {
            i = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        arr$2 = moonbitlang$core$array$$ArrayView$op_as_view$25$(arr$2, i, len);
        continue;
      }
    }
    const left = moonbitlang$core$array$$ArrayView$op_as_view$25$(arr$2, 0, _pivot);
    const right = moonbitlang$core$array$$ArrayView$op_as_view$25$(arr$2, _pivot + 1 | 0, len);
    if (left.len < right.len) {
      moonbitlang$core$array$$quick_sort$25$(left, pred$2, limit$2);
      pred$2 = moonbitlang$core$array$$ArrayView$op_get$25$(arr$2, _pivot);
      arr$2 = right;
    } else {
      moonbitlang$core$array$$quick_sort$25$(right, moonbitlang$core$array$$ArrayView$op_get$25$(arr$2, _pivot), limit$2);
      arr$2 = left;
    }
    continue;
  }
}
function moonbitlang$core$array$$Array$sort$24$(self) {
  const len = self.length;
  moonbitlang$core$array$$quick_sort$24$(moonbitlang$core$array$$Array$op_as_view$24$(self, 0, len), undefined, moonbitlang$core$array$$get_limit(len));
}
function moonbitlang$core$array$$Array$sort$25$(self) {
  const len = self.length;
  moonbitlang$core$array$$quick_sort$25$(moonbitlang$core$array$$Array$op_as_view$25$(self, 0, len), undefined, moonbitlang$core$array$$get_limit(len));
}
function moonbitlang$core$array$$ArrayView$iter$0$(self) {
  const _p = (yield_) => {
    const _len = self.len;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self.buf[self.start + _i | 0];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$makei$36$(length, value) {
  if (length <= 0) {
    return [];
  } else {
    const array = moonbitlang$core$array$$Array$make$36$(length, value(0));
    let _tmp = 1;
    while (true) {
      const i = _tmp;
      if (i < length) {
        moonbitlang$core$array$$Array$op_set$36$(array, i, value(i));
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return array;
  }
}
function moonbitlang$core$array$$Array$push_iter$0$(self, iter) {
  iter((x) => {
    moonbitlang$core$array$$Array$push$0$(self, x);
    return 1;
  });
}
function moonbitlang$core$array$$Array$push_iter$37$(self, iter) {
  iter((x) => {
    moonbitlang$core$array$$Array$push$37$(self, x);
    return 1;
  });
}
function moonbitlang$core$array$$Array$push_iter$38$(self, iter) {
  iter((x) => {
    moonbitlang$core$array$$Array$push$38$(self, x);
    return 1;
  });
}
function moonbitlang$core$array$$Array$last$39$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const _last = self[self.length - 1 | 0];
    return _last;
  }
}
function moonbitlang$core$array$$Array$join(self, separator) {
  if (self.length === 0) {
    return "";
  } else {
    const _hd = self[0];
    const _x = moonbitlang$core$array$$Array$op_as_view$0$(self, 1, self.length);
    let size_hint = _hd.length;
    const _len = _x.len;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const s = _x.buf[_x.start + _i | 0];
        size_hint = size_hint + (s.length + separator.length | 0) | 0;
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    size_hint = size_hint << 1;
    const buf = moonbitlang$core$builtin$$StringBuilder$new(size_hint);
    moonbitlang$core$builtin$$Logger$write_string$40$(buf, _hd);
    if (separator === "") {
      const _len$2 = _x.len;
      let _tmp$2 = 0;
      while (true) {
        const _i = _tmp$2;
        if (_i < _len$2) {
          const s = _x.buf[_x.start + _i | 0];
          moonbitlang$core$builtin$$Logger$write_string$40$(buf, s);
          _tmp$2 = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
    } else {
      const _len$2 = _x.len;
      let _tmp$2 = 0;
      while (true) {
        const _i = _tmp$2;
        if (_i < _len$2) {
          const s = _x.buf[_x.start + _i | 0];
          moonbitlang$core$builtin$$Logger$write_string$40$(buf, separator);
          moonbitlang$core$builtin$$Logger$write_string$40$(buf, s);
          _tmp$2 = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
    }
    return buf.val;
  }
}
function moonbitlang$core$sorted_set$$new$41$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_set$$new$42$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_set$$new$7$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_set$$height$41$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_set$$height$42$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_set$$height$7$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_set$$height_ge$41$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_set$$height_ge$42$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_set$$height_ge$7$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_set$$max(x, y) {
  return x > y ? x : y;
}
function moonbitlang$core$sorted_set$$Node$update_height$41$(self) {
  self.height = 1 + moonbitlang$core$sorted_set$$max(moonbitlang$core$sorted_set$$height$41$(self.left), moonbitlang$core$sorted_set$$height$41$(self.right)) | 0;
}
function moonbitlang$core$sorted_set$$Node$update_height$42$(self) {
  self.height = 1 + moonbitlang$core$sorted_set$$max(moonbitlang$core$sorted_set$$height$42$(self.left), moonbitlang$core$sorted_set$$height$42$(self.right)) | 0;
}
function moonbitlang$core$sorted_set$$Node$update_height$7$(self) {
  self.height = 1 + moonbitlang$core$sorted_set$$max(moonbitlang$core$sorted_set$$height$7$(self.left), moonbitlang$core$sorted_set$$height$7$(self.right)) | 0;
}
function moonbitlang$core$sorted_set$$rotate_l$41$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$43$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_set$$Node$update_height$41$(n);
  moonbitlang$core$sorted_set$$Node$update_height$41$(r);
  return r;
}
function moonbitlang$core$sorted_set$$rotate_l$42$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$44$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_set$$Node$update_height$42$(n);
  moonbitlang$core$sorted_set$$Node$update_height$42$(r);
  return r;
}
function moonbitlang$core$sorted_set$$rotate_l$7$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$45$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_set$$Node$update_height$7$(n);
  moonbitlang$core$sorted_set$$Node$update_height$7$(r);
  return r;
}
function moonbitlang$core$sorted_set$$rotate_r$41$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$43$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_set$$Node$update_height$41$(n);
  moonbitlang$core$sorted_set$$Node$update_height$41$(l);
  return l;
}
function moonbitlang$core$sorted_set$$rotate_r$42$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$44$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_set$$Node$update_height$42$(n);
  moonbitlang$core$sorted_set$$Node$update_height$42$(l);
  return l;
}
function moonbitlang$core$sorted_set$$rotate_r$7$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$45$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_set$$Node$update_height$7$(n);
  moonbitlang$core$sorted_set$$Node$update_height$7$(l);
  return l;
}
function moonbitlang$core$sorted_set$$rotate_lr$41$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$43$(n.left);
  const v = moonbitlang$core$sorted_set$$rotate_l$41$(l);
  n.left = v;
  return moonbitlang$core$sorted_set$$rotate_r$41$(n);
}
function moonbitlang$core$sorted_set$$rotate_lr$42$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$44$(n.left);
  const v = moonbitlang$core$sorted_set$$rotate_l$42$(l);
  n.left = v;
  return moonbitlang$core$sorted_set$$rotate_r$42$(n);
}
function moonbitlang$core$sorted_set$$rotate_lr$7$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$45$(n.left);
  const v = moonbitlang$core$sorted_set$$rotate_l$7$(l);
  n.left = v;
  return moonbitlang$core$sorted_set$$rotate_r$7$(n);
}
function moonbitlang$core$sorted_set$$rotate_rl$41$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$43$(n.right);
  const v = moonbitlang$core$sorted_set$$rotate_r$41$(r);
  n.right = v;
  return moonbitlang$core$sorted_set$$rotate_l$41$(n);
}
function moonbitlang$core$sorted_set$$rotate_rl$42$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$44$(n.right);
  const v = moonbitlang$core$sorted_set$$rotate_r$42$(r);
  n.right = v;
  return moonbitlang$core$sorted_set$$rotate_l$42$(n);
}
function moonbitlang$core$sorted_set$$rotate_rl$7$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$45$(n.right);
  const v = moonbitlang$core$sorted_set$$rotate_r$7$(r);
  n.right = v;
  return moonbitlang$core$sorted_set$$rotate_l$7$(n);
}
function moonbitlang$core$sorted_set$$balance$41$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_set$$height$41$(l);
  const hr = moonbitlang$core$sorted_set$$height$41$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$43$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_set$$height_ge$41$(_ll, _lr) ? moonbitlang$core$sorted_set$$rotate_r$41$(root) : moonbitlang$core$sorted_set$$rotate_lr$41$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$43$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_set$$height_ge$41$(_rr, _rl) ? moonbitlang$core$sorted_set$$rotate_l$41$(root) : moonbitlang$core$sorted_set$$rotate_rl$41$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_set$$Node$update_height$41$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_set$$balance$42$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_set$$height$42$(l);
  const hr = moonbitlang$core$sorted_set$$height$42$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$44$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_set$$height_ge$42$(_ll, _lr) ? moonbitlang$core$sorted_set$$rotate_r$42$(root) : moonbitlang$core$sorted_set$$rotate_lr$42$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$44$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_set$$height_ge$42$(_rr, _rl) ? moonbitlang$core$sorted_set$$rotate_l$42$(root) : moonbitlang$core$sorted_set$$rotate_rl$42$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_set$$Node$update_height$42$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_set$$balance$7$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_set$$height$7$(l);
  const hr = moonbitlang$core$sorted_set$$height$7$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$45$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_set$$height_ge$7$(_ll, _lr) ? moonbitlang$core$sorted_set$$rotate_r$7$(root) : moonbitlang$core$sorted_set$$rotate_lr$7$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$45$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_set$$height_ge$7$(_rr, _rl) ? moonbitlang$core$sorted_set$$rotate_l$7$(root) : moonbitlang$core$sorted_set$$rotate_rl$7$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_set$$Node$update_height$7$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_set$$new_node$41$(value, left, right, height) {
  return { value: value, left: left, right: right, height: height };
}
function moonbitlang$core$sorted_set$$new_node$42$(value, left, right, height) {
  return { value: value, left: left, right: right, height: height };
}
function moonbitlang$core$sorted_set$$new_node$7$(value, left, right, height) {
  return { value: value, left: left, right: right, height: height };
}
function moonbitlang$core$sorted_set$$add_node$41$(root, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_set$$new_node$41$(value, undefined, undefined, 1), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    const comp = moonbitlang$core$builtin$$Compare$compare$41$(value, _n.value);
    if (comp === 0) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (comp < 0) {
        const _bind = moonbitlang$core$sorted_set$$add_node$41$(l, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_set$$balance$41$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_set$$add_node$41$(r, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_set$$balance$41$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_set$$add_node$42$(root, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_set$$new_node$42$(value, undefined, undefined, 1), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    const comp = moonbitlang$core$builtin$$Compare$compare$46$(value, _n.value);
    if (comp === 0) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (comp < 0) {
        const _bind = moonbitlang$core$sorted_set$$add_node$42$(l, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_set$$balance$42$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_set$$add_node$42$(r, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_set$$balance$42$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_set$$add_node$7$(root, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_set$$new_node$7$(value, undefined, undefined, 1), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    const comp = $compare_int(value, _n.value);
    if (comp === 0) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (comp < 0) {
        const _bind = moonbitlang$core$sorted_set$$add_node$7$(l, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_set$$balance$7$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_set$$add_node$7$(r, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_set$$balance$7$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_set$$T$add$41$(self, value) {
  const _bind = moonbitlang$core$sorted_set$$add_node$41$(self.root, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$47$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_set$$T$add$42$(self, value) {
  const _bind = moonbitlang$core$sorted_set$$add_node$42$(self.root, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$48$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_set$$T$add$7$(self, value) {
  const _bind = moonbitlang$core$sorted_set$$add_node$7$(self.root, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$49$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_set$$to_array$46$dfs$47$410(_env, root) {
  const arr = _env._1;
  const i = _env._0;
  let _tmp = root;
  while (true) {
    const root$2 = _tmp;
    if (root$2 === undefined) {
      return;
    } else {
      const _Some = root$2;
      const _root = _Some;
      moonbitlang$core$sorted_set$$to_array$46$dfs$47$410(_env, _root.left);
      moonbitlang$core$array$$Array$op_set$7$(arr, i.val, _root.value);
      i.val = i.val + 1 | 0;
      _tmp = _root.right;
      continue;
    }
  }
}
function moonbitlang$core$sorted_set$$T$to_array$7$(self) {
  if (self.size === 0) {
    return [];
  } else {
    const padding = moonbitlang$core$option$$Option$unwrap$45$(self.root).value;
    const arr = moonbitlang$core$array$$Array$make$7$(self.size, padding);
    const i = { val: 0 };
    const _env = { _0: i, _1: arr };
    moonbitlang$core$sorted_set$$to_array$46$dfs$47$410(_env, self.root);
    return arr;
  }
}
function moonbitlang$core$sorted_set$$iter$46$go$47$424(yield_, x) {
  let _tmp = x;
  while (true) {
    const x$2 = _tmp;
    if (x$2 === undefined) {
      return 1;
    } else {
      const _Some = x$2;
      const _x = _Some;
      const _left = _x.left;
      const _right = _x.right;
      const _value = _x.value;
      const _bind = moonbitlang$core$sorted_set$$iter$46$go$47$424(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_set$$T$iter$41$(self) {
  const _p = (yield_) => moonbitlang$core$sorted_set$$iter$46$go$47$424(yield_, self.root);
  return _p;
}
function moonbitlang$core$sorted_set$$iter$46$go$47$438(yield_, x) {
  let _tmp = x;
  while (true) {
    const x$2 = _tmp;
    if (x$2 === undefined) {
      return 1;
    } else {
      const _Some = x$2;
      const _x = _Some;
      const _left = _x.left;
      const _right = _x.right;
      const _value = _x.value;
      const _bind = moonbitlang$core$sorted_set$$iter$46$go$47$438(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_set$$T$iter$42$(self) {
  const _p = (yield_) => moonbitlang$core$sorted_set$$iter$46$go$47$438(yield_, self.root);
  return _p;
}
function moonbitlang$core$sorted_set$$iter$46$go$47$452(yield_, x) {
  let _tmp = x;
  while (true) {
    const x$2 = _tmp;
    if (x$2 === undefined) {
      return 1;
    } else {
      const _Some = x$2;
      const _x = _Some;
      const _left = _x.left;
      const _right = _x.right;
      const _value = _x.value;
      const _bind = moonbitlang$core$sorted_set$$iter$46$go$47$452(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_set$$T$iter$7$(self) {
  const _p = (yield_) => moonbitlang$core$sorted_set$$iter$46$go$47$452(yield_, self.root);
  return _p;
}
function moonbitlang$core$sorted_set$$from_iter$7$(iter) {
  const s = moonbitlang$core$sorted_set$$new$7$();
  iter((_p) => {
    moonbitlang$core$sorted_set$$T$add$7$(s, _p);
    return 1;
  });
  return s;
}
function moonbitlang$core$builtin$$Eq$op_equal$50$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$41$(self.value, other.value);
}
function moonbitlang$core$builtin$$Eq$op_equal$51$(self, other) {
  const _p = self.value;
  const _p$2 = other.value;
  return _p._0 === _p$2._0 && _p._1 === _p$2._1;
}
function moonbitlang$core$set$$power_2_above(x, n) {
  let _tmp = x;
  while (true) {
    const i = _tmp;
    if (i >= n) {
      return i;
    }
    const next = i << 1;
    if (next < 0) {
      return i;
    }
    _tmp = next;
    continue;
  }
}
function moonbitlang$core$set$$Set$new$52$(capacity) {
  const capacity$2 = moonbitlang$core$set$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = $make_array_len_and_init(capacity$2, { prev: undefined, next: undefined });
  const _bind$5 = undefined;
  const _bind$6 = undefined;
  return { entries: _bind$3, list: _bind$4, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$5, tail: _bind$6 };
}
function moonbitlang$core$set$$Set$add_entry_to_tail$52$(self, entry) {
  const _bind = self.tail;
  if (_bind === undefined) {
    self.head = entry;
    self.tail = entry;
    return;
  } else {
    const _Some = _bind;
    const _tail = _Some;
    const _tmp = self.list;
    const _tmp$2 = _tail.idx;
    $bound_check(_tmp, _tmp$2);
    _tmp[_tmp$2].next = entry;
    const _tmp$3 = self.list;
    const _tmp$4 = entry.idx;
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4].prev = _tail;
    self.tail = entry;
    return;
  }
}
function moonbitlang$core$set$$Set$add$52$(self, key) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$set$$Set$grow$52$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$53$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const entry = _tmp$3;
    const node = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, idx);
    const _bind = _tmp$5[idx];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, idx);
      _tmp$6[idx] = entry;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, idx);
      _tmp$7[idx] = node;
      entry.idx = idx;
      moonbitlang$core$set$$Set$add_entry_to_tail$52$(self, insert_entry);
      self.size = self.size + 1 | 0;
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === entry.hash && moonbitlang$core$builtin$$Eq$op_equal$54$(_curr_entry.key, entry.key)) {
        break;
      }
      if (entry.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, idx);
        _tmp$8[idx] = entry;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, idx);
        _tmp$9[idx] = node;
        entry.idx = idx;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = i + 1 | 0;
        const _tmp$11 = idx + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        entry.psl = entry.psl + 1 | 0;
        const _tmp$8 = i + 1 | 0;
        const _tmp$9 = idx + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$set$$Set$grow$52$(self) {
  const old_head = self.head;
  const old_list = self.list;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.list = $make_array_len_and_init(new_capacity, { prev: undefined, next: undefined });
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = undefined;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _idx = _x.idx;
      const _key = _x.key;
      moonbitlang$core$set$$Set$add$52$(self, _key);
      $bound_check(old_list, _idx);
      _tmp = old_list[_idx].next;
      continue;
    }
  }
}
function moonbitlang$core$set$$Set$add_and_check$52$(self, key) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$set$$Set$grow$52$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$53$(key);
  const insert_entry = { idx: -1, psl: 0, hash: hash, key: key };
  const list_node = { prev: undefined, next: undefined };
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  let _tmp$3 = insert_entry;
  let _tmp$4 = list_node;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const entry = _tmp$3;
    const node = _tmp$4;
    const _tmp$5 = self.entries;
    $bound_check(_tmp$5, idx);
    const _bind = _tmp$5[idx];
    if (_bind === undefined) {
      const _tmp$6 = self.entries;
      $bound_check(_tmp$6, idx);
      _tmp$6[idx] = entry;
      const _tmp$7 = self.list;
      $bound_check(_tmp$7, idx);
      _tmp$7[idx] = node;
      entry.idx = idx;
      moonbitlang$core$set$$Set$add_entry_to_tail$52$(self, insert_entry);
      self.size = self.size + 1 | 0;
      return true;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      const _tmp$6 = self.list;
      const _tmp$7 = _curr_entry.idx;
      $bound_check(_tmp$6, _tmp$7);
      const curr_node = _tmp$6[_tmp$7];
      if (_curr_entry.hash === entry.hash && moonbitlang$core$builtin$$Eq$op_equal$54$(_curr_entry.key, entry.key)) {
        return false;
      }
      if (entry.psl > _curr_entry.psl) {
        const _tmp$8 = self.entries;
        $bound_check(_tmp$8, idx);
        _tmp$8[idx] = entry;
        const _tmp$9 = self.list;
        $bound_check(_tmp$9, idx);
        _tmp$9[idx] = node;
        entry.idx = idx;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$10 = i + 1 | 0;
        const _tmp$11 = idx + 1 & self.capacity_mask;
        _tmp = _tmp$10;
        _tmp$2 = _tmp$11;
        _tmp$3 = _curr_entry;
        _tmp$4 = curr_node;
        continue;
      } else {
        entry.psl = entry.psl + 1 | 0;
        const _tmp$8 = i + 1 | 0;
        const _tmp$9 = idx + 1 & self.capacity_mask;
        _tmp = _tmp$8;
        _tmp$2 = _tmp$9;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$size$7$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    const _size = _Node._2;
    return _size;
  }
}
function moonbitlang$core$immut$sorted_set$$T$size$18$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    const _size = _Node._2;
    return _size;
  }
}
function moonbitlang$core$immut$sorted_set$$T$size$55$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    const _size = _Node._2;
    return _size;
  }
}
function moonbitlang$core$immut$sorted_set$$T$size$56$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    const _size = _Node._2;
    return _size;
  }
}
function moonbitlang$core$immut$sorted_set$$T$size$28$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    const _size = _Node._2;
    return _size;
  }
}
function moonbitlang$core$immut$sorted_set$$T$size$57$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    const _size = _Node._2;
    return _size;
  }
}
function moonbitlang$core$immut$sorted_set$$create$7$(left, value, right) {
  return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$2$(left, right, (moonbitlang$core$immut$sorted_set$$T$size$7$(left) + moonbitlang$core$immut$sorted_set$$T$size$7$(right) | 0) + 1 | 0, value);
}
function moonbitlang$core$immut$sorted_set$$create$18$(left, value, right) {
  return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$3$(left, right, (moonbitlang$core$immut$sorted_set$$T$size$18$(left) + moonbitlang$core$immut$sorted_set$$T$size$18$(right) | 0) + 1 | 0, value);
}
function moonbitlang$core$immut$sorted_set$$create$55$(left, value, right) {
  return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$4$(left, right, (moonbitlang$core$immut$sorted_set$$T$size$55$(left) + moonbitlang$core$immut$sorted_set$$T$size$55$(right) | 0) + 1 | 0, value);
}
function moonbitlang$core$immut$sorted_set$$create$56$(left, value, right) {
  return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$6$(left, right, (moonbitlang$core$immut$sorted_set$$T$size$56$(left) + moonbitlang$core$immut$sorted_set$$T$size$56$(right) | 0) + 1 | 0, value);
}
function moonbitlang$core$immut$sorted_set$$create$28$(left, value, right) {
  return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$7$(left, right, (moonbitlang$core$immut$sorted_set$$T$size$28$(left) + moonbitlang$core$immut$sorted_set$$T$size$28$(right) | 0) + 1 | 0, value);
}
function moonbitlang$core$immut$sorted_set$$create$57$(left, value, right) {
  return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$5$(left, right, (moonbitlang$core$immut$sorted_set$$T$size$57$(left) + moonbitlang$core$immut$sorted_set$$T$size$57$(right) | 0) + 1 | 0, value);
}
function moonbitlang$core$immut$sorted_set$$balance$7$(left, value, right) {
  const left_size = moonbitlang$core$immut$sorted_set$$T$size$7$(left);
  const right_size = moonbitlang$core$immut$sorted_set$$T$size$7$(right);
  if ((left_size + right_size | 0) < 2) {
    return moonbitlang$core$immut$sorted_set$$create$7$(left, value, right);
  } else {
    if (left_size > (Math.imul(right_size, 5) | 0)) {
      if (left.$tag === 0) {
        return moonbitlang$core$abort$$abort$18$("balance: left is empty.");
      } else {
        const _Node = left;
        const _ll = _Node._0;
        const _lv = _Node._3;
        const _lr = _Node._1;
        if (moonbitlang$core$immut$sorted_set$$T$size$7$(_ll) >= moonbitlang$core$immut$sorted_set$$T$size$7$(_lr)) {
          return moonbitlang$core$immut$sorted_set$$create$7$(_ll, _lv, moonbitlang$core$immut$sorted_set$$create$7$(_lr, value, right));
        } else {
          if (_lr.$tag === 0) {
            return moonbitlang$core$abort$$abort$18$("balance: right left.right is empty.");
          } else {
            const _Node$2 = _lr;
            const _lrl = _Node$2._0;
            const _lrv = _Node$2._3;
            const _lrr = _Node$2._1;
            return moonbitlang$core$immut$sorted_set$$create$7$(moonbitlang$core$immut$sorted_set$$create$7$(_ll, _lv, _lrl), _lrv, moonbitlang$core$immut$sorted_set$$create$7$(_lrr, value, right));
          }
        }
      }
    } else {
      if (right_size > (Math.imul(left_size, 5) | 0)) {
        if (right.$tag === 0) {
          return moonbitlang$core$abort$$abort$18$("balance: right is empty");
        } else {
          const _Node = right;
          const _rl = _Node._0;
          const _rv = _Node._3;
          const _rr = _Node._1;
          if (moonbitlang$core$immut$sorted_set$$T$size$7$(_rr) >= moonbitlang$core$immut$sorted_set$$T$size$7$(_rl)) {
            return moonbitlang$core$immut$sorted_set$$create$7$(moonbitlang$core$immut$sorted_set$$create$7$(left, value, _rl), _rv, _rr);
          } else {
            if (_rl.$tag === 0) {
              return moonbitlang$core$abort$$abort$18$("balance: right.left is empty");
            } else {
              const _Node$2 = _rl;
              const _rll = _Node$2._0;
              const _rlv = _Node$2._3;
              const _rlr = _Node$2._1;
              return moonbitlang$core$immut$sorted_set$$create$7$(moonbitlang$core$immut$sorted_set$$create$7$(left, value, _rll), _rlv, moonbitlang$core$immut$sorted_set$$create$7$(_rlr, _rv, _rr));
            }
          }
        }
      } else {
        return moonbitlang$core$immut$sorted_set$$create$7$(left, value, right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$balance$18$(left, value, right) {
  const left_size = moonbitlang$core$immut$sorted_set$$T$size$18$(left);
  const right_size = moonbitlang$core$immut$sorted_set$$T$size$18$(right);
  if ((left_size + right_size | 0) < 2) {
    return moonbitlang$core$immut$sorted_set$$create$18$(left, value, right);
  } else {
    if (left_size > (Math.imul(right_size, 5) | 0)) {
      if (left.$tag === 0) {
        return moonbitlang$core$abort$$abort$19$("balance: left is empty.");
      } else {
        const _Node = left;
        const _ll = _Node._0;
        const _lv = _Node._3;
        const _lr = _Node._1;
        if (moonbitlang$core$immut$sorted_set$$T$size$18$(_ll) >= moonbitlang$core$immut$sorted_set$$T$size$18$(_lr)) {
          return moonbitlang$core$immut$sorted_set$$create$18$(_ll, _lv, moonbitlang$core$immut$sorted_set$$create$18$(_lr, value, right));
        } else {
          if (_lr.$tag === 0) {
            return moonbitlang$core$abort$$abort$19$("balance: right left.right is empty.");
          } else {
            const _Node$2 = _lr;
            const _lrl = _Node$2._0;
            const _lrv = _Node$2._3;
            const _lrr = _Node$2._1;
            return moonbitlang$core$immut$sorted_set$$create$18$(moonbitlang$core$immut$sorted_set$$create$18$(_ll, _lv, _lrl), _lrv, moonbitlang$core$immut$sorted_set$$create$18$(_lrr, value, right));
          }
        }
      }
    } else {
      if (right_size > (Math.imul(left_size, 5) | 0)) {
        if (right.$tag === 0) {
          return moonbitlang$core$abort$$abort$19$("balance: right is empty");
        } else {
          const _Node = right;
          const _rl = _Node._0;
          const _rv = _Node._3;
          const _rr = _Node._1;
          if (moonbitlang$core$immut$sorted_set$$T$size$18$(_rr) >= moonbitlang$core$immut$sorted_set$$T$size$18$(_rl)) {
            return moonbitlang$core$immut$sorted_set$$create$18$(moonbitlang$core$immut$sorted_set$$create$18$(left, value, _rl), _rv, _rr);
          } else {
            if (_rl.$tag === 0) {
              return moonbitlang$core$abort$$abort$19$("balance: right.left is empty");
            } else {
              const _Node$2 = _rl;
              const _rll = _Node$2._0;
              const _rlv = _Node$2._3;
              const _rlr = _Node$2._1;
              return moonbitlang$core$immut$sorted_set$$create$18$(moonbitlang$core$immut$sorted_set$$create$18$(left, value, _rll), _rlv, moonbitlang$core$immut$sorted_set$$create$18$(_rlr, _rv, _rr));
            }
          }
        }
      } else {
        return moonbitlang$core$immut$sorted_set$$create$18$(left, value, right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$balance$55$(left, value, right) {
  const left_size = moonbitlang$core$immut$sorted_set$$T$size$55$(left);
  const right_size = moonbitlang$core$immut$sorted_set$$T$size$55$(right);
  if ((left_size + right_size | 0) < 2) {
    return moonbitlang$core$immut$sorted_set$$create$55$(left, value, right);
  } else {
    if (left_size > (Math.imul(right_size, 5) | 0)) {
      if (left.$tag === 0) {
        return moonbitlang$core$abort$$abort$26$("balance: left is empty.");
      } else {
        const _Node = left;
        const _ll = _Node._0;
        const _lv = _Node._3;
        const _lr = _Node._1;
        if (moonbitlang$core$immut$sorted_set$$T$size$55$(_ll) >= moonbitlang$core$immut$sorted_set$$T$size$55$(_lr)) {
          return moonbitlang$core$immut$sorted_set$$create$55$(_ll, _lv, moonbitlang$core$immut$sorted_set$$create$55$(_lr, value, right));
        } else {
          if (_lr.$tag === 0) {
            return moonbitlang$core$abort$$abort$26$("balance: right left.right is empty.");
          } else {
            const _Node$2 = _lr;
            const _lrl = _Node$2._0;
            const _lrv = _Node$2._3;
            const _lrr = _Node$2._1;
            return moonbitlang$core$immut$sorted_set$$create$55$(moonbitlang$core$immut$sorted_set$$create$55$(_ll, _lv, _lrl), _lrv, moonbitlang$core$immut$sorted_set$$create$55$(_lrr, value, right));
          }
        }
      }
    } else {
      if (right_size > (Math.imul(left_size, 5) | 0)) {
        if (right.$tag === 0) {
          return moonbitlang$core$abort$$abort$26$("balance: right is empty");
        } else {
          const _Node = right;
          const _rl = _Node._0;
          const _rv = _Node._3;
          const _rr = _Node._1;
          if (moonbitlang$core$immut$sorted_set$$T$size$55$(_rr) >= moonbitlang$core$immut$sorted_set$$T$size$55$(_rl)) {
            return moonbitlang$core$immut$sorted_set$$create$55$(moonbitlang$core$immut$sorted_set$$create$55$(left, value, _rl), _rv, _rr);
          } else {
            if (_rl.$tag === 0) {
              return moonbitlang$core$abort$$abort$26$("balance: right.left is empty");
            } else {
              const _Node$2 = _rl;
              const _rll = _Node$2._0;
              const _rlv = _Node$2._3;
              const _rlr = _Node$2._1;
              return moonbitlang$core$immut$sorted_set$$create$55$(moonbitlang$core$immut$sorted_set$$create$55$(left, value, _rll), _rlv, moonbitlang$core$immut$sorted_set$$create$55$(_rlr, _rv, _rr));
            }
          }
        }
      } else {
        return moonbitlang$core$immut$sorted_set$$create$55$(left, value, right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$balance$56$(left, value, right) {
  const left_size = moonbitlang$core$immut$sorted_set$$T$size$56$(left);
  const right_size = moonbitlang$core$immut$sorted_set$$T$size$56$(right);
  if ((left_size + right_size | 0) < 2) {
    return moonbitlang$core$immut$sorted_set$$create$56$(left, value, right);
  } else {
    if (left_size > (Math.imul(right_size, 5) | 0)) {
      if (left.$tag === 0) {
        return moonbitlang$core$abort$$abort$29$("balance: left is empty.");
      } else {
        const _Node = left;
        const _ll = _Node._0;
        const _lv = _Node._3;
        const _lr = _Node._1;
        if (moonbitlang$core$immut$sorted_set$$T$size$56$(_ll) >= moonbitlang$core$immut$sorted_set$$T$size$56$(_lr)) {
          return moonbitlang$core$immut$sorted_set$$create$56$(_ll, _lv, moonbitlang$core$immut$sorted_set$$create$56$(_lr, value, right));
        } else {
          if (_lr.$tag === 0) {
            return moonbitlang$core$abort$$abort$29$("balance: right left.right is empty.");
          } else {
            const _Node$2 = _lr;
            const _lrl = _Node$2._0;
            const _lrv = _Node$2._3;
            const _lrr = _Node$2._1;
            return moonbitlang$core$immut$sorted_set$$create$56$(moonbitlang$core$immut$sorted_set$$create$56$(_ll, _lv, _lrl), _lrv, moonbitlang$core$immut$sorted_set$$create$56$(_lrr, value, right));
          }
        }
      }
    } else {
      if (right_size > (Math.imul(left_size, 5) | 0)) {
        if (right.$tag === 0) {
          return moonbitlang$core$abort$$abort$29$("balance: right is empty");
        } else {
          const _Node = right;
          const _rl = _Node._0;
          const _rv = _Node._3;
          const _rr = _Node._1;
          if (moonbitlang$core$immut$sorted_set$$T$size$56$(_rr) >= moonbitlang$core$immut$sorted_set$$T$size$56$(_rl)) {
            return moonbitlang$core$immut$sorted_set$$create$56$(moonbitlang$core$immut$sorted_set$$create$56$(left, value, _rl), _rv, _rr);
          } else {
            if (_rl.$tag === 0) {
              return moonbitlang$core$abort$$abort$29$("balance: right.left is empty");
            } else {
              const _Node$2 = _rl;
              const _rll = _Node$2._0;
              const _rlv = _Node$2._3;
              const _rlr = _Node$2._1;
              return moonbitlang$core$immut$sorted_set$$create$56$(moonbitlang$core$immut$sorted_set$$create$56$(left, value, _rll), _rlv, moonbitlang$core$immut$sorted_set$$create$56$(_rlr, _rv, _rr));
            }
          }
        }
      } else {
        return moonbitlang$core$immut$sorted_set$$create$56$(left, value, right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$balance$28$(left, value, right) {
  const left_size = moonbitlang$core$immut$sorted_set$$T$size$28$(left);
  const right_size = moonbitlang$core$immut$sorted_set$$T$size$28$(right);
  if ((left_size + right_size | 0) < 2) {
    return moonbitlang$core$immut$sorted_set$$create$28$(left, value, right);
  } else {
    if (left_size > (Math.imul(right_size, 5) | 0)) {
      if (left.$tag === 0) {
        return moonbitlang$core$abort$$abort$31$("balance: left is empty.");
      } else {
        const _Node = left;
        const _ll = _Node._0;
        const _lv = _Node._3;
        const _lr = _Node._1;
        if (moonbitlang$core$immut$sorted_set$$T$size$28$(_ll) >= moonbitlang$core$immut$sorted_set$$T$size$28$(_lr)) {
          return moonbitlang$core$immut$sorted_set$$create$28$(_ll, _lv, moonbitlang$core$immut$sorted_set$$create$28$(_lr, value, right));
        } else {
          if (_lr.$tag === 0) {
            return moonbitlang$core$abort$$abort$31$("balance: right left.right is empty.");
          } else {
            const _Node$2 = _lr;
            const _lrl = _Node$2._0;
            const _lrv = _Node$2._3;
            const _lrr = _Node$2._1;
            return moonbitlang$core$immut$sorted_set$$create$28$(moonbitlang$core$immut$sorted_set$$create$28$(_ll, _lv, _lrl), _lrv, moonbitlang$core$immut$sorted_set$$create$28$(_lrr, value, right));
          }
        }
      }
    } else {
      if (right_size > (Math.imul(left_size, 5) | 0)) {
        if (right.$tag === 0) {
          return moonbitlang$core$abort$$abort$31$("balance: right is empty");
        } else {
          const _Node = right;
          const _rl = _Node._0;
          const _rv = _Node._3;
          const _rr = _Node._1;
          if (moonbitlang$core$immut$sorted_set$$T$size$28$(_rr) >= moonbitlang$core$immut$sorted_set$$T$size$28$(_rl)) {
            return moonbitlang$core$immut$sorted_set$$create$28$(moonbitlang$core$immut$sorted_set$$create$28$(left, value, _rl), _rv, _rr);
          } else {
            if (_rl.$tag === 0) {
              return moonbitlang$core$abort$$abort$31$("balance: right.left is empty");
            } else {
              const _Node$2 = _rl;
              const _rll = _Node$2._0;
              const _rlv = _Node$2._3;
              const _rlr = _Node$2._1;
              return moonbitlang$core$immut$sorted_set$$create$28$(moonbitlang$core$immut$sorted_set$$create$28$(left, value, _rll), _rlv, moonbitlang$core$immut$sorted_set$$create$28$(_rlr, _rv, _rr));
            }
          }
        }
      } else {
        return moonbitlang$core$immut$sorted_set$$create$28$(left, value, right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$balance$57$(left, value, right) {
  const left_size = moonbitlang$core$immut$sorted_set$$T$size$57$(left);
  const right_size = moonbitlang$core$immut$sorted_set$$T$size$57$(right);
  if ((left_size + right_size | 0) < 2) {
    return moonbitlang$core$immut$sorted_set$$create$57$(left, value, right);
  } else {
    if (left_size > (Math.imul(right_size, 5) | 0)) {
      if (left.$tag === 0) {
        return moonbitlang$core$abort$$abort$32$("balance: left is empty.");
      } else {
        const _Node = left;
        const _ll = _Node._0;
        const _lv = _Node._3;
        const _lr = _Node._1;
        if (moonbitlang$core$immut$sorted_set$$T$size$57$(_ll) >= moonbitlang$core$immut$sorted_set$$T$size$57$(_lr)) {
          return moonbitlang$core$immut$sorted_set$$create$57$(_ll, _lv, moonbitlang$core$immut$sorted_set$$create$57$(_lr, value, right));
        } else {
          if (_lr.$tag === 0) {
            return moonbitlang$core$abort$$abort$32$("balance: right left.right is empty.");
          } else {
            const _Node$2 = _lr;
            const _lrl = _Node$2._0;
            const _lrv = _Node$2._3;
            const _lrr = _Node$2._1;
            return moonbitlang$core$immut$sorted_set$$create$57$(moonbitlang$core$immut$sorted_set$$create$57$(_ll, _lv, _lrl), _lrv, moonbitlang$core$immut$sorted_set$$create$57$(_lrr, value, right));
          }
        }
      }
    } else {
      if (right_size > (Math.imul(left_size, 5) | 0)) {
        if (right.$tag === 0) {
          return moonbitlang$core$abort$$abort$32$("balance: right is empty");
        } else {
          const _Node = right;
          const _rl = _Node._0;
          const _rv = _Node._3;
          const _rr = _Node._1;
          if (moonbitlang$core$immut$sorted_set$$T$size$57$(_rr) >= moonbitlang$core$immut$sorted_set$$T$size$57$(_rl)) {
            return moonbitlang$core$immut$sorted_set$$create$57$(moonbitlang$core$immut$sorted_set$$create$57$(left, value, _rl), _rv, _rr);
          } else {
            if (_rl.$tag === 0) {
              return moonbitlang$core$abort$$abort$32$("balance: right.left is empty");
            } else {
              const _Node$2 = _rl;
              const _rll = _Node$2._0;
              const _rlv = _Node$2._3;
              const _rlr = _Node$2._1;
              return moonbitlang$core$immut$sorted_set$$create$57$(moonbitlang$core$immut$sorted_set$$create$57$(left, value, _rll), _rlv, moonbitlang$core$immut$sorted_set$$create$57$(_rlr, _rv, _rr));
            }
          }
        }
      } else {
        return moonbitlang$core$immut$sorted_set$$create$57$(left, value, right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add$7$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$2$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = $compare_int(value, _node_value);
    if (compare_result === 0) {
      return self;
    } else {
      if (compare_result < 0) {
        const ll = moonbitlang$core$immut$sorted_set$$T$add$7$(_left, value);
        return _left === ll ? self : moonbitlang$core$immut$sorted_set$$balance$7$(ll, _node_value, _right);
      } else {
        const rr = moonbitlang$core$immut$sorted_set$$T$add$7$(_right, value);
        return _right === rr ? self : moonbitlang$core$immut$sorted_set$$balance$7$(_left, _node_value, rr);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add$18$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$3$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$3$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$3$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = moonbitlang$core$builtin$$Compare$compare$58$(value, _node_value);
    if (compare_result === 0) {
      return self;
    } else {
      if (compare_result < 0) {
        const ll = moonbitlang$core$immut$sorted_set$$T$add$18$(_left, value);
        return _left === ll ? self : moonbitlang$core$immut$sorted_set$$balance$18$(ll, _node_value, _right);
      } else {
        const rr = moonbitlang$core$immut$sorted_set$$T$add$18$(_right, value);
        return _right === rr ? self : moonbitlang$core$immut$sorted_set$$balance$18$(_left, _node_value, rr);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add$55$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$4$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = moonbitlang$core$builtin$$Compare$compare$55$(value, _node_value);
    if (compare_result === 0) {
      return self;
    } else {
      if (compare_result < 0) {
        const ll = moonbitlang$core$immut$sorted_set$$T$add$55$(_left, value);
        return _left === ll ? self : moonbitlang$core$immut$sorted_set$$balance$55$(ll, _node_value, _right);
      } else {
        const rr = moonbitlang$core$immut$sorted_set$$T$add$55$(_right, value);
        return _right === rr ? self : moonbitlang$core$immut$sorted_set$$balance$55$(_left, _node_value, rr);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add$56$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$6$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = moonbitlang$core$builtin$$Compare$compare$59$(value, _node_value);
    if (compare_result === 0) {
      return self;
    } else {
      if (compare_result < 0) {
        const ll = moonbitlang$core$immut$sorted_set$$T$add$56$(_left, value);
        return _left === ll ? self : moonbitlang$core$immut$sorted_set$$balance$56$(ll, _node_value, _right);
      } else {
        const rr = moonbitlang$core$immut$sorted_set$$T$add$56$(_right, value);
        return _right === rr ? self : moonbitlang$core$immut$sorted_set$$balance$56$(_left, _node_value, rr);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add$28$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$7$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$7$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$7$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = $compare_int(value.id, _node_value.id);
    if (compare_result === 0) {
      return self;
    } else {
      if (compare_result < 0) {
        const ll = moonbitlang$core$immut$sorted_set$$T$add$28$(_left, value);
        return _left === ll ? self : moonbitlang$core$immut$sorted_set$$balance$28$(ll, _node_value, _right);
      } else {
        const rr = moonbitlang$core$immut$sorted_set$$T$add$28$(_right, value);
        return _right === rr ? self : moonbitlang$core$immut$sorted_set$$balance$28$(_left, _node_value, rr);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add$57$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$5$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = moonbitlang$core$builtin$$Compare$compare$60$(value, _node_value);
    if (compare_result === 0) {
      return self;
    } else {
      if (compare_result < 0) {
        const ll = moonbitlang$core$immut$sorted_set$$T$add$57$(_left, value);
        return _left === ll ? self : moonbitlang$core$immut$sorted_set$$balance$57$(ll, _node_value, _right);
      } else {
        const rr = moonbitlang$core$immut$sorted_set$$T$add$57$(_right, value);
        return _right === rr ? self : moonbitlang$core$immut$sorted_set$$balance$57$(_left, _node_value, rr);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$from_array$7$(array) {
  let _tmp = array.length - 1 | 0;
  let _tmp$2 = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
  while (true) {
    const i = _tmp;
    const set = _tmp$2;
    if (i >= 0) {
      const _tmp$3 = i - 1 | 0;
      const _tmp$4 = moonbitlang$core$immut$sorted_set$$T$add$7$(set, moonbitlang$core$array$$Array$op_get$7$(array, i));
      _tmp = _tmp$3;
      _tmp$2 = _tmp$4;
      continue;
    } else {
      return set;
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$remove_min$18$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$19$("remove_min: empty ImmutableSet");
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _value = _Node._3;
    if (_left.$tag === 0) {
      return _right;
    } else {
      return moonbitlang$core$immut$sorted_set$$balance$18$(moonbitlang$core$immut$sorted_set$$T$remove_min$18$(_left), _value, _right);
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$remove_min$7$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$18$("remove_min: empty ImmutableSet");
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _value = _Node._3;
    if (_left.$tag === 0) {
      return _right;
    } else {
      return moonbitlang$core$immut$sorted_set$$balance$7$(moonbitlang$core$immut$sorted_set$$T$remove_min$7$(_left), _value, _right);
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$min$18$(self) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return moonbitlang$core$abort$$abort$18$("min: there are no values in sorted_set.");
    } else {
      const _Node = self$2;
      const _left = _Node._0;
      const _value = _Node._3;
      if (_left.$tag === 0) {
        return _value;
      } else {
        _tmp = _left;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$min$7$(self) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return moonbitlang$core$abort$$abort$7$("min: there are no values in sorted_set.");
    } else {
      const _Node = self$2;
      const _left = _Node._0;
      const _value = _Node._3;
      if (_left.$tag === 0) {
        return _value;
      } else {
        _tmp = _left;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$min$28$(self) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return moonbitlang$core$abort$$abort$28$("min: there are no values in sorted_set.");
    } else {
      const _Node = self$2;
      const _left = _Node._0;
      const _value = _Node._3;
      if (_left.$tag === 0) {
        return _value;
      } else {
        _tmp = _left;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$merge$18$(self, other) {
  if (self.$tag === 0) {
    return other;
  } else {
    if (other.$tag === 0) {
      return self;
    } else {
      return moonbitlang$core$immut$sorted_set$$balance$18$(self, moonbitlang$core$immut$sorted_set$$T$min$18$(other), moonbitlang$core$immut$sorted_set$$T$remove_min$18$(other));
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$remove$18$(self, value) {
  if (self.$tag === 0) {
    return $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$3$;
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _node_value = _Node._3;
    const compare_result = moonbitlang$core$builtin$$Compare$compare$58$(value, _node_value);
    if (compare_result === 0) {
      return moonbitlang$core$immut$sorted_set$$T$merge$18$(_left, _right);
    } else {
      if (compare_result < 0) {
        const new_left = moonbitlang$core$immut$sorted_set$$T$remove$18$(_left, value);
        return _left === new_left ? self : moonbitlang$core$immut$sorted_set$$balance$18$(new_left, _node_value, _right);
      } else {
        const new_right = moonbitlang$core$immut$sorted_set$$T$remove$18$(_right, value);
        return _right === new_right ? self : moonbitlang$core$immut$sorted_set$$balance$18$(_left, _node_value, new_right);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$max$28$(self) {
  let _tmp = self;
  while (true) {
    const self$2 = _tmp;
    if (self$2.$tag === 0) {
      return moonbitlang$core$abort$$abort$28$("max: there are no values in ImmutableSet.");
    } else {
      const _Node = self$2;
      const _right = _Node._1;
      const _value = _Node._3;
      if (_right.$tag === 0) {
        return _value;
      } else {
        _tmp = _right;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$add_max_value$7$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$2$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _node_value = _Node._3;
    const _right = _Node._1;
    return moonbitlang$core$immut$sorted_set$$balance$7$(_left, _node_value, moonbitlang$core$immut$sorted_set$$T$add_max_value$7$(_right, value));
  }
}
function moonbitlang$core$immut$sorted_set$$T$add_max_value$56$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$6$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _node_value = _Node._3;
    const _right = _Node._1;
    return moonbitlang$core$immut$sorted_set$$balance$56$(_left, _node_value, moonbitlang$core$immut$sorted_set$$T$add_max_value$56$(_right, value));
  }
}
function moonbitlang$core$immut$sorted_set$$T$add_max_value$28$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$7$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$7$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$7$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _node_value = _Node._3;
    const _right = _Node._1;
    return moonbitlang$core$immut$sorted_set$$balance$28$(_left, _node_value, moonbitlang$core$immut$sorted_set$$T$add_max_value$28$(_right, value));
  }
}
function moonbitlang$core$immut$sorted_set$$T$add_min_value$7$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$2$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _node_value = _Node._3;
    const _right = _Node._1;
    return moonbitlang$core$immut$sorted_set$$balance$7$(moonbitlang$core$immut$sorted_set$$T$add_min_value$7$(_left, value), _node_value, _right);
  }
}
function moonbitlang$core$immut$sorted_set$$T$add_min_value$56$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$6$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _node_value = _Node._3;
    const _right = _Node._1;
    return moonbitlang$core$immut$sorted_set$$balance$56$(moonbitlang$core$immut$sorted_set$$T$add_min_value$56$(_left, value), _node_value, _right);
  }
}
function moonbitlang$core$immut$sorted_set$$T$add_min_value$28$(self, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$7$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$7$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$7$, 1, value);
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _node_value = _Node._3;
    const _right = _Node._1;
    return moonbitlang$core$immut$sorted_set$$balance$28$(moonbitlang$core$immut$sorted_set$$T$add_min_value$28$(_left, value), _node_value, _right);
  }
}
function moonbitlang$core$immut$sorted_set$$join$7$(left, value, right) {
  if (left.$tag === 0) {
    return moonbitlang$core$immut$sorted_set$$T$add_min_value$7$(right, value);
  } else {
    if (right.$tag === 0) {
      return moonbitlang$core$immut$sorted_set$$T$add_max_value$7$(left, value);
    } else {
      const _Node = left;
      const _ll = _Node._0;
      const _lv = _Node._3;
      const _lr = _Node._1;
      const _ls = _Node._2;
      const _Node$2 = right;
      const _rl = _Node$2._0;
      const _rv = _Node$2._3;
      const _rr = _Node$2._1;
      const _rs = _Node$2._2;
      return _ls > (Math.imul(_rs, 5) | 0) ? moonbitlang$core$immut$sorted_set$$balance$7$(_ll, _lv, moonbitlang$core$immut$sorted_set$$join$7$(_lr, value, right)) : _rs > (Math.imul(_ls, 5) | 0) ? moonbitlang$core$immut$sorted_set$$balance$7$(moonbitlang$core$immut$sorted_set$$join$7$(left, value, _rl), _rv, _rr) : moonbitlang$core$immut$sorted_set$$create$7$(left, value, right);
    }
  }
}
function moonbitlang$core$immut$sorted_set$$join$56$(left, value, right) {
  if (left.$tag === 0) {
    return moonbitlang$core$immut$sorted_set$$T$add_min_value$56$(right, value);
  } else {
    if (right.$tag === 0) {
      return moonbitlang$core$immut$sorted_set$$T$add_max_value$56$(left, value);
    } else {
      const _Node = left;
      const _ll = _Node._0;
      const _lv = _Node._3;
      const _lr = _Node._1;
      const _ls = _Node._2;
      const _Node$2 = right;
      const _rl = _Node$2._0;
      const _rv = _Node$2._3;
      const _rr = _Node$2._1;
      const _rs = _Node$2._2;
      return _ls > (Math.imul(_rs, 5) | 0) ? moonbitlang$core$immut$sorted_set$$balance$56$(_ll, _lv, moonbitlang$core$immut$sorted_set$$join$56$(_lr, value, right)) : _rs > (Math.imul(_ls, 5) | 0) ? moonbitlang$core$immut$sorted_set$$balance$56$(moonbitlang$core$immut$sorted_set$$join$56$(left, value, _rl), _rv, _rr) : moonbitlang$core$immut$sorted_set$$create$56$(left, value, right);
    }
  }
}
function moonbitlang$core$immut$sorted_set$$join$28$(left, value, right) {
  if (left.$tag === 0) {
    return moonbitlang$core$immut$sorted_set$$T$add_min_value$28$(right, value);
  } else {
    if (right.$tag === 0) {
      return moonbitlang$core$immut$sorted_set$$T$add_max_value$28$(left, value);
    } else {
      const _Node = left;
      const _ll = _Node._0;
      const _lv = _Node._3;
      const _lr = _Node._1;
      const _ls = _Node._2;
      const _Node$2 = right;
      const _rl = _Node$2._0;
      const _rv = _Node$2._3;
      const _rr = _Node$2._1;
      const _rs = _Node$2._2;
      return _ls > (Math.imul(_rs, 5) | 0) ? moonbitlang$core$immut$sorted_set$$balance$28$(_ll, _lv, moonbitlang$core$immut$sorted_set$$join$28$(_lr, value, right)) : _rs > (Math.imul(_ls, 5) | 0) ? moonbitlang$core$immut$sorted_set$$balance$28$(moonbitlang$core$immut$sorted_set$$join$28$(left, value, _rl), _rv, _rr) : moonbitlang$core$immut$sorted_set$$create$28$(left, value, right);
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$split$7$(self, divide) {
  if (self.$tag === 0) {
    return { _0: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$, _1: false, _2: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$ };
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _value = _Node._3;
    const compare_result = $compare_int(divide, _value);
    if (compare_result === 0) {
      return { _0: _left, _1: true, _2: _right };
    } else {
      if (compare_result < 0) {
        const _bind = moonbitlang$core$immut$sorted_set$$T$split$7$(_left, divide);
        const _left_left = _bind._0;
        const _present = _bind._1;
        const _right_left = _bind._2;
        return { _0: _left_left, _1: _present, _2: moonbitlang$core$immut$sorted_set$$join$7$(_right_left, _value, _right) };
      } else {
        const _bind = moonbitlang$core$immut$sorted_set$$T$split$7$(_right, divide);
        const _left_right = _bind._0;
        const _present = _bind._1;
        const _right_right = _bind._2;
        return { _0: moonbitlang$core$immut$sorted_set$$join$7$(_left, _value, _left_right), _1: _present, _2: _right_right };
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$split$56$(self, divide) {
  if (self.$tag === 0) {
    return { _0: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, _1: false, _2: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$ };
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _value = _Node._3;
    const compare_result = moonbitlang$core$builtin$$Compare$compare$59$(divide, _value);
    if (compare_result === 0) {
      return { _0: _left, _1: true, _2: _right };
    } else {
      if (compare_result < 0) {
        const _bind = moonbitlang$core$immut$sorted_set$$T$split$56$(_left, divide);
        const _left_left = _bind._0;
        const _present = _bind._1;
        const _right_left = _bind._2;
        return { _0: _left_left, _1: _present, _2: moonbitlang$core$immut$sorted_set$$join$56$(_right_left, _value, _right) };
      } else {
        const _bind = moonbitlang$core$immut$sorted_set$$T$split$56$(_right, divide);
        const _left_right = _bind._0;
        const _present = _bind._1;
        const _right_right = _bind._2;
        return { _0: moonbitlang$core$immut$sorted_set$$join$56$(_left, _value, _left_right), _1: _present, _2: _right_right };
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$split$28$(self, divide) {
  if (self.$tag === 0) {
    return { _0: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$7$, _1: false, _2: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$7$ };
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _right = _Node._1;
    const _value = _Node._3;
    const compare_result = $compare_int(divide.id, _value.id);
    if (compare_result === 0) {
      return { _0: _left, _1: true, _2: _right };
    } else {
      if (compare_result < 0) {
        const _bind = moonbitlang$core$immut$sorted_set$$T$split$28$(_left, divide);
        const _left_left = _bind._0;
        const _present = _bind._1;
        const _right_left = _bind._2;
        return { _0: _left_left, _1: _present, _2: moonbitlang$core$immut$sorted_set$$join$28$(_right_left, _value, _right) };
      } else {
        const _bind = moonbitlang$core$immut$sorted_set$$T$split$28$(_right, divide);
        const _left_right = _bind._0;
        const _present = _bind._1;
        const _right_right = _bind._2;
        return { _0: moonbitlang$core$immut$sorted_set$$join$28$(_left, _value, _left_right), _1: _present, _2: _right_right };
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$is_empty$18$(self) {
  if (self.$tag === 0) {
    return true;
  } else {
    return false;
  }
}
function moonbitlang$core$immut$sorted_set$$T$is_empty$7$(self) {
  if (self.$tag === 0) {
    return true;
  } else {
    return false;
  }
}
function moonbitlang$core$immut$sorted_set$$T$contains$18$(self, value) {
  let _tmp = self;
  let _tmp$2 = value;
  while (true) {
    const self$2 = _tmp;
    const value$2 = _tmp$2;
    if (self$2.$tag === 0) {
      return false;
    } else {
      const _Node = self$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _node_value = _Node._3;
      const compare_result = moonbitlang$core$builtin$$Compare$compare$58$(value$2, _node_value);
      if (compare_result === 0) {
        return true;
      } else {
        _tmp = compare_result < 0 ? _left : _right;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$union$7$(self, other) {
  if (self.$tag === 0) {
    return other;
  } else {
    if (other.$tag === 0) {
      return self;
    } else {
      const _Node = self;
      const _l1 = _Node._0;
      const _v1 = _Node._3;
      const _r1 = _Node._1;
      const _s1 = _Node._2;
      const _Node$2 = other;
      const _l2 = _Node$2._0;
      const _v2 = _Node$2._3;
      const _r2 = _Node$2._1;
      const _s2 = _Node$2._2;
      if (_s1 >= _s2) {
        if (_s2 === 1) {
          return moonbitlang$core$immut$sorted_set$$T$add$7$(self, _v2);
        } else {
          const _bind = moonbitlang$core$immut$sorted_set$$T$split$7$(other, _v1);
          const _l2$2 = _bind._0;
          const _r2$2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$join$7$(moonbitlang$core$immut$sorted_set$$T$union$7$(_l1, _l2$2), _v1, moonbitlang$core$immut$sorted_set$$T$union$7$(_r1, _r2$2));
        }
      } else {
        if (_s1 === 1) {
          return moonbitlang$core$immut$sorted_set$$T$add$7$(other, _v1);
        } else {
          const _bind = moonbitlang$core$immut$sorted_set$$T$split$7$(self, _v2);
          const _l1$2 = _bind._0;
          const _r1$2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$join$7$(moonbitlang$core$immut$sorted_set$$T$union$7$(_l1$2, _l2), _v2, moonbitlang$core$immut$sorted_set$$T$union$7$(_r1$2, _r2));
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$union$56$(self, other) {
  if (self.$tag === 0) {
    return other;
  } else {
    if (other.$tag === 0) {
      return self;
    } else {
      const _Node = self;
      const _l1 = _Node._0;
      const _v1 = _Node._3;
      const _r1 = _Node._1;
      const _s1 = _Node._2;
      const _Node$2 = other;
      const _l2 = _Node$2._0;
      const _v2 = _Node$2._3;
      const _r2 = _Node$2._1;
      const _s2 = _Node$2._2;
      if (_s1 >= _s2) {
        if (_s2 === 1) {
          return moonbitlang$core$immut$sorted_set$$T$add$56$(self, _v2);
        } else {
          const _bind = moonbitlang$core$immut$sorted_set$$T$split$56$(other, _v1);
          const _l2$2 = _bind._0;
          const _r2$2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$join$56$(moonbitlang$core$immut$sorted_set$$T$union$56$(_l1, _l2$2), _v1, moonbitlang$core$immut$sorted_set$$T$union$56$(_r1, _r2$2));
        }
      } else {
        if (_s1 === 1) {
          return moonbitlang$core$immut$sorted_set$$T$add$56$(other, _v1);
        } else {
          const _bind = moonbitlang$core$immut$sorted_set$$T$split$56$(self, _v2);
          const _l1$2 = _bind._0;
          const _r1$2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$join$56$(moonbitlang$core$immut$sorted_set$$T$union$56$(_l1$2, _l2), _v2, moonbitlang$core$immut$sorted_set$$T$union$56$(_r1$2, _r2));
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$union$28$(self, other) {
  if (self.$tag === 0) {
    return other;
  } else {
    if (other.$tag === 0) {
      return self;
    } else {
      const _Node = self;
      const _l1 = _Node._0;
      const _v1 = _Node._3;
      const _r1 = _Node._1;
      const _s1 = _Node._2;
      const _Node$2 = other;
      const _l2 = _Node$2._0;
      const _v2 = _Node$2._3;
      const _r2 = _Node$2._1;
      const _s2 = _Node$2._2;
      if (_s1 >= _s2) {
        if (_s2 === 1) {
          return moonbitlang$core$immut$sorted_set$$T$add$28$(self, _v2);
        } else {
          const _bind = moonbitlang$core$immut$sorted_set$$T$split$28$(other, _v1);
          const _l2$2 = _bind._0;
          const _r2$2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$join$28$(moonbitlang$core$immut$sorted_set$$T$union$28$(_l1, _l2$2), _v1, moonbitlang$core$immut$sorted_set$$T$union$28$(_r1, _r2$2));
        }
      } else {
        if (_s1 === 1) {
          return moonbitlang$core$immut$sorted_set$$T$add$28$(other, _v1);
        } else {
          const _bind = moonbitlang$core$immut$sorted_set$$T$split$28$(self, _v2);
          const _l1$2 = _bind._0;
          const _r1$2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$join$28$(moonbitlang$core$immut$sorted_set$$T$union$28$(_l1$2, _l2), _v2, moonbitlang$core$immut$sorted_set$$T$union$28$(_r1$2, _r2));
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Add$op_add$58$(self, other) {
  return moonbitlang$core$immut$sorted_set$$T$union$7$(self, other);
}
function moonbitlang$core$builtin$$Add$op_add$61$(self, other) {
  return moonbitlang$core$immut$sorted_set$$T$union$56$(self, other);
}
function moonbitlang$core$immut$sorted_set$$T$concat$7$(self, other) {
  if (self.$tag === 0) {
    return other;
  } else {
    if (other.$tag === 0) {
      return self;
    } else {
      return moonbitlang$core$immut$sorted_set$$join$7$(self, moonbitlang$core$immut$sorted_set$$T$min$7$(other), moonbitlang$core$immut$sorted_set$$T$remove_min$7$(other));
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$intersection$7$(self, other) {
  _L: {
    if (self.$tag === 0) {
      break _L;
    } else {
      if (other.$tag === 0) {
        break _L;
      } else {
        const _Node = self;
        const _l1 = _Node._0;
        const _v1 = _Node._3;
        const _r1 = _Node._1;
        const _bind = moonbitlang$core$immut$sorted_set$$T$split$7$(other, _v1);
        const _l2 = _bind._0;
        const _x = _bind._1;
        if (_x === false) {
          const _r2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$T$concat$7$(moonbitlang$core$immut$sorted_set$$T$intersection$7$(_l1, _l2), moonbitlang$core$immut$sorted_set$$T$intersection$7$(_r1, _r2));
        } else {
          const _r2 = _bind._2;
          return moonbitlang$core$immut$sorted_set$$join$7$(moonbitlang$core$immut$sorted_set$$T$intersection$7$(_l1, _l2), _v1, moonbitlang$core$immut$sorted_set$$T$intersection$7$(_r1, _r2));
        }
      }
    }
  }
  return $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
}
function moonbitlang$core$immut$sorted_set$$T$difference$7$(self, other) {
  if (self.$tag === 0) {
    return $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
  } else {
    if (other.$tag === 0) {
      return self;
    } else {
      const _Node = self;
      const _l1 = _Node._0;
      const _v1 = _Node._3;
      const _r1 = _Node._1;
      const _bind = moonbitlang$core$immut$sorted_set$$T$split$7$(other, _v1);
      const _l2 = _bind._0;
      const _x = _bind._1;
      if (_x === false) {
        const _r2 = _bind._2;
        return moonbitlang$core$immut$sorted_set$$join$7$(moonbitlang$core$immut$sorted_set$$T$difference$7$(_l1, _l2), _v1, moonbitlang$core$immut$sorted_set$$T$difference$7$(_r1, _r2));
      } else {
        const _r2 = _bind._2;
        return moonbitlang$core$immut$sorted_set$$T$concat$7$(moonbitlang$core$immut$sorted_set$$T$difference$7$(_l1, _l2), moonbitlang$core$immut$sorted_set$$T$difference$7$(_r1, _r2));
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$try_join$28$(left, value, right) {
  let _tmp;
  let _tmp$2;
  if (moonbitlang$core$builtin$$Eq$op_equal$62$(left, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$7$)) {
    _tmp$2 = true;
  } else {
    const _p = moonbitlang$core$immut$sorted_set$$T$max$28$(left);
    _tmp$2 = $compare_int(_p.id, value.id) < 0;
  }
  if (_tmp$2) {
    let _tmp$3;
    if (moonbitlang$core$builtin$$Eq$op_equal$62$(right, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$7$)) {
      _tmp$3 = true;
    } else {
      const _p = moonbitlang$core$immut$sorted_set$$T$min$28$(right);
      _tmp$3 = $compare_int(value.id, _p.id) < 0;
    }
    _tmp = _tmp$3;
  } else {
    _tmp = false;
  }
  if (_tmp) {
    return moonbitlang$core$immut$sorted_set$$join$28$(left, value, right);
  } else {
    return moonbitlang$core$immut$sorted_set$$T$union$28$(left, moonbitlang$core$immut$sorted_set$$T$add$28$(right, value));
  }
}
function moonbitlang$core$immut$sorted_set$$T$map$63$(self, f) {
  if (self.$tag === 0) {
    return $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$7$;
  } else {
    const _Node = self;
    const _left = _Node._0;
    const _value = _Node._3;
    const _right = _Node._1;
    return moonbitlang$core$immut$sorted_set$$try_join$28$(moonbitlang$core$immut$sorted_set$$T$map$63$(_left, f), f(_value), moonbitlang$core$immut$sorted_set$$T$map$63$(_right, f));
  }
}
function moonbitlang$core$immut$sorted_set$$iter$46$go$47$1024(yield_, _param44) {
  let _tmp = _param44;
  while (true) {
    const _param44$2 = _tmp;
    if (_param44$2.$tag === 0) {
      return 1;
    } else {
      const _Node = _param44$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _value = _Node._3;
      const _bind = moonbitlang$core$immut$sorted_set$$iter$46$go$47$1024(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$iter$7$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_set$$iter$46$go$47$1024(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_set$$iter$46$go$47$1037(yield_, _param44) {
  let _tmp = _param44;
  while (true) {
    const _param44$2 = _tmp;
    if (_param44$2.$tag === 0) {
      return 1;
    } else {
      const _Node = _param44$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _value = _Node._3;
      const _bind = moonbitlang$core$immut$sorted_set$$iter$46$go$47$1037(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$iter$28$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_set$$iter$46$go$47$1037(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_set$$iter$46$go$47$1050(yield_, _param44) {
  let _tmp = _param44;
  while (true) {
    const _param44$2 = _tmp;
    if (_param44$2.$tag === 0) {
      return 1;
    } else {
      const _Node = _param44$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _value = _Node._3;
      const _bind = moonbitlang$core$immut$sorted_set$$iter$46$go$47$1050(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$iter$18$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_set$$iter$46$go$47$1050(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_set$$iter$46$go$47$1063(yield_, _param44) {
  let _tmp = _param44;
  while (true) {
    const _param44$2 = _tmp;
    if (_param44$2.$tag === 0) {
      return 1;
    } else {
      const _Node = _param44$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _value = _Node._3;
      const _bind = moonbitlang$core$immut$sorted_set$$iter$46$go$47$1063(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$iter$56$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_set$$iter$46$go$47$1063(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_set$$iter$46$go$47$1076(yield_, _param44) {
  let _tmp = _param44;
  while (true) {
    const _param44$2 = _tmp;
    if (_param44$2.$tag === 0) {
      return 1;
    } else {
      const _Node = _param44$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _value = _Node._3;
      const _bind = moonbitlang$core$immut$sorted_set$$iter$46$go$47$1076(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$iter$55$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_set$$iter$46$go$47$1076(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_set$$iter$46$go$47$1089(yield_, _param44) {
  let _tmp = _param44;
  while (true) {
    const _param44$2 = _tmp;
    if (_param44$2.$tag === 0) {
      return 1;
    } else {
      const _Node = _param44$2;
      const _left = _Node._0;
      const _right = _Node._1;
      const _value = _Node._3;
      const _bind = moonbitlang$core$immut$sorted_set$$iter$46$go$47$1089(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_set$$T$iter$57$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_set$$iter$46$go$47$1089(yield_, self);
  return _p;
}
function moonbitlang$core$builtin$$Hash$hash_combine$58$(self, hasher) {
  const _bind = moonbitlang$core$immut$sorted_set$$T$iter$7$(self);
  _bind((t) => {
    moonbitlang$core$builtin$$Hash$hash_combine$7$(t, hasher);
    return 1;
  });
}
function moonbitlang$core$immut$sorted_set$$from_iter$7$(iter) {
  const _bind = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
  const _acc = { val: _bind };
  iter((_p) => {
    const s = _acc.val;
    _acc.val = moonbitlang$core$immut$sorted_set$$T$add$7$(s, _p);
    return 1;
  });
  return _acc.val;
}
function moonbitlang$core$immut$sorted_set$$InorderIterator$move_left$7$(self, node) {
  let _tmp = node;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return;
    } else {
      const _Node = _param;
      const _left = _Node._0;
      moonbitlang$core$array$$Array$push$18$(self, _Node);
      _tmp = _left;
      continue;
    }
  }
}
function moonbitlang$core$immut$sorted_set$$InorderIterator$move_left$28$(self, node) {
  let _tmp = node;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return;
    } else {
      const _Node = _param;
      const _left = _Node._0;
      moonbitlang$core$array$$Array$push$31$(self, _Node);
      _tmp = _left;
      continue;
    }
  }
}
function moonbitlang$core$immut$sorted_set$$InorderIterator$new$7$(root) {
  const it = [];
  moonbitlang$core$immut$sorted_set$$InorderIterator$move_left$7$(it, root);
  return it;
}
function moonbitlang$core$immut$sorted_set$$InorderIterator$new$28$(root) {
  const it = [];
  moonbitlang$core$immut$sorted_set$$InorderIterator$move_left$28$(it, root);
  return it;
}
function moonbitlang$core$immut$sorted_set$$InorderIterator$next$7$(self) {
  const _bind = moonbitlang$core$array$$Array$pop$18$(self);
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _curr = _Some;
    if (_curr.$tag === 1) {
      const _Node = _curr;
      const _right = _Node._1;
      const _value = _Node._3;
      moonbitlang$core$immut$sorted_set$$InorderIterator$move_left$7$(self, _right);
      return _value;
    } else {
      return $panic();
    }
  }
}
function moonbitlang$core$immut$sorted_set$$InorderIterator$next$28$(self) {
  const _bind = moonbitlang$core$array$$Array$pop$31$(self);
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _curr = _Some;
    if (_curr.$tag === 1) {
      const _Node = _curr;
      const _right = _Node._1;
      const _value = _Node._3;
      moonbitlang$core$immut$sorted_set$$InorderIterator$move_left$28$(self, _right);
      return _value;
    } else {
      return $panic();
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$58$(self, other) {
  const iter = moonbitlang$core$immut$sorted_set$$InorderIterator$new$7$(self);
  const iter1 = moonbitlang$core$immut$sorted_set$$InorderIterator$new$7$(other);
  let _tmp = moonbitlang$core$immut$sorted_set$$InorderIterator$next$7$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$7$(iter1);
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param === undefined) {
      return _param$2 === undefined;
    } else {
      const _Some = _param;
      const _a = _Some;
      if (_param$2 === undefined) {
        return false;
      } else {
        const _Some$2 = _param$2;
        const _b = _Some$2;
        if (_a === _b) {
          const _tmp$3 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$7$(iter);
          const _tmp$4 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$7$(iter1);
          _tmp = _tmp$3;
          _tmp$2 = _tmp$4;
          continue;
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$62$(self, other) {
  const iter = moonbitlang$core$immut$sorted_set$$InorderIterator$new$28$(self);
  const iter1 = moonbitlang$core$immut$sorted_set$$InorderIterator$new$28$(other);
  let _tmp = moonbitlang$core$immut$sorted_set$$InorderIterator$next$28$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$28$(iter1);
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param === undefined) {
      return _param$2 === undefined;
    } else {
      const _Some = _param;
      const _a = _Some;
      if (_param$2 === undefined) {
        return false;
      } else {
        const _Some$2 = _param$2;
        const _b = _Some$2;
        if (_a.id === _b.id) {
          const _tmp$3 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$28$(iter);
          const _tmp$4 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$28$(iter1);
          _tmp = _tmp$3;
          _tmp$2 = _tmp$4;
          continue;
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$58$(self, other) {
  const iter = moonbitlang$core$immut$sorted_set$$InorderIterator$new$7$(self);
  const iter1 = moonbitlang$core$immut$sorted_set$$InorderIterator$new$7$(other);
  let _tmp = moonbitlang$core$immut$sorted_set$$InorderIterator$next$7$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$7$(iter1);
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param === undefined) {
      return _param$2 === undefined ? 0 : -1;
    } else {
      const _Some = _param;
      const _a = _Some;
      if (_param$2 === undefined) {
        return 1;
      } else {
        const _Some$2 = _param$2;
        const _b = _Some$2;
        const cmp = $compare_int(_a, _b);
        if (cmp === 0) {
          const _tmp$3 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$7$(iter);
          const _tmp$4 = moonbitlang$core$immut$sorted_set$$InorderIterator$next$7$(iter1);
          _tmp = _tmp$3;
          _tmp$2 = _tmp$4;
          continue;
        } else {
          return cmp;
        }
      }
    }
  }
}
function moonbitlang$core$strconv$$base_err$64$() {
  return new Result$Err$8$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$base_err_str));
}
function moonbitlang$core$strconv$$check_and_consume_base(view, base) {
  if (base === 0) {
    _L: {
      let rest;
      _L$2: {
        let rest$2;
        _L$3: {
          let rest$3;
          _L$4: {
            if (moonbitlang$core$string$$String$char_length_ge(view.str, 2, view.start, view.end)) {
              const _x = moonbitlang$core$string$$String$unsafe_char_at(view.str, moonbitlang$core$string$$String$offset_of_nth_char(view.str, 0, view.start, view.end));
              if (_x === 48) {
                const _x$2 = moonbitlang$core$string$$String$unsafe_char_at(view.str, moonbitlang$core$string$$String$offset_of_nth_char(view.str, 1, view.start, view.end));
                switch (_x$2) {
                  case 120: {
                    const _tmp = view.str;
                    const _bind = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$2;
                    if (_bind === undefined) {
                      _tmp$2 = view.end;
                    } else {
                      const _Some = _bind;
                      _tmp$2 = _Some;
                    }
                    const _tmp$3 = _tmp$2;
                    const _x$3 = { str: _tmp, start: _tmp$3, end: view.end };
                    rest$3 = _x$3;
                    break _L$4;
                  }
                  case 88: {
                    const _tmp$4 = view.str;
                    const _bind$2 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$5;
                    if (_bind$2 === undefined) {
                      _tmp$5 = view.end;
                    } else {
                      const _Some = _bind$2;
                      _tmp$5 = _Some;
                    }
                    const _tmp$6 = _tmp$5;
                    const _x$4 = { str: _tmp$4, start: _tmp$6, end: view.end };
                    rest$3 = _x$4;
                    break _L$4;
                  }
                  case 111: {
                    const _tmp$7 = view.str;
                    const _bind$3 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$8;
                    if (_bind$3 === undefined) {
                      _tmp$8 = view.end;
                    } else {
                      const _Some = _bind$3;
                      _tmp$8 = _Some;
                    }
                    const _tmp$9 = _tmp$8;
                    const _x$5 = { str: _tmp$7, start: _tmp$9, end: view.end };
                    rest$2 = _x$5;
                    break _L$3;
                  }
                  case 79: {
                    const _tmp$10 = view.str;
                    const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$11;
                    if (_bind$4 === undefined) {
                      _tmp$11 = view.end;
                    } else {
                      const _Some = _bind$4;
                      _tmp$11 = _Some;
                    }
                    const _tmp$12 = _tmp$11;
                    const _x$6 = { str: _tmp$10, start: _tmp$12, end: view.end };
                    rest$2 = _x$6;
                    break _L$3;
                  }
                  case 98: {
                    const _tmp$13 = view.str;
                    const _bind$5 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$14;
                    if (_bind$5 === undefined) {
                      _tmp$14 = view.end;
                    } else {
                      const _Some = _bind$5;
                      _tmp$14 = _Some;
                    }
                    const _tmp$15 = _tmp$14;
                    const _x$7 = { str: _tmp$13, start: _tmp$15, end: view.end };
                    rest = _x$7;
                    break _L$2;
                  }
                  case 66: {
                    const _tmp$16 = view.str;
                    const _bind$6 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$17;
                    if (_bind$6 === undefined) {
                      _tmp$17 = view.end;
                    } else {
                      const _Some = _bind$6;
                      _tmp$17 = _Some;
                    }
                    const _tmp$18 = _tmp$17;
                    const _x$8 = { str: _tmp$16, start: _tmp$18, end: view.end };
                    rest = _x$8;
                    break _L$2;
                  }
                  default: {
                    break _L;
                  }
                }
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return new Result$Ok$8$({ _0: 16, _1: rest$3, _2: true });
        }
        return new Result$Ok$8$({ _0: 8, _1: rest$2, _2: true });
      }
      return new Result$Ok$8$({ _0: 2, _1: rest, _2: true });
    }
    return new Result$Ok$8$({ _0: 10, _1: view, _2: false });
  } else {
    _L: {
      let rest;
      _L$2: {
        let rest$2;
        _L$3: {
          let rest$3;
          _L$4: {
            if (moonbitlang$core$string$$String$char_length_ge(view.str, 2, view.start, view.end)) {
              const _x = moonbitlang$core$string$$String$unsafe_char_at(view.str, moonbitlang$core$string$$String$offset_of_nth_char(view.str, 0, view.start, view.end));
              if (_x === 48) {
                const _x$2 = moonbitlang$core$string$$String$unsafe_char_at(view.str, moonbitlang$core$string$$String$offset_of_nth_char(view.str, 1, view.start, view.end));
                switch (_x$2) {
                  case 120: {
                    const _tmp = view.str;
                    const _bind = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$2;
                    if (_bind === undefined) {
                      _tmp$2 = view.end;
                    } else {
                      const _Some = _bind;
                      _tmp$2 = _Some;
                    }
                    const _tmp$3 = _tmp$2;
                    const _x$3 = { str: _tmp, start: _tmp$3, end: view.end };
                    if (base === 16) {
                      rest$3 = _x$3;
                      break _L$4;
                    } else {
                      break _L;
                    }
                  }
                  case 88: {
                    const _tmp$4 = view.str;
                    const _bind$2 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$5;
                    if (_bind$2 === undefined) {
                      _tmp$5 = view.end;
                    } else {
                      const _Some = _bind$2;
                      _tmp$5 = _Some;
                    }
                    const _tmp$6 = _tmp$5;
                    const _x$4 = { str: _tmp$4, start: _tmp$6, end: view.end };
                    if (base === 16) {
                      rest$3 = _x$4;
                      break _L$4;
                    } else {
                      break _L;
                    }
                  }
                  case 111: {
                    const _tmp$7 = view.str;
                    const _bind$3 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$8;
                    if (_bind$3 === undefined) {
                      _tmp$8 = view.end;
                    } else {
                      const _Some = _bind$3;
                      _tmp$8 = _Some;
                    }
                    const _tmp$9 = _tmp$8;
                    const _x$5 = { str: _tmp$7, start: _tmp$9, end: view.end };
                    if (base === 8) {
                      rest$2 = _x$5;
                      break _L$3;
                    } else {
                      break _L;
                    }
                  }
                  case 79: {
                    const _tmp$10 = view.str;
                    const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$11;
                    if (_bind$4 === undefined) {
                      _tmp$11 = view.end;
                    } else {
                      const _Some = _bind$4;
                      _tmp$11 = _Some;
                    }
                    const _tmp$12 = _tmp$11;
                    const _x$6 = { str: _tmp$10, start: _tmp$12, end: view.end };
                    if (base === 8) {
                      rest$2 = _x$6;
                      break _L$3;
                    } else {
                      break _L;
                    }
                  }
                  case 98: {
                    const _tmp$13 = view.str;
                    const _bind$5 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$14;
                    if (_bind$5 === undefined) {
                      _tmp$14 = view.end;
                    } else {
                      const _Some = _bind$5;
                      _tmp$14 = _Some;
                    }
                    const _tmp$15 = _tmp$14;
                    const _x$7 = { str: _tmp$13, start: _tmp$15, end: view.end };
                    if (base === 2) {
                      rest = _x$7;
                      break _L$2;
                    } else {
                      break _L;
                    }
                  }
                  case 66: {
                    const _tmp$16 = view.str;
                    const _bind$6 = moonbitlang$core$string$$String$offset_of_nth_char(view.str, 2, view.start, view.end);
                    let _tmp$17;
                    if (_bind$6 === undefined) {
                      _tmp$17 = view.end;
                    } else {
                      const _Some = _bind$6;
                      _tmp$17 = _Some;
                    }
                    const _tmp$18 = _tmp$17;
                    const _x$8 = { str: _tmp$16, start: _tmp$18, end: view.end };
                    if (base === 2) {
                      rest = _x$8;
                      break _L$2;
                    } else {
                      break _L;
                    }
                  }
                  default: {
                    break _L;
                  }
                }
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return new Result$Ok$8$({ _0: 16, _1: rest$3, _2: true });
        }
        return new Result$Ok$8$({ _0: 8, _1: rest$2, _2: true });
      }
      return new Result$Ok$8$({ _0: 2, _1: rest, _2: true });
    }
    return base >= 2 && base <= 36 ? new Result$Ok$8$({ _0: base, _1: view, _2: false }) : moonbitlang$core$strconv$$base_err$64$();
  }
}
function moonbitlang$core$strconv$$overflow_threshold(base, neg) {
  return !neg ? (base === 10 ? moonbitlang$core$builtin$$Add$op_add$65$(moonbitlang$core$builtin$$Div$op_div$65$($9223372036854775807L, $10L), $1L) : base === 16 ? moonbitlang$core$builtin$$Add$op_add$65$(moonbitlang$core$builtin$$Div$op_div$65$($9223372036854775807L, $16L), $1L) : moonbitlang$core$builtin$$Add$op_add$65$(moonbitlang$core$builtin$$Div$op_div$65$($9223372036854775807L, moonbitlang$core$int$$Int$to_int64(base)), $1L)) : base === 10 ? moonbitlang$core$builtin$$Div$op_div$65$($_9223372036854775808L, $10L) : base === 16 ? moonbitlang$core$builtin$$Div$op_div$65$($_9223372036854775808L, $16L) : moonbitlang$core$builtin$$Div$op_div$65$($_9223372036854775808L, moonbitlang$core$int$$Int$to_int64(base));
}
function moonbitlang$core$strconv$$range_err$4$() {
  return new Result$Err$9$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$range_err_str));
}
function moonbitlang$core$strconv$$range_err$65$() {
  return new Result$Err$10$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$range_err_str));
}
function moonbitlang$core$strconv$$syntax_err$7$() {
  return new Result$Err$11$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$syntax_err_str));
}
function moonbitlang$core$strconv$$syntax_err$65$() {
  return new Result$Err$10$(new Error$moonbitlang$47$core$47$strconv$46$StrConvError$46$StrConvError(moonbitlang$core$strconv$$syntax_err_str));
}
function moonbitlang$core$strconv$$parse_int64(str, base) {
  const _p = "";
  if (!(str === _p)) {
    let _bind;
    let rest;
    _L: {
      _L$2: {
        const _arg = 0;
        const _arg$2 = str.length;
        const _bind$2 = moonbitlang$core$string$$String$view(str, _arg, _arg$2);
        if (moonbitlang$core$string$$String$char_length_ge(_bind$2.str, 1, _bind$2.start, _bind$2.end)) {
          const _x = moonbitlang$core$string$$String$unsafe_char_at(_bind$2.str, moonbitlang$core$string$$String$offset_of_nth_char(_bind$2.str, 0, _bind$2.start, _bind$2.end));
          switch (_x) {
            case 43: {
              const _tmp = _bind$2.str;
              const _bind$3 = moonbitlang$core$string$$String$offset_of_nth_char(_bind$2.str, 1, _bind$2.start, _bind$2.end);
              let _tmp$2;
              if (_bind$3 === undefined) {
                _tmp$2 = _bind$2.end;
              } else {
                const _Some = _bind$3;
                _tmp$2 = _Some;
              }
              const _tmp$3 = _tmp$2;
              const _x$2 = { str: _tmp, start: _tmp$3, end: _bind$2.end };
              _bind = { _0: false, _1: _x$2 };
              break;
            }
            case 45: {
              const _tmp$4 = _bind$2.str;
              const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(_bind$2.str, 1, _bind$2.start, _bind$2.end);
              let _tmp$5;
              if (_bind$4 === undefined) {
                _tmp$5 = _bind$2.end;
              } else {
                const _Some = _bind$4;
                _tmp$5 = _Some;
              }
              const _tmp$6 = _tmp$5;
              const _x$3 = { str: _tmp$4, start: _tmp$6, end: _bind$2.end };
              _bind = { _0: true, _1: _x$3 };
              break;
            }
            default: {
              rest = _bind$2;
              break _L$2;
            }
          }
        } else {
          rest = _bind$2;
          break _L$2;
        }
        break _L;
      }
      _bind = { _0: false, _1: rest };
    }
    const _neg = _bind._0;
    const _rest = _bind._1;
    const _bind$2 = moonbitlang$core$strconv$$check_and_consume_base(_rest, base);
    let _bind$3;
    if (_bind$2.$tag === 1) {
      const _ok = _bind$2;
      _bind$3 = _ok._0;
    } else {
      return _bind$2;
    }
    const _num_base = _bind$3._0;
    const _rest$2 = _bind$3._1;
    const _allow_underscore = _bind$3._2;
    const overflow_threshold = moonbitlang$core$strconv$$overflow_threshold(_num_base, _neg);
    let has_digit;
    if (moonbitlang$core$string$$String$char_length_ge(_rest$2.str, 1, _rest$2.start, _rest$2.end)) {
      const _x = moonbitlang$core$string$$String$unsafe_char_at(_rest$2.str, moonbitlang$core$string$$String$offset_of_nth_char(_rest$2.str, 0, _rest$2.start, _rest$2.end));
      if (_x >= 48 && _x <= 57) {
        has_digit = true;
      } else {
        if (_x >= 97 && _x <= 122) {
          has_digit = true;
        } else {
          if (_x >= 65 && _x <= 90) {
            has_digit = true;
          } else {
            if (moonbitlang$core$string$$String$char_length_ge(_rest$2.str, 2, _rest$2.start, _rest$2.end)) {
              if (_x === 95) {
                const _x$2 = moonbitlang$core$string$$String$unsafe_char_at(_rest$2.str, moonbitlang$core$string$$String$offset_of_nth_char(_rest$2.str, 1, _rest$2.start, _rest$2.end));
                has_digit = _x$2 >= 48 && _x$2 <= 57 ? true : _x$2 >= 97 && _x$2 <= 122 ? true : _x$2 >= 65 && _x$2 <= 90;
              } else {
                has_digit = false;
              }
            } else {
              has_digit = false;
            }
          }
        }
      }
    } else {
      has_digit = false;
    }
    if (has_digit) {
      let _tmp;
      let _tmp$2 = _rest$2;
      let _tmp$3 = $0L;
      let _tmp$4 = _allow_underscore;
      while (true) {
        const _param = _tmp$2;
        const _param$2 = _tmp$3;
        const _param$3 = _tmp$4;
        let acc;
        let rest$2;
        let c;
        _L$2: {
          if (moonbitlang$core$string$$String$char_length_eq(_param.str, 1, _param.start, _param.end)) {
            const _x = moonbitlang$core$string$$String$unsafe_char_at(_param.str, moonbitlang$core$string$$String$offset_of_nth_char(_param.str, 0, _param.start, _param.end));
            if (_x === 95) {
              const _bind$4 = moonbitlang$core$strconv$$syntax_err$65$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                _tmp = _ok._0;
                break;
              } else {
                return _bind$4;
              }
            } else {
              const _tmp$5 = _param.str;
              const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(_param.str, 1, _param.start, _param.end);
              let _tmp$6;
              if (_bind$4 === undefined) {
                _tmp$6 = _param.end;
              } else {
                const _Some = _bind$4;
                _tmp$6 = _Some;
              }
              const _tmp$7 = _tmp$6;
              const _x$2 = { str: _tmp$5, start: _tmp$7, end: _param.end };
              acc = _param$2;
              rest$2 = _x$2;
              c = _x;
              break _L$2;
            }
          } else {
            if (moonbitlang$core$string$$String$char_length_ge(_param.str, 1, _param.start, _param.end)) {
              const _x = moonbitlang$core$string$$String$unsafe_char_at(_param.str, moonbitlang$core$string$$String$offset_of_nth_char(_param.str, 0, _param.start, _param.end));
              if (_x === 95) {
                if (_param$3 === false) {
                  const _bind$4 = moonbitlang$core$strconv$$syntax_err$65$();
                  if (_bind$4.$tag === 1) {
                    const _ok = _bind$4;
                    _tmp = _ok._0;
                    break;
                  } else {
                    return _bind$4;
                  }
                } else {
                  const _tmp$5 = _param.str;
                  const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(_param.str, 1, _param.start, _param.end);
                  let _tmp$6;
                  if (_bind$4 === undefined) {
                    _tmp$6 = _param.end;
                  } else {
                    const _Some = _bind$4;
                    _tmp$6 = _Some;
                  }
                  const _tmp$7 = _tmp$6;
                  const _x$2 = { str: _tmp$5, start: _tmp$7, end: _param.end };
                  _tmp$2 = _x$2;
                  _tmp$4 = false;
                  continue;
                }
              } else {
                const _tmp$5 = _param.str;
                const _bind$4 = moonbitlang$core$string$$String$offset_of_nth_char(_param.str, 1, _param.start, _param.end);
                let _tmp$6;
                if (_bind$4 === undefined) {
                  _tmp$6 = _param.end;
                } else {
                  const _Some = _bind$4;
                  _tmp$6 = _Some;
                }
                const _tmp$7 = _tmp$6;
                const _x$2 = { str: _tmp$5, start: _tmp$7, end: _param.end };
                acc = _param$2;
                rest$2 = _x$2;
                c = _x;
                break _L$2;
              }
            } else {
              _tmp = _param$2;
              break;
            }
          }
        }
        const c$2 = c;
        let d;
        if (c$2 >= 48 && c$2 <= 57) {
          d = c$2 - 48 | 0;
        } else {
          if (c$2 >= 97 && c$2 <= 122) {
            d = c$2 + -87 | 0;
          } else {
            if (c$2 >= 65 && c$2 <= 90) {
              d = c$2 + -55 | 0;
            } else {
              const _bind$4 = moonbitlang$core$strconv$$syntax_err$7$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                d = _ok._0;
              } else {
                return _bind$4;
              }
            }
          }
        }
        if (d < _num_base) {
          if (_neg) {
            if (moonbitlang$core$builtin$$op_ge$65$(acc, overflow_threshold)) {
              const next_acc = moonbitlang$core$builtin$$Sub$op_sub$65$(moonbitlang$core$builtin$$Mul$op_mul$65$(acc, moonbitlang$core$int$$Int$to_int64(_num_base)), moonbitlang$core$int$$Int$to_int64(d));
              if (moonbitlang$core$builtin$$op_le$65$(next_acc, acc)) {
                _tmp$2 = rest$2;
                _tmp$3 = next_acc;
                _tmp$4 = true;
                continue;
              } else {
                const _bind$4 = moonbitlang$core$strconv$$range_err$65$();
                if (_bind$4.$tag === 1) {
                  const _ok = _bind$4;
                  _tmp = _ok._0;
                  break;
                } else {
                  return _bind$4;
                }
              }
            } else {
              const _bind$4 = moonbitlang$core$strconv$$range_err$65$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                _tmp = _ok._0;
                break;
              } else {
                return _bind$4;
              }
            }
          } else {
            if (moonbitlang$core$builtin$$op_lt$65$(acc, overflow_threshold)) {
              const next_acc = moonbitlang$core$builtin$$Add$op_add$65$(moonbitlang$core$builtin$$Mul$op_mul$65$(acc, moonbitlang$core$int$$Int$to_int64(_num_base)), moonbitlang$core$int$$Int$to_int64(d));
              if (moonbitlang$core$builtin$$op_ge$65$(next_acc, acc)) {
                _tmp$2 = rest$2;
                _tmp$3 = next_acc;
                _tmp$4 = true;
                continue;
              } else {
                const _bind$4 = moonbitlang$core$strconv$$range_err$65$();
                if (_bind$4.$tag === 1) {
                  const _ok = _bind$4;
                  _tmp = _ok._0;
                  break;
                } else {
                  return _bind$4;
                }
              }
            } else {
              const _bind$4 = moonbitlang$core$strconv$$range_err$65$();
              if (_bind$4.$tag === 1) {
                const _ok = _bind$4;
                _tmp = _ok._0;
                break;
              } else {
                return _bind$4;
              }
            }
          }
        } else {
          const _bind$4 = moonbitlang$core$strconv$$syntax_err$65$();
          if (_bind$4.$tag === 1) {
            const _ok = _bind$4;
            _tmp = _ok._0;
            break;
          } else {
            return _bind$4;
          }
        }
      }
      return new Result$Ok$10$(_tmp);
    } else {
      return moonbitlang$core$strconv$$syntax_err$65$();
    }
  } else {
    return moonbitlang$core$strconv$$syntax_err$65$();
  }
}
function moonbitlang$core$strconv$$parse_int(str, base) {
  const _bind = moonbitlang$core$strconv$$parse_int64(str, base);
  let n;
  if (_bind.$tag === 1) {
    const _ok = _bind;
    n = _ok._0;
  } else {
    return _bind;
  }
  if (moonbitlang$core$builtin$$op_lt$65$(n, moonbitlang$core$int$$Int$to_int64(-2147483648)) || moonbitlang$core$builtin$$op_gt$65$(n, moonbitlang$core$int$$Int$to_int64(2147483647))) {
    const _bind$2 = moonbitlang$core$strconv$$range_err$4$();
    if (_bind$2.$tag === 1) {
      const _ok = _bind$2;
      _ok._0;
    } else {
      return _bind$2;
    }
  }
  return new Result$Ok$11$(moonbitlang$core$int64$$Int64$to_int(n));
}
function moonbitlang$core$result$$Result$unwrap$66$(self) {
  if (self.$tag === 1) {
    const _Ok = self;
    const _x = _Ok._0;
    return _x;
  } else {
    return moonbitlang$core$abort$$abort$5$("called `Result::unwrap()` on an `Err` value");
  }
}
function moonbitlang$core$result$$Result$unwrap$67$(self) {
  if (self.$tag === 1) {
    const _Ok = self;
    const _x = _Ok._0;
    return _x;
  } else {
    return moonbitlang$core$abort$$abort$0$("called `Result::unwrap()` on an `Err` value");
  }
}
function moonbitlang$core$result$$Result$unwrap$68$(self) {
  if (self.$tag === 1) {
    const _Ok = self;
    _Ok._0;
    return;
  } else {
    moonbitlang$core$abort$$abort$4$("called `Result::unwrap()` on an `Err` value");
    return;
  }
}
function moonbitlang$core$result$$Result$unwrap$69$(self) {
  if (self.$tag === 1) {
    const _Ok = self;
    const _x = _Ok._0;
    return _x;
  } else {
    return moonbitlang$core$abort$$abort$7$("called `Result::unwrap()` on an `Err` value");
  }
}
function moonbitlang$core$builtin$$Hash$hash_combine$70$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_char(hasher, self);
}
function moonbitlang$core$char$$Char$is_control(self) {
  return self >= 0 && self <= 31 ? true : self >= 127 && self <= 159;
}
function moonbitlang$core$char$$Char$is_printable(self) {
  if (moonbitlang$core$char$$Char$is_control(self)) {
    return false;
  }
  const self$2 = self;
  _L: {
    _L$2: {
      if (self$2 >= 57344 && self$2 <= 63743) {
        break _L$2;
      } else {
        if (self$2 >= 983040 && self$2 <= 1048573) {
          break _L$2;
        } else {
          if (self$2 >= 1048576 && self$2 <= 1114109) {
            break _L$2;
          }
        }
      }
      break _L;
    }
    return false;
  }
  _L$2: {
    _L$3: {
      if (self$2 === 173) {
        break _L$3;
      } else {
        if (self$2 >= 1536 && self$2 <= 1541) {
          break _L$3;
        } else {
          if (self$2 === 1564) {
            break _L$3;
          } else {
            if (self$2 === 1757) {
              break _L$3;
            } else {
              if (self$2 === 1807) {
                break _L$3;
              } else {
                if (self$2 >= 2192 && self$2 <= 2193) {
                  break _L$3;
                } else {
                  if (self$2 === 2274) {
                    break _L$3;
                  } else {
                    if (self$2 === 6158) {
                      break _L$3;
                    } else {
                      if (self$2 >= 8203 && self$2 <= 8207) {
                        break _L$3;
                      } else {
                        if (self$2 >= 8234 && self$2 <= 8238) {
                          break _L$3;
                        } else {
                          if (self$2 >= 8288 && self$2 <= 8292) {
                            break _L$3;
                          } else {
                            if (self$2 >= 8294 && self$2 <= 8303) {
                              break _L$3;
                            } else {
                              if (self$2 === 65279) {
                                break _L$3;
                              } else {
                                if (self$2 >= 65529 && self$2 <= 65531) {
                                  break _L$3;
                                } else {
                                  if (self$2 === 69821) {
                                    break _L$3;
                                  } else {
                                    if (self$2 === 69837) {
                                      break _L$3;
                                    } else {
                                      if (self$2 >= 78896 && self$2 <= 78911) {
                                        break _L$3;
                                      } else {
                                        if (self$2 >= 113824 && self$2 <= 113827) {
                                          break _L$3;
                                        } else {
                                          if (self$2 >= 119155 && self$2 <= 119162) {
                                            break _L$3;
                                          } else {
                                            if (self$2 === 917505) {
                                              break _L$3;
                                            } else {
                                              if (self$2 >= 917536 && self$2 <= 917631) {
                                                break _L$3;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      break _L$2;
    }
    return false;
  }
  if (self$2 >= 55296 && self$2 <= 57343) {
    return false;
  }
  if (self$2 === 8232 || self$2 === 8233) {
    return false;
  }
  _L$3: {
    _L$4: {
      if (self$2 >= 64976 && self$2 <= 65007) {
        break _L$4;
      } else {
        if (self$2 >= 65534 && self$2 <= 65535) {
          break _L$4;
        } else {
          if (self$2 >= 131070 && self$2 <= 131071) {
            break _L$4;
          } else {
            if (self$2 >= 196606 && self$2 <= 196607) {
              break _L$4;
            } else {
              if (self$2 >= 262142 && self$2 <= 262143) {
                break _L$4;
              } else {
                if (self$2 >= 327678 && self$2 <= 327679) {
                  break _L$4;
                } else {
                  if (self$2 >= 393214 && self$2 <= 393215) {
                    break _L$4;
                  } else {
                    if (self$2 >= 458750 && self$2 <= 458751) {
                      break _L$4;
                    } else {
                      if (self$2 >= 524286 && self$2 <= 524287) {
                        break _L$4;
                      } else {
                        if (self$2 >= 589822 && self$2 <= 589823) {
                          break _L$4;
                        } else {
                          if (self$2 >= 655358 && self$2 <= 655359) {
                            break _L$4;
                          } else {
                            if (self$2 >= 720894 && self$2 <= 720895) {
                              break _L$4;
                            } else {
                              if (self$2 >= 786430 && self$2 <= 786431) {
                                break _L$4;
                              } else {
                                if (self$2 >= 851966 && self$2 <= 851967) {
                                  break _L$4;
                                } else {
                                  if (self$2 >= 917502 && self$2 <= 917503) {
                                    break _L$4;
                                  } else {
                                    if (self$2 >= 983038 && self$2 <= 983039) {
                                      break _L$4;
                                    } else {
                                      if (self$2 >= 1048574 && self$2 <= 1048575) {
                                        break _L$4;
                                      } else {
                                        if (self$2 >= 1114110 && self$2 <= 1114111) {
                                          break _L$4;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      break _L$3;
    }
    return false;
  }
  return true;
}
function moonbitlang$core$char$$output$46$to_hex_digit$124$4(i) {
  return i < 10 ? i + 48 | 0 : (i + 97 | 0) - 10 | 0;
}
function moonbitlang$core$builtin$$Show$output$70$(self, logger) {
  logger.method_2(logger.self, 39);
  _L: {
    _L$2: {
      if (self === 39) {
        break _L$2;
      } else {
        if (self === 92) {
          break _L$2;
        } else {
          if (self === 10) {
            logger.method_0(logger.self, "\\n");
          } else {
            if (self === 13) {
              logger.method_0(logger.self, "\\r");
            } else {
              if (self === 8) {
                logger.method_0(logger.self, "\\b");
              } else {
                if (self === 9) {
                  logger.method_0(logger.self, "\\t");
                } else {
                  if (self >= 32 && self <= 126) {
                    logger.method_2(logger.self, self);
                  } else {
                    if (!moonbitlang$core$char$$Char$is_printable(self)) {
                      const code = self;
                      const hex_len = code <= 255 ? 2 : code <= 4095 ? 3 : code <= 65535 ? 4 : code <= 1048575 ? 5 : 6;
                      logger.method_0(logger.self, "\\u{");
                      if (hex_len >= 6) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$4(code >> 20 & 15));
                      }
                      if (hex_len >= 5) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$4(code >> 16 & 15));
                      }
                      if (hex_len >= 4) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$4(code >> 12 & 15));
                      }
                      if (hex_len >= 3) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$4(code >> 8 & 15));
                      }
                      if (hex_len >= 2) {
                        logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$4(code >> 4 & 15));
                      }
                      logger.method_2(logger.self, moonbitlang$core$char$$output$46$to_hex_digit$124$4(code & 15));
                      logger.method_2(logger.self, 125);
                    } else {
                      logger.method_2(logger.self, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
      break _L;
    }
    logger.method_2(logger.self, 92);
    logger.method_2(logger.self, self);
  }
  logger.method_2(logger.self, 39);
}
function moonbitlang$core$hashset$$new$0$(capacity) {
  const _bind = (Math.imul(capacity, 13) | 0) / 16 | 0;
  const _bind$2 = $make_array_len_and_init(capacity, undefined);
  return { entries: _bind$2, size: 0, capacity: capacity, grow_at: _bind };
}
function moonbitlang$core$hashset$$abs(n) {
  return n < 0 ? -n : n;
}
function moonbitlang$core$hashset$$T$index$0$(self, hash) {
  return moonbitlang$core$hashset$$abs(hash) & (self.capacity - 1 | 0);
}
function moonbitlang$core$hashset$$T$add$0$(self, key) {
  if (self.capacity === 0 || self.size >= self.grow_at) {
    moonbitlang$core$hashset$$T$grow$0$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$71$(key);
  const entry = { psl: 0, hash: hash, key: key };
  let _tmp = 0;
  let _tmp$2 = moonbitlang$core$hashset$$T$index$0$(self, hash);
  let _tmp$3 = entry;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    const _param$3 = _tmp$3;
    if (_param === self.capacity) {
      $panic();
    }
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, _param$2);
    const _bind = _tmp$4[_param$2];
    if (_bind === undefined) {
      const _tmp$5 = self.entries;
      $bound_check(_tmp$5, _param$2);
      _tmp$5[_param$2] = _param$3;
      self.size = self.size + 1 | 0;
      return;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (_curr_entry.hash === _param$3.hash && _curr_entry.key === _param$3.key) {
        const _tmp$5 = self.entries;
        $bound_check(_tmp$5, _param$2);
        _tmp$5[_param$2] = _param$3;
        break;
      }
      if (_param$3.psl > _curr_entry.psl) {
        const _tmp$5 = self.entries;
        $bound_check(_tmp$5, _param$2);
        _tmp$5[_param$2] = _param$3;
        _curr_entry.psl = _curr_entry.psl + 1 | 0;
        const _tmp$6 = _param + 1 | 0;
        const _tmp$7 = _param$2 + 1 & (self.capacity - 1 | 0);
        _tmp = _tmp$6;
        _tmp$2 = _tmp$7;
        _tmp$3 = _curr_entry;
        continue;
      }
      _param$3.psl = _param$3.psl + 1 | 0;
      const _tmp$5 = _param + 1 | 0;
      const _tmp$6 = _param$2 + 1 & (self.capacity - 1 | 0);
      _tmp = _tmp$5;
      _tmp$2 = _tmp$6;
      continue;
    }
  }
}
function moonbitlang$core$hashset$$T$grow$0$(self) {
  if (self.capacity === 0) {
    self.capacity = 8;
    const _p = self.capacity;
    self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
    self.size = 0;
    self.entries = $make_array_len_and_init(self.capacity, undefined);
    return undefined;
  }
  const old_entries = self.entries;
  self.entries = $make_array_len_and_init(Math.imul(self.capacity, 2) | 0, undefined);
  self.capacity = Math.imul(self.capacity, 2) | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  const _end48 = old_entries.length;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end48) {
      $bound_check(old_entries, i);
      const _bind = old_entries[i];
      if (_bind === undefined) {
      } else {
        const _Some = _bind;
        const _x = _Some;
        const _key = _x.key;
        moonbitlang$core$hashset$$T$add$0$(self, _key);
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$hashset$$from_array$0$(arr) {
  const m = moonbitlang$core$hashset$$new$0$(8);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$hashset$$T$add$0$(m, e);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$hashset$$T$contains$0$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$71$(key);
  let _tmp = 0;
  let _tmp$2 = moonbitlang$core$hashset$$T$index$0$(self, hash);
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    if (i < self.capacity) {
      const _tmp$3 = self.entries;
      $bound_check(_tmp$3, idx);
      const _bind = _tmp$3[idx];
      if (_bind === undefined) {
        return false;
      } else {
        const _Some = _bind;
        const _entry = _Some;
        if (_entry.hash === hash && _entry.key === key) {
          return true;
        }
        if (i > _entry.psl) {
          return false;
        }
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & (self.capacity - 1 | 0);
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    } else {
      break;
    }
  }
  return false;
}
function moonbitlang$core$bytes$$Bytes$from_array(arr) {
  return moonbitlang$core$bytes$$Bytes$makei(arr.length, (i) => moonbitlang$core$array$$Array$op_get$16$(arr, i));
}
function moonbitlang$core$bytes$$Bytes$from_fixedarray(arr, len) {
  let len$2;
  if (len === undefined) {
    len$2 = arr.length;
  } else {
    const _Some = len;
    const _x = _Some;
    len$2 = _x;
  }
  return moonbitlang$core$bytes$$Bytes$makei(len$2, (i) => {
    $bound_check(arr, i);
    return arr[i];
  });
}
function moonbitlang$core$bytes$$from_fixedarray(arr, len) {
  return moonbitlang$core$bytes$$Bytes$from_fixedarray(arr, len);
}
function moonbitlang$core$bytes$$Bytes$to_fixedarray(self, len) {
  let len$2;
  if (len === undefined) {
    len$2 = self.length;
  } else {
    const _Some = len;
    const _x = _Some;
    len$2 = _x;
  }
  const arr = $make_array_len_and_init(len$2, 0);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len$2) {
      $bound_check(self, i);
      $bound_check(arr, i);
      arr[i] = self[i];
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$bytes$$Bytes$iter(self) {
  const _p = (yield_) => {
    let _tmp = 0;
    let _tmp$2 = self.length;
    while (true) {
      const i = _tmp;
      const len = _tmp$2;
      if (i < len) {
        $bound_check(self, i);
        if (moonbitlang$core$builtin$$Eq$op_equal$72$(yield_(self[i]), 0)) {
          return 0;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$bytes$$View$op_get(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.bytes;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$16$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$7$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$7$(index)}`);
  }
}
function moonbitlang$core$bytes$$Bytes$op_as_view(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { bytes: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$11$("Invalid index for View");
}
function moonbitlang$core$bytes$$View$iter(self) {
  const _p = (yield_) => {
    const _end83 = self.len;
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < _end83) {
        const _bind = yield_(moonbitlang$core$bytes$$View$op_get(self, i));
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Eq$op_equal$11$(self, other) {
  if (self.len === other.len) {
    const _end54 = self.len;
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < _end54) {
        const _tmp$2 = self.bytes;
        const _tmp$3 = self.start + i | 0;
        $bound_check(_tmp$2, _tmp$3);
        const _p = _tmp$2[_tmp$3];
        const _tmp$4 = other.bytes;
        const _tmp$5 = other.start + i | 0;
        $bound_check(_tmp$4, _tmp$5);
        const _p$2 = _tmp$4[_tmp$5];
        if (_p === _p$2) {
        } else {
          return false;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return true;
  } else {
    return false;
  }
}
function moonbitlang$core$tuple$$curry$73$(f) {
  return (x) => (y) => f(x, y);
}
function moonbitlang$core$tuple$$curry$74$(f) {
  return (x) => (y) => f(x, y);
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$75$(self, node) {
  let _tmp = node;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return;
    } else {
      const _Tree = _param;
      const _left = _Tree._3;
      moonbitlang$core$array$$Array$push$76$(self, _Tree);
      _tmp = _left;
      continue;
    }
  }
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$77$(self, node) {
  let _tmp = node;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return;
    } else {
      const _Tree = _param;
      const _left = _Tree._3;
      moonbitlang$core$array$$Array$push$78$(self, _Tree);
      _tmp = _left;
      continue;
    }
  }
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$79$(self, node) {
  let _tmp = node;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return;
    } else {
      const _Tree = _param;
      const _left = _Tree._3;
      moonbitlang$core$array$$Array$push$80$(self, _Tree);
      _tmp = _left;
      continue;
    }
  }
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$new$75$(root) {
  const it = [];
  moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$75$(it, root);
  return it;
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$new$77$(root) {
  const it = [];
  moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$77$(it, root);
  return it;
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$new$79$(root) {
  const it = [];
  moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$79$(it, root);
  return it;
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(self) {
  const _bind = moonbitlang$core$array$$Array$pop$76$(self);
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _curr = _Some;
    if (_curr.$tag === 1) {
      const _Tree = _curr;
      const _key = _Tree._0;
      const _right = _Tree._4;
      const _value = _Tree._1;
      moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$75$(self, _right);
      return { _0: _key, _1: _value };
    } else {
      return $panic();
    }
  }
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$next$77$(self) {
  const _bind = moonbitlang$core$array$$Array$pop$78$(self);
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _curr = _Some;
    if (_curr.$tag === 1) {
      const _Tree = _curr;
      const _key = _Tree._0;
      const _right = _Tree._4;
      const _value = _Tree._1;
      moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$77$(self, _right);
      return { _0: _key, _1: _value };
    } else {
      return $panic();
    }
  }
}
function moonbitlang$core$immut$sorted_map$$InorderIterator$next$79$(self) {
  const _bind = moonbitlang$core$array$$Array$pop$80$(self);
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _curr = _Some;
    if (_curr.$tag === 1) {
      const _Tree = _curr;
      const _key = _Tree._0;
      const _right = _Tree._4;
      const _value = _Tree._1;
      moonbitlang$core$immut$sorted_map$$InorderIterator$move_left$79$(self, _right);
      return { _0: _key, _1: _value };
    } else {
      return $panic();
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$81$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$82$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$75$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$83$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$84$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$77$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$85$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$79$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$86$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$T$size$87$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Tree = self;
    return _Tree._2;
  }
}
function moonbitlang$core$immut$sorted_map$$make_tree$81$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$81$(l) + moonbitlang$core$immut$sorted_map$$T$size$81$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$12$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$82$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$82$(l) + moonbitlang$core$immut$sorted_map$$T$size$82$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$13$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$75$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$75$(l) + moonbitlang$core$immut$sorted_map$$T$size$75$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$14$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$83$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$83$(l) + moonbitlang$core$immut$sorted_map$$T$size$83$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$15$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$84$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$84$(l) + moonbitlang$core$immut$sorted_map$$T$size$84$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$16$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$77$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$77$(l) + moonbitlang$core$immut$sorted_map$$T$size$77$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$17$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$85$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$85$(l) + moonbitlang$core$immut$sorted_map$$T$size$85$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$18$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$79$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$79$(l) + moonbitlang$core$immut$sorted_map$$T$size$79$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$19$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$86$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$86$(l) + moonbitlang$core$immut$sorted_map$$T$size$86$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$20$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$make_tree$87$(key, value, l, r) {
  const size = (moonbitlang$core$immut$sorted_map$$T$size$87$(l) + moonbitlang$core$immut$sorted_map$$T$size$87$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$21$(key, value, size, l, r);
}
function moonbitlang$core$immut$sorted_map$$balance$81$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$81$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$81$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$81$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$81$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$81$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$81$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$81$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$81$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$81$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$81$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$81$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$81$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$81$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$81$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$81$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$81$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$81$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$81$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$82$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$82$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$82$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$82$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$82$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$82$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$82$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$82$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$82$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$82$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$82$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$82$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$82$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$82$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$82$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$82$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$82$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$82$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$82$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$75$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$75$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$75$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$75$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$75$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$75$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$75$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$75$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$75$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$75$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$75$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$75$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$75$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$75$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$75$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$75$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$75$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$75$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$75$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$83$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$83$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$83$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$83$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$83$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$83$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$83$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$83$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$83$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$83$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$83$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$83$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$83$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$83$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$83$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$83$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$83$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$83$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$83$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$84$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$84$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$84$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$84$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$84$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$84$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$84$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$84$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$84$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$84$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$84$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$84$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$84$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$84$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$84$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$84$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$84$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$84$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$84$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$77$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$77$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$77$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$77$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$77$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$77$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$77$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$77$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$77$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$77$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$77$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$77$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$77$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$77$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$77$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$77$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$77$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$77$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$77$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$85$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$85$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$85$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$85$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$85$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$85$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$85$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$85$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$85$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$85$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$85$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$85$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$85$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$85$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$85$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$85$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$85$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$85$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$85$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$79$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$79$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$79$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$79$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$79$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$79$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$79$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$79$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$79$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$79$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$79$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$79$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$79$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$79$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$79$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$79$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$79$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$79$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$79$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$86$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$86$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$86$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$86$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$86$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$86$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$86$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$86$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$86$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$86$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$86$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$86$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$86$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$86$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$86$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$86$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$86$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$86$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$86$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$balance$87$(key, value, l, r) {
  const ln = moonbitlang$core$immut$sorted_map$$T$size$87$(l);
  const rn = moonbitlang$core$immut$sorted_map$$T$size$87$(r);
  if ((ln + rn | 0) < 2) {
    return moonbitlang$core$immut$sorted_map$$make_tree$87$(key, value, l, r);
  } else {
    if (rn > (Math.imul(5, ln) | 0)) {
      if (r.$tag === 1) {
        const _Tree = r;
        const _rl = _Tree._3;
        const _rr = _Tree._4;
        const rln = moonbitlang$core$immut$sorted_map$$T$size$87$(_rl);
        const rrn = moonbitlang$core$immut$sorted_map$$T$size$87$(_rr);
        if (rln < rrn) {
          if (r.$tag === 1) {
            const _Tree$2 = r;
            const _k2 = _Tree$2._0;
            const _v2 = _Tree$2._1;
            const _y = _Tree$2._3;
            const _z = _Tree$2._4;
            return moonbitlang$core$immut$sorted_map$$make_tree$87$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$87$(key, value, l, _y), _z);
          } else {
            return $panic();
          }
        } else {
          _L: {
            if (r.$tag === 1) {
              const _Tree$2 = r;
              const _k3 = _Tree$2._0;
              const _v3 = _Tree$2._1;
              const _x = _Tree$2._3;
              if (_x.$tag === 1) {
                const _Tree$3 = _x;
                const _k2 = _Tree$3._0;
                const _v2 = _Tree$3._1;
                const _y1 = _Tree$3._3;
                const _y2 = _Tree$3._4;
                const _z = _Tree$2._4;
                return moonbitlang$core$immut$sorted_map$$make_tree$87$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$87$(key, value, l, _y1), moonbitlang$core$immut$sorted_map$$make_tree$87$(_k3, _v3, _y2, _z));
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          }
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      if (ln > (Math.imul(5, rn) | 0)) {
        if (l.$tag === 1) {
          const _Tree = l;
          const _ll = _Tree._3;
          const _lr = _Tree._4;
          const lln = moonbitlang$core$immut$sorted_map$$T$size$87$(_ll);
          const lrn = moonbitlang$core$immut$sorted_map$$T$size$87$(_lr);
          if (lrn < lln) {
            if (l.$tag === 1) {
              const _Tree$2 = l;
              const _k1 = _Tree$2._0;
              const _v1 = _Tree$2._1;
              const _x = _Tree$2._3;
              const _y = _Tree$2._4;
              return moonbitlang$core$immut$sorted_map$$make_tree$87$(_k1, _v1, _x, moonbitlang$core$immut$sorted_map$$make_tree$87$(key, value, _y, r));
            } else {
              return $panic();
            }
          } else {
            _L: {
              if (l.$tag === 1) {
                const _Tree$2 = l;
                const _k1 = _Tree$2._0;
                const _v1 = _Tree$2._1;
                const _x = _Tree$2._3;
                const _x$2 = _Tree$2._4;
                if (_x$2.$tag === 1) {
                  const _Tree$3 = _x$2;
                  const _k2 = _Tree$3._0;
                  const _v2 = _Tree$3._1;
                  const _y1 = _Tree$3._3;
                  const _y2 = _Tree$3._4;
                  return moonbitlang$core$immut$sorted_map$$make_tree$87$(_k2, _v2, moonbitlang$core$immut$sorted_map$$make_tree$87$(_k1, _v1, _x, _y1), moonbitlang$core$immut$sorted_map$$make_tree$87$(key, value, _y2, r));
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            }
            return $panic();
          }
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$core$immut$sorted_map$$make_tree$87$(key, value, l, r);
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$81$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$12$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$12$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$12$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = $compare_int(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$81$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$81$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$81$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$81$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$81$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$82$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$13$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$13$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$13$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = moonbitlang$core$builtin$$Compare$compare$0$(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$82$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$82$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$82$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$82$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$82$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$75$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$14$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$14$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$14$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = $compare_int(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$75$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$75$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$75$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$75$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$75$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$83$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$15$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$15$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$15$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = moonbitlang$core$builtin$$Compare$compare$41$(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$83$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$83$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$83$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$83$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$83$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$84$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$16$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$16$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$16$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = $compare_int(key.id, _k.id);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$84$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$84$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$84$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$84$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$84$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$77$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$17$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$17$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$17$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = $compare_int(key.num, _k.num);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$77$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$77$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$77$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$77$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$77$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$85$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$18$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$18$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$18$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = $compare_int(key.num, _k.num);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$85$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$85$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$85$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$85$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$85$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$79$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$19$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$19$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$19$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = $compare_int(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$79$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$79$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$79$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$79$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$79$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$86$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$20$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$20$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$20$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = moonbitlang$core$builtin$$Compare$compare$0$(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$86$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$86$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$86$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$86$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$86$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$add$87$(self, key, value) {
  if (self.$tag === 0) {
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$21$(key, value, 1, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$21$, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$21$);
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _v = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const c = moonbitlang$core$builtin$$Compare$compare$88$(key, _k);
    return c === 0 ? moonbitlang$core$immut$sorted_map$$make_tree$87$(_k, value, _l, _r) : c < 0 ? moonbitlang$core$immut$sorted_map$$balance$87$(_k, _v, moonbitlang$core$immut$sorted_map$$T$add$87$(_l, key, value), _r) : moonbitlang$core$immut$sorted_map$$balance$87$(_k, _v, _l, moonbitlang$core$immut$sorted_map$$T$add$87$(_r, key, value));
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$81$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = $compare_int(key, _k);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$75$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return Option$None$22$;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = $compare_int(key, _k);
      if (c === 0) {
        return new Option$Some$22$(_value);
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$83$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = moonbitlang$core$builtin$$Compare$compare$41$(key, _k);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$84$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = $compare_int(key.id, _k.id);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$85$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = $compare_int(key.num, _k.num);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$77$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = $compare_int(key.num, _k.num);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$79$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = $compare_int(key, _k);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$87$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = moonbitlang$core$builtin$$Compare$compare$88$(key, _k);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$get$82$(self, key) {
  let _tmp = self;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return undefined;
    } else {
      const _Tree = _param;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const c = moonbitlang$core$builtin$$Compare$compare$0$(key, _k);
      if (c === 0) {
        return _value;
      } else {
        if (c < 0) {
          _tmp = _l;
          continue;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$op_get$81$(self, key) {
  return moonbitlang$core$immut$sorted_map$$T$get$81$(self, key);
}
function moonbitlang$core$immut$sorted_map$$T$op_get$77$(self, key) {
  return moonbitlang$core$immut$sorted_map$$T$get$77$(self, key);
}
function moonbitlang$core$immut$sorted_map$$T$map_with_key$89$(self, f) {
  if (self.$tag === 0) {
    return $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$19$;
  } else {
    const _Tree = self;
    const _k = _Tree._0;
    const _value = _Tree._1;
    const _l = _Tree._3;
    const _r = _Tree._4;
    const _size = _Tree._2;
    return new $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Tree$19$(_k, f(_k, _value), _size, moonbitlang$core$immut$sorted_map$$T$map_with_key$89$(_l, f), moonbitlang$core$immut$sorted_map$$T$map_with_key$89$(_r, f));
  }
}
function moonbitlang$core$immut$sorted_map$$iter$46$go$47$2197(yield_, _param246) {
  let _tmp = _param246;
  while (true) {
    const _param246$2 = _tmp;
    if (_param246$2.$tag === 0) {
      return 1;
    } else {
      const _Tree = _param246$2;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const _bind = moonbitlang$core$immut$sorted_map$$iter$46$go$47$2197(yield_, _l);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_({ _0: _k, _1: _value });
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$iter$85$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_map$$iter$46$go$47$2197(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_map$$iter$46$go$47$2211(yield_, _param246) {
  let _tmp = _param246;
  while (true) {
    const _param246$2 = _tmp;
    if (_param246$2.$tag === 0) {
      return 1;
    } else {
      const _Tree = _param246$2;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const _bind = moonbitlang$core$immut$sorted_map$$iter$46$go$47$2211(yield_, _l);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_({ _0: _k, _1: _value });
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$iter$77$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_map$$iter$46$go$47$2211(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_map$$iter$46$go$47$2225(yield_, _param246) {
  let _tmp = _param246;
  while (true) {
    const _param246$2 = _tmp;
    if (_param246$2.$tag === 0) {
      return 1;
    } else {
      const _Tree = _param246$2;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const _bind = moonbitlang$core$immut$sorted_map$$iter$46$go$47$2225(yield_, _l);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_({ _0: _k, _1: _value });
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$iter$86$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_map$$iter$46$go$47$2225(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_map$$iter$46$go$47$2239(yield_, _param246) {
  let _tmp = _param246;
  while (true) {
    const _param246$2 = _tmp;
    if (_param246$2.$tag === 0) {
      return 1;
    } else {
      const _Tree = _param246$2;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const _bind = moonbitlang$core$immut$sorted_map$$iter$46$go$47$2239(yield_, _l);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_({ _0: _k, _1: _value });
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$iter$79$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_map$$iter$46$go$47$2239(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2253(yield_, _param237) {
  let _tmp = _param237;
  while (true) {
    const _param237$2 = _tmp;
    if (_param237$2.$tag === 0) {
      return 1;
    } else {
      const _Tree = _param237$2;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const _bind = moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2253(yield_, _l);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_k, _value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$iter2$75$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2253(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2267(yield_, _param237) {
  let _tmp = _param237;
  while (true) {
    const _param237$2 = _tmp;
    if (_param237$2.$tag === 0) {
      return 1;
    } else {
      const _Tree = _param237$2;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const _bind = moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2267(yield_, _l);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_k, _value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$iter2$83$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2267(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2281(yield_, _param237) {
  let _tmp = _param237;
  while (true) {
    const _param237$2 = _tmp;
    if (_param237$2.$tag === 0) {
      return 1;
    } else {
      const _Tree = _param237$2;
      const _k = _Tree._0;
      const _value = _Tree._1;
      const _l = _Tree._3;
      const _r = _Tree._4;
      const _bind = moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2281(yield_, _l);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_k, _value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _r;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$immut$sorted_map$$T$iter2$79$(self) {
  const _p = (yield_) => moonbitlang$core$immut$sorted_map$$iter2$46$go$47$2281(yield_, self);
  return _p;
}
function moonbitlang$core$immut$sorted_map$$from_iter$77$(iter) {
  const _bind = $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$17$;
  const _acc = { val: _bind };
  iter((_p) => {
    const m = _acc.val;
    _acc.val = moonbitlang$core$immut$sorted_map$$T$add$77$(m, _p._0, _p._1);
    return 1;
  });
  return _acc.val;
}
function moonbitlang$core$immut$sorted_map$$from_iter$86$(iter) {
  const _bind = $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$20$;
  const _acc = { val: _bind };
  iter((_p) => {
    const m = _acc.val;
    _acc.val = moonbitlang$core$immut$sorted_map$$T$add$86$(m, _p._0, _p._1);
    return 1;
  });
  return _acc.val;
}
function moonbitlang$core$immut$sorted_map$$T$keys$79$(self) {
  const _bind = moonbitlang$core$immut$sorted_map$$T$iter$79$(self);
  return moonbitlang$core$builtin$$Iter$collect$7$((_p) => _bind((_p$2) => {
    const _k = _p$2._0;
    return _p(_k);
  }));
}
function moonbitlang$core$builtin$$Eq$op_equal$90$(self, other) {
  const iter = moonbitlang$core$immut$sorted_map$$InorderIterator$new$77$(self);
  const iter1 = moonbitlang$core$immut$sorted_map$$InorderIterator$new$77$(other);
  let _tmp = moonbitlang$core$immut$sorted_map$$InorderIterator$next$77$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$77$(iter1);
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param === undefined) {
      return _param$2 === undefined;
    } else {
      const _Some = _param;
      const _a = _Some;
      if (_param$2 === undefined) {
        return false;
      } else {
        const _Some$2 = _param$2;
        const _b = _Some$2;
        if (moonbitlang$core$builtin$$Eq$op_equal$59$(_a, _b)) {
          const _tmp$3 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$77$(iter);
          const _tmp$4 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$77$(iter1);
          _tmp = _tmp$3;
          _tmp$2 = _tmp$4;
          continue;
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$91$(self, other) {
  const iter = moonbitlang$core$immut$sorted_map$$InorderIterator$new$75$(self);
  const iter1 = moonbitlang$core$immut$sorted_map$$InorderIterator$new$75$(other);
  let _tmp = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter1);
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param === undefined) {
      return _param$2 === undefined;
    } else {
      const _Some = _param;
      const _a = _Some;
      if (_param$2 === undefined) {
        return false;
      } else {
        const _Some$2 = _param$2;
        const _b = _Some$2;
        if (moonbitlang$core$builtin$$Eq$op_equal$92$(_a, _b)) {
          const _tmp$3 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter);
          const _tmp$4 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter1);
          _tmp = _tmp$3;
          _tmp$2 = _tmp$4;
          continue;
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$93$(self, other) {
  const iter = moonbitlang$core$immut$sorted_map$$InorderIterator$new$79$(self);
  const iter1 = moonbitlang$core$immut$sorted_map$$InorderIterator$new$79$(other);
  let _tmp = moonbitlang$core$immut$sorted_map$$InorderIterator$next$79$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$79$(iter1);
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param === undefined) {
      return _param$2 === undefined;
    } else {
      const _Some = _param;
      const _a = _Some;
      if (_param$2 === undefined) {
        return false;
      } else {
        const _Some$2 = _param$2;
        const _b = _Some$2;
        if (_a._0 === _b._0 && _a._1 === _b._1) {
          const _tmp$3 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$79$(iter);
          const _tmp$4 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$79$(iter1);
          _tmp = _tmp$3;
          _tmp$2 = _tmp$4;
          continue;
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$91$(self, other) {
  const iter = moonbitlang$core$immut$sorted_map$$InorderIterator$new$75$(self);
  const iter1 = moonbitlang$core$immut$sorted_map$$InorderIterator$new$75$(other);
  let _tmp = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter1);
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param === undefined) {
      return _param$2 === undefined ? 0 : -1;
    } else {
      const _Some = _param;
      const _a = _Some;
      if (_param$2 === undefined) {
        return 1;
      } else {
        const _Some$2 = _param$2;
        const _b = _Some$2;
        const cmp = moonbitlang$core$builtin$$Compare$compare$92$(_a, _b);
        if (cmp === 0) {
          const _tmp$3 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter);
          const _tmp$4 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$75$(iter1);
          _tmp = _tmp$3;
          _tmp$2 = _tmp$4;
          continue;
        } else {
          return cmp;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$93$(self, other) {
  const iter = moonbitlang$core$immut$sorted_map$$InorderIterator$new$79$(self);
  const iter1 = moonbitlang$core$immut$sorted_map$$InorderIterator$new$79$(other);
  let _tmp = moonbitlang$core$immut$sorted_map$$InorderIterator$next$79$(iter);
  let _tmp$2 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$79$(iter1);
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param === undefined) {
      return _param$2 === undefined ? 0 : -1;
    } else {
      const _Some = _param;
      const _a = _Some;
      if (_param$2 === undefined) {
        return 1;
      } else {
        const _Some$2 = _param$2;
        const _b = _Some$2;
        const cmp = moonbitlang$core$builtin$$Compare$compare$46$(_a, _b);
        if (cmp === 0) {
          const _tmp$3 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$79$(iter);
          const _tmp$4 = moonbitlang$core$immut$sorted_map$$InorderIterator$next$79$(iter1);
          _tmp = _tmp$3;
          _tmp$2 = _tmp$4;
          continue;
        } else {
          return cmp;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Hash$hash_combine$90$(self, hasher) {
  const _bind = moonbitlang$core$immut$sorted_map$$T$iter$77$(self);
  _bind((e) => {
    moonbitlang$core$builtin$$Hasher$combine$94$(hasher, e._0);
    moonbitlang$core$builtin$$Hasher$combine$95$(hasher, e._1);
    return 1;
  });
}
function moonbitlang$core$builtin$$Hash$hash_combine$93$(self, hasher) {
  const _bind = moonbitlang$core$immut$sorted_map$$T$iter$79$(self);
  _bind((e) => {
    moonbitlang$core$builtin$$Hasher$combine$7$(hasher, e._0);
    moonbitlang$core$builtin$$Hasher$combine$7$(hasher, e._1);
    return 1;
  });
}
function moonbitlang$core$immut$list$$T$rev_concat$96$(self, other) {
  let _tmp = self;
  let _tmp$2 = other;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param.$tag === 0) {
      return _param$2;
    } else {
      const _Cons = _param;
      const _head = _Cons._0;
      const _tail = _Cons._1;
      const _tmp$3 = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$23$(_head, _param$2);
      _tmp = _tail;
      _tmp$2 = _tmp$3;
      continue;
    }
  }
}
function moonbitlang$core$immut$list$$T$rev$96$(self) {
  return moonbitlang$core$immut$list$$T$rev_concat$96$(self, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$23$);
}
function moonbitlang$core$immut$list$$T$to_array$97$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$97$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$to_array$98$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _Cons = self;
    const _x = _Cons._0;
    const _xs = _Cons._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _Cons$2 = _param;
        const _x$2 = _Cons$2._0;
        const _xs$2 = _Cons$2._1;
        moonbitlang$core$array$$Array$push$98$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$immut$list$$T$tail$9$(self) {
  if (self.$tag === 0) {
    return $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$24$;
  } else {
    const _Cons = self;
    const _tail = _Cons._1;
    return _tail;
  }
}
function moonbitlang$core$immut$list$$T$tail$13$(self) {
  if (self.$tag === 0) {
    return $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$25$;
  } else {
    const _Cons = self;
    const _tail = _Cons._1;
    return _tail;
  }
}
function moonbitlang$core$immut$list$$T$tail$22$(self) {
  if (self.$tag === 0) {
    return $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$26$;
  } else {
    const _Cons = self;
    const _tail = _Cons._1;
    return _tail;
  }
}
function moonbitlang$core$immut$list$$T$unsafe_head$9$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$9$("head of empty list");
  } else {
    const _Cons = self;
    const _head = _Cons._0;
    return _head;
  }
}
function moonbitlang$core$immut$list$$T$unsafe_head$13$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$13$("head of empty list");
  } else {
    const _Cons = self;
    const _head = _Cons._0;
    return _head;
  }
}
function moonbitlang$core$immut$list$$T$unsafe_head$22$(self) {
  if (self.$tag === 0) {
    return moonbitlang$core$abort$$abort$22$("head of empty list");
  } else {
    const _Cons = self;
    const _head = _Cons._0;
    return _head;
  }
}
function moonbitlang$core$immut$list$$T$drop$9$(self, n) {
  let _param99;
  let _param100;
  _L: {
    if (n <= 0) {
      return self;
    } else {
      _param99 = n;
      _param100 = self;
      break _L;
    }
  }
  let _tmp = _param99;
  let _tmp$2 = _param100;
  while (true) {
    const _param99$2 = _tmp;
    const _param100$2 = _tmp$2;
    if (_param100$2.$tag === 0) {
      return $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$24$;
    } else {
      if (_param99$2 === 1) {
        const _Cons = _param100$2;
        const _xs = _Cons._1;
        return _xs;
      } else {
        const _Cons = _param100$2;
        const _xs = _Cons._1;
        const _tmp$3 = _param99$2 - 1 | 0;
        _tmp = _tmp$3;
        _tmp$2 = _xs;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$list$$T$drop$13$(self, n) {
  let _param99;
  let _param100;
  _L: {
    if (n <= 0) {
      return self;
    } else {
      _param99 = n;
      _param100 = self;
      break _L;
    }
  }
  let _tmp = _param99;
  let _tmp$2 = _param100;
  while (true) {
    const _param99$2 = _tmp;
    const _param100$2 = _tmp$2;
    if (_param100$2.$tag === 0) {
      return $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$25$;
    } else {
      if (_param99$2 === 1) {
        const _Cons = _param100$2;
        const _xs = _Cons._1;
        return _xs;
      } else {
        const _Cons = _param100$2;
        const _xs = _Cons._1;
        const _tmp$3 = _param99$2 - 1 | 0;
        _tmp = _tmp$3;
        _tmp$2 = _xs;
        continue;
      }
    }
  }
}
function moonbitlang$core$immut$list$$T$drop$22$(self, n) {
  let _param99;
  let _param100;
  _L: {
    if (n <= 0) {
      return self;
    } else {
      _param99 = n;
      _param100 = self;
      break _L;
    }
  }
  let _tmp = _param99;
  let _tmp$2 = _param100;
  while (true) {
    const _param99$2 = _tmp;
    const _param100$2 = _tmp$2;
    if (_param100$2.$tag === 0) {
      return $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$26$;
    } else {
      if (_param99$2 === 1) {
        const _Cons = _param100$2;
        const _xs = _Cons._1;
        return _xs;
      } else {
        const _Cons = _param100$2;
        const _xs = _Cons._1;
        const _tmp$3 = _param99$2 - 1 | 0;
        _tmp = _tmp$3;
        _tmp$2 = _xs;
        continue;
      }
    }
  }
}
function moonbitlang$core$sorted_map$$new_node$99$(key, value) {
  return { key: key, value: value, left: undefined, right: undefined, height: 1 };
}
function moonbitlang$core$sorted_map$$new_node$100$(key, value) {
  return { key: key, value: value, left: undefined, right: undefined, height: 1 };
}
function moonbitlang$core$builtin$$Eq$op_equal$101$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$91$(self.key, other.key);
}
function moonbitlang$core$sorted_map$$max(x, y) {
  return x > y ? x : y;
}
function moonbitlang$core$sorted_map$$height$99$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_map$$height$100$(node) {
  if (node === undefined) {
    return 0;
  } else {
    const _Some = node;
    const _n = _Some;
    return _n.height;
  }
}
function moonbitlang$core$sorted_map$$height_ge$99$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_map$$height_ge$100$(x1, x2) {
  if (x2 === undefined) {
    return true;
  } else {
    const _Some = x2;
    const _n2 = _Some;
    if (x1 === undefined) {
      return false;
    } else {
      const _Some$2 = x1;
      const _n1 = _Some$2;
      return _n1.height >= _n2.height;
    }
  }
}
function moonbitlang$core$sorted_map$$Node$update_height$99$(self) {
  self.height = 1 + moonbitlang$core$sorted_map$$max(moonbitlang$core$sorted_map$$height$99$(self.left), moonbitlang$core$sorted_map$$height$99$(self.right)) | 0;
}
function moonbitlang$core$sorted_map$$Node$update_height$100$(self) {
  self.height = 1 + moonbitlang$core$sorted_map$$max(moonbitlang$core$sorted_map$$height$100$(self.left), moonbitlang$core$sorted_map$$height$100$(self.right)) | 0;
}
function moonbitlang$core$sorted_map$$rotate_l$99$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$102$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_map$$Node$update_height$99$(n);
  moonbitlang$core$sorted_map$$Node$update_height$99$(r);
  return r;
}
function moonbitlang$core$sorted_map$$rotate_l$100$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$103$(n.right);
  n.right = r.left;
  r.left = n;
  moonbitlang$core$sorted_map$$Node$update_height$100$(n);
  moonbitlang$core$sorted_map$$Node$update_height$100$(r);
  return r;
}
function moonbitlang$core$sorted_map$$rotate_r$99$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$102$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_map$$Node$update_height$99$(n);
  moonbitlang$core$sorted_map$$Node$update_height$99$(l);
  return l;
}
function moonbitlang$core$sorted_map$$rotate_r$100$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$103$(n.left);
  n.left = l.right;
  l.right = n;
  moonbitlang$core$sorted_map$$Node$update_height$100$(n);
  moonbitlang$core$sorted_map$$Node$update_height$100$(l);
  return l;
}
function moonbitlang$core$sorted_map$$rotate_lr$99$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$102$(n.left);
  const v = moonbitlang$core$sorted_map$$rotate_l$99$(l);
  n.left = v;
  return moonbitlang$core$sorted_map$$rotate_r$99$(n);
}
function moonbitlang$core$sorted_map$$rotate_lr$100$(n) {
  const l = moonbitlang$core$option$$Option$unwrap$103$(n.left);
  const v = moonbitlang$core$sorted_map$$rotate_l$100$(l);
  n.left = v;
  return moonbitlang$core$sorted_map$$rotate_r$100$(n);
}
function moonbitlang$core$sorted_map$$rotate_rl$99$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$102$(n.right);
  const v = moonbitlang$core$sorted_map$$rotate_r$99$(r);
  n.right = v;
  return moonbitlang$core$sorted_map$$rotate_l$99$(n);
}
function moonbitlang$core$sorted_map$$rotate_rl$100$(n) {
  const r = moonbitlang$core$option$$Option$unwrap$103$(n.right);
  const v = moonbitlang$core$sorted_map$$rotate_r$100$(r);
  n.right = v;
  return moonbitlang$core$sorted_map$$rotate_l$100$(n);
}
function moonbitlang$core$sorted_map$$balance$99$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_map$$height$99$(l);
  const hr = moonbitlang$core$sorted_map$$height$99$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$102$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_map$$height_ge$99$(_ll, _lr) ? moonbitlang$core$sorted_map$$rotate_r$99$(root) : moonbitlang$core$sorted_map$$rotate_lr$99$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$102$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_map$$height_ge$99$(_rr, _rl) ? moonbitlang$core$sorted_map$$rotate_l$99$(root) : moonbitlang$core$sorted_map$$rotate_rl$99$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_map$$Node$update_height$99$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_map$$balance$100$(root) {
  const l = root.left;
  const r = root.right;
  const hl = moonbitlang$core$sorted_map$$height$100$(l);
  const hr = moonbitlang$core$sorted_map$$height$100$(r);
  let new_root;
  if (hl > (hr + 1 | 0)) {
    const _bind = moonbitlang$core$option$$Option$unwrap$103$(l);
    const _ll = _bind.left;
    const _lr = _bind.right;
    new_root = moonbitlang$core$sorted_map$$height_ge$100$(_ll, _lr) ? moonbitlang$core$sorted_map$$rotate_r$100$(root) : moonbitlang$core$sorted_map$$rotate_lr$100$(root);
  } else {
    if (hr > (hl + 1 | 0)) {
      const _bind = moonbitlang$core$option$$Option$unwrap$103$(r);
      const _rl = _bind.left;
      const _rr = _bind.right;
      new_root = moonbitlang$core$sorted_map$$height_ge$100$(_rr, _rl) ? moonbitlang$core$sorted_map$$rotate_l$100$(root) : moonbitlang$core$sorted_map$$rotate_rl$100$(root);
    } else {
      new_root = root;
    }
  }
  moonbitlang$core$sorted_map$$Node$update_height$100$(new_root);
  return new_root;
}
function moonbitlang$core$sorted_map$$add_node$99$(root, key, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_map$$new_node$99$(key, value), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    if (moonbitlang$core$builtin$$Eq$op_equal$91$(key, _n.key)) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (moonbitlang$core$builtin$$op_lt$76$(key, _n.key)) {
        const _bind = moonbitlang$core$sorted_map$$add_node$99$(l, key, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_map$$balance$99$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_map$$add_node$99$(r, key, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_map$$balance$99$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_map$$add_node$100$(root, key, value) {
  if (root === undefined) {
    return { _0: moonbitlang$core$sorted_map$$new_node$100$(key, value), _1: true };
  } else {
    const _Some = root;
    const _n = _Some;
    if (key === _n.key) {
      _n.value = value;
      return { _0: _n, _1: false };
    } else {
      const l = _n.left;
      const r = _n.right;
      if (key < _n.key) {
        const _bind = moonbitlang$core$sorted_map$$add_node$100$(l, key, value);
        const _nl = _bind._0;
        const _inserted = _bind._1;
        _n.left = _nl;
        return { _0: moonbitlang$core$sorted_map$$balance$100$(_n), _1: _inserted };
      } else {
        const _bind = moonbitlang$core$sorted_map$$add_node$100$(r, key, value);
        const _nr = _bind._0;
        const _inserted = _bind._1;
        _n.right = _nr;
        return { _0: moonbitlang$core$sorted_map$$balance$100$(_n), _1: _inserted };
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$add$99$(self, key, value) {
  const _bind = moonbitlang$core$sorted_map$$add_node$99$(self.root, key, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$104$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_map$$T$add$100$(self, key, value) {
  const _bind = moonbitlang$core$sorted_map$$add_node$100$(self.root, key, value);
  const _new_root = _bind._0;
  const _inserted = _bind._1;
  if (moonbitlang$core$builtin$$op_notequal$105$(self.root, _new_root)) {
    self.root = _new_root;
  }
  if (_inserted) {
    self.size = self.size + 1 | 0;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$sorted_map$$T$op_set$99$(self, key, value) {
  moonbitlang$core$sorted_map$$T$add$99$(self, key, value);
}
function moonbitlang$core$sorted_map$$T$op_set$100$(self, key, value) {
  moonbitlang$core$sorted_map$$T$add$100$(self, key, value);
}
function moonbitlang$core$sorted_map$$T$get$99$(self, key) {
  let _tmp = self.root;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return undefined;
    } else {
      const _Some = _param;
      const _node = _Some;
      const cmp = moonbitlang$core$builtin$$Compare$compare$91$(key, _node.key);
      if (cmp === 0) {
        return _node.value;
      } else {
        if (cmp > 0) {
          _tmp = _node.right;
          continue;
        } else {
          _tmp = _node.left;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$get$100$(self, key) {
  let _tmp = self.root;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return undefined;
    } else {
      const _Some = _param;
      const _node = _Some;
      const cmp = $compare_int(key, _node.key);
      if (cmp === 0) {
        return _node.value;
      } else {
        if (cmp > 0) {
          _tmp = _node.right;
          continue;
        } else {
          _tmp = _node.left;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$new$99$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_map$$new$100$() {
  return { root: undefined, size: 0 };
}
function moonbitlang$core$sorted_map$$iter2$46$go$47$2591(yield_, x) {
  let _tmp = x;
  while (true) {
    const x$2 = _tmp;
    if (x$2 === undefined) {
      return 1;
    } else {
      const _Some = x$2;
      const _x = _Some;
      const _left = _x.left;
      const _right = _x.right;
      const _key = _x.key;
      const _value = _x.value;
      const _bind = moonbitlang$core$sorted_map$$iter2$46$go$47$2591(yield_, _left);
      if (_bind === 0) {
        return 0;
      } else {
        const _bind$2 = yield_(_key, _value);
        if (_bind$2 === 0) {
          return 0;
        } else {
          _tmp = _right;
          continue;
        }
      }
    }
  }
}
function moonbitlang$core$sorted_map$$T$iter2$99$(self) {
  const _p = (yield_) => moonbitlang$core$sorted_map$$iter2$46$go$47$2591(yield_, self.root);
  return _p;
}
function moonbitlang$core$math$$maximum$7$(x, y) {
  return x > y ? x : y;
}
function moonbitlang$core$math$$minimum$7$(x, y) {
  return x > y ? y : x;
}
function moonbitlang$core$option$$Option$or$106$(self, default_) {
  if (self === undefined) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$option$$Option$or$107$(self, default_) {
  if (self === undefined) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$option$$Option$or$7$(self, default_) {
  if (self === undefined) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$option$$Option$or$18$(self, default_) {
  if (self === undefined) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$option$$Option$or$108$(self, default_) {
  if (self === undefined) {
    return default_;
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$option$$Option$or_else$78$(self, default_) {
  if (self === undefined) {
    return default_();
  } else {
    const _Some = self;
    const _t = _Some;
    return _t;
  }
}
function moonbitlang$core$builtin$$Compare$compare$109$(self, other) {
  if (self === undefined) {
    return other === undefined ? 0 : -1;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return 1;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return $compare_int(_x, _y);
    }
  }
}
function moonbitlang$core$hashmap$$power_2_above(x, n) {
  let _tmp = x;
  while (true) {
    const i = _tmp;
    if (i >= n) {
      return i;
    }
    const next = i << 1;
    if (next < 0) {
      return i;
    }
    _tmp = next;
    continue;
  }
}
function moonbitlang$core$hashmap$$new$1$(capacity) {
  const capacity$2 = moonbitlang$core$hashmap$$power_2_above(8, capacity);
  const _bind = $make_array_len_and_init(capacity$2, undefined);
  const _bind$2 = capacity$2 - 1 | 0;
  return { entries: _bind, capacity: capacity$2, capacity_mask: _bind$2, size: 0 };
}
function moonbitlang$core$hashmap$$T$set_with_hash$1$(self, key, value, hash) {
  if (self.size >= (self.capacity / 2 | 0)) {
    moonbitlang$core$hashmap$$T$grow$1$(self);
  }
  let _tmp = hash & self.capacity_mask;
  let _tmp$2 = { psl: 0, hash: hash, key: key, value: value };
  while (true) {
    const idx = _tmp;
    const entry = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      const _tmp$4 = self.entries;
      $bound_check(_tmp$4, idx);
      _tmp$4[idx] = entry;
      self.size = self.size + 1 | 0;
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (_curr_entry.hash === entry.hash && _curr_entry.key === entry.key) {
        _curr_entry.value = entry.value;
        break;
      }
      let curr_entry;
      if (entry.psl > _curr_entry.psl) {
        const _tmp$4 = self.entries;
        $bound_check(_tmp$4, idx);
        _tmp$4[idx] = entry;
        curr_entry = _curr_entry;
      } else {
        curr_entry = entry;
      }
      curr_entry.psl = curr_entry.psl + 1 | 0;
      const _tmp$4 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = curr_entry;
      continue;
    }
  }
}
function moonbitlang$core$hashmap$$T$grow$1$(self) {
  const old_entries = self.entries;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  self.size = 0;
  const _end99 = old_entries.length;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end99) {
      $bound_check(old_entries, i);
      const _bind = old_entries[i];
      if (_bind === undefined) {
      } else {
        const _Some = _bind;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _hash = _x.hash;
        moonbitlang$core$hashmap$$T$set_with_hash$1$(self, _key, _value, _hash);
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$hashmap$$T$set$1$(self, key, value) {
  moonbitlang$core$hashmap$$T$set_with_hash$1$(self, key, value, moonbitlang$core$builtin$$Hash$hash$71$(key));
}
function moonbitlang$core$hashmap$$from_array$1$(arr) {
  const m = moonbitlang$core$hashmap$$new$1$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$hashmap$$T$set$1$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$hashmap$$T$get$1$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$71$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Logger$write_object$110$(self, obj) {
  moonbitlang$core$builtin$$Show$output$110$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$107$(self, obj) {
  moonbitlang$core$builtin$$Show$output$107$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$111$(self, obj) {
  moonbitlang$core$builtin$$Show$output$112$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$0$(self, obj) {
  moonbitlang$core$builtin$$Show$output$0$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$2$(self, obj) {
  moonbitlang$core$builtin$$Show$output$113$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$114$(self, obj) {
  moonbitlang$core$builtin$$Show$output$114$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$7$(self, obj) {
  moonbitlang$core$builtin$$Show$output$7$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$34$(self, obj) {
  moonbitlang$core$builtin$$Show$output$34$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$115$(self, obj) {
  moonbitlang$core$builtin$$Show$output$115$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$116$(self, obj) {
  moonbitlang$core$builtin$$Show$output$116$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$117$(self, obj) {
  moonbitlang$core$builtin$$Show$output$118$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$119$(self, obj) {
  moonbitlang$core$builtin$$Show$output$119$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$120$(self, obj) {
  moonbitlang$core$builtin$$Show$output$121$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$122$(self, obj) {
  moonbitlang$core$builtin$$Show$output$122$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$70$(self, obj) {
  moonbitlang$core$builtin$$Show$output$70$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$15$(self, obj) {
  moonbitlang$core$builtin$$Show$output$109$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$123$(self, obj) {
  moonbitlang$core$builtin$$Show$output$123$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$124$(self, obj) {
  moonbitlang$core$builtin$$Show$output$124$(obj, self);
}
function moonbitlang$core$builtin$$Logger$write_object$125$(self, obj) {
  moonbitlang$core$builtin$$Show$output$125$(obj, self);
}
function moonbitlang$core$builtin$$Eq$op_equal$72$(_x_2379, _x_2380) {
  if (_x_2379 === 0) {
    if (_x_2380 === 0) {
      return true;
    } else {
      return false;
    }
  } else {
    if (_x_2380 === 1) {
      return true;
    } else {
      return false;
    }
  }
}
function moonbitlang$core$builtin$$StringBuilder$new(size_hint) {
  return { val: "" };
}
function moonbitlang$core$builtin$$op_notequal$47$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$126$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$48$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$127$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$25$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$25$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$128$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$129$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$104$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$130$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$105$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$131$(x, y);
}
function moonbitlang$core$builtin$$op_notequal$49$(x, y) {
  return !moonbitlang$core$builtin$$Eq$op_equal$132$(x, y);
}
function moonbitlang$core$builtin$$println$0$(input) {
  console.log(input);
}
function moonbitlang$core$builtin$$println$133$(input) {
  console.log(moonbitlang$core$builtin$$Show$to_string$134$(input));
}
function moonbitlang$core$builtin$$println$135$(input) {
  console.log(moonbitlang$core$builtin$$Show$to_string$136$(input));
}
function moonbitlang$core$builtin$$op_lt$65$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$65$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$107$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$107$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$3$(self_, other) {
  return $compare_int(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$24$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$35$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$25$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$25$(self_, other) < 0;
}
function moonbitlang$core$builtin$$op_lt$76$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$91$(self_, other) < 0;
}
function moonbitlang$core$builtin$$Logger$write_char$40$(self, ch) {
  const _bind = self;
  _bind.val = `${_bind.val}${String.fromCodePoint(ch)}`;
}
function moonbitlang$core$builtin$$op_gt$65$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$65$(self_, other) > 0;
}
function moonbitlang$core$builtin$$op_gt$107$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$107$(self_, other) > 0;
}
function moonbitlang$core$builtin$$op_gt$3$(self_, other) {
  return $compare_int(self_, other) > 0;
}
function moonbitlang$core$builtin$$op_gt$24$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$35$(self_, other) > 0;
}
function moonbitlang$core$builtin$$op_gt$25$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$25$(self_, other) > 0;
}
function moonbitlang$core$builtin$$op_le$65$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$65$(self_, other) <= 0;
}
function moonbitlang$core$builtin$$op_ge$65$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$65$(self_, other) >= 0;
}
function moonbitlang$core$builtin$$op_ge$24$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$35$(self_, other) >= 0;
}
function moonbitlang$core$builtin$$op_ge$25$(self_, other) {
  return moonbitlang$core$builtin$$Compare$compare$25$(self_, other) >= 0;
}
function moonbitlang$core$builtin$$code_point_of_surrogate_pair(leading, trailing) {
  return (((Math.imul(leading - 55296 | 0, 1024) | 0) + trailing | 0) - 56320 | 0) + 65536 | 0;
}
function moonbitlang$core$string$$String$unsafe_char_at(self, index) {
  const c1 = self.charCodeAt(index);
  if (55296 <= c1 && c1 <= 56319) {
    const _tmp = index + 1 | 0;
    const c2 = self.charCodeAt(_tmp);
    return moonbitlang$core$builtin$$code_point_of_surrogate_pair(c1, c2);
  } else {
    return c1;
  }
}
function moonbitlang$core$array$$Array$op_get$137$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$39$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$138$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$139$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$16$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$37$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$140$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$141$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$142$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$25$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$36$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$94$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$7$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$56$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$143$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$144$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$array$$Array$op_get$38$(self, index) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    return self[index];
  } else {
    return $panic();
  }
}
function moonbitlang$core$builtin$$Logger$write_string$40$(self, str) {
  const _bind = self;
  _bind.val = `${_bind.val}${str}`;
}
function moonbitlang$core$bytes$$Bytes$makei(length, value) {
  if (length <= 0) {
    return $bytes_literal$0;
  }
  const arr = $make_array_len_and_init(length, value(0));
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < length) {
      $bound_check(arr, i);
      arr[i] = value(i);
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$FixedArray$blit_from_string(self, bytes_offset, str, str_offset, length) {
  const e1 = (bytes_offset + length | 0) - 1 | 0;
  const e2 = (str_offset + length | 0) - 1 | 0;
  const len1 = self.length;
  const len2 = str.length;
  if (length >= 0 && (bytes_offset >= 0 && (e1 < len1 && (str_offset >= 0 && e2 < len2)))) {
    const end_str_offset = str_offset + length | 0;
    let _tmp = str_offset;
    let _tmp$2 = bytes_offset;
    while (true) {
      const i = _tmp;
      const j = _tmp$2;
      if (i < end_str_offset) {
        const c = str.charCodeAt(i);
        const _p = c & 255;
        $bound_check(self, j);
        self[j] = _p & 255;
        const _tmp$3 = j + 1 | 0;
        const _p$2 = c >>> 8 | 0;
        $bound_check(self, _tmp$3);
        self[_tmp$3] = _p$2 & 255;
        const _tmp$4 = i + 1 | 0;
        const _tmp$5 = j + 2 | 0;
        _tmp = _tmp$4;
        _tmp$2 = _tmp$5;
        continue;
      } else {
        return;
      }
    }
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$FixedArray$blit_from_bytes(self, bytes_offset, src, src_offset, length) {
  const e1 = (bytes_offset + length | 0) - 1 | 0;
  const e2 = (src_offset + length | 0) - 1 | 0;
  const len1 = self.length;
  const len2 = src.length;
  if (length >= 0 && (bytes_offset >= 0 && (e1 < len1 && (src_offset >= 0 && e2 < len2)))) {
    const end_src_offset = src_offset + length | 0;
    let _tmp = src_offset;
    let _tmp$2 = bytes_offset;
    while (true) {
      const i = _tmp;
      const j = _tmp$2;
      if (i < end_src_offset) {
        $bound_check(src, i);
        $bound_check(self, j);
        self[j] = src[i];
        const _tmp$3 = i + 1 | 0;
        const _tmp$4 = j + 1 | 0;
        _tmp = _tmp$3;
        _tmp$2 = _tmp$4;
        continue;
      } else {
        return;
      }
    }
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$145$(self, other) {
  return self._0 === other._0 && moonbitlang$core$builtin$$Eq$op_equal$146$(self._1, other._1);
}
function moonbitlang$core$builtin$$Eq$op_equal$59$(self, other) {
  const _p = self._0;
  const _p$2 = other._0;
  if (_p.num === _p$2.num) {
    return moonbitlang$core$builtin$$Eq$op_equal$95$(self._1, other._1);
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$35$(self, other) {
  const _p = self._0;
  const _p$2 = other._0;
  if (_p._0 === _p$2._0 && _p._1 === _p$2._1) {
    return self._1 === other._1;
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$147$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$148$(self._0, other._0) && moonbitlang$core$builtin$$Eq$op_equal$148$(self._1, other._1);
}
function moonbitlang$core$builtin$$Eq$op_equal$149$(self, other) {
  const _p = self._0;
  const _p$2 = other._0;
  if (_p === _p$2) {
    const _p$3 = self._1;
    const _p$4 = other._1;
    return _p$3 === _p$4;
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$92$(self, other) {
  return self._0 === other._0 && moonbitlang$core$builtin$$Eq$op_equal$150$(self._1, other._1);
}
function moonbitlang$core$builtin$$Eq$op_equal$54$(self, other) {
  return moonbitlang$core$builtin$$Eq$op_equal$38$(self._0, other._0) && self._1 === other._1;
}
function moonbitlang$core$builtin$$MyInt64$from_int(value) {
  return { hi: value >> 31 & -1, lo: value | 0 };
}
function moonbitlang$core$int$$Int$to_int64(self) {
  return moonbitlang$core$builtin$$MyInt64$from_int(self);
}
function moonbitlang$core$int64$$Int64$to_int(self) {
  const _p = self;
  return _p.lo;
}
function moonbitlang$core$builtin$$output$46$abs$124$2118(n) {
  return n < 0 ? 0 - n | 0 : n;
}
function moonbitlang$core$builtin$$output$46$write_digits$124$2120(_env, num) {
  const radix = _env._1;
  const logger = _env._0;
  const num2 = num / radix | 0;
  if (num2 !== 0) {
    moonbitlang$core$builtin$$output$46$write_digits$124$2120(_env, num2);
  }
  const _tmp = moonbitlang$core$builtin$$output$46$abs$124$2118(num % radix | 0);
  $bound_check("0123456789abcdefghijklmnopqrstuvwxyz", _tmp);
  logger.method_2(logger.self, "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(_tmp));
}
function moonbitlang$core$int$$Int$output(self, logger, radix) {
  if (self < 0) {
    logger.method_2(logger.self, 45);
  }
  const _env = { _0: logger, _1: radix };
  moonbitlang$core$builtin$$output$46$write_digits$124$2120(_env, moonbitlang$core$builtin$$output$46$abs$124$2118(self));
}
function moonbitlang$core$int$$Int$output_size_hint(radix) {
  return radix >= 2 && radix < 7 ? 36 : radix >= 8 && radix < 15 ? 18 : radix >= 16 && radix <= 36 ? 10 : moonbitlang$core$abort$$abort$7$("radix must be between 2 and 36");
}
function moonbitlang$core$builtin$$unsafe_make_string(_tmp, _tmp$2) {
  return $unsafe_make_string(_tmp, _tmp$2);
}
function moonbitlang$core$string$$String$make(length, value) {
  if (length >= 0) {
    if (value <= 65535) {
      return moonbitlang$core$builtin$$unsafe_make_string(length, value);
    } else {
      const buf = moonbitlang$core$builtin$$StringBuilder$new(Math.imul(2, length) | 0);
      let _tmp = 0;
      while (true) {
        const _ = _tmp;
        if (_ < length) {
          moonbitlang$core$builtin$$Logger$write_char$40$(buf, value);
          _tmp = _ + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      return buf.val;
    }
  } else {
    return moonbitlang$core$abort$$abort$0$("invalid length");
  }
}
function moonbitlang$core$string$$String$substring(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end;
  }
  return start >= 0 && (start <= end$2 && end$2 <= len) ? self.substring(start, end$2) : $panic();
}
function moonbitlang$core$builtin$$Logger$write_substring$40$(self, str, start, len) {
  const _bind = self;
  _bind.val = `${_bind.val}${moonbitlang$core$string$$String$substring(str, start, start + len | 0)}`;
}
function moonbitlang$core$builtin$$StringBuilder$reset(self) {
  self.val = "";
}
function moonbitlang$core$builtin$$Hasher$combine$0$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$0$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$78$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$90$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$56$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$59$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$55$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$55$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$18$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$58$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$95$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$95$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$94$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$94$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$3$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$3$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$52$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$54$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$7$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$7$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$38$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$38$(value, self);
}
function moonbitlang$core$builtin$$Hasher$combine$70$(self, value) {
  moonbitlang$core$builtin$$Hash$hash_combine$70$(value, self);
}
function moonbitlang$core$builtin$$Hash$hash_combine$59$(self, hasher) {
  const _a = self._0;
  const _b = self._1;
  moonbitlang$core$builtin$$Hasher$combine$94$(hasher, _a);
  moonbitlang$core$builtin$$Hasher$combine$95$(hasher, _b);
}
function moonbitlang$core$builtin$$Hash$hash_combine$149$(self, hasher) {
  const _a = self._0;
  const _b = self._1;
  moonbitlang$core$builtin$$Hasher$combine$3$(hasher, _a);
  moonbitlang$core$builtin$$Hasher$combine$3$(hasher, _b);
}
function moonbitlang$core$builtin$$Hash$hash_combine$54$(self, hasher) {
  const _a = self._0;
  const _b = self._1;
  moonbitlang$core$builtin$$Hasher$combine$38$(hasher, _a);
  moonbitlang$core$builtin$$Hasher$combine$7$(hasher, _b);
}
function moonbitlang$core$builtin$$Hash$hash_combine$151$(self, hasher) {
  const _a = self._0;
  const _b = self._1;
  moonbitlang$core$builtin$$Hasher$combine$70$(hasher, _a);
  moonbitlang$core$builtin$$Hasher$combine$70$(hasher, _b);
}
function moonbitlang$core$builtin$$power_2_above(x, n) {
  let _tmp = x;
  while (true) {
    const i = _tmp;
    if (i >= n) {
      return i;
    }
    const next = i << 1;
    if (next < 0) {
      return i;
    }
    _tmp = next;
    continue;
  }
}
function moonbitlang$core$builtin$$Map$new$152$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$153$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$154$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$155$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$79$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$156$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$157$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$158$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$159$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$160$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$builtin$$Map$new$161$(capacity) {
  const capacity$2 = moonbitlang$core$builtin$$power_2_above(8, capacity);
  const _bind = capacity$2 - 1 | 0;
  const _bind$2 = (Math.imul(capacity$2, 13) | 0) / 16 | 0;
  const _bind$3 = $make_array_len_and_init(capacity$2, undefined);
  const _bind$4 = undefined;
  return { entries: _bind$3, size: 0, capacity: capacity$2, capacity_mask: _bind, grow_at: _bind$2, head: _bind$4, tail: -1 };
}
function moonbitlang$core$option$$Option$unwrap$162$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$163$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$41$(self) {
  if (self.$tag === 0) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some._0;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$7$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$164$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$165$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$18$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$43$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$44$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$45$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$166$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$167$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$168$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$169$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$170$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$171$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$172$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$173$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$174$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$175$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$176$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$102$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$103$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$option$$Option$unwrap$177$(self) {
  if (self === undefined) {
    return $panic();
  } else {
    const _Some = self;
    const _x = _Some;
    return _x;
  }
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$154$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$166$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$155$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$168$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$79$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$169$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$160$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$170$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$156$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$171$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$157$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$172$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$158$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$173$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$159$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$174$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$153$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$175$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$161$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$176$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$add_entry_to_tail$152$(self, idx, entry) {
  const _bind = self.tail;
  if (_bind === -1) {
    self.head = entry;
  } else {
    const _tmp = self.entries;
    $bound_check(_tmp, _bind);
    moonbitlang$core$option$$Option$unwrap$177$(_tmp[_bind]).next = entry;
  }
  self.tail = idx;
  const _tmp = self.entries;
  $bound_check(_tmp, idx);
  _tmp[idx] = entry;
  self.size = self.size + 1 | 0;
}
function moonbitlang$core$builtin$$Map$set_entry$154$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$155$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$79$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$160$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$156$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$157$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$158$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$159$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$153$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$161$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$set_entry$152$(self, entry, new_idx) {
  const _tmp = self.entries;
  $bound_check(_tmp, new_idx);
  _tmp[new_idx] = entry;
  const _bind = entry.next;
  if (_bind === undefined) {
    self.tail = new_idx;
    return;
  } else {
    const _Some = _bind;
    const _next = _Some;
    _next.prev = new_idx;
    return;
  }
}
function moonbitlang$core$builtin$$Map$push_away$154$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$154$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$154$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$155$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$155$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$155$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$79$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$79$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$79$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$160$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$160$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$160$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$156$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$156$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$156$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$157$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$157$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$157$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$158$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$158$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$158$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$159$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$159$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$159$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$153$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$153$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$153$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$161$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$161$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$161$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$push_away$152$(self, idx, entry) {
  let _tmp = entry.psl + 1 | 0;
  let _tmp$2 = idx + 1 & self.capacity_mask;
  let _tmp$3 = entry;
  while (true) {
    const psl = _tmp;
    const idx$2 = _tmp$2;
    const entry$2 = _tmp$3;
    const _tmp$4 = self.entries;
    $bound_check(_tmp$4, idx$2);
    const _bind = _tmp$4[idx$2];
    if (_bind === undefined) {
      entry$2.psl = psl;
      moonbitlang$core$builtin$$Map$set_entry$152$(self, entry$2, idx$2);
      break;
    } else {
      const _Some = _bind;
      const _curr_entry = _Some;
      if (psl > _curr_entry.psl) {
        entry$2.psl = psl;
        moonbitlang$core$builtin$$Map$set_entry$152$(self, entry$2, idx$2);
        const _tmp$5 = _curr_entry.psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        _tmp$3 = _curr_entry;
        continue;
      } else {
        const _tmp$5 = psl + 1 | 0;
        const _tmp$6 = idx$2 + 1 & self.capacity_mask;
        _tmp = _tmp$5;
        _tmp$2 = _tmp$6;
        continue;
      }
    }
  }
}
function moonbitlang$core$builtin$$Map$set$154$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$154$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$7$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$154$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$154$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$155$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$155$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$7$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$155$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$155$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$79$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$79$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$7$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$79$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$79$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$160$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$160$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$7$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$160$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$160$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$156$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$156$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$7$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$156$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$156$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$157$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$157$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$7$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$157$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$157$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$158$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$158$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$178$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$58$(_curr_entry.key, key)) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$158$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$158$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$159$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$159$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$179$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$59$(_curr_entry.key, key)) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$159$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$159$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$153$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$153$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$180$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$55$(_curr_entry.key, key)) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$153$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$153$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$161$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$161$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$71$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && _curr_entry.key === key) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$161$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$161$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$set$152$(self, key, value) {
  if (self.size >= self.grow_at) {
    moonbitlang$core$builtin$$Map$grow$152$(self);
  }
  const hash = moonbitlang$core$builtin$$Hash$hash$181$(key);
  let _bind;
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const psl = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind$2 = _tmp$3[idx];
    if (_bind$2 === undefined) {
      _bind = { _0: idx, _1: psl };
      break;
    } else {
      const _Some = _bind$2;
      const _curr_entry = _Some;
      if (_curr_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$90$(_curr_entry.key, key)) {
        _curr_entry.value = value;
        return undefined;
      }
      if (psl > _curr_entry.psl) {
        moonbitlang$core$builtin$$Map$push_away$152$(self, idx, _curr_entry);
        _bind = { _0: idx, _1: psl };
        break;
      }
      const _tmp$4 = psl + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
  const _idx = _bind._0;
  const _psl = _bind._1;
  const _bind$2 = self.tail;
  const _bind$3 = undefined;
  const entry = { prev: _bind$2, next: _bind$3, psl: _psl, hash: hash, key: key, value: value };
  moonbitlang$core$builtin$$Map$add_entry_to_tail$152$(self, _idx, entry);
}
function moonbitlang$core$builtin$$Map$grow$154$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$154$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$155$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$155$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$79$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$79$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$160$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$160$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$156$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$156$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$157$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$157$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$158$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$158$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$159$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$159$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$153$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$153$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$161$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$161$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$grow$152$(self) {
  const old_head = self.head;
  const new_capacity = self.capacity << 1;
  self.entries = $make_array_len_and_init(new_capacity, undefined);
  self.capacity = new_capacity;
  self.capacity_mask = new_capacity - 1 | 0;
  const _p = self.capacity;
  self.grow_at = (Math.imul(_p, 13) | 0) / 16 | 0;
  self.size = 0;
  self.head = undefined;
  self.tail = -1;
  let _tmp = old_head;
  while (true) {
    const _param = _tmp;
    if (_param === undefined) {
      return;
    } else {
      const _Some = _param;
      const _x = _Some;
      const _next = _x.next;
      const _key = _x.key;
      const _value = _x.value;
      moonbitlang$core$builtin$$Map$set$152$(self, _key, _value);
      _tmp = _next;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$from_array$154$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$154$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$154$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$155$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$155$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$155$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$79$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$79$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$79$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$157$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$157$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$157$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$158$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$158$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$158$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$159$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$159$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$159$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$160$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$160$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$160$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$156$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$156$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$156$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$from_array$161$(arr) {
  const m = moonbitlang$core$builtin$$Map$new$161$(arr.length);
  const _p = arr.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = arr[_p$2];
      const e = _p$3;
      moonbitlang$core$builtin$$Map$set$161$(m, e._0, e._1);
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return m;
}
function moonbitlang$core$builtin$$Map$op_set$154$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$154$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$155$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$155$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$79$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$79$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$157$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$157$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$160$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$160$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$156$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$156$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$159$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$159$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$153$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$153$(self, key, value);
}
function moonbitlang$core$builtin$$Map$op_set$158$(self, key, value) {
  moonbitlang$core$builtin$$Map$set$158$(self, key, value);
}
function moonbitlang$core$builtin$$Map$get$160$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$7$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return Option$None$27$;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return new Option$Some$27$(_entry.value);
      }
      if (i > _entry.psl) {
        return Option$None$27$;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$156$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$7$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$154$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$7$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$155$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$7$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$79$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$7$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$152$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$181$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$90$(_entry.key, key)) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$159$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$179$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$59$(_entry.key, key)) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$153$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$180$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$55$(_entry.key, key)) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$161$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$71$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$157$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$7$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && _entry.key === key) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get$158$(self, key) {
  const hash = moonbitlang$core$builtin$$Hash$hash$178$(key);
  let _tmp = 0;
  let _tmp$2 = hash & self.capacity_mask;
  while (true) {
    const i = _tmp;
    const idx = _tmp$2;
    const _tmp$3 = self.entries;
    $bound_check(_tmp$3, idx);
    const _bind = _tmp$3[idx];
    if (_bind === undefined) {
      return undefined;
    } else {
      const _Some = _bind;
      const _entry = _Some;
      if (_entry.hash === hash && moonbitlang$core$builtin$$Eq$op_equal$58$(_entry.key, key)) {
        return _entry.value;
      }
      if (i > _entry.psl) {
        return undefined;
      }
      const _tmp$4 = i + 1 | 0;
      const _tmp$5 = idx + 1 & self.capacity_mask;
      _tmp = _tmp$4;
      _tmp$2 = _tmp$5;
      continue;
    }
  }
}
function moonbitlang$core$builtin$$Map$get_or_init$152$(self, key, default_) {
  const _bind = moonbitlang$core$builtin$$Map$get$152$(self, key);
  if (_bind === undefined) {
    const v = default_();
    moonbitlang$core$builtin$$Map$set$152$(self, key, v);
    return v;
  } else {
    const _Some = _bind;
    const _v = _Some;
    return _v;
  }
}
function moonbitlang$core$builtin$$Map$iter$154$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_({ _0: _key, _1: _value });
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter$160$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_({ _0: _key, _1: _value });
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter$156$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_({ _0: _key, _1: _value });
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter$153$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_({ _0: _key, _1: _value });
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter2$160$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_(_key, _value);
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter2$155$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_(_key, _value);
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter2$156$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_(_key, _value);
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$iter2$159$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _value = _x.value;
        const _next = _x.next;
        const _bind = yield_(_key, _value);
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$keys$156$(self) {
  const _p = (yield_) => {
    let _tmp = self.head;
    while (true) {
      const _param = _tmp;
      if (_param === undefined) {
        return 1;
      } else {
        const _Some = _param;
        const _x = _Some;
        const _key = _x.key;
        const _next = _x.next;
        const _bind = yield_(_key);
        if (_bind === 1) {
          _tmp = _next;
          continue;
        } else {
          return 0;
        }
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Map$from_iter$160$(iter) {
  const m = moonbitlang$core$builtin$$Map$from_array$160$([]);
  iter((e) => {
    moonbitlang$core$builtin$$Map$set$160$(m, e._0, e._1);
    return 1;
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_iter$156$(iter) {
  const m = moonbitlang$core$builtin$$Map$from_array$156$([]);
  iter((e) => {
    moonbitlang$core$builtin$$Map$set$156$(m, e._0, e._1);
    return 1;
  });
  return m;
}
function moonbitlang$core$builtin$$Map$from_iter$161$(iter) {
  const m = moonbitlang$core$builtin$$Map$from_array$161$([]);
  iter((e) => {
    moonbitlang$core$builtin$$Map$set$161$(m, e._0, e._1);
    return 1;
  });
  return m;
}
function moonbitlang$core$array$$ArrayView$op_get$10$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$10$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$7$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$7$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$op_get$14$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$14$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$7$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$7$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$op_get$24$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$24$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$7$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$7$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$op_get$25$(self, index) {
  if (index >= 0 && index < self.len) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + index | 0;
    $bound_check(_tmp, _tmp$2);
    return _tmp[_tmp$2];
  } else {
    return moonbitlang$core$abort$$abort$25$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$7$(self.len)} but the index is ${moonbitlang$core$builtin$$Show$to_string$7$(index)}`);
  }
}
function moonbitlang$core$array$$ArrayView$swap$24$(self, i, j) {
  if (i >= 0 && (i < self.len && (j >= 0 && j < self.len))) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + i | 0;
    $bound_check(_tmp, _tmp$2);
    const temp = _tmp[_tmp$2];
    const _tmp$3 = self.buf;
    const _tmp$4 = self.start + i | 0;
    const _tmp$5 = self.buf;
    const _tmp$6 = self.start + j | 0;
    $bound_check(_tmp$5, _tmp$6);
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4] = _tmp$5[_tmp$6];
    const _tmp$7 = self.buf;
    const _tmp$8 = self.start + j | 0;
    $bound_check(_tmp$7, _tmp$8);
    _tmp$7[_tmp$8] = temp;
    return;
  } else {
    moonbitlang$core$abort$$abort$4$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$7$(self.len)} but the index is (${moonbitlang$core$builtin$$Show$to_string$7$(i)}, ${moonbitlang$core$builtin$$Show$to_string$7$(j)})`);
    return;
  }
}
function moonbitlang$core$array$$ArrayView$swap$25$(self, i, j) {
  if (i >= 0 && (i < self.len && (j >= 0 && j < self.len))) {
    const _tmp = self.buf;
    const _tmp$2 = self.start + i | 0;
    $bound_check(_tmp, _tmp$2);
    const temp = _tmp[_tmp$2];
    const _tmp$3 = self.buf;
    const _tmp$4 = self.start + i | 0;
    const _tmp$5 = self.buf;
    const _tmp$6 = self.start + j | 0;
    $bound_check(_tmp$5, _tmp$6);
    $bound_check(_tmp$3, _tmp$4);
    _tmp$3[_tmp$4] = _tmp$5[_tmp$6];
    const _tmp$7 = self.buf;
    const _tmp$8 = self.start + j | 0;
    $bound_check(_tmp$7, _tmp$8);
    _tmp$7[_tmp$8] = temp;
    return;
  } else {
    moonbitlang$core$abort$$abort$4$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$7$(self.len)} but the index is (${moonbitlang$core$builtin$$Show$to_string$7$(i)}, ${moonbitlang$core$builtin$$Show$to_string$7$(j)})`);
    return;
  }
}
function moonbitlang$core$array$$Array$op_as_view$0$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$6$("View index out of bounds");
}
function moonbitlang$core$array$$Array$op_as_view$10$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$8$("View index out of bounds");
}
function moonbitlang$core$array$$Array$op_as_view$14$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$12$("View index out of bounds");
}
function moonbitlang$core$array$$Array$op_as_view$24$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$20$("View index out of bounds");
}
function moonbitlang$core$array$$Array$op_as_view$25$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$23$("View index out of bounds");
}
function moonbitlang$core$array$$Array$op_as_view$144$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$27$("View index out of bounds");
}
function moonbitlang$core$array$$Array$op_as_view$38$(self, start, end) {
  const len = self.length;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self, start: start$2, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$30$("View index out of bounds");
}
function moonbitlang$core$array$$ArrayView$op_as_view$10$(self, start, end) {
  const len = self.len;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self.buf, start: self.start + start$2 | 0, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$8$("View index out of bounds");
}
function moonbitlang$core$array$$ArrayView$op_as_view$24$(self, start, end) {
  const len = self.len;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self.buf, start: self.start + start$2 | 0, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$20$("View index out of bounds");
}
function moonbitlang$core$array$$ArrayView$op_as_view$25$(self, start, end) {
  const len = self.len;
  let end$2;
  if (end === undefined) {
    end$2 = len;
  } else {
    const _Some = end;
    const _end = _Some;
    end$2 = _end < 0 ? len + _end | 0 : _end;
  }
  const start$2 = start < 0 ? len + start | 0 : start;
  return start$2 >= 0 && (start$2 <= end$2 && end$2 <= len) ? { buf: self.buf, start: self.start + start$2 | 0, len: end$2 - start$2 | 0 } : moonbitlang$core$abort$$abort$23$("View index out of bounds");
}
function moonbitlang$core$array$$Array$new$138$(capacity) {
  return [];
}
function moonbitlang$core$array$$Array$new$70$(capacity) {
  return [];
}
function moonbitlang$core$array$$Array$new$38$(capacity) {
  return [];
}
function moonbitlang$core$array$$Array$unsafe_truncate_to_length$25$(self, new_len) {
  moonbitlang$core$builtin$$JSArray$set_length(self, new_len);
}
function moonbitlang$core$array$$Array$push$138$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$0$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$70$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$39$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$10$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$14$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$16$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$182$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$115$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$183$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$122$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$37$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$142$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$25$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$143$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$24$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$184$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$185$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$7$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$186$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$187$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$94$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$123$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$140$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$188$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$189$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$56$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$144$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$190$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$191$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$97$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$76$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$18$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$78$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$38$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$192$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$193$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$194$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$31$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$80$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$98$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$push$195$(self, value) {
  moonbitlang$core$builtin$$JSArray$push(self, value);
}
function moonbitlang$core$array$$Array$unsafe_pop$10$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$14$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$188$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$76$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$18$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$78$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$193$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$31$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$80$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$unsafe_pop$195$(self) {
  return moonbitlang$core$builtin$$JSArray$pop(self);
}
function moonbitlang$core$array$$Array$pop$188$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$188$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$pop$76$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$76$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$pop$18$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$18$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$pop$78$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$78$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$pop$193$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$193$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$pop$31$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$31$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$pop$80$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$80$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$pop$195$(self) {
  if (self.length === 0) {
    return undefined;
  } else {
    const v = moonbitlang$core$array$$Array$unsafe_pop$195$(self);
    return v;
  }
}
function moonbitlang$core$array$$Array$insert$138$(self, index, value) {
  if (index >= 0 && index <= self.length) {
    moonbitlang$core$builtin$$JSArray$splice1(self, index, 0, value);
    return;
  } else {
    moonbitlang$core$abort$$abort$4$(`index out of bounds: the len is from 0 to ${moonbitlang$core$builtin$$Show$to_string$7$(self.length)} but the index is ${moonbitlang$core$builtin$$Show$to_string$7$(index)}`);
    return;
  }
}
function moonbitlang$core$array$$Array$unsafe_grow_to_length$38$(self, new_len) {
  if (new_len >= self.length) {
    moonbitlang$core$builtin$$JSArray$set_length(self, new_len);
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$builtin$$Hasher$new(seed) {
  return { acc: (seed >>> 0) + (374761393 >>> 0) | 0 };
}
function moonbitlang$core$builtin$$Hasher$consume4(self, input) {
  const _p = (self.acc >>> 0) + ((Math.imul(input, -1028477379) | 0) >>> 0) | 0;
  const _p$2 = 17;
  self.acc = Math.imul(_p << _p$2 | (_p >>> (32 - _p$2 | 0) | 0), 668265263) | 0;
}
function moonbitlang$core$builtin$$Hasher$combine_uint(self, value) {
  self.acc = (self.acc >>> 0) + (4 >>> 0) | 0;
  moonbitlang$core$builtin$$Hasher$consume4(self, value);
}
function moonbitlang$core$builtin$$Hasher$combine_int(self, value) {
  moonbitlang$core$builtin$$Hasher$combine_uint(self, value);
}
function moonbitlang$core$builtin$$Hasher$combine_string(self, value) {
  const _end1464 = value.length;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end1464) {
      moonbitlang$core$builtin$$Hasher$combine_uint(self, value.charCodeAt(i));
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$builtin$$Hasher$combine_char(self, value) {
  moonbitlang$core$builtin$$Hasher$combine_uint(self, value);
}
function moonbitlang$core$builtin$$Hasher$avalanche(self) {
  let acc = self.acc;
  acc = acc ^ (acc >>> 15 | 0);
  acc = Math.imul(acc, -2048144777) | 0;
  acc = acc ^ (acc >>> 13 | 0);
  acc = Math.imul(acc, -1028477379) | 0;
  acc = acc ^ (acc >>> 16 | 0);
  return acc;
}
function moonbitlang$core$builtin$$Hasher$finalize(self) {
  return moonbitlang$core$builtin$$Hasher$avalanche(self);
}
function moonbitlang$core$builtin$$Hash$hash_combine$0$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_string(hasher, self);
}
function moonbitlang$core$builtin$$Hash$hash$7$(self) {
  const self$2 = self;
  let x = self$2 ^ (self$2 >>> 17 | 0);
  x = Math.imul(x, -312814405) | 0;
  x = x ^ (x >>> 11 | 0);
  x = Math.imul(x, -1404298415) | 0;
  x = x ^ (x >>> 15 | 0);
  x = Math.imul(x, 830770091) | 0;
  x = x ^ (x >>> 14 | 0);
  return x;
}
function moonbitlang$core$builtin$$Hash$hash_combine$7$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_int(hasher, self);
}
function moonbitlang$core$array$$FixedArray$unsafe_blit$16$(dst, dst_offset, src, src_offset, len) {
  if (dst === src && dst_offset < src_offset) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i + 1 | 0;
        continue;
      } else {
        return;
      }
    }
  } else {
    let _tmp = len - 1 | 0;
    while (true) {
      const i = _tmp;
      if (i >= 0) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i - 1 | 0;
        continue;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$core$array$$FixedArray$unsafe_blit$196$(dst, dst_offset, src, src_offset, len) {
  if (dst === src && dst_offset < src_offset) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i + 1 | 0;
        continue;
      } else {
        return;
      }
    }
  } else {
    let _tmp = len - 1 | 0;
    while (true) {
      const i = _tmp;
      if (i >= 0) {
        const _tmp$2 = dst_offset + i | 0;
        const _tmp$3 = src_offset + i | 0;
        $bound_check(src, _tmp$3);
        $bound_check(dst, _tmp$2);
        dst[_tmp$2] = src[_tmp$3];
        _tmp = i - 1 | 0;
        continue;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$core$array$$FixedArray$blit_to$16$(self, dst, len, src_offset, dst_offset) {
  if (dst_offset >= 0 && (src_offset >= 0 && ((dst_offset + len | 0) <= dst.length && (src_offset + len | 0) <= self.length))) {
    moonbitlang$core$array$$FixedArray$unsafe_blit$16$(dst, dst_offset, self, src_offset, len);
    return;
  } else {
    moonbitlang$core$abort$$abort$4$(`bounds check failed: dst_offset = ${moonbitlang$core$builtin$$Show$to_string$7$(dst_offset)}, src_offset = ${moonbitlang$core$builtin$$Show$to_string$7$(src_offset)}, len = ${moonbitlang$core$builtin$$Show$to_string$7$(len)}, dst.length = ${moonbitlang$core$builtin$$Show$to_string$7$(dst.length)}, self.length = ${moonbitlang$core$builtin$$Show$to_string$7$(self.length)}`);
    return;
  }
}
function moonbitlang$core$int$$Int$to_string(self, radix) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(moonbitlang$core$int$$Int$output_size_hint(radix));
  moonbitlang$core$int$$Int$output(self, { self: buf, method_0: moonbitlang$core$builtin$$Logger$write_string$40$, method_1: moonbitlang$core$builtin$$Logger$write_substring$40$, method_2: moonbitlang$core$builtin$$Logger$write_char$40$ }, radix);
  return buf.val;
}
function moonbitlang$core$builtin$$Show$to_string$7$(self) {
  return moonbitlang$core$int$$Int$to_string(self, 10);
}
function moonbitlang$core$bytes$$Bytes$make(len, init) {
  if (len < 0) {
    return $bytes_literal$0;
  }
  return $makebytes(len, init);
}
function moonbitlang$core$array$$Array$unsafe_blit$38$(dst, dst_offset, src, src_offset, len) {
  moonbitlang$core$array$$FixedArray$unsafe_blit$196$(dst, dst_offset, src, src_offset, len);
}
function moonbitlang$core$array$$Array$blit_to$38$(self, dst, len, src_offset, dst_offset) {
  if (len >= 0 && (dst_offset >= 0 && (src_offset >= 0 && (dst_offset <= dst.length && (src_offset + len | 0) <= self.length)))) {
    if ((dst_offset + len | 0) > dst.length) {
      moonbitlang$core$array$$Array$unsafe_grow_to_length$38$(dst, dst_offset + len | 0);
    }
    moonbitlang$core$array$$Array$unsafe_blit$38$(dst, dst_offset, self, src_offset, len);
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$make$36$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$array$$Array$make$7$(len, elem) {
  const arr = new Array(len);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < len) {
      arr[i] = elem;
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return arr;
}
function moonbitlang$core$builtin$$Show$output$34$(self, logger) {
  if (self) {
    logger.method_0(logger.self, "true");
    return;
  } else {
    logger.method_0(logger.self, "false");
    return;
  }
}
function moonbitlang$core$builtin$$Show$output$7$(self, logger) {
  moonbitlang$core$int$$Int$output(self, logger, 10);
}
function moonbitlang$core$builtin$$to_hex_digit(i) {
  return i < 10 ? i + 48 | 0 : (i + 97 | 0) - 10 | 0;
}
function moonbitlang$core$builtin$$output$46$flush_segment$124$1051(_env, i) {
  const segment_start = _env._2;
  const logger = _env._1;
  const self = _env._0;
  if (i > segment_start.val) {
    logger.method_1(logger.self, self, segment_start.val, i - segment_start.val | 0);
  }
  segment_start.val = i + 1 | 0;
}
function moonbitlang$core$builtin$$Show$output$0$(self, logger) {
  logger.method_2(logger.self, 34);
  const segment_start = { val: 0 };
  const _env = { _0: self, _1: logger, _2: segment_start };
  const _end1054 = self.length;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end1054) {
      let c;
      _L: {
        _L$2: {
          const _bind = self.charCodeAt(i);
          switch (_bind) {
            case 34: {
              c = _bind;
              break _L$2;
            }
            case 92: {
              c = _bind;
              break _L$2;
            }
            case 10: {
              moonbitlang$core$builtin$$output$46$flush_segment$124$1051(_env, i);
              logger.method_0(logger.self, "\\n");
              break;
            }
            case 13: {
              moonbitlang$core$builtin$$output$46$flush_segment$124$1051(_env, i);
              logger.method_0(logger.self, "\\r");
              break;
            }
            case 8: {
              moonbitlang$core$builtin$$output$46$flush_segment$124$1051(_env, i);
              logger.method_0(logger.self, "\\b");
              break;
            }
            case 9: {
              moonbitlang$core$builtin$$output$46$flush_segment$124$1051(_env, i);
              logger.method_0(logger.self, "\\t");
              break;
            }
            default: {
              if (_bind < 32) {
                moonbitlang$core$builtin$$output$46$flush_segment$124$1051(_env, i);
                logger.method_0(logger.self, "\\u{");
                logger.method_2(logger.self, moonbitlang$core$builtin$$to_hex_digit(_bind / 16 | 0));
                logger.method_2(logger.self, moonbitlang$core$builtin$$to_hex_digit(_bind % 16 | 0));
                logger.method_2(logger.self, 125);
              }
            }
          }
          break _L;
        }
        moonbitlang$core$builtin$$output$46$flush_segment$124$1051(_env, i);
        logger.method_2(logger.self, 92);
        logger.method_2(logger.self, c);
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$output$46$flush_segment$124$1051(_env, self.length);
  logger.method_2(logger.self, 34);
}
function moonbitlang$core$builtin$$Show$output$109$(self, logger) {
  if (self === undefined) {
    logger.method_0(logger.self, "None");
    return;
  } else {
    const _Some = self;
    const _arg = _Some;
    logger.method_0(logger.self, "Some(");
    moonbitlang$core$builtin$$Logger$write_object$7$(logger, _arg);
    logger.method_0(logger.self, ")");
    return;
  }
}
function moonbitlang$core$builtin$$Show$output$121$(self, logger) {
  logger.method_0(logger.self, "{val: ");
  moonbitlang$core$builtin$$Logger$write_object$34$(logger, self.val);
  logger.method_0(logger.self, "}");
}
function moonbitlang$core$builtin$$Logger$write_iter$115$(self, iter, prefix, suffix, sep, trailing) {
  self.method_0(self.self, prefix);
  if (trailing) {
    iter((x) => {
      moonbitlang$core$builtin$$Logger$write_object$115$(self, x);
      self.method_0(self.self, sep);
      return 1;
    });
  } else {
    const first = { val: true };
    iter((x) => {
      if (first.val) {
        first.val = false;
      } else {
        self.method_0(self.self, sep);
      }
      moonbitlang$core$builtin$$Logger$write_object$115$(self, x);
      return 1;
    });
  }
  self.method_0(self.self, suffix);
}
function moonbitlang$core$builtin$$Logger$write_iter$122$(self, iter, prefix, suffix, sep, trailing) {
  self.method_0(self.self, prefix);
  if (trailing) {
    iter((x) => {
      moonbitlang$core$builtin$$Logger$write_object$122$(self, x);
      self.method_0(self.self, sep);
      return 1;
    });
  } else {
    const first = { val: true };
    iter((x) => {
      if (first.val) {
        first.val = false;
      } else {
        self.method_0(self.self, sep);
      }
      moonbitlang$core$builtin$$Logger$write_object$122$(self, x);
      return 1;
    });
  }
  self.method_0(self.self, suffix);
}
function moonbitlang$core$builtin$$Logger$write_iter$123$(self, iter, prefix, suffix, sep, trailing) {
  self.method_0(self.self, prefix);
  if (trailing) {
    iter((x) => {
      moonbitlang$core$builtin$$Logger$write_object$123$(self, x);
      self.method_0(self.self, sep);
      return 1;
    });
  } else {
    const first = { val: true };
    iter((x) => {
      if (first.val) {
        first.val = false;
      } else {
        self.method_0(self.self, sep);
      }
      moonbitlang$core$builtin$$Logger$write_object$123$(self, x);
      return 1;
    });
  }
  self.method_0(self.self, suffix);
}
function moonbitlang$core$array$$Array$iter$139$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$0$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$37$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$190$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$197$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$115$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$7$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$122$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$123$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$array$$Array$iter$38$(self) {
  const _p = (yield_) => {
    const _len = self.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const v = self[_i];
        const _bind = yield_(v);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Show$output$112$(self, logger) {
  moonbitlang$core$builtin$$Logger$write_iter$115$(logger, moonbitlang$core$array$$Array$iter$115$(self), "[", "]", ", ", false);
}
function moonbitlang$core$builtin$$Show$output$113$(self, logger) {
  moonbitlang$core$builtin$$Logger$write_iter$122$(logger, moonbitlang$core$array$$Array$iter$122$(self), "[", "]", ", ", false);
}
function moonbitlang$core$builtin$$Show$output$118$(self, logger) {
  moonbitlang$core$builtin$$Logger$write_iter$123$(logger, moonbitlang$core$array$$Array$iter$123$(self), "[", "]", ", ", false);
}
function moonbitlang$core$builtin$$Hash$hash$71$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$0$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Hash$hash$181$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$78$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Hash$hash$179$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$56$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Hash$hash$180$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$55$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Hash$hash$178$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$18$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Hash$hash$53$(self) {
  const _self = moonbitlang$core$builtin$$Hasher$new(0);
  moonbitlang$core$builtin$$Hasher$combine$52$(_self, self);
  return moonbitlang$core$builtin$$Hasher$finalize(_self);
}
function moonbitlang$core$builtin$$Show$to_string$198$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$183$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$40$, method_1: moonbitlang$core$builtin$$Logger$write_substring$40$, method_2: moonbitlang$core$builtin$$Logger$write_char$40$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$134$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$133$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$40$, method_1: moonbitlang$core$builtin$$Logger$write_substring$40$, method_2: moonbitlang$core$builtin$$Logger$write_char$40$ });
  return logger.val;
}
function moonbitlang$core$builtin$$Show$to_string$136$(self) {
  const logger = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$core$builtin$$Show$output$135$(self, { self: logger, method_0: moonbitlang$core$builtin$$Logger$write_string$40$, method_1: moonbitlang$core$builtin$$Logger$write_substring$40$, method_2: moonbitlang$core$builtin$$Logger$write_char$40$ });
  return logger.val;
}
function moonbitlang$core$builtin$$MyInt64$add_hi_lo(self, bhi, blo) {
  const _ahi = self.hi;
  const _alo = self.lo;
  const lo = _alo + blo | 0;
  const s = lo >> 31;
  const as_ = _alo >> 31;
  const bs = blo >> 31;
  const c = (as_ & bs | ~s & (as_ ^ bs)) & 1;
  const hi = (_ahi + bhi | 0) + c | 0;
  return { hi: hi, lo: lo };
}
function moonbitlang$core$builtin$$Add$op_add$199$(self, other) {
  return moonbitlang$core$builtin$$MyInt64$add_hi_lo(self, other.hi, other.lo);
}
function moonbitlang$core$builtin$$Sub$op_sub$199$(self, other) {
  return other.lo === 0 ? { hi: self.hi - other.hi | 0, lo: self.lo } : moonbitlang$core$builtin$$MyInt64$add_hi_lo(self, ~other.hi, ~other.lo + 1 | 0);
}
function moonbitlang$core$builtin$$Mul$op_mul$199$(self, other) {
  const _ahi = self.hi;
  const _alo = self.lo;
  const _bhi = other.hi;
  const _blo = other.lo;
  const ahi = _ahi;
  const alo = _alo;
  const bhi = _bhi;
  const blo = _blo;
  const a48 = ahi >>> 16 | 0;
  const a32 = ahi & 65535;
  const a16 = alo >>> 16 | 0;
  const a00 = alo & 65535;
  const b48 = bhi >>> 16 | 0;
  const b32 = bhi & 65535;
  const b16 = blo >>> 16 | 0;
  const b00 = blo & 65535;
  const c00 = Math.imul(a00, b00) | 0;
  const c16 = c00 >>> 16 | 0;
  const c00$2 = c00 & 65535;
  const c16$2 = (c16 >>> 0) + ((Math.imul(a16, b00) | 0) >>> 0) | 0;
  const c32 = c16$2 >>> 16 | 0;
  const c16$3 = c16$2 & 65535;
  const c16$4 = (c16$3 >>> 0) + ((Math.imul(a00, b16) | 0) >>> 0) | 0;
  const c32$2 = (c32 >>> 0) + ((c16$4 >>> 16 | 0) >>> 0) | 0;
  const c16$5 = c16$4 & 65535;
  const c32$3 = (c32$2 >>> 0) + ((Math.imul(a32, b00) | 0) >>> 0) | 0;
  const c48 = c32$3 >>> 16 | 0;
  const c32$4 = c32$3 & 65535;
  const c32$5 = (c32$4 >>> 0) + ((Math.imul(a16, b16) | 0) >>> 0) | 0;
  const c48$2 = (c48 >>> 0) + ((c32$5 >>> 16 | 0) >>> 0) | 0;
  const c32$6 = c32$5 & 65535;
  const c32$7 = (c32$6 >>> 0) + ((Math.imul(a00, b32) | 0) >>> 0) | 0;
  const c48$3 = (c48$2 >>> 0) + ((c32$7 >>> 16 | 0) >>> 0) | 0;
  const c32$8 = c32$7 & 65535;
  const c48$4 = (((((((c48$3 >>> 0) + ((Math.imul(a48, b00) | 0) >>> 0) | 0) >>> 0) + ((Math.imul(a32, b16) | 0) >>> 0) | 0) >>> 0) + ((Math.imul(a16, b32) | 0) >>> 0) | 0) >>> 0) + ((Math.imul(a00, b48) | 0) >>> 0) | 0;
  const c48$5 = c48$4 & 65535;
  return { hi: c48$5 << 16 | c32$8, lo: c16$5 << 16 | c00$2 };
}
function moonbitlang$core$builtin$$Div$op_div$199$(self, other) {
  const exports = moonbitlang$core$builtin$$get_int64_wasm_helper();
  const _ahi = self.hi;
  const _alo = self.lo;
  const _bhi = other.hi;
  const _blo = other.lo;
  const _func = exports.div_s;
  const lo = _func(_alo, _ahi, _blo, _bhi);
  const _func$2 = exports.get_high;
  const hi = _func$2();
  return { hi: hi, lo: lo };
}
function moonbitlang$core$builtin$$Add$op_add$65$(self, other) {
  return moonbitlang$core$builtin$$Add$op_add$199$(self, other);
}
function moonbitlang$core$builtin$$Sub$op_sub$65$(self, other) {
  return moonbitlang$core$builtin$$Sub$op_sub$199$(self, other);
}
function moonbitlang$core$builtin$$Mul$op_mul$65$(self, other) {
  return moonbitlang$core$builtin$$Mul$op_mul$199$(self, other);
}
function moonbitlang$core$builtin$$Div$op_div$65$(self, other) {
  return moonbitlang$core$builtin$$Div$op_div$199$(self, other);
}
function moonbitlang$core$builtin$$Compare$compare$65$(self, other) {
  return moonbitlang$core$builtin$$MyInt64$compare(self, other);
}
function moonbitlang$core$builtin$$Default$default$200$() {
  return new Uint8Array([]);
}
function moonbitlang$core$builtin$$Eq$op_equal$126$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$50$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$127$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$51$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$129$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$58$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$109$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return _x === _y;
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$130$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return moonbitlang$core$builtin$$Eq$op_equal$101$(_x, _y);
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$131$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return _x.key === _y.key;
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$132$(self, other) {
  if (self === undefined) {
    return other === undefined;
  } else {
    const _Some = self;
    const _x = _Some;
    if (other === undefined) {
      return false;
    } else {
      const _Some$2 = other;
      const _y = _Some$2;
      return _x.value === _y.value;
    }
  }
}
function moonbitlang$core$array$$Array$get$138$(self, index) {
  const len = self.length;
  return index >= 0 && index < len ? self[index] : undefined;
}
function moonbitlang$core$array$$Array$op_set$39$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$138$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$25$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$36$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$array$$Array$op_set$7$(self, index, value) {
  const len = self.length;
  if (index >= 0 && index < len) {
    $bound_check(self, index);
    self[index] = value;
    return;
  } else {
    $panic();
    return;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$146$(self, other) {
  const self_len = self.length;
  const other_len = other.length;
  if (self_len === other_len) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < self_len) {
        if (moonbitlang$core$builtin$$Eq$op_equal$147$(self[i], other[i])) {
        } else {
          return false;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return true;
      }
    }
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$150$(self, other) {
  const self_len = self.length;
  const other_len = other.length;
  if (self_len === other_len) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < self_len) {
        if (moonbitlang$core$builtin$$Eq$op_equal$25$(self[i], other[i])) {
        } else {
          return false;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return true;
      }
    }
  } else {
    return false;
  }
}
function moonbitlang$core$builtin$$Compare$compare$150$(self, other) {
  const len_self = self.length;
  const len_other = other.length;
  const cmp = $compare_int(len_self, len_other);
  if (cmp === 0) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len_self) {
        const cmp$2 = moonbitlang$core$builtin$$Compare$compare$25$(self[i], other[i]);
        if (cmp$2 === 0) {
        } else {
          return cmp$2;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        return 0;
      }
    }
  } else {
    return cmp;
  }
}
function moonbitlang$core$array$$Array$append$38$(self, other) {
  moonbitlang$core$array$$Array$blit_to$38$(other, self, other.length, 0, self.length);
}
function moonbitlang$core$array$$Array$rev_inplace$39$(self) {
  const _end575 = self.length / 2 | 0;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < _end575) {
      const temp = self[i];
      self[i] = self[(self.length - i | 0) - 1 | 0];
      self[(self.length - i | 0) - 1 | 0] = temp;
      _tmp = i + 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$core$array$$Array$repeat$38$(self, times) {
  const v = moonbitlang$core$array$$Array$new$38$(Math.imul(self.length, times) | 0);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < times) {
      moonbitlang$core$array$$Array$append$38$(v, self);
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return v;
}
function moonbitlang$core$array$$Array$dedup$25$(self) {
  if (self.length === 0) {
    return undefined;
  }
  let w = 1;
  const _end436 = self.length;
  let _tmp = 1;
  while (true) {
    const i = _tmp;
    if (i < _end436) {
      if (moonbitlang$core$builtin$$op_notequal$25$(moonbitlang$core$array$$Array$op_get$25$(self, i), moonbitlang$core$array$$Array$op_get$25$(self, w - 1 | 0))) {
        moonbitlang$core$array$$Array$op_set$25$(self, w, moonbitlang$core$array$$Array$op_get$25$(self, i));
        w = w + 1 | 0;
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$array$$Array$unsafe_truncate_to_length$25$(self, w);
}
function moonbitlang$core$builtin$$Compare$compare$46$(self, other) {
  const t0 = $compare_int(self._0, other._0);
  return t0 === 0 ? $compare_int(self._1, other._1) : t0;
}
function moonbitlang$core$builtin$$Compare$compare$92$(self, other) {
  const t0 = $compare_int(self._0, other._0);
  return t0 === 0 ? moonbitlang$core$builtin$$Compare$compare$150$(self._1, other._1) : t0;
}
function moonbitlang$core$builtin$$Compare$compare$88$(self, other) {
  const t0 = moonbitlang$core$builtin$$Compare$compare$0$(self._0, other._0);
  return t0 === 0 ? moonbitlang$core$builtin$$Compare$compare$201$(self._1, other._1) : t0;
}
function moonbitlang$core$builtin$$Compare$compare$59$(self, other) {
  const _p = self._0;
  const _p$2 = other._0;
  const t0 = $compare_int(_p.num, _p$2.num);
  return t0 === 0 ? moonbitlang$core$builtin$$Compare$compare$95$(self._1, other._1) : t0;
}
function moonbitlang$core$builtin$$Compare$compare$35$(self, other) {
  const t0 = moonbitlang$core$builtin$$Compare$compare$46$(self._0, other._0);
  return t0 === 0 ? $compare_int(self._1, other._1) : t0;
}
function moonbitlang$core$builtin$$Compare$compare$149$(self, other) {
  const _p = self._0;
  const _p$2 = other._0;
  const t0 = $compare_int(_p, _p$2);
  if (t0 === 0) {
    const _p$3 = self._1;
    const _p$4 = other._1;
    return $compare_int(_p$3, _p$4);
  } else {
    return t0;
  }
}
function moonbitlang$core$builtin$$Compare$compare$60$(self, other) {
  const _p = self._0;
  const _p$2 = other._0;
  const t0 = $compare_int(_p.num, _p$2.num);
  return t0 === 0 ? moonbitlang$core$builtin$$Compare$compare$109$(self._1, other._1) : t0;
}
function moonbitlang$core$builtin$$Iter$run$142$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$run$202$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$run$56$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$run$194$(self, f) {
  const _func = self;
  return _func(f);
}
function moonbitlang$core$builtin$$Iter$empty$7$() {
  return (_param154) => 1;
}
function moonbitlang$core$builtin$$Iter$singleton$37$(a) {
  return (yield_) => yield_(a);
}
function moonbitlang$core$int$$Int$until(self, end, step, inclusive) {
  if (step === 0) {
    return moonbitlang$core$builtin$$Iter$empty$7$();
  }
  return (yield_) => {
    let i = self;
    while (true) {
      if (step > 0 && i < end || (step < 0 && i > end || inclusive && i === end)) {
        if (moonbitlang$core$builtin$$Eq$op_equal$72$(yield_(i), 0)) {
          return 0;
        }
        const next = i + step | 0;
        if (step > 0 && next >= i || step < 0 && next <= i) {
          i = next;
        } else {
          return 1;
        }
        continue;
      } else {
        return 1;
      }
    }
  };
}
function moonbitlang$core$builtin$$Iter$filter_map$203$(self, f) {
  return (yield_) => moonbitlang$core$builtin$$Iter$run$56$(self, (a) => {
    const _bind = f(a);
    if (_bind === undefined) {
      return 1;
    } else {
      const _Some = _bind;
      const _b = _Some;
      return yield_(_b);
    }
  });
}
function moonbitlang$core$builtin$$Iter$to_array$142$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$142$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$24$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$24$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$187$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$187$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$37$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$37$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$189$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$189$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$56$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$56$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$194$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$194$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$to_array$38$(self) {
  const result = [];
  self((e) => {
    moonbitlang$core$array$$Array$push$38$(result, e);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$collect$7$(self) {
  const result = [];
  self((_p) => {
    moonbitlang$core$array$$Array$push$7$(result, _p);
    return 1;
  });
  return result;
}
function moonbitlang$core$builtin$$Iter$join(self, sep) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(0);
  const first = { val: true };
  self((str) => {
    if (first.val) {
      first.val = false;
    } else {
      moonbitlang$core$builtin$$Logger$write_string$40$(buf, sep);
    }
    moonbitlang$core$builtin$$Logger$write_string$40$(buf, str);
    return 1;
  });
  return buf.val;
}
function moonbitlang$core$builtin$$Iter$maximum$7$(self) {
  const res = { val: undefined };
  self((x) => {
    const _bind = res.val;
    if (_bind === undefined) {
      res.val = x;
    } else {
      const _Some = _bind;
      const _max = _Some;
      if (x > _max) {
        res.val = x;
      }
    }
    return 1;
  });
  return res.val;
}
function moonbitlang$core$queue$$new$78$() {
  return { length: 0, first: undefined, last: undefined };
}
function moonbitlang$core$queue$$new$94$() {
  return { length: 0, first: undefined, last: undefined };
}
function moonbitlang$core$queue$$from_array$94$(arr) {
  if (arr.length > 0) {
    const length = arr.length;
    const last = { content: moonbitlang$core$array$$Array$op_get$94$(arr, length - 1 | 0), next: undefined };
    let first;
    let _tmp = length - 2 | 0;
    let _tmp$2 = last;
    while (true) {
      const i = _tmp;
      const x = _tmp$2;
      if (i >= 0) {
        const _tmp$3 = i - 1 | 0;
        const _tmp$4 = { content: moonbitlang$core$array$$Array$op_get$94$(arr, i), next: x };
        _tmp = _tmp$3;
        _tmp$2 = _tmp$4;
        continue;
      } else {
        first = x;
        break;
      }
    }
    return { length: length, first: first, last: last };
  } else {
    return moonbitlang$core$queue$$new$94$();
  }
}
function moonbitlang$core$queue$$T$clear$78$(self) {
  self.length = 0;
  self.first = undefined;
  self.last = undefined;
}
function moonbitlang$core$queue$$T$clear$94$(self) {
  self.length = 0;
  self.first = undefined;
  self.last = undefined;
}
function moonbitlang$core$queue$$T$push$94$(self, x) {
  const cell = { content: x, next: undefined };
  const _bind = self.last;
  if (_bind === undefined) {
    self.length = 1;
    self.first = cell;
    self.last = cell;
    return;
  } else {
    const _Some = _bind;
    const _last = _Some;
    _last.next = cell;
    self.length = self.length + 1 | 0;
    self.last = cell;
    return;
  }
}
function moonbitlang$core$queue$$T$push$78$(self, x) {
  const cell = { content: x, next: undefined };
  const _bind = self.last;
  if (_bind === undefined) {
    self.length = 1;
    self.first = cell;
    self.last = cell;
    return;
  } else {
    const _Some = _bind;
    const _last = _Some;
    _last.next = cell;
    self.length = self.length + 1 | 0;
    self.last = cell;
    return;
  }
}
function moonbitlang$core$queue$$T$pop$78$(self) {
  const _bind = self.first;
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _x = _Some;
    const _content = _x.content;
    const _x$2 = _x.next;
    if (_x$2 === undefined) {
      moonbitlang$core$queue$$T$clear$78$(self);
      return _content;
    } else {
      self.length = self.length - 1 | 0;
      self.first = _x$2;
      return _content;
    }
  }
}
function moonbitlang$core$queue$$T$pop$94$(self) {
  const _bind = self.first;
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _x = _Some;
    const _content = _x.content;
    const _x$2 = _x.next;
    if (_x$2 === undefined) {
      moonbitlang$core$queue$$T$clear$94$(self);
      return _content;
    } else {
      self.length = self.length - 1 | 0;
      self.first = _x$2;
      return _content;
    }
  }
}
function moonbitlang$core$list$$T$to_array$37$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _More = self;
    const _x = _More._0;
    const _xs = _More._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _More$2 = _param;
        const _x$2 = _More$2._0;
        const _xs$2 = _More$2._1;
        moonbitlang$core$array$$Array$push$37$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$list$$T$to_array$191$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _More = self;
    const _x = _More._0;
    const _xs = _More._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _More$2 = _param;
        const _x$2 = _More$2._0;
        const _xs$2 = _More$2._1;
        moonbitlang$core$array$$Array$push$191$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$list$$T$to_array$192$(self) {
  if (self.$tag === 0) {
    return [];
  } else {
    const _More = self;
    const _x = _More._0;
    const _xs = _More._1;
    const arr = [_x];
    let _tmp = _xs;
    while (true) {
      const _param = _tmp;
      if (_param.$tag === 0) {
        break;
      } else {
        const _More$2 = _param;
        const _x$2 = _More$2._0;
        const _xs$2 = _More$2._1;
        moonbitlang$core$array$$Array$push$192$(arr, _x$2);
        _tmp = _xs$2;
        continue;
      }
    }
    return arr;
  }
}
function moonbitlang$core$string$$String$view(self, start_offset, end_offset) {
  return start_offset >= 0 && (start_offset <= end_offset && end_offset <= self.length) ? { str: self, start: start_offset, end: end_offset } : moonbitlang$core$abort$$abort$17$("Invalid index for View");
}
function moonbitlang$core$string$$String$offset_of_nth_char_backward(self, n, start_offset, end_offset) {
  let char_count = 0;
  let utf16_offset = end_offset;
  while (true) {
    if ((utf16_offset - 1 | 0) >= start_offset && char_count < n) {
      const _tmp = utf16_offset - 1 | 0;
      const c = self.charCodeAt(_tmp);
      if (56320 <= c && c <= 57343) {
        utf16_offset = utf16_offset - 2 | 0;
      } else {
        utf16_offset = utf16_offset - 1 | 0;
      }
      char_count = char_count + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return char_count < n || utf16_offset < start_offset ? undefined : utf16_offset;
}
function moonbitlang$core$string$$String$offset_of_nth_char_forward(self, n, start_offset, end_offset) {
  if (start_offset >= 0 && start_offset <= end_offset) {
    let utf16_offset = start_offset;
    let char_count = 0;
    while (true) {
      if (utf16_offset < end_offset && char_count < n) {
        const _tmp = utf16_offset;
        const c = self.charCodeAt(_tmp);
        if (55296 <= c && c <= 56319) {
          utf16_offset = utf16_offset + 2 | 0;
        } else {
          utf16_offset = utf16_offset + 1 | 0;
        }
        char_count = char_count + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return char_count < n || utf16_offset >= end_offset ? undefined : utf16_offset;
  } else {
    return moonbitlang$core$abort$$abort$15$("Invalid start index");
  }
}
function moonbitlang$core$string$$String$offset_of_nth_char(self, i, start_offset, end_offset) {
  return i >= 0 ? moonbitlang$core$string$$String$offset_of_nth_char_forward(self, i, start_offset, end_offset) : moonbitlang$core$string$$String$offset_of_nth_char_backward(self, -i, start_offset, end_offset);
}
function moonbitlang$core$string$$String$char_length_eq(self, len, start_offset, end_offset) {
  let _tmp = start_offset;
  let _tmp$2 = 0;
  while (true) {
    const index = _tmp;
    const count = _tmp$2;
    if (index < end_offset && count < len) {
      const c1 = self.charCodeAt(index);
      if (55296 <= c1 && c1 <= 56319 && (index + 1 | 0) < end_offset) {
        const _tmp$3 = index + 1 | 0;
        const c2 = self.charCodeAt(_tmp$3);
        if (56320 <= c2 && c2 <= 57343) {
          const _tmp$4 = index + 2 | 0;
          const _tmp$5 = count + 1 | 0;
          _tmp = _tmp$4;
          _tmp$2 = _tmp$5;
          continue;
        } else {
          moonbitlang$core$abort$$abort$4$("invalid surrogate pair");
        }
      }
      const _tmp$3 = index + 1 | 0;
      const _tmp$4 = count + 1 | 0;
      _tmp = _tmp$3;
      _tmp$2 = _tmp$4;
      continue;
    } else {
      return count === len && index === end_offset;
    }
  }
}
function moonbitlang$core$string$$String$char_length_ge(self, len, start_offset, end_offset) {
  let _tmp = start_offset;
  let _tmp$2 = 0;
  while (true) {
    const index = _tmp;
    const count = _tmp$2;
    if (index < end_offset && count < len) {
      const c1 = self.charCodeAt(index);
      if (55296 <= c1 && c1 <= 56319 && (index + 1 | 0) < end_offset) {
        const _tmp$3 = index + 1 | 0;
        const c2 = self.charCodeAt(_tmp$3);
        if (56320 <= c2 && c2 <= 57343) {
          const _tmp$4 = index + 2 | 0;
          const _tmp$5 = count + 1 | 0;
          _tmp = _tmp$4;
          _tmp$2 = _tmp$5;
          continue;
        } else {
          moonbitlang$core$abort$$abort$4$("invalid surrogate pair");
        }
      }
      const _tmp$3 = index + 1 | 0;
      const _tmp$4 = count + 1 | 0;
      _tmp = _tmp$3;
      _tmp$2 = _tmp$4;
      continue;
    } else {
      return count >= len;
    }
  }
}
function moonbitlang$core$string$$code_point_of_surrogate_pair(leading, trailing) {
  return (((Math.imul(leading - 55296 | 0, 1024) | 0) + trailing | 0) - 56320 | 0) + 65536 | 0;
}
function moonbitlang$core$string$$String$from_array(chars) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(Math.imul(chars.length, 4) | 0);
  const _len = chars.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const c = chars[_i];
      moonbitlang$core$builtin$$Logger$write_char$40$(buf, c);
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return buf.val;
}
function moonbitlang$core$builtin$$Compare$compare$0$(self, other) {
  const len = self.length;
  const _bind = $compare_int(len, other.length);
  if (_bind === 0) {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < len) {
        const order = $compare_int(self.charCodeAt(i), other.charCodeAt(i));
        if (order !== 0) {
          return order;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return 0;
  } else {
    return _bind;
  }
}
function moonbitlang$core$string$$String$to_bytes(self) {
  const array = $make_array_len_and_init(Math.imul(self.length, 2) | 0, 0);
  moonbitlang$core$array$$FixedArray$blit_from_string(array, 0, self, 0, self.length);
  return array;
}
function moonbitlang$core$string$$String$iter(self) {
  const _p = (yield_) => {
    const len = self.length;
    let _tmp = 0;
    while (true) {
      const index = _tmp;
      if (index < len) {
        const c1 = self.charCodeAt(index);
        if (55296 <= c1 && c1 <= 56319 && (index + 1 | 0) < len) {
          const _tmp$2 = index + 1 | 0;
          const c2 = self.charCodeAt(_tmp$2);
          if (56320 <= c2 && c2 <= 57343) {
            const c = moonbitlang$core$string$$code_point_of_surrogate_pair(c1, c2);
            const _bind = yield_(c);
            if (_bind === 1) {
              _tmp = index + 2 | 0;
              continue;
            } else {
              return 0;
            }
          }
        }
        const _bind = yield_(c1);
        if (_bind === 1) {
        } else {
          return 0;
        }
        _tmp = index + 1 | 0;
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$core$string$$String$to_array(self) {
  const _bind = moonbitlang$core$string$$String$iter(self);
  const _bind$2 = moonbitlang$core$array$$Array$new$70$(self.length);
  const _acc = { val: _bind$2 };
  _bind((_p) => {
    const rv = _acc.val;
    moonbitlang$core$array$$Array$push$70$(rv, _p);
    _acc.val = rv;
    return 1;
  });
  return _acc.val;
}
function moonbitlang$core$buffer$$T$grow_if_necessary(self, required) {
  let enough_space = self.data.length;
  if (enough_space <= 0) {
    enough_space = 1;
  }
  while (true) {
    if (enough_space < required) {
      enough_space = Math.imul(enough_space, 2) | 0;
      continue;
    } else {
      break;
    }
  }
  if (enough_space !== self.data.length) {
    const new_data = $make_array_len_and_init(enough_space, 0);
    moonbitlang$core$array$$FixedArray$unsafe_blit$16$(new_data, 0, self.data, 0, self.len);
    self.data = new_data;
    return;
  } else {
    return;
  }
}
function moonbitlang$core$buffer$$T$contents(self) {
  return moonbitlang$core$bytes$$from_fixedarray(self.data, self.len);
}
function moonbitlang$core$buffer$$new(size_hint) {
  const initial = size_hint < 1 ? 1 : size_hint;
  const data = $make_array_len_and_init(initial, 0);
  return { data: data, len: 0, initial_data: data };
}
function moonbitlang$core$buffer$$T$write_byte(self, value) {
  moonbitlang$core$buffer$$T$grow_if_necessary(self, self.len + 1 | 0);
  const _tmp = self.data;
  const _tmp$2 = self.len;
  $bound_check(_tmp, _tmp$2);
  _tmp[_tmp$2] = value;
  self.len = self.len + 1 | 0;
}
function moonbitlang$core$buffer$$T$write_bytes(self, value) {
  const val_len = value.length;
  moonbitlang$core$buffer$$T$grow_if_necessary(self, self.len + val_len | 0);
  moonbitlang$core$array$$FixedArray$blit_from_bytes(self.data, self.len, value, 0, val_len);
  self.len = self.len + val_len | 0;
}
function moonbitlang$core$buffer$$T$write_iter(self, iter) {
  iter((byte) => {
    moonbitlang$core$buffer$$T$write_byte(self, byte);
    return 1;
  });
}
function moonbitlang$core$buffer$$T$to_bytes(self) {
  return moonbitlang$core$bytes$$from_fixedarray(self.data, self.len);
}
function moonbitlang$ulex$lib$util$diet$$Tree$size$3$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    const _size = _Node._2;
    return _size;
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$size$70$(self) {
  if (self.$tag === 0) {
    return 0;
  } else {
    const _Node = self;
    const _size = _Node._2;
    return _size;
  }
}
function moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, l, r) {
  const size = (moonbitlang$ulex$lib$util$diet$$Tree$size$3$(l) + moonbitlang$ulex$lib$util$diet$$Tree$size$3$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Node$1$(l, r, size, min, max);
}
function moonbitlang$ulex$lib$util$diet$$make_node$70$(min, max, l, r) {
  const size = (moonbitlang$ulex$lib$util$diet$$Tree$size$70$(l) + moonbitlang$ulex$lib$util$diet$$Tree$size$70$(r) | 0) + 1 | 0;
  return new $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Node$0$(l, r, size, min, max);
}
function moonbitlang$ulex$lib$util$diet$$double_l$3$(min, max, l, r) {
  _L: {
    if (r.$tag === 1) {
      const _Node = r;
      const _x = _Node._0;
      if (_x.$tag === 1) {
        const _Node$2 = _x;
        return moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node$2._3, _Node$2._4, moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, l, _Node$2._0), moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node._3, _Node._4, _Node$2._1, _Node._1));
      } else {
        break _L;
      }
    } else {
      break _L;
    }
  }
  return $panic();
}
function moonbitlang$ulex$lib$util$diet$$double_l$70$(min, max, l, r) {
  _L: {
    if (r.$tag === 1) {
      const _Node = r;
      const _x = _Node._0;
      if (_x.$tag === 1) {
        const _Node$2 = _x;
        return moonbitlang$ulex$lib$util$diet$$make_node$70$(_Node$2._3, _Node$2._4, moonbitlang$ulex$lib$util$diet$$make_node$70$(min, max, l, _Node$2._0), moonbitlang$ulex$lib$util$diet$$make_node$70$(_Node._3, _Node._4, _Node$2._1, _Node._1));
      } else {
        break _L;
      }
    } else {
      break _L;
    }
  }
  return $panic();
}
function moonbitlang$ulex$lib$util$diet$$double_r$3$(min, max, l, r) {
  _L: {
    if (l.$tag === 1) {
      const _Node = l;
      const _x = _Node._1;
      if (_x.$tag === 1) {
        const _Node$2 = _x;
        return moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node$2._3, _Node$2._4, moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node._3, _Node._4, _Node._0, _Node$2._0), moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, _Node$2._1, r));
      } else {
        break _L;
      }
    } else {
      break _L;
    }
  }
  return $panic();
}
function moonbitlang$ulex$lib$util$diet$$double_r$70$(min, max, l, r) {
  _L: {
    if (l.$tag === 1) {
      const _Node = l;
      const _x = _Node._1;
      if (_x.$tag === 1) {
        const _Node$2 = _x;
        return moonbitlang$ulex$lib$util$diet$$make_node$70$(_Node$2._3, _Node$2._4, moonbitlang$ulex$lib$util$diet$$make_node$70$(_Node._3, _Node._4, _Node._0, _Node$2._0), moonbitlang$ulex$lib$util$diet$$make_node$70$(min, max, _Node$2._1, r));
      } else {
        break _L;
      }
    } else {
      break _L;
    }
  }
  return $panic();
}
function moonbitlang$ulex$lib$util$diet$$single_l$3$(min, max, l, r) {
  if (r.$tag === 1) {
    const _Node = r;
    return moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node._3, _Node._4, moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, l, _Node._0), _Node._1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$single_l$70$(min, max, l, r) {
  if (r.$tag === 1) {
    const _Node = r;
    return moonbitlang$ulex$lib$util$diet$$make_node$70$(_Node._3, _Node._4, moonbitlang$ulex$lib$util$diet$$make_node$70$(min, max, l, _Node._0), _Node._1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$single_r$3$(min, max, l, r) {
  if (l.$tag === 1) {
    const _Node = l;
    return moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node._3, _Node._4, _Node._0, moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, _Node._1, r));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$single_r$70$(min, max, l, r) {
  if (l.$tag === 1) {
    const _Node = l;
    return moonbitlang$ulex$lib$util$diet$$make_node$70$(_Node._3, _Node._4, _Node._0, moonbitlang$ulex$lib$util$diet$$make_node$70$(min, max, _Node._1, r));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$balance$3$(min, max, l, r) {
  const l_size = moonbitlang$ulex$lib$util$diet$$Tree$size$3$(l);
  const r_size = moonbitlang$ulex$lib$util$diet$$Tree$size$3$(r);
  if ((l_size + r_size | 0) <= 1) {
    return moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, l, r);
  } else {
    if ((r_size + 1 | 0) > (Math.imul(3, l_size + 1 | 0) | 0)) {
      if (r.$tag === 1) {
        const _Node = r;
        return (moonbitlang$ulex$lib$util$diet$$Tree$size$3$(_Node._0) + 1 | 0) < (Math.imul(2, moonbitlang$ulex$lib$util$diet$$Tree$size$3$(_Node._1) + 1 | 0) | 0) ? moonbitlang$ulex$lib$util$diet$$single_l$3$(min, max, l, _Node) : moonbitlang$ulex$lib$util$diet$$double_l$3$(min, max, l, _Node);
      } else {
        return $panic();
      }
    } else {
      if ((l_size + 1 | 0) > (Math.imul(3, r_size + 1 | 0) | 0)) {
        if (l.$tag === 1) {
          const _Node = l;
          return (moonbitlang$ulex$lib$util$diet$$Tree$size$3$(_Node._1) + 1 | 0) < (Math.imul(2, moonbitlang$ulex$lib$util$diet$$Tree$size$3$(_Node._0) + 1 | 0) | 0) ? moonbitlang$ulex$lib$util$diet$$single_r$3$(min, max, _Node, r) : moonbitlang$ulex$lib$util$diet$$double_r$3$(min, max, _Node, r);
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, l, r);
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$balance$70$(min, max, l, r) {
  const l_size = moonbitlang$ulex$lib$util$diet$$Tree$size$70$(l);
  const r_size = moonbitlang$ulex$lib$util$diet$$Tree$size$70$(r);
  if ((l_size + r_size | 0) <= 1) {
    return moonbitlang$ulex$lib$util$diet$$make_node$70$(min, max, l, r);
  } else {
    if ((r_size + 1 | 0) > (Math.imul(3, l_size + 1 | 0) | 0)) {
      if (r.$tag === 1) {
        const _Node = r;
        return (moonbitlang$ulex$lib$util$diet$$Tree$size$70$(_Node._0) + 1 | 0) < (Math.imul(2, moonbitlang$ulex$lib$util$diet$$Tree$size$70$(_Node._1) + 1 | 0) | 0) ? moonbitlang$ulex$lib$util$diet$$single_l$70$(min, max, l, _Node) : moonbitlang$ulex$lib$util$diet$$double_l$70$(min, max, l, _Node);
      } else {
        return $panic();
      }
    } else {
      if ((l_size + 1 | 0) > (Math.imul(3, r_size + 1 | 0) | 0)) {
        if (l.$tag === 1) {
          const _Node = l;
          return (moonbitlang$ulex$lib$util$diet$$Tree$size$70$(_Node._1) + 1 | 0) < (Math.imul(2, moonbitlang$ulex$lib$util$diet$$Tree$size$70$(_Node._0) + 1 | 0) | 0) ? moonbitlang$ulex$lib$util$diet$$single_r$70$(min, max, _Node, r) : moonbitlang$ulex$lib$util$diet$$double_r$70$(min, max, _Node, r);
        } else {
          return $panic();
        }
      } else {
        return moonbitlang$ulex$lib$util$diet$$make_node$70$(min, max, l, r);
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_from$3$(self, x) {
  let _tmp = self;
  let _tmp$2 = x;
  while (true) {
    const self$2 = _tmp;
    const x$2 = _tmp$2;
    if (self$2.$tag === 0) {
      return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
    } else {
      const _Node = self$2;
      if (moonbitlang$core$builtin$$op_lt$3$(x$2, _Node._3)) {
        return moonbitlang$ulex$lib$util$diet$$balance$3$(_Node._3, _Node._4, moonbitlang$ulex$lib$util$diet$$Tree$slice_from$3$(_Node._0, x$2), _Node._1);
      } else {
        if (moonbitlang$core$builtin$$op_gt$3$(x$2, _Node._4)) {
          _tmp = _Node._1;
          continue;
        } else {
          return moonbitlang$ulex$lib$util$diet$$balance$3$(x$2, _Node._4, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$, _Node._1);
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_from$70$(self, x) {
  let _tmp = self;
  let _tmp$2 = x;
  while (true) {
    const self$2 = _tmp;
    const x$2 = _tmp$2;
    if (self$2.$tag === 0) {
      return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$;
    } else {
      const _Node = self$2;
      if (x$2 < _Node._3) {
        return moonbitlang$ulex$lib$util$diet$$balance$70$(_Node._3, _Node._4, moonbitlang$ulex$lib$util$diet$$Tree$slice_from$70$(_Node._0, x$2), _Node._1);
      } else {
        if (x$2 > _Node._4) {
          _tmp = _Node._1;
          continue;
        } else {
          return moonbitlang$ulex$lib$util$diet$$balance$70$(x$2, _Node._4, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$, _Node._1);
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_util$3$(self, x) {
  let _tmp = self;
  let _tmp$2 = x;
  while (true) {
    const self$2 = _tmp;
    const x$2 = _tmp$2;
    if (self$2.$tag === 0) {
      return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
    } else {
      const _Node = self$2;
      if (moonbitlang$core$builtin$$op_gt$3$(x$2, _Node._4)) {
        return moonbitlang$ulex$lib$util$diet$$balance$3$(_Node._3, _Node._4, _Node._0, moonbitlang$ulex$lib$util$diet$$Tree$slice_util$3$(_Node._1, x$2));
      } else {
        if (moonbitlang$core$builtin$$op_lt$3$(x$2, _Node._3)) {
          _tmp = _Node._0;
          continue;
        } else {
          return moonbitlang$ulex$lib$util$diet$$balance$3$(_Node._3, x$2, _Node._0, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$);
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_util$70$(self, x) {
  let _tmp = self;
  let _tmp$2 = x;
  while (true) {
    const self$2 = _tmp;
    const x$2 = _tmp$2;
    if (self$2.$tag === 0) {
      return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$;
    } else {
      const _Node = self$2;
      if (x$2 > _Node._4) {
        return moonbitlang$ulex$lib$util$diet$$balance$70$(_Node._3, _Node._4, _Node._0, moonbitlang$ulex$lib$util$diet$$Tree$slice_util$70$(_Node._1, x$2));
      } else {
        if (x$2 < _Node._3) {
          _tmp = _Node._0;
          continue;
        } else {
          return moonbitlang$ulex$lib$util$diet$$balance$70$(_Node._3, x$2, _Node._0, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$);
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_before$3$(self, x) {
  const _p = -1;
  if (x === _p) {
    return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
  } else {
    return moonbitlang$ulex$lib$util$diet$$Tree$slice_util$3$(self, moonbitlang$ulex$lib$util$bounded_enum$$BoundedEnum$pred$3$(x));
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_before$70$(self, x) {
  return x === 0 ? $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$ : moonbitlang$ulex$lib$util$diet$$Tree$slice_util$70$(self, x - 1 | 0);
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_after$3$(self, x) {
  const _p = 1114111;
  if (x === _p) {
    return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
  } else {
    return moonbitlang$ulex$lib$util$diet$$Tree$slice_from$3$(self, moonbitlang$ulex$lib$util$bounded_enum$$BoundedEnum$succ$3$(x));
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice_after$70$(self, x) {
  return x === 1114111 ? $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$ : moonbitlang$ulex$lib$util$diet$$Tree$slice_from$70$(self, x + 1 | 0);
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice$3$(self, min, max) {
  if (min === undefined) {
    if (max === undefined) {
      return $panic();
    } else {
      const _Some = max;
      const _max = _Some;
      return moonbitlang$ulex$lib$util$diet$$Tree$slice_util$3$(self, _max);
    }
  } else {
    const _Some = min;
    const _min = _Some;
    if (max === undefined) {
      return moonbitlang$ulex$lib$util$diet$$Tree$slice_from$3$(self, _min);
    } else {
      const _Some$2 = max;
      const _max = _Some$2;
      return moonbitlang$ulex$lib$util$diet$$Tree$slice_util$3$(moonbitlang$ulex$lib$util$diet$$Tree$slice_from$3$(self, _min), _max);
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$slice$70$(self, min, max) {
  if (min === -1) {
    if (max === -1) {
      return $panic();
    } else {
      const _Some = max;
      const _max = _Some;
      return moonbitlang$ulex$lib$util$diet$$Tree$slice_util$70$(self, _max);
    }
  } else {
    const _Some = min;
    const _min = _Some;
    if (max === -1) {
      return moonbitlang$ulex$lib$util$diet$$Tree$slice_from$70$(self, _min);
    } else {
      const _Some$2 = max;
      const _max = _Some$2;
      return moonbitlang$ulex$lib$util$diet$$Tree$slice_util$70$(moonbitlang$ulex$lib$util$diet$$Tree$slice_from$70$(self, _min), _max);
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$InorderIterator$move_left$3$(self, node) {
  let _tmp = node;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return;
    } else {
      const _Node = _param;
      const _left = _Node._0;
      moonbitlang$core$array$$Array$push$193$(self, _Node);
      _tmp = _left;
      continue;
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$InorderIterator$move_left$70$(self, node) {
  let _tmp = node;
  while (true) {
    const _param = _tmp;
    if (_param.$tag === 0) {
      return;
    } else {
      const _Node = _param;
      const _left = _Node._0;
      moonbitlang$core$array$$Array$push$195$(self, _Node);
      _tmp = _left;
      continue;
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$InorderIterator$new$3$(root) {
  const it = [];
  moonbitlang$ulex$lib$util$diet$$InorderIterator$move_left$3$(it, root);
  return it;
}
function moonbitlang$ulex$lib$util$diet$$InorderIterator$new$70$(root) {
  const it = [];
  moonbitlang$ulex$lib$util$diet$$InorderIterator$move_left$70$(it, root);
  return it;
}
function moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(self) {
  const _bind = moonbitlang$core$array$$Array$pop$193$(self);
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _curr = _Some;
    if (_curr.$tag === 1) {
      const _Node = _curr;
      const _min = _Node._3;
      const _max = _Node._4;
      const _right = _Node._1;
      moonbitlang$ulex$lib$util$diet$$InorderIterator$move_left$3$(self, _right);
      return { _0: _min, _1: _max };
    } else {
      return $panic();
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$InorderIterator$next$70$(self) {
  const _bind = moonbitlang$core$array$$Array$pop$195$(self);
  if (_bind === undefined) {
    return undefined;
  } else {
    const _Some = _bind;
    const _curr = _Some;
    if (_curr.$tag === 1) {
      const _Node = _curr;
      const _min = _Node._3;
      const _max = _Node._4;
      const _right = _Node._1;
      moonbitlang$ulex$lib$util$diet$$InorderIterator$move_left$70$(self, _right);
      return { _0: _min, _1: _max };
    } else {
      return $panic();
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$split_leftmost$3$(t) {
  if (t.$tag === 0) {
    return $panic();
  } else {
    const _Node = t;
    const _x = _Node._0;
    if (_x.$tag === 0) {
      const _right = _Node._1;
      const _min = _Node._3;
      const _max = _Node._4;
      return { _0: { _0: _min, _1: _max }, _1: _right };
    } else {
      const _bind = moonbitlang$ulex$lib$util$diet$$split_leftmost$3$(_Node._0);
      const _x$2 = _bind._0;
      const _min = _x$2._0;
      const _max = _x$2._1;
      const _l = _bind._1;
      return { _0: { _0: _min, _1: _max }, _1: moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node._3, _Node._4, _l, _Node._1) };
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$split_leftmost$70$(t) {
  if (t.$tag === 0) {
    return $panic();
  } else {
    const _Node = t;
    const _x = _Node._0;
    if (_x.$tag === 0) {
      const _right = _Node._1;
      const _min = _Node._3;
      const _max = _Node._4;
      return { _0: { _0: _min, _1: _max }, _1: _right };
    } else {
      const _bind = moonbitlang$ulex$lib$util$diet$$split_leftmost$70$(_Node._0);
      const _x$2 = _bind._0;
      const _min = _x$2._0;
      const _max = _x$2._1;
      const _l = _bind._1;
      return { _0: { _0: _min, _1: _max }, _1: moonbitlang$ulex$lib$util$diet$$make_node$70$(_Node._3, _Node._4, _l, _Node._1) };
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$split_rightmost$3$(t) {
  if (t.$tag === 0) {
    return $panic();
  } else {
    const _Node = t;
    const _left = _Node._0;
    const _x = _Node._1;
    if (_x.$tag === 0) {
      const _min = _Node._3;
      const _max = _Node._4;
      return { _0: { _0: _min, _1: _max }, _1: _left };
    } else {
      const _bind = moonbitlang$ulex$lib$util$diet$$split_rightmost$3$(_Node._1);
      const _x$2 = _bind._0;
      const _min = _x$2._0;
      const _max = _x$2._1;
      const _r = _bind._1;
      return { _0: { _0: _min, _1: _max }, _1: moonbitlang$ulex$lib$util$diet$$make_node$3$(_Node._3, _Node._4, _Node._0, _r) };
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$split_rightmost$70$(t) {
  if (t.$tag === 0) {
    return $panic();
  } else {
    const _Node = t;
    const _left = _Node._0;
    const _x = _Node._1;
    if (_x.$tag === 0) {
      const _min = _Node._3;
      const _max = _Node._4;
      return { _0: { _0: _min, _1: _max }, _1: _left };
    } else {
      const _bind = moonbitlang$ulex$lib$util$diet$$split_rightmost$70$(_Node._1);
      const _x$2 = _bind._0;
      const _min = _x$2._0;
      const _max = _x$2._1;
      const _r = _bind._1;
      return { _0: { _0: _min, _1: _max }, _1: moonbitlang$ulex$lib$util$diet$$make_node$70$(_Node._3, _Node._4, _Node._0, _r) };
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$singleton$3$(x) {
  return moonbitlang$ulex$lib$util$diet$$make_node$3$(x, x, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$);
}
function moonbitlang$ulex$lib$util$diet$$singleton$70$(x) {
  return moonbitlang$ulex$lib$util$diet$$make_node$70$(x, x, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$);
}
function moonbitlang$ulex$lib$util$diet$$interval$70$(min, max) {
  return moonbitlang$ulex$lib$util$diet$$make_node$70$(min, max, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$);
}
function moonbitlang$ulex$lib$util$diet$$interval$3$(min, max) {
  return moonbitlang$ulex$lib$util$diet$$make_node$3$(min, max, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$, $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$);
}
function moonbitlang$ulex$lib$util$diet$$union$3$(t1, t2) {
  let t;
  _L: {
    if (t1.$tag === 0) {
      if (t2.$tag === 0) {
        return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
      } else {
        const _Node = t2;
        t = _Node;
        break _L;
      }
    } else {
      const _Node = t1;
      if (t2.$tag === 0) {
        t = _Node;
        break _L;
      } else {
        const _Node$2 = t2;
        let t1$2;
        let t2$2;
        _L$2: {
          if (_Node._2 >= _Node$2._2) {
            t1$2 = _Node;
            t2$2 = _Node$2;
            break _L$2;
          } else {
            t1$2 = _Node$2;
            t2$2 = _Node;
            break _L$2;
          }
        }
        return moonbitlang$ulex$lib$util$diet$$union_aux$3$(t1$2, t2$2);
      }
    }
  }
  return t;
}
function moonbitlang$ulex$lib$util$diet$$union$70$(t1, t2) {
  let t;
  _L: {
    if (t1.$tag === 0) {
      if (t2.$tag === 0) {
        return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$;
      } else {
        const _Node = t2;
        t = _Node;
        break _L;
      }
    } else {
      const _Node = t1;
      if (t2.$tag === 0) {
        t = _Node;
        break _L;
      } else {
        const _Node$2 = t2;
        let t1$2;
        let t2$2;
        _L$2: {
          if (_Node._2 >= _Node$2._2) {
            t1$2 = _Node;
            t2$2 = _Node$2;
            break _L$2;
          } else {
            t1$2 = _Node$2;
            t2$2 = _Node;
            break _L$2;
          }
        }
        return moonbitlang$ulex$lib$util$diet$$union_aux$70$(t1$2, t2$2);
      }
    }
  }
  return t;
}
function moonbitlang$ulex$lib$util$diet$$union_aux$3$(t1, t2) {
  if (t1.$tag === 1) {
    const _Node = t1;
    if (t2.$tag === 1) {
      const _Node$2 = t2;
      const l1 = _Node._0;
      const r1 = _Node._1;
      const l2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_before$3$(_Node$2, _Node._3);
      const r2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_after$3$(_Node$2, _Node._4);
      let _bind;
      const _p = _Node._3;
      const _p$2 = -1;
      if (_p === _p$2) {
        _bind = { _0: _Node._3, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$ };
      } else {
        const l = moonbitlang$ulex$lib$util$diet$$union$3$(l1, l2);
        if (l.$tag === 0) {
          _bind = { _0: _Node._3, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$ };
        } else {
          const _bind$2 = moonbitlang$ulex$lib$util$diet$$split_rightmost$3$(l);
          const _x = _bind$2._0;
          const _min = _x._0;
          const _max = _x._1;
          const _l3 = _bind$2._1;
          let _tmp;
          if (moonbitlang$core$builtin$$op_lt$3$(_max, 1114111)) {
            const _p$3 = moonbitlang$ulex$lib$util$bounded_enum$$BoundedEnum$succ$3$(_max);
            const _p$4 = _Node._3;
            _tmp = _p$3 === _p$4;
          } else {
            _tmp = false;
          }
          if (_tmp) {
            _bind = { _0: _min, _1: _l3 };
          } else {
            _bind = { _0: _Node._3, _1: l };
          }
        }
      }
      const _min = _bind._0;
      const _l = _bind._1;
      let _bind$2;
      const _p$3 = _Node._4;
      const _p$4 = 1114111;
      if (_p$3 === _p$4) {
        _bind$2 = { _0: _Node._4, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$ };
      } else {
        const r = moonbitlang$ulex$lib$util$diet$$union$3$(r1, r2);
        if (r.$tag === 0) {
          _bind$2 = { _0: _Node._4, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$ };
        } else {
          const _bind$3 = moonbitlang$ulex$lib$util$diet$$split_leftmost$3$(r);
          const _x = _bind$3._0;
          const _min$2 = _x._0;
          const _max = _x._1;
          const _r3 = _bind$3._1;
          let _tmp;
          if (moonbitlang$core$builtin$$op_gt$3$(_min$2, -1)) {
            const _p$5 = moonbitlang$ulex$lib$util$bounded_enum$$BoundedEnum$pred$3$(_min$2);
            const _p$6 = _Node._4;
            _tmp = _p$5 === _p$6;
          } else {
            _tmp = false;
          }
          if (_tmp) {
            _bind$2 = { _0: _max, _1: _r3 };
          } else {
            _bind$2 = { _0: _Node._4, _1: r };
          }
        }
      }
      const _max = _bind$2._0;
      const _r = _bind$2._1;
      return moonbitlang$ulex$lib$util$diet$$balance$3$(_min, _max, _l, _r);
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$union_aux$70$(t1, t2) {
  if (t1.$tag === 1) {
    const _Node = t1;
    if (t2.$tag === 1) {
      const _Node$2 = t2;
      const l1 = _Node._0;
      const r1 = _Node._1;
      const l2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_before$70$(_Node$2, _Node._3);
      const r2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_after$70$(_Node$2, _Node._4);
      let _bind;
      if (_Node._3 === 0) {
        _bind = { _0: _Node._3, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$ };
      } else {
        const l = moonbitlang$ulex$lib$util$diet$$union$70$(l1, l2);
        if (l.$tag === 0) {
          _bind = { _0: _Node._3, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$ };
        } else {
          const _bind$2 = moonbitlang$ulex$lib$util$diet$$split_rightmost$70$(l);
          const _x = _bind$2._0;
          const _min = _x._0;
          const _max = _x._1;
          const _l3 = _bind$2._1;
          _bind = _max < 1114111 && (_max + 1 | 0) === _Node._3 ? { _0: _min, _1: _l3 } : { _0: _Node._3, _1: l };
        }
      }
      const _min = _bind._0;
      const _l = _bind._1;
      let _bind$2;
      if (_Node._4 === 1114111) {
        _bind$2 = { _0: _Node._4, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$ };
      } else {
        const r = moonbitlang$ulex$lib$util$diet$$union$70$(r1, r2);
        if (r.$tag === 0) {
          _bind$2 = { _0: _Node._4, _1: $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$ };
        } else {
          const _bind$3 = moonbitlang$ulex$lib$util$diet$$split_leftmost$70$(r);
          const _x = _bind$3._0;
          const _min$2 = _x._0;
          const _max = _x._1;
          const _r3 = _bind$3._1;
          _bind$2 = _min$2 > 0 && (_min$2 - 1 | 0) === _Node._4 ? { _0: _max, _1: _r3 } : { _0: _Node._4, _1: r };
        }
      }
      const _max = _bind$2._0;
      const _r = _bind$2._1;
      return moonbitlang$ulex$lib$util$diet$$balance$70$(_min, _max, _l, _r);
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$is_empty$3$(self) {
  if (self.$tag === 0) {
    return true;
  } else {
    return false;
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$is_empty$70$(self) {
  if (self.$tag === 0) {
    return true;
  } else {
    return false;
  }
}
function moonbitlang$ulex$lib$util$diet$$concat$3$(l, r) {
  if (l.$tag === 0) {
    return r;
  } else {
    if (r.$tag === 0) {
      return l;
    } else {
      const _Node = l;
      const _Node$2 = r;
      const _bind = moonbitlang$ulex$lib$util$diet$$split_leftmost$3$(_Node$2);
      const _x = _bind._0;
      const _min = _x._0;
      const _max = _x._1;
      const _r = _bind._1;
      return moonbitlang$ulex$lib$util$diet$$balance$3$(_min, _max, _Node, _r);
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$concat$70$(l, r) {
  if (l.$tag === 0) {
    return r;
  } else {
    if (r.$tag === 0) {
      return l;
    } else {
      const _Node = l;
      const _Node$2 = r;
      const _bind = moonbitlang$ulex$lib$util$diet$$split_leftmost$70$(_Node$2);
      const _x = _bind._0;
      const _min = _x._0;
      const _max = _x._1;
      const _r = _bind._1;
      return moonbitlang$ulex$lib$util$diet$$balance$70$(_min, _max, _Node, _r);
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$intersection$3$(t1, t2) {
  _L: {
    if (t1.$tag === 0) {
      break _L;
    } else {
      if (t2.$tag === 0) {
        break _L;
      } else {
        const _Node = t1;
        const _Node$2 = t2;
        let t1$2;
        let t2$2;
        _L$2: {
          if (_Node._2 >= _Node$2._2) {
            t1$2 = _Node;
            t2$2 = _Node$2;
            break _L$2;
          } else {
            t1$2 = _Node$2;
            t2$2 = _Node;
            break _L$2;
          }
        }
        return moonbitlang$ulex$lib$util$diet$$intersection_aux$3$(t1$2, t2$2);
      }
    }
  }
  return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
}
function moonbitlang$ulex$lib$util$diet$$intersection$70$(t1, t2) {
  _L: {
    if (t1.$tag === 0) {
      break _L;
    } else {
      if (t2.$tag === 0) {
        break _L;
      } else {
        const _Node = t1;
        const _Node$2 = t2;
        let t1$2;
        let t2$2;
        _L$2: {
          if (_Node._2 >= _Node$2._2) {
            t1$2 = _Node;
            t2$2 = _Node$2;
            break _L$2;
          } else {
            t1$2 = _Node$2;
            t2$2 = _Node;
            break _L$2;
          }
        }
        return moonbitlang$ulex$lib$util$diet$$intersection_aux$70$(t1$2, t2$2);
      }
    }
  }
  return $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$;
}
function moonbitlang$ulex$lib$util$diet$$intersection_aux$3$(t1, t2) {
  if (t1.$tag === 1) {
    const _Node = t1;
    if (t2.$tag === 1) {
      const _Node$2 = t2;
      const l1 = _Node._0;
      const r1 = _Node._1;
      const l2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_before$3$(_Node$2, _Node._3);
      const r2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_after$3$(_Node$2, _Node._4);
      const l = moonbitlang$ulex$lib$util$diet$$intersection$3$(l1, l2);
      const r = moonbitlang$ulex$lib$util$diet$$intersection$3$(r1, r2);
      const m = moonbitlang$ulex$lib$util$diet$$Tree$slice$3$(_Node$2, _Node._3, _Node._4);
      return moonbitlang$ulex$lib$util$diet$$concat$3$(moonbitlang$ulex$lib$util$diet$$concat$3$(l, m), r);
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$intersection_aux$70$(t1, t2) {
  if (t1.$tag === 1) {
    const _Node = t1;
    if (t2.$tag === 1) {
      const _Node$2 = t2;
      const l1 = _Node._0;
      const r1 = _Node._1;
      const l2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_before$70$(_Node$2, _Node._3);
      const r2 = moonbitlang$ulex$lib$util$diet$$Tree$slice_after$70$(_Node$2, _Node._4);
      const l = moonbitlang$ulex$lib$util$diet$$intersection$70$(l1, l2);
      const r = moonbitlang$ulex$lib$util$diet$$intersection$70$(r1, r2);
      const m = moonbitlang$ulex$lib$util$diet$$Tree$slice$70$(_Node$2, _Node._3, _Node._4);
      return moonbitlang$ulex$lib$util$diet$$concat$70$(moonbitlang$ulex$lib$util$diet$$concat$70$(l, m), r);
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$util$diet$$complement_aux$3$(min, max, t) {
  if (t.$tag === 0) {
    return moonbitlang$ulex$lib$util$diet$$interval$3$(min, max);
  } else {
    const _Node = t;
    let l;
    const _p = _Node._3;
    const _p$2 = -1;
    if (_p === _p$2) {
      l = $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
    } else {
      l = moonbitlang$ulex$lib$util$diet$$complement_aux$3$(min, moonbitlang$ulex$lib$util$bounded_enum$$BoundedEnum$pred$3$(_Node._3), _Node._0);
    }
    let r;
    const _p$3 = _Node._4;
    const _p$4 = 1114111;
    if (_p$3 === _p$4) {
      r = $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$1$;
    } else {
      r = moonbitlang$ulex$lib$util$diet$$complement_aux$3$(moonbitlang$ulex$lib$util$bounded_enum$$BoundedEnum$succ$3$(_Node._4), max, _Node._1);
    }
    return moonbitlang$ulex$lib$util$diet$$concat$3$(l, r);
  }
}
function moonbitlang$ulex$lib$util$diet$$complement_aux$70$(min, max, t) {
  if (t.$tag === 0) {
    return moonbitlang$ulex$lib$util$diet$$interval$70$(min, max);
  } else {
    const _Node = t;
    let l;
    if (_Node._3 === 0) {
      l = $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$;
    } else {
      const _p = _Node._3;
      const _tmp = _p - 1 | 0;
      l = moonbitlang$ulex$lib$util$diet$$complement_aux$70$(min, _tmp, _Node._0);
    }
    let r;
    if (_Node._4 === 1114111) {
      r = $64$moonbitlang$47$ulex$47$lib$47$util$47$diet$46$Tree$Empty$0$;
    } else {
      const _p = _Node._4;
      const _tmp = _p + 1 | 0;
      r = moonbitlang$ulex$lib$util$diet$$complement_aux$70$(_tmp, max, _Node._1);
    }
    return moonbitlang$ulex$lib$util$diet$$concat$70$(l, r);
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$complement$3$(self) {
  return moonbitlang$ulex$lib$util$diet$$complement_aux$3$(-1, 1114111, self);
}
function moonbitlang$ulex$lib$util$diet$$Tree$complement$70$(self) {
  return moonbitlang$ulex$lib$util$diet$$complement_aux$70$(0, 1114111, self);
}
function moonbitlang$ulex$lib$util$diet$$difference$3$(t1, t2) {
  return moonbitlang$ulex$lib$util$diet$$intersection$3$(t1, moonbitlang$ulex$lib$util$diet$$Tree$complement$3$(t2));
}
function moonbitlang$ulex$lib$util$diet$$difference$70$(t1, t2) {
  return moonbitlang$ulex$lib$util$diet$$intersection$70$(t1, moonbitlang$ulex$lib$util$diet$$Tree$complement$70$(t2));
}
function moonbitlang$core$builtin$$Eq$op_equal$204$(self, other) {
  const iter = moonbitlang$ulex$lib$util$diet$$InorderIterator$new$3$(self);
  const iter1 = moonbitlang$ulex$lib$util$diet$$InorderIterator$new$3$(other);
  let _tmp = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter);
  let _tmp$2 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter1);
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param === undefined) {
      return _param$2 === undefined;
    } else {
      const _Some = _param;
      const _a = _Some;
      if (_param$2 === undefined) {
        return false;
      } else {
        const _Some$2 = _param$2;
        const _b = _Some$2;
        if (moonbitlang$core$builtin$$Eq$op_equal$149$(_a, _b)) {
          const _tmp$3 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter);
          const _tmp$4 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter1);
          _tmp = _tmp$3;
          _tmp$2 = _tmp$4;
          continue;
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$205$(self, other) {
  const iter = moonbitlang$ulex$lib$util$diet$$InorderIterator$new$70$(self);
  const iter1 = moonbitlang$ulex$lib$util$diet$$InorderIterator$new$70$(other);
  let _tmp = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$70$(iter);
  let _tmp$2 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$70$(iter1);
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param === undefined) {
      return _param$2 === undefined;
    } else {
      const _Some = _param;
      const _a = _Some;
      if (_param$2 === undefined) {
        return false;
      } else {
        const _Some$2 = _param$2;
        const _b = _Some$2;
        if (_a._0 === _b._0 && _a._1 === _b._1) {
          const _tmp$3 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$70$(iter);
          const _tmp$4 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$70$(iter1);
          _tmp = _tmp$3;
          _tmp$2 = _tmp$4;
          continue;
        } else {
          return false;
        }
      }
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$204$(self, other) {
  const iter = moonbitlang$ulex$lib$util$diet$$InorderIterator$new$3$(self);
  const iter1 = moonbitlang$ulex$lib$util$diet$$InorderIterator$new$3$(other);
  let _tmp = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter);
  let _tmp$2 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter1);
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param === undefined) {
      return _param$2 === undefined ? 0 : -1;
    } else {
      const _Some = _param;
      const _a = _Some;
      if (_param$2 === undefined) {
        return 1;
      } else {
        const _Some$2 = _param$2;
        const _b = _Some$2;
        const cmp = moonbitlang$core$builtin$$Compare$compare$149$(_a, _b);
        if (cmp === 0) {
          const _tmp$3 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter);
          const _tmp$4 = moonbitlang$ulex$lib$util$diet$$InorderIterator$next$3$(iter1);
          _tmp = _tmp$3;
          _tmp$2 = _tmp$4;
          continue;
        } else {
          return cmp;
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$3$(self) {
  const _p = (yield_) => {
    if (self.$tag === 0) {
      return 1;
    } else {
      const _Node = self;
      const _bind = moonbitlang$core$builtin$$Iter$run$202$(moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$3$(_Node._0), yield_);
      if (_bind === 1) {
        const _bind$2 = yield_({ _0: _Node._3, _1: _Node._4 });
        if (_bind$2 === 1) {
          const _bind$3 = moonbitlang$core$builtin$$Iter$run$202$(moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$3$(_Node._1), yield_);
          if (_bind$3 === 1) {
            return 1;
          } else {
            return 0;
          }
        } else {
          return 0;
        }
      } else {
        return 0;
      }
    }
  };
  return _p;
}
function moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$70$(self) {
  const _p = (yield_) => {
    if (self.$tag === 0) {
      return 1;
    } else {
      const _Node = self;
      const _bind = moonbitlang$core$builtin$$Iter$run$194$(moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$70$(_Node._0), yield_);
      if (_bind === 1) {
        const _bind$2 = yield_({ _0: _Node._3, _1: _Node._4 });
        if (_bind$2 === 1) {
          const _bind$3 = moonbitlang$core$builtin$$Iter$run$194$(moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$70$(_Node._1), yield_);
          if (_bind$3 === 1) {
            return 1;
          } else {
            return 0;
          }
        } else {
          return 0;
        }
      } else {
        return 0;
      }
    }
  };
  return _p;
}
function moonbitlang$core$builtin$$Hash$hash_combine$204$(self, hasher) {
  const _bind = moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$3$(self);
  _bind((interval) => {
    moonbitlang$core$builtin$$Hash$hash_combine$149$(interval, hasher);
    return 1;
  });
}
function moonbitlang$core$builtin$$Hash$hash_combine$205$(self, hasher) {
  const _bind = moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$70$(self);
  _bind((interval) => {
    moonbitlang$core$builtin$$Hash$hash_combine$151$(interval, hasher);
    return 1;
  });
}
function moonbitlang$core$builtin$$Eq$op_equal$38$(_x_49, _x_50) {
  return moonbitlang$core$builtin$$Eq$op_equal$205$(_x_49, _x_50);
}
function moonbitlang$core$builtin$$Hash$hash_combine$38$(_x_45, _x_46) {
  moonbitlang$core$builtin$$Hash$hash_combine$205$(_x_45, _x_46);
}
function moonbitlang$ulex$lib$util$char_set$$singleton(x) {
  return moonbitlang$ulex$lib$util$diet$$singleton$70$(x);
}
function moonbitlang$ulex$lib$util$char_set$$range(min, max) {
  return moonbitlang$ulex$lib$util$diet$$interval$70$(min, max);
}
function moonbitlang$ulex$lib$util$char_set$$CharSet$complement(self) {
  return moonbitlang$ulex$lib$util$diet$$Tree$complement$70$(self);
}
function moonbitlang$ulex$lib$util$char_set$$CharSet$negated(self) {
  return moonbitlang$ulex$lib$util$char_set$$CharSet$complement(self);
}
function moonbitlang$ulex$lib$util$char_set$$CharSet$is_empty(self) {
  return moonbitlang$ulex$lib$util$diet$$Tree$is_empty$70$(self);
}
function moonbitlang$ulex$lib$util$char_set$$CharSet$union(self, other) {
  return moonbitlang$ulex$lib$util$diet$$union$70$(self, other);
}
function moonbitlang$ulex$lib$util$char_set$$CharSet$intersection(self, other) {
  return moonbitlang$ulex$lib$util$diet$$intersection$70$(self, other);
}
function moonbitlang$ulex$lib$util$char_set$$CharSet$difference(self, other) {
  return moonbitlang$ulex$lib$util$diet$$difference$70$(self, other);
}
function moonbitlang$core$builtin$$Add$op_add$38$(self, other) {
  return moonbitlang$ulex$lib$util$char_set$$CharSet$union(self, other);
}
function moonbitlang$core$builtin$$Sub$op_sub$38$(self, other) {
  return moonbitlang$ulex$lib$util$char_set$$CharSet$difference(self, other);
}
function moonbitlang$core$builtin$$BitAnd$land$38$(self, other) {
  return moonbitlang$ulex$lib$util$char_set$$CharSet$intersection(self, other);
}
function moonbitlang$ulex$lib$util$char_set$$CharSet$iter_ranges(self) {
  return moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$70$(self);
}
function moonbitlang$x$encoding$$slice(bytes, offset, length) {
  const new_bytes = $make_array_len_and_init(length, 48);
  moonbitlang$core$array$$FixedArray$blit_to$16$(bytes, new_bytes, length, offset, 0);
  return moonbitlang$core$bytes$$Bytes$from_fixedarray(new_bytes, undefined);
}
function moonbitlang$x$encoding$$malformed(bytes, offset, length) {
  return new $64$moonbitlang$47$x$47$encoding$46$Decode$Malformed(moonbitlang$x$encoding$$slice(bytes, offset, length));
}
function moonbitlang$x$encoding$$malformed_pair(be, hi, bytes, offset, length) {
  const bs1 = $make_array_len_and_init(length, 0);
  moonbitlang$core$array$$FixedArray$blit_to$16$(bytes, bs1, length, offset, 0);
  const bs0 = $make_array_len_and_init(2, 0);
  let j0;
  let j1;
  _L: {
    if (be) {
      j0 = 0;
      j1 = 1;
      break _L;
    } else {
      j0 = 1;
      j1 = 0;
      break _L;
    }
  }
  $bound_check(bs0, j0);
  bs0[j0] = hi >> 8 & 255;
  $bound_check(bs0, j1);
  bs0[j1] = hi & 255;
  const bs = moonbitlang$core$buffer$$new(bs0.length + bs1.length | 0);
  moonbitlang$core$buffer$$T$write_bytes(bs, moonbitlang$core$bytes$$Bytes$from_fixedarray(bs0, 2));
  moonbitlang$core$buffer$$T$write_bytes(bs, moonbitlang$core$bytes$$Bytes$from_fixedarray(bs1, length));
  return new $64$moonbitlang$47$x$47$encoding$46$Decode$Malformed(moonbitlang$x$encoding$$slice(moonbitlang$core$bytes$$Bytes$to_fixedarray(moonbitlang$core$buffer$$T$to_bytes(bs), undefined), 0, bs.len));
}
function moonbitlang$x$encoding$$r_utf_16(bytes, offset0, offset1) {
  $bound_check(bytes, offset0);
  const b0 = bytes[offset0];
  $bound_check(bytes, offset1);
  const b1 = bytes[offset1];
  const u = b0 << 8 | b1;
  return u < 55296 || u > 57343 ? new $64$moonbitlang$47$x$47$encoding$46$UTF16Decode$UTF16Uchar(u) : u > 56319 ? new $64$moonbitlang$47$x$47$encoding$46$UTF16Decode$UTF16Malformed(moonbitlang$x$encoding$$slice(bytes, moonbitlang$core$math$$minimum$7$(offset0, offset1), 2)) : new $64$moonbitlang$47$x$47$encoding$46$UTF16Decode$Hi(u);
}
function moonbitlang$x$encoding$$Decoder$eoi(self) {
  self.i = moonbitlang$core$builtin$$Default$default$200$();
}
function moonbitlang$x$encoding$$Decoder$ret(self, k, v) {
  self.k = k;
  return v;
}
function moonbitlang$x$encoding$$Decoder$refill(self, k) {
  moonbitlang$x$encoding$$Decoder$eoi(self);
  return moonbitlang$x$encoding$$Decoder$ret(self, k, new $64$moonbitlang$47$x$47$encoding$46$Decode$Refill(moonbitlang$core$bytes$$Bytes$from_fixedarray(self.t, undefined)));
}
function moonbitlang$x$encoding$$t_fill$46$blit$124$122(decoder, l) {
  moonbitlang$core$array$$FixedArray$blit_to$16$(decoder.i, decoder.t, l, decoder.i_pos, decoder.t_len);
  decoder.i_pos = decoder.i_pos + l | 0;
  decoder.t_len = decoder.t_len + l | 0;
}
function moonbitlang$x$encoding$$t_fill(k, decoder) {
  const rem = decoder.i.length - decoder.i_pos | 0;
  if (rem < 0) {
    return k(decoder);
  } else {
    const need = decoder.t_need - decoder.t_len | 0;
    if (rem < need) {
      moonbitlang$x$encoding$$t_fill$46$blit$124$122(decoder, rem);
      const _func = moonbitlang$core$tuple$$curry$73$(moonbitlang$x$encoding$$t_fill);
      return moonbitlang$x$encoding$$Decoder$refill(decoder, _func(k));
    } else {
      moonbitlang$x$encoding$$t_fill$46$blit$124$122(decoder, need);
      return k(decoder);
    }
  }
}
function moonbitlang$x$encoding$$r_utf_16_lo(hi, bytes, offset0, offset1) {
  $bound_check(bytes, offset0);
  const b0 = bytes[offset0];
  $bound_check(bytes, offset1);
  const b1 = bytes[offset1];
  const lo = b0 << 8 | b1;
  if (lo < 56320 || lo > 57343) {
    $bound_check(bytes, offset0);
    const _tmp = bytes[offset0];
    $bound_check(bytes, offset1);
    return new $64$moonbitlang$47$x$47$encoding$46$Decode$Malformed(new Uint8Array([_tmp, bytes[offset1]]));
  } else {
    return new $64$moonbitlang$47$x$47$encoding$46$Decode$Uchar((hi & 1023) << 10 | ((lo & 1023) + 65536 | 0));
  }
}
function moonbitlang$x$encoding$$Decoder$t_need(self, need) {
  self.t_len = 0;
  self.t_need = need;
}
function moonbitlang$x$encoding$$Decoder$decode_utf_16be(self) {
  const rem = self.i.length - self.i_pos | 0;
  if (rem <= 0) {
    return $64$moonbitlang$47$x$47$encoding$46$Decode$End;
  } else {
    if (rem < 2) {
      moonbitlang$x$encoding$$Decoder$t_need(self, 2);
      return moonbitlang$x$encoding$$t_fill(moonbitlang$x$encoding$$Decoder$t_decode_utf_16be, self);
    } else {
      const j = self.i_pos;
      self.i_pos = self.i_pos + 2 | 0;
      return moonbitlang$x$encoding$$Decoder$decode_utf_16be_lo(self, moonbitlang$x$encoding$$r_utf_16(self.i, j, j + 1 | 0));
    }
  }
}
function moonbitlang$x$encoding$$Decoder$decode_utf_16be_lo(self, decode) {
  switch (decode.$tag) {
    case 2: {
      const _UTF16Uchar = decode;
      const _x = _UTF16Uchar._0;
      return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16be, new $64$moonbitlang$47$x$47$encoding$46$Decode$Uchar(_x));
    }
    case 1: {
      const _UTF16Malformed = decode;
      const _x$2 = _UTF16Malformed._0;
      return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16be, new $64$moonbitlang$47$x$47$encoding$46$Decode$Malformed(_x$2));
    }
    default: {
      const _Hi = decode;
      const _hi = _Hi._0;
      const rem = self.i.length - self.i_pos | 0;
      if (rem < 2) {
        moonbitlang$x$encoding$$Decoder$t_need(self, 2);
        const _func = moonbitlang$core$tuple$$curry$74$(moonbitlang$x$encoding$$t_decode_utf_16be_lo);
        return moonbitlang$x$encoding$$t_fill(_func(_hi), self);
      } else {
        const j = self.i_pos;
        const dcd = moonbitlang$x$encoding$$r_utf_16_lo(_hi, self.i, j, j + 1 | 0);
        if (dcd.$tag === 3) {
          self.i_pos = self.i_pos + 2 | 0;
        }
        return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16be, dcd);
      }
    }
  }
}
function moonbitlang$x$encoding$$t_decode_utf_16be_lo(hi, self) {
  return self.t_len < self.t_need ? moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16be, moonbitlang$x$encoding$$malformed_pair(true, hi, self.t, 0, self.t_len)) : moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16be, moonbitlang$x$encoding$$r_utf_16_lo(hi, self.t, 0, 1));
}
function moonbitlang$x$encoding$$Decoder$t_decode_utf_16be(self) {
  return self.t_len < self.t_need ? moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16be, moonbitlang$x$encoding$$malformed(self.t, 0, self.t_len)) : moonbitlang$x$encoding$$Decoder$decode_utf_16be_lo(self, moonbitlang$x$encoding$$r_utf_16(self.t, 0, 1));
}
function moonbitlang$x$encoding$$Decoder$decode_utf_16le(self) {
  const rem = self.i.length - self.i_pos | 0;
  if (rem <= 0) {
    return $64$moonbitlang$47$x$47$encoding$46$Decode$End;
  } else {
    if (rem < 2) {
      moonbitlang$x$encoding$$Decoder$t_need(self, 2);
      return moonbitlang$x$encoding$$t_fill(moonbitlang$x$encoding$$Decoder$t_decode_utf_16le, self);
    } else {
      const j = self.i_pos;
      self.i_pos = self.i_pos + 2 | 0;
      return moonbitlang$x$encoding$$Decoder$decode_utf_16le_lo(self, moonbitlang$x$encoding$$r_utf_16(self.i, j + 1 | 0, j));
    }
  }
}
function moonbitlang$x$encoding$$Decoder$decode_utf_16le_lo(self, v) {
  switch (v.$tag) {
    case 2: {
      const _UTF16Uchar = v;
      const _u = _UTF16Uchar._0;
      return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16le, new $64$moonbitlang$47$x$47$encoding$46$Decode$Uchar(_u));
    }
    case 1: {
      const _UTF16Malformed = v;
      const _s = _UTF16Malformed._0;
      return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16le, new $64$moonbitlang$47$x$47$encoding$46$Decode$Malformed(_s));
    }
    default: {
      const _Hi = v;
      const _hi = _Hi._0;
      const rem = self.i.length - self.i_pos | 0;
      if (rem < 2) {
        moonbitlang$x$encoding$$Decoder$t_need(self, 2);
        const _func = moonbitlang$core$tuple$$curry$74$(moonbitlang$x$encoding$$t_decode_utf_16le_lo);
        return moonbitlang$x$encoding$$t_fill(_func(_hi), self);
      } else {
        const j = self.i_pos;
        const dcd = moonbitlang$x$encoding$$r_utf_16_lo(_hi, self.i, j + 1 | 0, j);
        if (dcd.$tag === 3) {
          self.i_pos = self.i_pos + 2 | 0;
        }
        return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16le, dcd);
      }
    }
  }
}
function moonbitlang$x$encoding$$t_decode_utf_16le_lo(hi, decoder) {
  return decoder.t_len < decoder.t_need ? moonbitlang$x$encoding$$Decoder$ret(decoder, moonbitlang$x$encoding$$Decoder$decode_utf_16le, moonbitlang$x$encoding$$malformed_pair(false, hi, decoder.t, 0, decoder.t_len)) : moonbitlang$x$encoding$$Decoder$ret(decoder, moonbitlang$x$encoding$$Decoder$decode_utf_16le, moonbitlang$x$encoding$$r_utf_16_lo(hi, decoder.t, 1, 0));
}
function moonbitlang$x$encoding$$Decoder$t_decode_utf_16le(self) {
  return self.t_len < self.t_need ? moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_16le, moonbitlang$x$encoding$$malformed(self.t, 0, self.t_len)) : moonbitlang$x$encoding$$Decoder$decode_utf_16le_lo(self, moonbitlang$x$encoding$$r_utf_16(self.t, 1, 0));
}
function moonbitlang$x$encoding$$r_utf_8(bytes, offset, length) {
  let c;
  _L: {
    switch (length) {
      case 1: {
        $bound_check(bytes, offset);
        const _tmp = bytes[offset];
        c = _tmp;
        break _L;
      }
      case 2: {
        $bound_check(bytes, offset);
        const b0 = bytes[offset];
        const _tmp$2 = offset + 1 | 0;
        $bound_check(bytes, _tmp$2);
        const b1 = bytes[_tmp$2];
        if (b1 >> 6 !== 2) {
          return moonbitlang$x$encoding$$malformed(bytes, offset, length);
        } else {
          const _tmp$3 = (b0 & 31) << 6 | b1 & 63;
          c = _tmp$3;
          break _L;
        }
      }
      case 3: {
        $bound_check(bytes, offset);
        const b0$2 = bytes[offset];
        const _tmp$3 = offset + 1 | 0;
        $bound_check(bytes, _tmp$3);
        const b1$2 = bytes[_tmp$3];
        const _tmp$4 = offset + 2 | 0;
        $bound_check(bytes, _tmp$4);
        const b2 = bytes[_tmp$4];
        const c$2 = (b0$2 & 15) << 12 | ((b1$2 & 63) << 6 | b2 & 63);
        if (b2 >> 6 !== 2) {
          return moonbitlang$x$encoding$$malformed(bytes, offset, length);
        } else {
          switch (b0$2) {
            case 224: {
              if (b1$2 < 160 || 191 < b1$2) {
                return moonbitlang$x$encoding$$malformed(bytes, offset, length);
              } else {
                c = c$2;
                break _L;
              }
            }
            case 237: {
              if (b1$2 < 128 || 159 < b1$2) {
                return moonbitlang$x$encoding$$malformed(bytes, offset, length);
              } else {
                c = c$2;
                break _L;
              }
            }
            default: {
              if (b1$2 >> 6 !== 2) {
                return moonbitlang$x$encoding$$malformed(bytes, offset, length);
              } else {
                c = c$2;
                break _L;
              }
            }
          }
        }
      }
      case 4: {
        $bound_check(bytes, offset);
        const b0$3 = bytes[offset];
        const _tmp$5 = offset + 1 | 0;
        $bound_check(bytes, _tmp$5);
        const b1$3 = bytes[_tmp$5];
        const _tmp$6 = offset + 2 | 0;
        $bound_check(bytes, _tmp$6);
        const b2$2 = bytes[_tmp$6];
        const _tmp$7 = offset + 3 | 0;
        $bound_check(bytes, _tmp$7);
        const b3 = bytes[_tmp$7];
        const c$3 = (b0$3 & 7) << 18 | (b1$3 & 63) << 12 | (b2$2 & 63) << 6 | b3 & 63;
        if (b3 >> 6 !== 2 || b2$2 >> 6 !== 2) {
          return moonbitlang$x$encoding$$malformed(bytes, offset, length);
        } else {
          switch (b0$3) {
            case 240: {
              if (b1$3 < 144 || 191 < b1$3) {
                return moonbitlang$x$encoding$$malformed(bytes, offset, length);
              } else {
                c = c$3;
                break _L;
              }
            }
            case 244: {
              if (b1$3 < 128 || 143 < b1$3) {
                return moonbitlang$x$encoding$$malformed(bytes, offset, length);
              } else {
                c = c$3;
                break _L;
              }
            }
            default: {
              if (b1$3 >> 6 !== 2) {
                return moonbitlang$x$encoding$$malformed(bytes, offset, length);
              } else {
                c = c$3;
                break _L;
              }
            }
          }
        }
      }
      default: {
        return $panic();
      }
    }
  }
  return new $64$moonbitlang$47$x$47$encoding$46$Decode$Uchar(c);
}
function moonbitlang$x$encoding$$Decoder$decode_utf_8(self) {
  const rem = self.i.length - self.i_pos | 0;
  if (rem <= 0) {
    return $64$moonbitlang$47$x$47$encoding$46$Decode$End;
  } else {
    const _tmp = self.i;
    const _tmp$2 = self.i_pos;
    $bound_check(_tmp, _tmp$2);
    const idx = _tmp[_tmp$2];
    const need = moonbitlang$core$array$$Array$op_get$7$(moonbitlang$x$encoding$$utf_8_len, idx);
    if (rem < need) {
      moonbitlang$x$encoding$$Decoder$t_need(self, need);
      return moonbitlang$x$encoding$$t_fill(moonbitlang$x$encoding$$Decoder$t_decode_utf_8, self);
    } else {
      const j = self.i_pos;
      if (need === 0) {
        self.i_pos = self.i_pos + 1 | 0;
        return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_8, moonbitlang$x$encoding$$malformed(self.i, j, 1));
      } else {
        self.i_pos = self.i_pos + need | 0;
        return moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_8, moonbitlang$x$encoding$$r_utf_8(self.i, j, need));
      }
    }
  }
}
function moonbitlang$x$encoding$$Decoder$t_decode_utf_8(self) {
  return self.t_len < self.t_need ? moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_8, moonbitlang$x$encoding$$malformed(self.t, 0, self.t_len)) : moonbitlang$x$encoding$$Decoder$ret(self, moonbitlang$x$encoding$$Decoder$decode_utf_8, moonbitlang$x$encoding$$r_utf_8(self.t, 0, self.t_len));
}
function moonbitlang$x$encoding$$decoder(encoding) {
  const i = moonbitlang$core$builtin$$Default$default$200$();
  const t = $make_array_len_and_init(4, 0);
  let k;
  switch (encoding) {
    case 0: {
      k = moonbitlang$x$encoding$$Decoder$decode_utf_8;
      break;
    }
    case 1: {
      k = moonbitlang$x$encoding$$Decoder$decode_utf_16le;
      break;
    }
    case 2: {
      k = moonbitlang$x$encoding$$Decoder$decode_utf_16le;
      break;
    }
    default: {
      k = moonbitlang$x$encoding$$Decoder$decode_utf_16be;
    }
  }
  return { i: i, i_pos: 0, t: t, t_len: 0, t_need: 0, k: k };
}
function moonbitlang$x$encoding$$Decoder$decode_(self) {
  const _func = self.k;
  return _func(self);
}
function moonbitlang$x$encoding$$Decoder$i_cont(self, input) {
  const i_rem = moonbitlang$core$math$$maximum$7$(self.i.length - self.i_pos | 0, 0);
  const new_len = i_rem + input.length | 0;
  const new_i = $make_array_len_and_init(new_len, 0);
  if (i_rem > 0) {
    moonbitlang$core$array$$FixedArray$blit_to$16$(self.i, new_i, i_rem, self.i_pos, 0);
  }
  moonbitlang$core$array$$FixedArray$blit_from_bytes(new_i, i_rem, input, 0, input.length);
  self.i = new_i;
  self.i_pos = 0;
}
function moonbitlang$x$encoding$$Decoder$decode_lossy(self, input, stream) {
  if (input.length > 0) {
    moonbitlang$x$encoding$$Decoder$i_cont(self, input);
  }
  if ((self.i.length - self.i_pos | 0) === 0) {
    return "";
  }
  const chars = [];
  let _tmp = moonbitlang$x$encoding$$Decoder$decode_(self);
  _L: while (true) {
    const _param = _tmp;
    switch (_param.$tag) {
      case 3: {
        const _Uchar = _param;
        const _u = _Uchar._0;
        moonbitlang$core$array$$Array$push$70$(chars, _u);
        _tmp = moonbitlang$x$encoding$$Decoder$decode_(self);
        continue _L;
      }
      case 2: {
        if (stream && self.t_need > 0) {
          return moonbitlang$core$string$$String$from_array(chars);
        } else {
          moonbitlang$core$array$$Array$push$70$(chars, 65533);
          _tmp = moonbitlang$x$encoding$$Decoder$decode_(self);
          continue _L;
        }
      }
      case 0: {
        return moonbitlang$core$string$$String$from_array(chars);
      }
      default: {
        if (stream) {
          return moonbitlang$core$string$$String$from_array(chars);
        } else {
          _tmp = moonbitlang$x$encoding$$Decoder$decode_(self);
          continue _L;
        }
      }
    }
  }
}
function moonbitlang$x$encoding$$write_utf16be_char(buf, value) {
  const code = value;
  if (code >>> 0 < 65536 >>> 0) {
    const _p = code >>> 8 | 0;
    const b0 = _p & 255;
    const _p$2 = code & 255;
    const b1 = _p$2 & 255;
    moonbitlang$core$buffer$$T$write_byte(buf, b0);
    moonbitlang$core$buffer$$T$write_byte(buf, b1);
    return;
  } else {
    if (code >>> 0 < 1114112 >>> 0) {
      const hi = (code >>> 0) - (65536 >>> 0) | 0;
      const lo = hi >>> 10 | 55296;
      const hi$2 = hi & 1023 | 56320;
      const _p = lo >>> 8 | 0;
      const b0 = _p & 255;
      const _p$2 = lo & 255;
      const b1 = _p$2 & 255;
      const _p$3 = hi$2 >>> 8 | 0;
      const b2 = _p$3 & 255;
      const _p$4 = hi$2 & 255;
      const b3 = _p$4 & 255;
      moonbitlang$core$buffer$$T$write_byte(buf, b0);
      moonbitlang$core$buffer$$T$write_byte(buf, b1);
      moonbitlang$core$buffer$$T$write_byte(buf, b2);
      moonbitlang$core$buffer$$T$write_byte(buf, b3);
      return;
    } else {
      moonbitlang$core$abort$$abort$4$("Char out of range");
      return;
    }
  }
}
function moonbitlang$x$encoding$$write_utf8_char(buf, value) {
  const code = value;
  if (code >>> 0 < 128 >>> 0) {
    const _p = code & 127 | 0;
    const b0 = _p & 255;
    moonbitlang$core$buffer$$T$write_byte(buf, b0);
    return;
  } else {
    if (code >>> 0 < 2048 >>> 0) {
      const _p = code >>> 6 & 31 | 192;
      const b0 = _p & 255;
      const _p$2 = code & 63 | 128;
      const b1 = _p$2 & 255;
      moonbitlang$core$buffer$$T$write_byte(buf, b0);
      moonbitlang$core$buffer$$T$write_byte(buf, b1);
      return;
    } else {
      if (code >>> 0 < 65536 >>> 0) {
        const _p = code >>> 12 & 15 | 224;
        const b0 = _p & 255;
        const _p$2 = code >>> 6 & 63 | 128;
        const b1 = _p$2 & 255;
        const _p$3 = code & 63 | 128;
        const b2 = _p$3 & 255;
        moonbitlang$core$buffer$$T$write_byte(buf, b0);
        moonbitlang$core$buffer$$T$write_byte(buf, b1);
        moonbitlang$core$buffer$$T$write_byte(buf, b2);
        return;
      } else {
        if (code >>> 0 < 1114112 >>> 0) {
          const _p = code >>> 18 & 7 | 240;
          const b0 = _p & 255;
          const _p$2 = code >>> 12 & 63 | 128;
          const b1 = _p$2 & 255;
          const _p$3 = code >>> 6 & 63 | 128;
          const b2 = _p$3 & 255;
          const _p$4 = code & 63 | 128;
          const b3 = _p$4 & 255;
          moonbitlang$core$buffer$$T$write_byte(buf, b0);
          moonbitlang$core$buffer$$T$write_byte(buf, b1);
          moonbitlang$core$buffer$$T$write_byte(buf, b2);
          moonbitlang$core$buffer$$T$write_byte(buf, b3);
          return;
        } else {
          moonbitlang$core$abort$$abort$4$("Char out of range");
          return;
        }
      }
    }
  }
}
function moonbitlang$x$encoding$$encode(encoding, src) {
  _L: {
    _L$2: {
      switch (encoding) {
        case 1: {
          break _L$2;
        }
        case 2: {
          break _L$2;
        }
      }
      break _L;
    }
    return moonbitlang$core$string$$String$to_bytes(src);
  }
  const new_buf = moonbitlang$core$buffer$$new(Math.imul(src.length, 4) | 0);
  let write;
  switch (encoding) {
    case 0: {
      write = moonbitlang$x$encoding$$write_utf8_char;
      break;
    }
    case 3: {
      write = moonbitlang$x$encoding$$write_utf16be_char;
      break;
    }
    default: {
      write = moonbitlang$core$abort$$abort$21$("unreachable");
    }
  }
  const _bind = moonbitlang$core$string$$String$iter(src);
  _bind((char) => {
    write(new_buf, char);
    return 1;
  });
  return moonbitlang$core$buffer$$T$to_bytes(new_buf);
}
function moonbitlang$ulex$lib$regex$$alt(re1, re2) {
  let _tmp = re1;
  let _tmp$2 = re2;
  _L: while (true) {
    const re1$2 = _tmp;
    const re2$2 = _tmp$2;
    const _bind = re1$2.class;
    let class_;
    if (_bind === 0) {
      const _bind$2 = re2$2.class;
      if (_bind$2 === 0) {
        class_ = 0;
      } else {
        class_ = 1;
      }
    } else {
      class_ = 1;
    }
    _L$2: {
      const _x = re1$2.desc;
      switch (_x.$tag) {
        case 4: {
          const _Alter = _x;
          const _re1 = _Alter._0;
          const _re2 = _Alter._1;
          const _tmp$3 = moonbitlang$ulex$lib$regex$$alt(_re2, re2$2);
          _tmp = _re1;
          _tmp$2 = _tmp$3;
          continue _L;
        }
        case 1: {
          const _Character = _x;
          const _cset1 = _Character._0;
          const _x$2 = re2$2.desc;
          if (_x$2.$tag === 1) {
            const _Character$2 = _x$2;
            const _cset2 = _Character$2._0;
            return { desc: new $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Character(moonbitlang$core$builtin$$Add$op_add$38$(_cset1, _cset2)), class: class_, len: 1 };
          } else {
            break _L$2;
          }
        }
        default: {
          break _L$2;
        }
      }
    }
    const _tmp$3 = new $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Alter(re1$2, re2$2);
    let _tmp$4;
    _L$3: {
      _L$4: {
        const _bind$2 = re1$2.len;
        if (_bind$2 === undefined) {
          break _L$4;
        } else {
          const _Some = _bind$2;
          const _len1 = _Some;
          const _bind$3 = re2$2.len;
          if (_bind$3 === undefined) {
            break _L$4;
          } else {
            const _Some$2 = _bind$3;
            const _len2 = _Some$2;
            if (_len1 === _len2) {
              _tmp$4 = _len1;
            } else {
              break _L$4;
            }
          }
        }
        break _L$3;
      }
      _tmp$4 = undefined;
    }
    return { desc: _tmp$3, class: class_, len: _tmp$4 };
  }
}
function moonbitlang$ulex$lib$regex$$utf8_bytes_to_char(bytes) {
  const decoder = moonbitlang$x$encoding$$decoder(0);
  const str = moonbitlang$x$encoding$$Decoder$decode_lossy(decoder, bytes, false);
  if (moonbitlang$core$string$$String$char_length_eq(str, 1, 0, str.length)) {
    const _c = moonbitlang$core$string$$String$unsafe_char_at(str, moonbitlang$core$string$$String$offset_of_nth_char(str, 0, 0, str.length));
    return _c;
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$get_masked_range_cset$124$28(bytes, num_bytes, mask_index) {
  if (mask_index >= 1 && mask_index <= bytes.length) {
    const prefix = moonbitlang$core$bytes$$Bytes$op_as_view(bytes, 0, mask_index);
    const masked_min_suffix = moonbitlang$core$bytes$$Bytes$make(num_bytes - mask_index | 0, 128);
    const masked_max_suffix = moonbitlang$core$bytes$$Bytes$make(num_bytes - mask_index | 0, 191);
    const _self = moonbitlang$core$buffer$$new(0);
    moonbitlang$core$buffer$$T$write_iter(_self, moonbitlang$core$bytes$$View$iter(prefix));
    moonbitlang$core$buffer$$T$write_iter(_self, moonbitlang$core$bytes$$Bytes$iter(masked_min_suffix));
    const masked_min_bytes = moonbitlang$core$buffer$$T$contents(_self);
    const _self$2 = moonbitlang$core$buffer$$new(0);
    moonbitlang$core$buffer$$T$write_iter(_self$2, moonbitlang$core$bytes$$View$iter(prefix));
    moonbitlang$core$buffer$$T$write_iter(_self$2, moonbitlang$core$bytes$$Bytes$iter(masked_max_suffix));
    const masked_max_bytes = moonbitlang$core$buffer$$T$contents(_self$2);
    const masked_min = moonbitlang$ulex$lib$regex$$utf8_bytes_to_char(masked_min_bytes);
    const masked_max = moonbitlang$ulex$lib$regex$$utf8_bytes_to_char(masked_max_bytes);
    return moonbitlang$ulex$lib$util$char_set$$range(masked_min, masked_max);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$add_branch$124$49(_env, range_cset, pin_index) {
  const _num_bytes = _env._2;
  const dedup = _env._1;
  const branches = _env._0;
  if (moonbitlang$core$set$$Set$add_and_check$52$(dedup, { _0: range_cset, _1: pin_index })) {
    const ranges = moonbitlang$core$builtin$$Iter$to_array$194$(moonbitlang$ulex$lib$util$char_set$$CharSet$iter_ranges(range_cset));
    if (ranges.length <= 1) {
      if (ranges.length === 1) {
        const _range = ranges[0];
        const _bind = _range._0;
        const _bind$2 = _range._1;
        const min_bytes = moonbitlang$x$encoding$$encode(0, moonbitlang$core$string$$String$make(1, _bind));
        const max_bytes = moonbitlang$x$encoding$$encode(0, moonbitlang$core$string$$String$make(1, _bind$2));
        if (pin_index >= _num_bytes) {
          if ($bytes_equal(min_bytes, max_bytes)) {
            const _self = [];
            const _bind$3 = moonbitlang$core$bytes$$Bytes$iter(min_bytes);
            const _p = (_p$2) => _bind$3((_p$3) => _p$2(moonbitlang$ulex$lib$util$char_set$$singleton(_p$3)));
            moonbitlang$core$array$$Array$push_iter$38$(_self, _p);
            moonbitlang$core$array$$Array$push$144$(branches, _self);
            return;
          } else {
            $panic();
            return;
          }
        } else {
          const common_prefix = moonbitlang$core$bytes$$Bytes$op_as_view(min_bytes, 0, pin_index);
          const common_prefix2 = moonbitlang$core$bytes$$Bytes$op_as_view(max_bytes, 0, pin_index);
          if (moonbitlang$core$builtin$$Eq$op_equal$11$(common_prefix, common_prefix2)) {
            const _self = [];
            const _bind$3 = moonbitlang$core$bytes$$View$iter(common_prefix);
            moonbitlang$core$array$$Array$push_iter$38$(_self, moonbitlang$core$array$$Array$iter$38$(moonbitlang$core$builtin$$Iter$to_array$38$((_p) => _bind$3((_p$2) => _p(moonbitlang$ulex$lib$util$char_set$$singleton(_p$2))))));
            $bound_check(min_bytes, pin_index);
            const _tmp = min_bytes[pin_index];
            $bound_check(max_bytes, pin_index);
            moonbitlang$core$array$$Array$push$38$(_self, moonbitlang$ulex$lib$util$char_set$$range(_tmp, max_bytes[pin_index]));
            moonbitlang$core$array$$Array$push_iter$38$(_self, moonbitlang$core$array$$Array$iter$38$(moonbitlang$core$array$$Array$repeat$38$([moonbitlang$ulex$lib$util$char_set$$range(128, 191)], (_num_bytes - pin_index | 0) - 1 | 0)));
            moonbitlang$core$array$$Array$push$144$(branches, _self);
            return;
          } else {
            $panic();
            return;
          }
        }
      } else {
        return;
      }
    } else {
      $panic();
      return;
    }
  } else {
    return;
  }
}
function moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$process_endpoint$124$68(_env, bytes) {
  const _num_bytes = _env._2;
  const range_cset = _env._1;
  const _env$2 = _env._0;
  let _tmp = _num_bytes;
  while (true) {
    const i = _tmp;
    if (i >= 1) {
      const sub_range_cset = moonbitlang$core$builtin$$Sub$op_sub$38$(moonbitlang$core$builtin$$BitAnd$land$38$(moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$get_masked_range_cset$124$28(bytes, _num_bytes, i), range_cset), i === _num_bytes ? moonbitlang$ulex$lib$util$char_set$$empty : moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$get_masked_range_cset$124$28(bytes, _num_bytes, i + 1 | 0));
      moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$add_branch$124$49(_env$2, sub_range_cset, i);
      _tmp = i - 1 | 0;
      continue;
    } else {
      return;
    }
  }
}
function moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8(cset) {
  const groups = [{ _0: 1, _1: moonbitlang$core$builtin$$BitAnd$land$38$(cset, moonbitlang$ulex$lib$util$char_set$$range(0, 127)) }, { _0: 2, _1: moonbitlang$core$builtin$$BitAnd$land$38$(cset, moonbitlang$ulex$lib$util$char_set$$range(128, 2047)) }, { _0: 3, _1: moonbitlang$core$builtin$$BitAnd$land$38$(cset, moonbitlang$ulex$lib$util$char_set$$range(2048, 65535)) }, { _0: 4, _1: moonbitlang$core$builtin$$BitAnd$land$38$(cset, moonbitlang$ulex$lib$util$char_set$$range(65536, 1114111)) }];
  const result = [];
  const _len = groups.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const group = groups[_i];
      const _num_bytes = group._0;
      const _cset = group._1;
      if (_num_bytes === 1) {
        if (!moonbitlang$ulex$lib$util$char_set$$CharSet$is_empty(_cset)) {
          moonbitlang$core$array$$Array$push$144$(result, [_cset]);
        }
      } else {
        const branches = [];
        const dedup = moonbitlang$core$set$$Set$new$52$(8);
        const _env = { _0: branches, _1: dedup, _2: _num_bytes };
        const _bind = moonbitlang$ulex$lib$util$char_set$$CharSet$iter_ranges(_cset);
        _bind((range) => {
          const _bind$2 = range._0;
          const _bind$3 = range._1;
          const range_cset = moonbitlang$ulex$lib$util$char_set$$range(_bind$2, _bind$3);
          const min_bytes = moonbitlang$x$encoding$$encode(0, moonbitlang$core$string$$String$make(1, _bind$2));
          const max_bytes = moonbitlang$x$encoding$$encode(0, moonbitlang$core$string$$String$make(1, _bind$3));
          const _env$2 = { _0: _env, _1: range_cset, _2: _num_bytes };
          moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$process_endpoint$124$68(_env$2, min_bytes);
          const mid_range_csets = moonbitlang$core$builtin$$Sub$op_sub$38$(moonbitlang$core$builtin$$Sub$op_sub$38$(range_cset, moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$get_masked_range_cset$124$28(min_bytes, _num_bytes, 1)), moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$get_masked_range_cset$124$28(max_bytes, _num_bytes, 1));
          const _bind$4 = moonbitlang$ulex$lib$util$char_set$$CharSet$iter_ranges(mid_range_csets);
          _bind$4((mid_range) => {
            const _bind$5 = mid_range._0;
            const _bind$6 = mid_range._1;
            const mid_range_cset = moonbitlang$ulex$lib$util$char_set$$range(_bind$5, _bind$6);
            moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$add_branch$124$49(_env, mid_range_cset, 0);
            return 1;
          });
          moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8$46$process_endpoint$124$68(_env$2, max_bytes);
          return 1;
        });
        const _len$2 = branches.length;
        let _tmp$2 = 0;
        while (true) {
          const _i$2 = _tmp$2;
          if (_i$2 < _len$2) {
            const branch = branches[_i$2];
            moonbitlang$core$array$$Array$push$144$(result, branch);
            _tmp$2 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return result;
}
function moonbitlang$ulex$lib$regex$$seq(re1, re2) {
  let _tmp = re1;
  let _tmp$2 = re2;
  _L: while (true) {
    const re1$2 = _tmp;
    const re2$2 = _tmp$2;
    const _x = re1$2.desc;
    switch (_x.$tag) {
      case 5: {
        const _Concat = _x;
        const _re1 = _Concat._0;
        const _re2 = _Concat._1;
        const _tmp$3 = moonbitlang$ulex$lib$regex$$seq(_re2, re2$2);
        _tmp = _re1;
        _tmp$2 = _tmp$3;
        continue _L;
      }
      case 3: {
        return re2$2;
      }
      default: {
        const _x$2 = re2$2.desc;
        if (_x$2.$tag === 3) {
          return re1$2;
        } else {
          const _tmp$4 = new $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Concat(re1$2, re2$2);
          let _tmp$5;
          _L$2: {
            _L$3: {
              const _bind = re1$2.len;
              if (_bind === undefined) {
                break _L$3;
              } else {
                const _Some = _bind;
                const _len1 = _Some;
                const _bind$2 = re2$2.len;
                if (_bind$2 === undefined) {
                  break _L$3;
                } else {
                  const _Some$2 = _bind$2;
                  const _len2 = _Some$2;
                  _tmp$5 = _len1 + _len2 | 0;
                }
              }
              break _L$2;
            }
            _tmp$5 = undefined;
          }
          return { desc: _tmp$4, class: 1, len: _tmp$5 };
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$regex$$char_class(cset, as_bytes) {
  if (as_bytes === undefined) {
    return { desc: new $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Character(cset), class: 0, len: 1 };
  } else {
    const _Some = as_bytes;
    const _encoding = _Some;
    return moonbitlang$ulex$lib$regex$$lower_unicode_charclass(cset, _encoding);
  }
}
function moonbitlang$ulex$lib$regex$$lower_unicode_charclass$46$regex_of_branch$124$4(branch) {
  if (branch.length >= 1) {
    let regex = moonbitlang$ulex$lib$regex$$char_class(moonbitlang$core$array$$Array$op_get$38$(branch, 0), undefined);
    const _arr = moonbitlang$core$array$$Array$op_as_view$38$(branch, 1, undefined);
    const _len = _arr.len;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const cset = _arr.buf[_arr.start + _i | 0];
        regex = moonbitlang$ulex$lib$regex$$seq(regex, moonbitlang$ulex$lib$regex$$char_class(cset, undefined));
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return regex;
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$regex$$lower_unicode_charclass(cset, encoding) {
  let branches;
  _L: {
    _L$2: {
      switch (encoding) {
        case 2: {
          branches = moonbitlang$ulex$lib$regex$$lower_unicode_charclass_to_utf8(cset);
          break;
        }
        case 0: {
          break _L$2;
        }
        case 1: {
          break _L$2;
        }
        default: {
          break _L$2;
        }
      }
      break _L;
    }
    branches = $panic();
  }
  if (branches.length >= 1) {
    let regex = moonbitlang$ulex$lib$regex$$lower_unicode_charclass$46$regex_of_branch$124$4(moonbitlang$core$array$$Array$op_get$144$(branches, 0));
    const _arr = moonbitlang$core$array$$Array$op_as_view$144$(branches, 1, undefined);
    const _len = _arr.len;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const branch = _arr.buf[_arr.start + _i | 0];
        regex = moonbitlang$ulex$lib$regex$$alt(regex, moonbitlang$ulex$lib$regex$$lower_unicode_charclass$46$regex_of_branch$124$4(branch));
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return regex;
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$regex$$opt(re) {
  return moonbitlang$ulex$lib$regex$$alt(re, moonbitlang$ulex$lib$regex$$epsilon);
}
function moonbitlang$ulex$lib$regex$$plus(re) {
  const _tmp = new $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Repetition(re);
  let _tmp$2;
  _L: {
    _L$2: {
      const _bind = re.len;
      if (_bind === undefined) {
        break _L$2;
      } else {
        const _Some = _bind;
        const _x = _Some;
        if (_x === 0) {
          _tmp$2 = 0;
        } else {
          break _L$2;
        }
      }
      break _L;
    }
    _tmp$2 = undefined;
  }
  return { desc: _tmp, class: 1, len: _tmp$2 };
}
function moonbitlang$ulex$lib$regex$$star(re) {
  return moonbitlang$ulex$lib$regex$$opt(moonbitlang$ulex$lib$regex$$plus(re));
}
function moonbitlang$ulex$lib$regex$$repeat(re, min_times, max_times) {
  let re2 = re;
  let _tmp = 0;
  while (true) {
    const _ = _tmp;
    if (_ < min_times) {
      re2 = moonbitlang$ulex$lib$regex$$seq(re2, re);
      _tmp = _ + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (max_times === undefined) {
    return moonbitlang$ulex$lib$regex$$star(re2);
  } else {
    const _Some = max_times;
    const _max_times = _Some;
    const _end136 = _max_times - min_times | 0;
    let _tmp$2 = 0;
    while (true) {
      const _ = _tmp$2;
      if (_ < _end136) {
        re2 = moonbitlang$ulex$lib$regex$$seq(re2, moonbitlang$ulex$lib$regex$$opt(re));
        _tmp$2 = _ + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return re2;
  }
}
function moonbitlang$ulex$lib$regex$$bind(re, name) {
  return { desc: new $64$moonbitlang$47$ulex$47$lib$47$regex$46$RegexDesc$Capture(re, name), class: re.class, len: re.len };
}
function moonbitlang$ulex$lib$regex$$get_capture_vars(re) {
  let _tmp = re.desc;
  let _tmp$2 = re.class;
  let _tmp$3 = re.len;
  _L: while (true) {
    const re_desc = _tmp;
    _L$2: {
      let re1;
      let re2;
      _L$3: {
        switch (re_desc.$tag) {
          case 6: {
            const _Capture = re_desc;
            const _re = _Capture._0;
            const _name = _Capture._1;
            return moonbitlang$core$immut$sorted_map$$T$add$86$(moonbitlang$ulex$lib$regex$$get_capture_vars(_re), _name, _re.class);
          }
          case 2: {
            const _Repetition = re_desc;
            const _re$2 = _Repetition._0;
            const _tmp$4 = _re$2.desc;
            const _tmp$5 = _re$2.class;
            const _tmp$6 = _re$2.len;
            _tmp = _tmp$4;
            _tmp$2 = _tmp$5;
            _tmp$3 = _tmp$6;
            continue _L;
          }
          case 4: {
            const _Alter = re_desc;
            const _re1 = _Alter._0;
            const _re2 = _Alter._1;
            re1 = _re1;
            re2 = _re2;
            break _L$3;
          }
          case 5: {
            const _Concat = re_desc;
            const _re1$2 = _Concat._0;
            const _re2$2 = _Concat._1;
            re1 = _re1$2;
            re2 = _re2$2;
            break _L$3;
          }
          case 0: {
            break _L$2;
          }
          case 1: {
            break _L$2;
          }
          default: {
            break _L$2;
          }
        }
      }
      const _bind = moonbitlang$core$immut$sorted_map$$T$iter$86$(moonbitlang$ulex$lib$regex$$get_capture_vars(re1));
      const _bind$2 = moonbitlang$core$immut$sorted_map$$T$iter$86$(moonbitlang$ulex$lib$regex$$get_capture_vars(re2));
      return moonbitlang$core$immut$sorted_map$$from_iter$86$((_p) => _bind(_p) === 1 && _bind$2(_p) === 1 ? 1 : 0);
    }
    return $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$20$;
  }
}
function moonbitlang$ulex$lib$regex$$lower(re, encoding) {
  if (encoding === undefined) {
    return re;
  } else {
    const _bind = re.desc;
    switch (_bind.$tag) {
      case 3: {
        return moonbitlang$ulex$lib$regex$$epsilon;
      }
      case 0: {
        return moonbitlang$ulex$lib$regex$$eof;
      }
      case 1: {
        const _Character = _bind;
        const _cset = _Character._0;
        if (encoding === undefined) {
          return moonbitlang$ulex$lib$regex$$char_class(_cset, undefined);
        } else {
          const _Some = encoding;
          const _encoding = _Some;
          return moonbitlang$ulex$lib$regex$$lower_unicode_charclass(_cset, _encoding);
        }
      }
      case 2: {
        const _Repetition = _bind;
        const _re = _Repetition._0;
        return moonbitlang$ulex$lib$regex$$plus(moonbitlang$ulex$lib$regex$$lower(_re, encoding));
      }
      case 5: {
        const _Concat = _bind;
        const _re1 = _Concat._0;
        const _re2 = _Concat._1;
        return moonbitlang$ulex$lib$regex$$seq(moonbitlang$ulex$lib$regex$$lower(_re1, encoding), moonbitlang$ulex$lib$regex$$lower(_re2, encoding));
      }
      case 4: {
        const _Alter = _bind;
        const _re1$2 = _Alter._0;
        const _re2$2 = _Alter._1;
        return moonbitlang$ulex$lib$regex$$alt(moonbitlang$ulex$lib$regex$$lower(_re1$2, encoding), moonbitlang$ulex$lib$regex$$lower(_re2$2, encoding));
      }
      default: {
        const _Capture = _bind;
        const _re$2 = _Capture._0;
        const _var = _Capture._1;
        return moonbitlang$ulex$lib$regex$$bind(moonbitlang$ulex$lib$regex$$lower(_re$2, encoding), _var);
      }
    }
  }
}
function moonbitlang$ulex$45$runtime$lexbuf$$StringLexbuf$from_string(string) {
  return { data: string, end: string.length, pos: 0 };
}
function moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(self) {
  const pos = self.pos;
  const end = self.end;
  if (self.pos < end) {
    const _tmp = self.data;
    const c = _tmp.charCodeAt(pos);
    if (c >= 55296 && c <= 56319) {
      const pos2 = pos + 1 | 0;
      if (pos2 < end) {
        const _tmp$2 = self.data;
        const c2 = _tmp$2.charCodeAt(pos2);
        if (c2 >= 56320 && c2 <= 57343) {
          self.pos = pos2 + 1 | 0;
          return (((Math.imul(c - 55296 | 0, 1024) | 0) + c2 | 0) - 56320 | 0) + 65536 | 0;
        }
      }
    }
    self.pos = pos + 1 | 0;
    return c;
  }
  return -1;
}
function moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$206$(self, pos) {
  self.pos = pos;
}
function moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$206$(self, start, _end) {
  return moonbitlang$core$string$$String$unsafe_char_at(self.data, start);
}
function moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(self, start, end) {
  return moonbitlang$core$string$$String$substring(self.data, start, end);
}
function moonbitlang$ulex$lib$parser$$code_rbrace$206$(buffer, lexbuf) {
  let _tmp = buffer;
  let _tmp$2 = lexbuf;
  _L: while (true) {
    const buffer$2 = _tmp;
    const lexbuf$2 = _tmp$2;
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf$2.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _tmp$3 = 0;
    _L$2: while (true) {
      const _param = _tmp$3;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$4;
          if (_bind === -1) {
            _tmp$4 = 1;
          } else {
            if (_bind >= 0 && _bind <= 33) {
              _tmp$4 = 2;
            } else {
              if (_bind === 34) {
                _tmp$4 = 3;
              } else {
                if (_bind >= 35 && _bind <= 38) {
                  _tmp$4 = 2;
                } else {
                  if (_bind === 39) {
                    _tmp$4 = 4;
                  } else {
                    if (_bind >= 40 && _bind <= 46) {
                      _tmp$4 = 2;
                    } else {
                      if (_bind === 47) {
                        _tmp$4 = 5;
                      } else {
                        if (_bind >= 48 && _bind <= 122) {
                          _tmp$4 = 2;
                        } else {
                          if (_bind === 123) {
                            _tmp$4 = 6;
                          } else {
                            if (_bind === 124) {
                              _tmp$4 = 2;
                            } else {
                              if (_bind === 125) {
                                _tmp$4 = 7;
                              } else {
                                if (_bind >= 126 && _bind <= 1114111) {
                                  _tmp$4 = 2;
                                } else {
                                  break _L$2;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$4;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 6) {
            _match_pattern = 6;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 3: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          const _bind$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$5;
          if (_bind$2 >= 0 && _bind$2 <= 33) {
            _tmp$5 = 9;
          } else {
            if (_bind$2 === 34) {
              _tmp$5 = 10;
            } else {
              if (_bind$2 >= 35 && _bind$2 <= 91) {
                _tmp$5 = 9;
              } else {
                if (_bind$2 === 92) {
                  _tmp$5 = 11;
                } else {
                  if (_bind$2 >= 93 && _bind$2 <= 1114111) {
                    _tmp$5 = 9;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$5;
          continue _L$2;
        }
        case 4: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          const _bind$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$6;
          if (_bind$3 >= 0 && _bind$3 <= 38) {
            _tmp$6 = 8;
          } else {
            if (_bind$3 >= 40 && _bind$3 <= 91) {
              _tmp$6 = 8;
            } else {
              if (_bind$3 >= 93 && _bind$3 <= 1114111) {
                _tmp$6 = 8;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$6;
          continue _L$2;
        }
        case 5: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          const _bind$4 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$7;
          if (_bind$4 === 47) {
            _tmp$7 = 12;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$7;
          continue _L$2;
        }
        case 6: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 7: {
          if (_match_pattern >= 4) {
            _match_pattern = 4;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 8: {
          const _bind$5 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$8;
          if (_bind$5 === 39) {
            _tmp$8 = 13;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$8;
          continue _L$2;
        }
        case 9: {
          const _bind$6 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$9;
          if (_bind$6 >= 0 && _bind$6 <= 33) {
            _tmp$9 = 9;
          } else {
            if (_bind$6 === 34) {
              _tmp$9 = 10;
            } else {
              if (_bind$6 >= 35 && _bind$6 <= 91) {
                _tmp$9 = 9;
              } else {
                if (_bind$6 === 92) {
                  _tmp$9 = 11;
                } else {
                  if (_bind$6 >= 93 && _bind$6 <= 1114111) {
                    _tmp$9 = 9;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$9;
          continue _L$2;
        }
        case 10: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          break _L$2;
        }
        case 11: {
          const _bind$7 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$10;
          if (_bind$7 >= 0 && _bind$7 <= 1114111) {
            _tmp$10 = 9;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$10;
          continue _L$2;
        }
        case 12: {
          const _bind$8 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$11;
          if (_bind$8 >= 0 && _bind$8 <= 9) {
            _tmp$11 = 14;
          } else {
            if (_bind$8 >= 11 && _bind$8 <= 1114111) {
              _tmp$11 = 14;
            } else {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$11;
          continue _L$2;
        }
        case 13: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 3 | 0;
          }
          break _L$2;
        }
        case 14: {
          const _bind$9 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$12;
          if (_bind$9 >= 0 && _bind$9 <= 9) {
            _tmp$12 = 14;
          } else {
            if (_bind$9 === 10) {
              _tmp$12 = 15;
            } else {
              if (_bind$9 >= 11 && _bind$9 <= 1114111) {
                _tmp$12 = 14;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$12;
          continue _L$2;
        }
        case 15: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 6) {
      moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$206$(lexbuf$2, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          const t = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_string$40$(buffer$2, t);
          continue _L;
        }
        case 1: {
          const t$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_string$40$(buffer$2, t$2);
          continue _L;
        }
        case 2: {
          const t$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_string$40$(buffer$2, t$3);
          continue _L;
        }
        case 3: {
          moonbitlang$core$builtin$$Logger$write_string$40$(buffer$2, "{");
          moonbitlang$ulex$lib$parser$$code_rbrace$206$(buffer$2, lexbuf$2);
          moonbitlang$core$builtin$$Logger$write_string$40$(buffer$2, "}");
          continue _L;
        }
        case 4: {
          return _match_end;
        }
        case 5: {
          const t$4 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_char$40$(buffer$2, t$4);
          continue _L;
        }
        case 6: {
          return moonbitlang$core$abort$$abort$7$("Unexpected end of input");
        }
        default: {
          return $panic();
        }
      }
    } else {
      return $panic();
    }
  }
}
function moonbitlang$ulex$lib$parser$$string_inner_rquote$206$(buffer, lexbuf) {
  let _tmp = buffer;
  let _tmp$2 = lexbuf;
  _L: while (true) {
    const buffer$2 = _tmp;
    const lexbuf$2 = _tmp$2;
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf$2.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _tmp$3 = 0;
    _L$2: while (true) {
      const _param = _tmp$3;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$4;
          if (_bind === -1) {
            _tmp$4 = 1;
          } else {
            if (_bind >= 0 && _bind <= 33) {
              _tmp$4 = 2;
            } else {
              if (_bind === 34) {
                _tmp$4 = 3;
              } else {
                if (_bind >= 35 && _bind <= 91) {
                  _tmp$4 = 2;
                } else {
                  if (_bind === 92) {
                    _tmp$4 = 4;
                  } else {
                    if (_bind >= 93 && _bind <= 1114111) {
                      _tmp$4 = 2;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$4;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 12) {
            _match_pattern = 12;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 11) {
            _match_pattern = 11;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          break _L$2;
        }
        case 3: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 4: {
          if (_match_pattern >= 11) {
            _match_pattern = 11;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 1 | 0;
          }
          const _bind$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$5;
          switch (_bind$2) {
            case 34: {
              _tmp$5 = 5;
              break;
            }
            case 92: {
              _tmp$5 = 6;
              break;
            }
            case 98: {
              _tmp$5 = 7;
              break;
            }
            case 110: {
              _tmp$5 = 8;
              break;
            }
            case 114: {
              _tmp$5 = 9;
              break;
            }
            case 116: {
              _tmp$5 = 10;
              break;
            }
            case 117: {
              _tmp$5 = 11;
              break;
            }
            case 118: {
              _tmp$5 = 12;
              break;
            }
            case 120: {
              _tmp$5 = 13;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$5;
          continue _L$2;
        }
        case 5: {
          if (_match_pattern >= 7) {
            _match_pattern = 7;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 6: {
          if (_match_pattern >= 6) {
            _match_pattern = 6;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 7: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 8: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 9: {
          if (_match_pattern >= 4) {
            _match_pattern = 4;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 10: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 11: {
          const _bind$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$6;
          if (_bind$3 >= 48 && _bind$3 <= 57) {
            _tmp$6 = 14;
          } else {
            if (_bind$3 >= 65 && _bind$3 <= 70) {
              _tmp$6 = 14;
            } else {
              if (_bind$3 >= 97 && _bind$3 <= 102) {
                _tmp$6 = 14;
              } else {
                if (_bind$3 === 123) {
                  _tmp$6 = 15;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$3 = _tmp$6;
          continue _L$2;
        }
        case 12: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 13: {
          const _bind$4 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$7;
          if (_bind$4 >= 48 && _bind$4 <= 57) {
            _tmp$7 = 16;
          } else {
            if (_bind$4 >= 65 && _bind$4 <= 70) {
              _tmp$7 = 16;
            } else {
              if (_bind$4 >= 97 && _bind$4 <= 102) {
                _tmp$7 = 16;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$7;
          continue _L$2;
        }
        case 14: {
          const _bind$5 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$8;
          if (_bind$5 >= 48 && _bind$5 <= 57) {
            _tmp$8 = 18;
          } else {
            if (_bind$5 >= 65 && _bind$5 <= 70) {
              _tmp$8 = 18;
            } else {
              if (_bind$5 >= 97 && _bind$5 <= 102) {
                _tmp$8 = 18;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$8;
          continue _L$2;
        }
        case 15: {
          const _bind$6 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$9;
          if (_bind$6 >= 48 && _bind$6 <= 57) {
            _tmp$9 = 17;
          } else {
            if (_bind$6 >= 65 && _bind$6 <= 70) {
              _tmp$9 = 17;
            } else {
              if (_bind$6 >= 97 && _bind$6 <= 102) {
                _tmp$9 = 17;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$9;
          continue _L$2;
        }
        case 16: {
          const _bind$7 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$10;
          if (_bind$7 >= 48 && _bind$7 <= 57) {
            _tmp$10 = 19;
          } else {
            if (_bind$7 >= 65 && _bind$7 <= 70) {
              _tmp$10 = 19;
            } else {
              if (_bind$7 >= 97 && _bind$7 <= 102) {
                _tmp$10 = 19;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$10;
          continue _L$2;
        }
        case 17: {
          const _bind$8 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$11;
          if (_bind$8 >= 48 && _bind$8 <= 57) {
            _tmp$11 = 17;
          } else {
            if (_bind$8 >= 65 && _bind$8 <= 70) {
              _tmp$11 = 17;
            } else {
              if (_bind$8 >= 97 && _bind$8 <= 102) {
                _tmp$11 = 17;
              } else {
                if (_bind$8 === 125) {
                  _tmp$11 = 20;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$3 = _tmp$11;
          continue _L$2;
        }
        case 18: {
          const _bind$9 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$12;
          if (_bind$9 >= 48 && _bind$9 <= 57) {
            _tmp$12 = 21;
          } else {
            if (_bind$9 >= 65 && _bind$9 <= 70) {
              _tmp$12 = 21;
            } else {
              if (_bind$9 >= 97 && _bind$9 <= 102) {
                _tmp$12 = 21;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$12;
          continue _L$2;
        }
        case 19: {
          const _bind$10 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$13;
          if (_bind$10 === 39) {
            _tmp$13 = 22;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$13;
          continue _L$2;
        }
        case 20: {
          const _bind$11 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$14;
          if (_bind$11 === 39) {
            _tmp$14 = 23;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$14;
          continue _L$2;
        }
        case 21: {
          const _bind$12 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$15;
          if (_bind$12 >= 48 && _bind$12 <= 57) {
            _tmp$15 = 24;
          } else {
            if (_bind$12 >= 65 && _bind$12 <= 70) {
              _tmp$15 = 24;
            } else {
              if (_bind$12 >= 97 && _bind$12 <= 102) {
                _tmp$15 = 24;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$15;
          continue _L$2;
        }
        case 22: {
          if (_match_pattern >= 8) {
            _match_pattern = 8;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start + 2 | 0;
            _capture_0_end = _match_start + 4 | 0;
          }
          break _L$2;
        }
        case 23: {
          if (_match_pattern >= 10) {
            _match_pattern = 10;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start + 3 | 0;
            _capture_0_end = _match_end + -2 | 0;
          }
          break _L$2;
        }
        case 24: {
          const _bind$13 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$16;
          if (_bind$13 === 39) {
            _tmp$16 = 25;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$16;
          continue _L$2;
        }
        case 25: {
          if (_match_pattern >= 9) {
            _match_pattern = 9;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start + 2 | 0;
            _capture_0_end = _match_start + 6 | 0;
          }
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 12) {
      moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$206$(lexbuf$2, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          return _match_end;
        }
        case 1: {
          moonbitlang$core$builtin$$Logger$write_char$40$(buffer$2, 8);
          continue _L;
        }
        case 2: {
          moonbitlang$core$builtin$$Logger$write_char$40$(buffer$2, 9);
          continue _L;
        }
        case 3: {
          moonbitlang$core$builtin$$Logger$write_char$40$(buffer$2, 11);
          continue _L;
        }
        case 4: {
          moonbitlang$core$builtin$$Logger$write_char$40$(buffer$2, 13);
          continue _L;
        }
        case 5: {
          moonbitlang$core$builtin$$Logger$write_char$40$(buffer$2, 10);
          continue _L;
        }
        case 6: {
          moonbitlang$core$builtin$$Logger$write_char$40$(buffer$2, 92);
          continue _L;
        }
        case 7: {
          moonbitlang$core$builtin$$Logger$write_char$40$(buffer$2, 34);
          continue _L;
        }
        case 8: {
          const t = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          const code = moonbitlang$core$result$$Result$unwrap$69$(moonbitlang$core$strconv$$parse_int(t, 16));
          moonbitlang$core$builtin$$Logger$write_char$40$(buffer$2, code);
          continue _L;
        }
        case 9: {
          const t$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          const code$2 = moonbitlang$core$result$$Result$unwrap$69$(moonbitlang$core$strconv$$parse_int(t$2, 16));
          moonbitlang$core$builtin$$Logger$write_char$40$(buffer$2, code$2);
          continue _L;
        }
        case 10: {
          const t$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          const code$3 = moonbitlang$core$result$$Result$unwrap$69$(moonbitlang$core$strconv$$parse_int(t$3, 16));
          moonbitlang$core$builtin$$Logger$write_char$40$(buffer$2, code$3);
          continue _L;
        }
        case 11: {
          const t$4 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_char$40$(buffer$2, t$4);
          continue _L;
        }
        case 12: {
          return moonbitlang$core$abort$$abort$7$("Unexpected end of input");
        }
        default: {
          return $panic();
        }
      }
    } else {
      return $panic();
    }
  }
}
function moonbitlang$ulex$lib$parser$$token$206$(lexbuf) {
  let _tmp = lexbuf;
  _L: while (true) {
    const lexbuf$2 = _tmp;
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf$2.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _capture_1_start = -1;
    let _capture_1_end = -1;
    let _tag_0 = -1;
    let _tag_1 = -1;
    let _tag_1_1 = -1;
    let _tag_2 = -1;
    let _tag_2_1 = -1;
    let _tmp$2 = 0;
    _L$2: while (true) {
      const _param = _tmp$2;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$3;
          if (_bind === -1) {
            _tmp$3 = 1;
          } else {
            if (_bind >= 9 && _bind <= 10) {
              _tmp$3 = 2;
            } else {
              if (_bind === 13) {
                _tmp$3 = 2;
              } else {
                if (_bind === 32) {
                  _tmp$3 = 2;
                } else {
                  if (_bind === 34) {
                    _tmp$3 = 3;
                  } else {
                    if (_bind === 39) {
                      _tmp$3 = 4;
                    } else {
                      if (_bind === 40) {
                        _tmp$3 = 5;
                      } else {
                        if (_bind === 41) {
                          _tmp$3 = 6;
                        } else {
                          if (_bind === 42) {
                            _tmp$3 = 7;
                          } else {
                            if (_bind === 43) {
                              _tmp$3 = 8;
                            } else {
                              if (_bind === 45) {
                                _tmp$3 = 9;
                              } else {
                                if (_bind === 47) {
                                  _tmp$3 = 10;
                                } else {
                                  if (_bind === 59) {
                                    _tmp$3 = 11;
                                  } else {
                                    if (_bind === 61) {
                                      _tmp$3 = 12;
                                    } else {
                                      if (_bind === 63) {
                                        _tmp$3 = 13;
                                      } else {
                                        if (_bind === 91) {
                                          _tmp$3 = 14;
                                        } else {
                                          if (_bind === 92) {
                                            _tmp$3 = 15;
                                          } else {
                                            if (_bind === 93) {
                                              _tmp$3 = 16;
                                            } else {
                                              if (_bind === 94) {
                                                _tmp$3 = 17;
                                              } else {
                                                if (_bind === 95) {
                                                  _tmp$3 = 18;
                                                } else {
                                                  if (_bind >= 97 && _bind <= 111) {
                                                    _tmp$3 = 19;
                                                  } else {
                                                    if (_bind === 112) {
                                                      _tmp$3 = 20;
                                                    } else {
                                                      if (_bind === 113) {
                                                        _tmp$3 = 19;
                                                      } else {
                                                        if (_bind === 114) {
                                                          _tmp$3 = 21;
                                                        } else {
                                                          if (_bind >= 115 && _bind <= 122) {
                                                            _tmp$3 = 19;
                                                          } else {
                                                            if (_bind === 123) {
                                                              _tmp$3 = 22;
                                                            } else {
                                                              if (_bind === 124) {
                                                                _tmp$3 = 23;
                                                              } else {
                                                                if (_bind === 125) {
                                                                  _tmp$3 = 24;
                                                                } else {
                                                                  break _L$2;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$3;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
          }
          const _bind$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$4;
          if (_bind$2 >= 9 && _bind$2 <= 10) {
            _tmp$4 = 2;
          } else {
            if (_bind$2 === 13) {
              _tmp$4 = 2;
            } else {
              if (_bind$2 === 32) {
                _tmp$4 = 2;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$2 = _tmp$4;
          continue _L$2;
        }
        case 3: {
          if (_match_pattern >= 33) {
            _match_pattern = 33;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 4: {
          const _bind$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$5;
          if (_bind$3 >= 0 && _bind$3 <= 38) {
            _tmp$5 = 25;
          } else {
            if (_bind$3 >= 40 && _bind$3 <= 91) {
              _tmp$5 = 25;
            } else {
              if (_bind$3 === 92) {
                _tmp$5 = 26;
              } else {
                if (_bind$3 >= 93 && _bind$3 <= 1114111) {
                  _tmp$5 = 25;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$2 = _tmp$5;
          continue _L$2;
        }
        case 5: {
          if (_match_pattern >= 9) {
            _match_pattern = 9;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 6: {
          if (_match_pattern >= 10) {
            _match_pattern = 10;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 7: {
          if (_match_pattern >= 16) {
            _match_pattern = 16;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 8: {
          if (_match_pattern >= 17) {
            _match_pattern = 17;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 9: {
          if (_match_pattern >= 19) {
            _match_pattern = 19;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 10: {
          const _bind$4 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$6;
          if (_bind$4 === 47) {
            _tmp$6 = 30;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$6;
          continue _L$2;
        }
        case 11: {
          if (_match_pattern >= 14) {
            _match_pattern = 14;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 12: {
          if (_match_pattern >= 13) {
            _match_pattern = 13;
            _match_end = lexbuf$2.pos;
          }
          const _bind$5 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$7;
          if (_bind$5 === 62) {
            _tmp$7 = 27;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$7;
          continue _L$2;
        }
        case 13: {
          if (_match_pattern >= 18) {
            _match_pattern = 18;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 14: {
          if (_match_pattern >= 11) {
            _match_pattern = 11;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 15: {
          if (_match_pattern >= 21) {
            _match_pattern = 21;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 16: {
          if (_match_pattern >= 12) {
            _match_pattern = 12;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 17: {
          if (_match_pattern >= 20) {
            _match_pattern = 20;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 18: {
          if (_match_pattern >= 6) {
            _match_pattern = 6;
            _match_end = lexbuf$2.pos;
          }
          const _bind$6 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$8;
          if (_bind$6 >= 48 && _bind$6 <= 57) {
            _tmp$8 = 19;
          } else {
            if (_bind$6 >= 65 && _bind$6 <= 90) {
              _tmp$8 = 19;
            } else {
              if (_bind$6 === 95) {
                _tmp$8 = 19;
              } else {
                if (_bind$6 >= 97 && _bind$6 <= 122) {
                  _tmp$8 = 19;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$2 = _tmp$8;
          continue _L$2;
        }
        case 19: {
          if (_match_pattern >= 34) {
            _match_pattern = 34;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$7 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$9;
          if (_bind$7 >= 48 && _bind$7 <= 57) {
            _tmp$9 = 19;
          } else {
            if (_bind$7 >= 65 && _bind$7 <= 90) {
              _tmp$9 = 19;
            } else {
              if (_bind$7 === 95) {
                _tmp$9 = 19;
              } else {
                if (_bind$7 >= 97 && _bind$7 <= 122) {
                  _tmp$9 = 19;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$2 = _tmp$9;
          continue _L$2;
        }
        case 20: {
          if (_match_pattern >= 34) {
            _match_pattern = 34;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$8 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$10;
          if (_bind$8 >= 48 && _bind$8 <= 57) {
            _tmp$10 = 19;
          } else {
            if (_bind$8 >= 65 && _bind$8 <= 90) {
              _tmp$10 = 19;
            } else {
              if (_bind$8 === 95) {
                _tmp$10 = 19;
              } else {
                if (_bind$8 === 97) {
                  _tmp$10 = 28;
                } else {
                  if (_bind$8 >= 98 && _bind$8 <= 122) {
                    _tmp$10 = 19;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$10;
          continue _L$2;
        }
        case 21: {
          if (_match_pattern >= 34) {
            _match_pattern = 34;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$9 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$11;
          if (_bind$9 >= 48 && _bind$9 <= 57) {
            _tmp$11 = 19;
          } else {
            if (_bind$9 >= 65 && _bind$9 <= 90) {
              _tmp$11 = 19;
            } else {
              if (_bind$9 === 95) {
                _tmp$11 = 19;
              } else {
                if (_bind$9 >= 97 && _bind$9 <= 116) {
                  _tmp$11 = 19;
                } else {
                  if (_bind$9 === 117) {
                    _tmp$11 = 29;
                  } else {
                    if (_bind$9 >= 118 && _bind$9 <= 122) {
                      _tmp$11 = 19;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$11;
          continue _L$2;
        }
        case 22: {
          if (_match_pattern >= 7) {
            _match_pattern = 7;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 23: {
          if (_match_pattern >= 15) {
            _match_pattern = 15;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 24: {
          if (_match_pattern >= 8) {
            _match_pattern = 8;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 25: {
          const _bind$10 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$12;
          if (_bind$10 === 39) {
            _tmp$12 = 40;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$12;
          continue _L$2;
        }
        case 26: {
          const _bind$11 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$13;
          switch (_bind$11) {
            case 39: {
              _tmp$13 = 31;
              break;
            }
            case 92: {
              _tmp$13 = 32;
              break;
            }
            case 98: {
              _tmp$13 = 33;
              break;
            }
            case 110: {
              _tmp$13 = 34;
              break;
            }
            case 114: {
              _tmp$13 = 35;
              break;
            }
            case 116: {
              _tmp$13 = 36;
              break;
            }
            case 117: {
              _tmp$13 = 37;
              break;
            }
            case 118: {
              _tmp$13 = 38;
              break;
            }
            case 120: {
              _tmp$13 = 39;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$2 = _tmp$13;
          continue _L$2;
        }
        case 27: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 28: {
          if (_match_pattern >= 34) {
            _match_pattern = 34;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$12 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$14;
          if (_bind$12 >= 48 && _bind$12 <= 57) {
            _tmp$14 = 19;
          } else {
            if (_bind$12 >= 65 && _bind$12 <= 90) {
              _tmp$14 = 19;
            } else {
              if (_bind$12 === 95) {
                _tmp$14 = 19;
              } else {
                if (_bind$12 >= 97 && _bind$12 <= 113) {
                  _tmp$14 = 19;
                } else {
                  if (_bind$12 === 114) {
                    _tmp$14 = 41;
                  } else {
                    if (_bind$12 >= 115 && _bind$12 <= 122) {
                      _tmp$14 = 19;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$14;
          continue _L$2;
        }
        case 29: {
          if (_match_pattern >= 34) {
            _match_pattern = 34;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$13 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$15;
          if (_bind$13 >= 48 && _bind$13 <= 57) {
            _tmp$15 = 19;
          } else {
            if (_bind$13 >= 65 && _bind$13 <= 90) {
              _tmp$15 = 19;
            } else {
              if (_bind$13 === 95) {
                _tmp$15 = 19;
              } else {
                if (_bind$13 >= 97 && _bind$13 <= 107) {
                  _tmp$15 = 19;
                } else {
                  if (_bind$13 === 108) {
                    _tmp$15 = 42;
                  } else {
                    if (_bind$13 >= 109 && _bind$13 <= 122) {
                      _tmp$15 = 19;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$15;
          continue _L$2;
        }
        case 30: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
          }
          const _bind$14 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$16;
          if (_bind$14 >= 0 && _bind$14 <= 9) {
            _tmp$16 = 30;
          } else {
            if (_bind$14 === 10) {
              _tmp$16 = 43;
            } else {
              if (_bind$14 >= 11 && _bind$14 <= 1114111) {
                _tmp$16 = 30;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$2 = _tmp$16;
          continue _L$2;
        }
        case 31: {
          const _bind$15 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$17;
          if (_bind$15 === 39) {
            _tmp$17 = 47;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$17;
          continue _L$2;
        }
        case 32: {
          const _bind$16 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$18;
          if (_bind$16 === 39) {
            _tmp$18 = 48;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$18;
          continue _L$2;
        }
        case 33: {
          const _bind$17 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$19;
          if (_bind$17 === 39) {
            _tmp$19 = 53;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$19;
          continue _L$2;
        }
        case 34: {
          const _bind$18 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$20;
          if (_bind$18 === 39) {
            _tmp$20 = 49;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$20;
          continue _L$2;
        }
        case 35: {
          const _bind$19 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$21;
          if (_bind$19 === 39) {
            _tmp$21 = 50;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$21;
          continue _L$2;
        }
        case 36: {
          const _bind$20 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$22;
          if (_bind$20 === 39) {
            _tmp$22 = 52;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$22;
          continue _L$2;
        }
        case 37: {
          const _bind$21 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$23;
          if (_bind$21 >= 48 && _bind$21 <= 57) {
            _tmp$23 = 44;
          } else {
            if (_bind$21 >= 65 && _bind$21 <= 70) {
              _tmp$23 = 44;
            } else {
              if (_bind$21 >= 97 && _bind$21 <= 102) {
                _tmp$23 = 44;
              } else {
                if (_bind$21 === 123) {
                  _tmp$23 = 45;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$2 = _tmp$23;
          continue _L$2;
        }
        case 38: {
          const _bind$22 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$24;
          if (_bind$22 === 39) {
            _tmp$24 = 51;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$24;
          continue _L$2;
        }
        case 39: {
          const _bind$23 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$25;
          if (_bind$23 >= 48 && _bind$23 <= 57) {
            _tmp$25 = 46;
          } else {
            if (_bind$23 >= 65 && _bind$23 <= 70) {
              _tmp$25 = 46;
            } else {
              if (_bind$23 >= 97 && _bind$23 <= 102) {
                _tmp$25 = 46;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$2 = _tmp$25;
          continue _L$2;
        }
        case 40: {
          if (_match_pattern >= 22) {
            _match_pattern = 22;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start + 1 | 0;
            _capture_0_end = _match_start + 2 | 0;
          }
          break _L$2;
        }
        case 41: {
          if (_match_pattern >= 34) {
            _match_pattern = 34;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$24 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$26;
          if (_bind$24 >= 48 && _bind$24 <= 57) {
            _tmp$26 = 19;
          } else {
            if (_bind$24 >= 65 && _bind$24 <= 90) {
              _tmp$26 = 19;
            } else {
              if (_bind$24 === 95) {
                _tmp$26 = 19;
              } else {
                if (_bind$24 >= 97 && _bind$24 <= 114) {
                  _tmp$26 = 19;
                } else {
                  if (_bind$24 === 115) {
                    _tmp$26 = 54;
                  } else {
                    if (_bind$24 >= 116 && _bind$24 <= 122) {
                      _tmp$26 = 19;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$26;
          continue _L$2;
        }
        case 42: {
          if (_match_pattern >= 34) {
            _match_pattern = 34;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$25 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$27;
          if (_bind$25 >= 48 && _bind$25 <= 57) {
            _tmp$27 = 19;
          } else {
            if (_bind$25 >= 65 && _bind$25 <= 90) {
              _tmp$27 = 19;
            } else {
              if (_bind$25 === 95) {
                _tmp$27 = 19;
              } else {
                if (_bind$25 >= 97 && _bind$25 <= 100) {
                  _tmp$27 = 19;
                } else {
                  if (_bind$25 === 101) {
                    _tmp$27 = 55;
                  } else {
                    if (_bind$25 >= 102 && _bind$25 <= 122) {
                      _tmp$27 = 19;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$27;
          continue _L$2;
        }
        case 43: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 44: {
          const _bind$26 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$28;
          if (_bind$26 >= 48 && _bind$26 <= 57) {
            _tmp$28 = 57;
          } else {
            if (_bind$26 >= 65 && _bind$26 <= 70) {
              _tmp$28 = 57;
            } else {
              if (_bind$26 >= 97 && _bind$26 <= 102) {
                _tmp$28 = 57;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$2 = _tmp$28;
          continue _L$2;
        }
        case 45: {
          const _bind$27 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$29;
          if (_bind$27 >= 48 && _bind$27 <= 57) {
            _tmp$29 = 56;
          } else {
            if (_bind$27 >= 65 && _bind$27 <= 70) {
              _tmp$29 = 56;
            } else {
              if (_bind$27 >= 97 && _bind$27 <= 102) {
                _tmp$29 = 56;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$2 = _tmp$29;
          continue _L$2;
        }
        case 46: {
          const _bind$28 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$30;
          if (_bind$28 >= 48 && _bind$28 <= 57) {
            _tmp$30 = 58;
          } else {
            if (_bind$28 >= 65 && _bind$28 <= 70) {
              _tmp$30 = 58;
            } else {
              if (_bind$28 >= 97 && _bind$28 <= 102) {
                _tmp$30 = 58;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$2 = _tmp$30;
          continue _L$2;
        }
        case 47: {
          if (_match_pattern >= 29) {
            _match_pattern = 29;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 48: {
          if (_match_pattern >= 28) {
            _match_pattern = 28;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 49: {
          if (_match_pattern >= 27) {
            _match_pattern = 27;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 50: {
          if (_match_pattern >= 26) {
            _match_pattern = 26;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 51: {
          if (_match_pattern >= 25) {
            _match_pattern = 25;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 52: {
          if (_match_pattern >= 24) {
            _match_pattern = 24;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 53: {
          if (_match_pattern >= 23) {
            _match_pattern = 23;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 54: {
          if (_match_pattern >= 34) {
            _match_pattern = 34;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$29 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$31;
          if (_bind$29 >= 48 && _bind$29 <= 57) {
            _tmp$31 = 19;
          } else {
            if (_bind$29 >= 65 && _bind$29 <= 90) {
              _tmp$31 = 19;
            } else {
              if (_bind$29 === 95) {
                _tmp$31 = 19;
              } else {
                if (_bind$29 >= 97 && _bind$29 <= 100) {
                  _tmp$31 = 19;
                } else {
                  if (_bind$29 === 101) {
                    _tmp$31 = 59;
                  } else {
                    if (_bind$29 >= 102 && _bind$29 <= 122) {
                      _tmp$31 = 19;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$31;
          continue _L$2;
        }
        case 55: {
          if (_match_pattern >= 34) {
            _match_pattern = 34;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$30 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$32;
          if (_bind$30 >= 9 && _bind$30 <= 10) {
            _tmp$32 = 60;
          } else {
            if (_bind$30 === 13) {
              _tmp$32 = 60;
            } else {
              if (_bind$30 === 32) {
                _tmp$32 = 60;
              } else {
                if (_bind$30 >= 48 && _bind$30 <= 57) {
                  _tmp$32 = 19;
                } else {
                  if (_bind$30 >= 65 && _bind$30 <= 90) {
                    _tmp$32 = 19;
                  } else {
                    if (_bind$30 === 95) {
                      _tmp$32 = 19;
                    } else {
                      if (_bind$30 >= 97 && _bind$30 <= 122) {
                        _tmp$32 = 19;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$32;
          continue _L$2;
        }
        case 56: {
          const _bind$31 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$33;
          if (_bind$31 >= 48 && _bind$31 <= 57) {
            _tmp$33 = 56;
          } else {
            if (_bind$31 >= 65 && _bind$31 <= 70) {
              _tmp$33 = 56;
            } else {
              if (_bind$31 >= 97 && _bind$31 <= 102) {
                _tmp$33 = 56;
              } else {
                if (_bind$31 === 125) {
                  _tmp$33 = 61;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$2 = _tmp$33;
          continue _L$2;
        }
        case 57: {
          const _bind$32 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$34;
          if (_bind$32 >= 48 && _bind$32 <= 57) {
            _tmp$34 = 62;
          } else {
            if (_bind$32 >= 65 && _bind$32 <= 70) {
              _tmp$34 = 62;
            } else {
              if (_bind$32 >= 97 && _bind$32 <= 102) {
                _tmp$34 = 62;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$2 = _tmp$34;
          continue _L$2;
        }
        case 58: {
          const _bind$33 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$35;
          if (_bind$33 === 39) {
            _tmp$35 = 63;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$35;
          continue _L$2;
        }
        case 59: {
          if (_match_pattern >= 34) {
            _match_pattern = 34;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$34 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$36;
          if (_bind$34 >= 9 && _bind$34 <= 10) {
            _tmp$36 = 64;
          } else {
            if (_bind$34 === 13) {
              _tmp$36 = 64;
            } else {
              if (_bind$34 === 32) {
                _tmp$36 = 64;
              } else {
                if (_bind$34 >= 48 && _bind$34 <= 57) {
                  _tmp$36 = 19;
                } else {
                  if (_bind$34 >= 65 && _bind$34 <= 90) {
                    _tmp$36 = 19;
                  } else {
                    if (_bind$34 === 95) {
                      _tmp$36 = 19;
                    } else {
                      if (_bind$34 >= 97 && _bind$34 <= 122) {
                        _tmp$36 = 19;
                      } else {
                        if (_bind$34 === 123) {
                          _tmp$36 = 65;
                        } else {
                          break _L$2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$36;
          continue _L$2;
        }
        case 60: {
          _tag_0 = lexbuf$2.pos;
          const _bind$35 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$37;
          if (_bind$35 >= 9 && _bind$35 <= 10) {
            _tmp$37 = 60;
          } else {
            if (_bind$35 === 13) {
              _tmp$37 = 60;
            } else {
              if (_bind$35 === 32) {
                _tmp$37 = 60;
              } else {
                if (_bind$35 === 95) {
                  _tmp$37 = 66;
                } else {
                  if (_bind$35 >= 97 && _bind$35 <= 122) {
                    _tmp$37 = 66;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$37;
          continue _L$2;
        }
        case 61: {
          const _bind$36 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$38;
          if (_bind$36 === 39) {
            _tmp$38 = 67;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$38;
          continue _L$2;
        }
        case 62: {
          const _bind$37 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$39;
          if (_bind$37 >= 48 && _bind$37 <= 57) {
            _tmp$39 = 68;
          } else {
            if (_bind$37 >= 65 && _bind$37 <= 70) {
              _tmp$39 = 68;
            } else {
              if (_bind$37 >= 97 && _bind$37 <= 102) {
                _tmp$39 = 68;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$2 = _tmp$39;
          continue _L$2;
        }
        case 63: {
          if (_match_pattern >= 30) {
            _match_pattern = 30;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start + 3 | 0;
            _capture_0_end = _match_start + 5 | 0;
          }
          break _L$2;
        }
        case 64: {
          const _bind$38 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$40;
          if (_bind$38 >= 9 && _bind$38 <= 10) {
            _tmp$40 = 64;
          } else {
            if (_bind$38 === 13) {
              _tmp$40 = 64;
            } else {
              if (_bind$38 === 32) {
                _tmp$40 = 64;
              } else {
                if (_bind$38 === 123) {
                  _tmp$40 = 65;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$2 = _tmp$40;
          continue _L$2;
        }
        case 65: {
          if (_match_pattern >= 4) {
            _match_pattern = 4;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 66: {
          _tag_1 = lexbuf$2.pos;
          const _bind$39 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$41;
          if (_bind$39 >= 0 && _bind$39 <= 47) {
            _tmp$41 = 69;
          } else {
            if (_bind$39 >= 48 && _bind$39 <= 57) {
              _tmp$41 = 70;
            } else {
              if (_bind$39 >= 58 && _bind$39 <= 64) {
                _tmp$41 = 69;
              } else {
                if (_bind$39 >= 65 && _bind$39 <= 90) {
                  _tmp$41 = 70;
                } else {
                  if (_bind$39 >= 91 && _bind$39 <= 94) {
                    _tmp$41 = 69;
                  } else {
                    if (_bind$39 === 95) {
                      _tmp$41 = 70;
                    } else {
                      if (_bind$39 === 96) {
                        _tmp$41 = 69;
                      } else {
                        if (_bind$39 >= 97 && _bind$39 <= 122) {
                          _tmp$41 = 70;
                        } else {
                          if (_bind$39 >= 124 && _bind$39 <= 1114111) {
                            _tmp$41 = 69;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$41;
          continue _L$2;
        }
        case 67: {
          if (_match_pattern >= 32) {
            _match_pattern = 32;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start + 4 | 0;
            _capture_0_end = _match_end + -2 | 0;
          }
          break _L$2;
        }
        case 68: {
          const _bind$40 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$42;
          if (_bind$40 === 39) {
            _tmp$42 = 71;
          } else {
            break _L$2;
          }
          _tmp$2 = _tmp$42;
          continue _L$2;
        }
        case 69: {
          _tag_2 = lexbuf$2.pos;
          const _bind$41 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$43;
          if (_bind$41 >= 0 && _bind$41 <= 8) {
            _tmp$43 = 69;
          } else {
            if (_bind$41 >= 9 && _bind$41 <= 10) {
              _tmp$43 = 72;
            } else {
              if (_bind$41 >= 11 && _bind$41 <= 12) {
                _tmp$43 = 69;
              } else {
                if (_bind$41 === 13) {
                  _tmp$43 = 72;
                } else {
                  if (_bind$41 >= 14 && _bind$41 <= 31) {
                    _tmp$43 = 69;
                  } else {
                    if (_bind$41 === 32) {
                      _tmp$43 = 72;
                    } else {
                      if (_bind$41 >= 33 && _bind$41 <= 122) {
                        _tmp$43 = 69;
                      } else {
                        if (_bind$41 === 123) {
                          _tmp$43 = 73;
                        } else {
                          if (_bind$41 >= 124 && _bind$41 <= 1114111) {
                            _tmp$43 = 69;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$43;
          continue _L$2;
        }
        case 70: {
          _tag_1 = lexbuf$2.pos;
          _tag_2 = lexbuf$2.pos;
          _tag_1_1 = _tag_1;
          const _bind$42 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$44;
          if (_bind$42 >= 0 && _bind$42 <= 8) {
            _tmp$44 = 69;
          } else {
            if (_bind$42 >= 9 && _bind$42 <= 10) {
              _tmp$44 = 72;
            } else {
              if (_bind$42 >= 11 && _bind$42 <= 12) {
                _tmp$44 = 69;
              } else {
                if (_bind$42 === 13) {
                  _tmp$44 = 72;
                } else {
                  if (_bind$42 >= 14 && _bind$42 <= 31) {
                    _tmp$44 = 69;
                  } else {
                    if (_bind$42 === 32) {
                      _tmp$44 = 72;
                    } else {
                      if (_bind$42 >= 33 && _bind$42 <= 47) {
                        _tmp$44 = 69;
                      } else {
                        if (_bind$42 >= 48 && _bind$42 <= 57) {
                          _tmp$44 = 70;
                        } else {
                          if (_bind$42 >= 58 && _bind$42 <= 64) {
                            _tmp$44 = 69;
                          } else {
                            if (_bind$42 >= 65 && _bind$42 <= 90) {
                              _tmp$44 = 70;
                            } else {
                              if (_bind$42 >= 91 && _bind$42 <= 94) {
                                _tmp$44 = 69;
                              } else {
                                if (_bind$42 === 95) {
                                  _tmp$44 = 70;
                                } else {
                                  if (_bind$42 === 96) {
                                    _tmp$44 = 69;
                                  } else {
                                    if (_bind$42 >= 97 && _bind$42 <= 122) {
                                      _tmp$44 = 70;
                                    } else {
                                      if (_bind$42 === 123) {
                                        _tmp$44 = 73;
                                      } else {
                                        if (_bind$42 >= 124 && _bind$42 <= 1114111) {
                                          _tmp$44 = 69;
                                        } else {
                                          break _L$2;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$44;
          continue _L$2;
        }
        case 71: {
          if (_match_pattern >= 31) {
            _match_pattern = 31;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start + 3 | 0;
            _capture_0_end = _match_start + 7 | 0;
          }
          break _L$2;
        }
        case 72: {
          _tag_2 = lexbuf$2.pos;
          _tag_2_1 = _tag_2;
          const _bind$43 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$45;
          if (_bind$43 >= 0 && _bind$43 <= 8) {
            _tmp$45 = 69;
          } else {
            if (_bind$43 >= 9 && _bind$43 <= 10) {
              _tmp$45 = 72;
            } else {
              if (_bind$43 >= 11 && _bind$43 <= 12) {
                _tmp$45 = 69;
              } else {
                if (_bind$43 === 13) {
                  _tmp$45 = 72;
                } else {
                  if (_bind$43 >= 14 && _bind$43 <= 31) {
                    _tmp$45 = 69;
                  } else {
                    if (_bind$43 === 32) {
                      _tmp$45 = 72;
                    } else {
                      if (_bind$43 >= 33 && _bind$43 <= 122) {
                        _tmp$45 = 69;
                      } else {
                        if (_bind$43 === 123) {
                          _tmp$45 = 73;
                        } else {
                          if (_bind$43 >= 124 && _bind$43 <= 1114111) {
                            _tmp$45 = 69;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$2 = _tmp$45;
          continue _L$2;
        }
        case 73: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _tag_0;
            _capture_0_end = _tag_1;
            _capture_1_start = _tag_0;
            _capture_1_end = _tag_2;
          }
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 34) {
      moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$206$(lexbuf$2, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          continue _L;
        }
        case 1: {
          continue _L;
        }
        case 2: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$EOI, _1: _match_start, _2: _match_end };
        }
        case 3: {
          const t1 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          const t2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_1_start, _capture_1_end);
          return { _0: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RULE_LC_IDENT_LPAREN_CODE_RPAREN_ARROW_CODE_LBRACE({ _0: t1, _1: t2 }), _1: _match_start, _2: _match_end };
        }
        case 4: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$PARSE_LBRACE, _1: _match_start, _2: _match_end };
        }
        case 5: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$FAT_ARROW, _1: _match_start, _2: _match_end };
        }
        case 6: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$UNDERSCORE, _1: _match_start, _2: _match_end };
        }
        case 7: {
          const buffer = moonbitlang$core$builtin$$StringBuilder$new(0);
          const end_pos = moonbitlang$ulex$lib$parser$$code_rbrace$206$(buffer, lexbuf$2);
          return { _0: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LBRACE_CODE_RBRACE(buffer.val), _1: _match_start, _2: end_pos };
        }
        case 8: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RBRACE, _1: _match_start, _2: _match_end };
        }
        case 9: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LPAREN, _1: _match_start, _2: _match_end };
        }
        case 10: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RPAREN, _1: _match_start, _2: _match_end };
        }
        case 11: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LBRACKET, _1: _match_start, _2: _match_end };
        }
        case 12: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$RBRACKET, _1: _match_start, _2: _match_end };
        }
        case 13: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$EQ, _1: _match_start, _2: _match_end };
        }
        case 14: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$SEMICOLON, _1: _match_start, _2: _match_end };
        }
        case 15: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$BAR, _1: _match_start, _2: _match_end };
        }
        case 16: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$STAR, _1: _match_start, _2: _match_end };
        }
        case 17: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$PLUS, _1: _match_start, _2: _match_end };
        }
        case 18: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$QUESTION, _1: _match_start, _2: _match_end };
        }
        case 19: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$MINUS, _1: _match_start, _2: _match_end };
        }
        case 20: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CARET, _1: _match_start, _2: _match_end };
        }
        case 21: {
          return { _0: $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$BACKSLASH, _1: _match_start, _2: _match_end };
        }
        case 22: {
          const t = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_char$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          return { _0: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(t), _1: _match_start, _2: _match_end };
        }
        case 23: {
          return { _0: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(8), _1: _match_start, _2: _match_end };
        }
        case 24: {
          return { _0: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(9), _1: _match_start, _2: _match_end };
        }
        case 25: {
          return { _0: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(11), _1: _match_start, _2: _match_end };
        }
        case 26: {
          return { _0: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(13), _1: _match_start, _2: _match_end };
        }
        case 27: {
          return { _0: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(10), _1: _match_start, _2: _match_end };
        }
        case 28: {
          return { _0: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(92), _1: _match_start, _2: _match_end };
        }
        case 29: {
          return { _0: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(39), _1: _match_start, _2: _match_end };
        }
        case 30: {
          const t$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          const code = moonbitlang$core$result$$Result$unwrap$69$(moonbitlang$core$strconv$$parse_int(t$2, 16));
          return { _0: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(code), _1: _match_start, _2: _match_end };
        }
        case 31: {
          const t$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          const code$2 = moonbitlang$core$result$$Result$unwrap$69$(moonbitlang$core$strconv$$parse_int(t$3, 16));
          return { _0: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(code$2), _1: _match_start, _2: _match_end };
        }
        case 32: {
          const t$4 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          const code$3 = moonbitlang$core$result$$Result$unwrap$69$(moonbitlang$core$strconv$$parse_int(t$4, 16));
          return { _0: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$CHAR(code$3), _1: _match_start, _2: _match_end };
        }
        case 33: {
          const buffer$2 = moonbitlang$core$builtin$$StringBuilder$new(0);
          const end_pos$2 = moonbitlang$ulex$lib$parser$$string_inner_rquote$206$(buffer$2, lexbuf$2);
          return { _0: new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$STRING(buffer$2.val), _1: _match_start, _2: end_pos$2 };
        }
        case 34: {
          const t$5 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          let _tmp$3;
          switch (t$5) {
            case "eof": {
              _tmp$3 = $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$EOF;
              break;
            }
            case "regex": {
              _tmp$3 = $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$REGEX;
              break;
            }
            case "as": {
              _tmp$3 = $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$AS;
              break;
            }
            default: {
              _tmp$3 = new $64$moonbitlang$47$ulex$47$lib$47$parser$46$Token$LC_IDENT(t$5);
            }
          }
          return { _0: _tmp$3, _1: _match_start, _2: _match_end };
        }
        default: {
          return $panic();
        }
      }
    } else {
      return $panic();
    }
  }
}
function moonbitlang$ulex$lib$parser$$error(stack, token, loc) {
  const expected = [];
  const _arr = [{ _0: 0, _1: 0 }, { _0: 1, _1: 1 }, { _0: 2, _1: 2 }, { _0: 3, _1: 3 }, { _0: 4, _1: 4 }, { _0: 5, _1: 5 }, { _0: 6, _1: 6 }, { _0: 7, _1: 7 }, { _0: 8, _1: 8 }, { _0: 9, _1: 9 }, { _0: 10, _1: 10 }, { _0: 11, _1: 11 }, { _0: 12, _1: 12 }, { _0: 13, _1: 13 }, { _0: 14, _1: 14 }, { _0: 15, _1: 15 }, { _0: 16, _1: 16 }, { _0: 17, _1: 17 }, { _0: 18, _1: 18 }, { _0: 19, _1: 19 }, { _0: 20, _1: 20 }, { _0: 21, _1: 21 }, { _0: 22, _1: 22 }, { _0: 23, _1: 23 }, { _0: 24, _1: 24 }, { _0: 25, _1: 25 }];
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const term = _arr[_i];
      const kind = term._1;
      const symbol = term._0;
      let stack$2;
      _L: {
        stack$2 = stack;
        break _L;
      }
      let _tmp$2 = stack$2;
      _L$2: while (true) {
        const stack$3 = _tmp$2;
        if (stack$3.$tag === 0) {
          break;
        } else {
          const _Cons = stack$3;
          const _state = _Cons._0;
          let count;
          let symbol$2;
          _L$3: {
            _L$4: {
              const _bind = _state(symbol);
              switch (_bind.$tag) {
                case 0: {
                  break _L$4;
                }
                case 1: {
                  break _L$4;
                }
                case 2: {
                  const _Reduce = _bind;
                  const _count = _Reduce._0;
                  const _symbol = _Reduce._1;
                  count = _count;
                  symbol$2 = _symbol;
                  break _L$3;
                }
                case 3: {
                  const _ReduceNoLookahead = _bind;
                  const _count$2 = _ReduceNoLookahead._0;
                  const _symbol$2 = _ReduceNoLookahead._1;
                  count = _count$2;
                  symbol$2 = _symbol$2;
                  break _L$3;
                }
                default: {
                  break _L$2;
                }
              }
            }
            moonbitlang$core$array$$Array$push$183$(expected, kind);
            break;
          }
          let stack$4;
          let count$2;
          let symbol$3;
          _L$4: {
            stack$4 = stack$3;
            count$2 = count;
            symbol$3 = symbol$2;
            break _L$4;
          }
          let _tmp$3 = stack$4;
          let _tmp$4 = count$2;
          let _tmp$5 = symbol$3;
          _L$5: while (true) {
            const stack$5 = _tmp$3;
            const count$3 = _tmp$4;
            const symbol$4 = _tmp$5;
            const stack$6 = moonbitlang$core$immut$list$$T$drop$13$(stack$5, count$3);
            if (stack$6.$tag === 1) {
              const _Cons$2 = stack$6;
              const _state$2 = _Cons$2._0;
              let count$4;
              let symbol$5;
              _L$6: {
                const _bind = _state$2(symbol$4);
                switch (_bind.$tag) {
                  case 1: {
                    const _Shift = _bind;
                    const _state$3 = _Shift._0;
                    _tmp$2 = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$25$(_state$3, stack$6);
                    continue _L$2;
                  }
                  case 2: {
                    const _Reduce = _bind;
                    const _count = _Reduce._0;
                    const _symbol = _Reduce._1;
                    count$4 = _count;
                    symbol$5 = _symbol;
                    break _L$6;
                  }
                  case 3: {
                    const _ReduceNoLookahead = _bind;
                    const _count$2 = _ReduceNoLookahead._0;
                    const _symbol$2 = _ReduceNoLookahead._1;
                    count$4 = _count$2;
                    symbol$5 = _symbol$2;
                    break _L$6;
                  }
                  default: {
                    $panic();
                    break _L$2;
                  }
                }
              }
              _tmp$3 = stack$6;
              _tmp$4 = count$4;
              _tmp$5 = symbol$5;
              continue;
            } else {
              $panic();
              break _L$2;
            }
          }
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return new Result$Err$31$(new Error$moonbitlang$47$ulex$47$lib$47$parser$46$ParseError$46$UnexpectedToken(token, loc, expected));
}
function moonbitlang$ulex$lib$parser$$yy_input(token, _start_pos, _end_pos) {
  switch (token.$tag) {
    case 0: {
      return { _0: 0, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 1: {
      return { _0: 1, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 2: {
      return { _0: 2, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 3: {
      return { _0: 3, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 4: {
      return { _0: 4, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 5: {
      return { _0: 5, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 6: {
      return { _0: 6, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 7: {
      return { _0: 7, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 8: {
      return { _0: 8, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 9: {
      return { _0: 9, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 10: {
      return { _0: 10, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 11: {
      return { _0: 11, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 12: {
      return { _0: 12, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 13: {
      return { _0: 13, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 14: {
      return { _0: 14, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 15: {
      return { _0: 15, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 16: {
      return { _0: 16, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 17: {
      return { _0: 17, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 18: {
      return { _0: 18, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 19: {
      return { _0: 19, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 20: {
      return { _0: 20, _1: Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 21: {
      const _RULE_LC_IDENT_LPAREN_CODE_RPAREN_ARROW_CODE_LBRACE = token;
      const _data = _RULE_LC_IDENT_LPAREN_CODE_RPAREN_ARROW_CODE_LBRACE._0;
      return { _0: 21, _1: new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__String__String_$46$YYObj__String__String_(_data) };
    }
    case 22: {
      const _LBRACE_CODE_RBRACE = token;
      const _data$2 = _LBRACE_CODE_RBRACE._0;
      return { _0: 22, _1: new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String(_data$2) };
    }
    case 23: {
      const _LC_IDENT = token;
      const _data$3 = _LC_IDENT._0;
      return { _0: 23, _1: new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String(_data$3) };
    }
    case 24: {
      const _CHAR = token;
      const _data$4 = _CHAR._0;
      return { _0: 24, _1: new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_Char$46$YYObj_Char(_data$4) };
    }
    default: {
      const _STRING = token;
      const _data$5 = _STRING._0;
      return { _0: 25, _1: new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String(_data$5) };
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_parse$207$(read_token, start_pos, start, return_) {
  const state_stack = { val: new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$25$(start, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$25$) };
  const data_stack = [];
  const last_pos = { val: start_pos };
  const state = { val: start };
  let lookahead = undefined;
  let last_shifted_state_stack = state_stack.val;
  while (true) {
    let decision;
    const _func = state.val;
    const _bind = _func(47);
    switch (_bind.$tag) {
      case 3: {
        decision = _bind;
        break;
      }
      case 0: {
        decision = _bind;
        break;
      }
      default: {
        const _bind$2 = lookahead;
        if (_bind$2 === undefined) {
          const _bind$3 = read_token();
          const _token = _bind$3._0;
          const _start_pos = _bind$3._1;
          const _end_pos = _bind$3._2;
          const _bind$4 = moonbitlang$ulex$lib$parser$$yy_input(_token, _start_pos, _end_pos);
          const _symbol = _bind$4._0;
          const _data = _bind$4._1;
          lookahead = { _0: _symbol, _1: { _0: _data, _1: _start_pos, _2: _end_pos }, _2: _token };
          const _func$2 = state.val;
          decision = _func$2(_symbol);
        } else {
          const _Some = _bind$2;
          const _la = _Some;
          const _func$2 = state.val;
          decision = _func$2(_la._0);
        }
      }
    }
    let action;
    let count;
    let symbol;
    _L: {
      _L$2: {
        switch (decision.$tag) {
          case 0: {
            return new Result$Ok$32$(return_(moonbitlang$core$array$$Array$unsafe_pop$14$(data_stack)._0));
          }
          case 1: {
            const _Shift = decision;
            const _next_state = _Shift._0;
            const _bind$3 = lookahead;
            if (_bind$3 === undefined) {
              $panic();
            } else {
              const _Some = _bind$3;
              const _la = _Some;
              moonbitlang$core$array$$Array$push$14$(data_stack, _la._1);
              state_stack.val = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$25$(_next_state, state_stack.val);
              last_shifted_state_stack = state_stack.val;
              state.val = _next_state;
              last_pos.val = _la._1._2;
              lookahead = undefined;
            }
            break;
          }
          case 2: {
            const _Reduce = decision;
            const _count = _Reduce._0;
            const _symbol = _Reduce._1;
            const _action = _Reduce._2;
            action = _action;
            count = _count;
            symbol = _symbol;
            break _L$2;
          }
          case 3: {
            const _ReduceNoLookahead = decision;
            const _count$2 = _ReduceNoLookahead._0;
            const _symbol$2 = _ReduceNoLookahead._1;
            const _action$2 = _ReduceNoLookahead._2;
            action = _action$2;
            count = _count$2;
            symbol = _symbol$2;
            break _L$2;
          }
          default: {
            const _bind$4 = moonbitlang$core$option$$Option$unwrap$163$(lookahead);
            const _x = _bind$4._1;
            const _start_pos = _x._1;
            const _end_pos = _x._2;
            const _token = _bind$4._2;
            const _bind$5 = moonbitlang$ulex$lib$parser$$error(last_shifted_state_stack, _token, { _0: _start_pos, _1: _end_pos });
            if (_bind$5.$tag === 1) {
              const _ok = _bind$5;
              _ok._0;
            } else {
              return _bind$5;
            }
          }
        }
        break _L;
      }
      let _tmp = count;
      let _tmp$2 = symbol;
      let _tmp$3 = action;
      _L$3: while (true) {
        const args = moonbitlang$core$array$$Array$op_as_view$14$(data_stack, data_stack.length - count | 0, undefined);
        const data = action(last_pos.val, args);
        let start_pos$2;
        let end_pos;
        _L$4: {
          if (args.len === 0) {
            const _tmp$4 = last_pos.val;
            const _tmp$5 = last_pos.val;
            start_pos$2 = _tmp$4;
            end_pos = _tmp$5;
            break _L$4;
          } else {
            const _tmp$4 = moonbitlang$core$array$$ArrayView$op_get$14$(args, 0)._1;
            const _tmp$5 = moonbitlang$core$array$$ArrayView$op_get$14$(args, args.len - 1 | 0)._2;
            start_pos$2 = _tmp$4;
            end_pos = _tmp$5;
            break _L$4;
          }
        }
        let _tmp$4 = 0;
        while (true) {
          const i = _tmp$4;
          if (i < count) {
            moonbitlang$core$array$$Array$unsafe_pop$14$(data_stack);
            state_stack.val = moonbitlang$core$immut$list$$T$tail$13$(state_stack.val);
            _tmp$4 = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        state.val = moonbitlang$core$immut$list$$T$unsafe_head$13$(state_stack.val);
        moonbitlang$core$array$$Array$push$14$(data_stack, { _0: data, _1: start_pos$2, _2: end_pos });
        let action$2;
        let count$2;
        let symbol$2;
        _L$5: {
          const _func$2 = state.val;
          const _bind$3 = _func$2(symbol);
          switch (_bind$3.$tag) {
            case 0: {
              return new Result$Ok$32$(return_(moonbitlang$core$array$$Array$unsafe_pop$14$(data_stack)._0));
            }
            case 1: {
              const _Shift = _bind$3;
              const _next_state = _Shift._0;
              state_stack.val = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$25$(_next_state, state_stack.val);
              state.val = _next_state;
              break _L$3;
            }
            case 2: {
              const _Reduce = _bind$3;
              const _count = _Reduce._0;
              const _symbol = _Reduce._1;
              const _action = _Reduce._2;
              action$2 = _action;
              count$2 = _count;
              symbol$2 = _symbol;
              break _L$5;
            }
            case 3: {
              const _ReduceNoLookahead = _bind$3;
              const _count$2 = _ReduceNoLookahead._0;
              const _symbol$2 = _ReduceNoLookahead._1;
              const _action$2 = _ReduceNoLookahead._2;
              action$2 = _action$2;
              count$2 = _count$2;
              symbol$2 = _symbol$2;
              break _L$5;
            }
            default: {
              $panic();
              break _L$3;
            }
          }
        }
        _tmp = count$2;
        _tmp$2 = symbol$2;
        _tmp$3 = action$2;
        continue;
      }
    }
    continue;
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_33(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Lex$46$YYObj__Context______type_Lex((_ctx) => ({ header: "", rules: [], trailer: "" }));
}
function moonbitlang$ulex$lib$parser$$yy_action_34(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String("");
}
function moonbitlang$ulex$lib$parser$$yy_state_43(_lookahead) {
  return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Accept;
}
function moonbitlang$ulex$lib$parser$$yy_action_29(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 8) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_44(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 29, moonbitlang$ulex$lib$parser$$yy_action_29);
}
function moonbitlang$ulex$lib$parser$$yy_action_22(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_____Context$46$YYObj__Context_____Context((ctx) => ctx);
}
function moonbitlang$ulex$lib$parser$$yy_action_7(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((_ctx) => moonbitlang$ulex$lib$regex$$eof);
}
function moonbitlang$ulex$lib$parser$$yy_state_13(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 43, moonbitlang$ulex$lib$parser$$yy_action_7);
}
function moonbitlang$ulex$lib$parser$$yy_action_0(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((_ctx) => moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$any, undefined));
}
function moonbitlang$ulex$lib$parser$$yy_state_14(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 43, moonbitlang$ulex$lib$parser$$yy_action_0);
}
function moonbitlang$ulex$lib$parser$$yy_action_11(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 8) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((_ctx) => {
      const _bind$2 = moonbitlang$core$string$$String$iter(__dollar1);
      const _acc = { val: moonbitlang$ulex$lib$regex$$epsilon };
      _bind$2((_p) => {
        const acc = _acc.val;
        _acc.val = moonbitlang$ulex$lib$regex$$seq(acc, moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$singleton(_p), undefined));
        return 1;
      });
      return _acc.val;
    });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_15(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 43, moonbitlang$ulex$lib$parser$$yy_action_11);
}
function moonbitlang$ulex$lib$parser$$yy_action_41(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 9) {
    const _YYObj_Char = _bind;
    const __dollar1 = _YYObj_Char._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((_ctx) => moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$singleton(__dollar1), undefined));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_16(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 43, moonbitlang$ulex$lib$parser$$yy_action_41);
}
function moonbitlang$ulex$lib$parser$$yy_action_6(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 8) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => moonbitlang$core$option$$Option$unwrap$167$(moonbitlang$core$immut$sorted_map$$T$get$82$(ctx.named_regexes, __dollar1)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_17(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 43, moonbitlang$ulex$lib$parser$$yy_action_6);
}
function moonbitlang$ulex$lib$parser$$yy_action_32(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj__char_set_T = _bind;
    const __dollar1 = _YYObj__char_set_T._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((_ctx) => moonbitlang$ulex$lib$regex$$char_class(__dollar1, undefined));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_18(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 43, moonbitlang$ulex$lib$parser$$yy_action_32);
}
function moonbitlang$ulex$lib$parser$$yy_action_24(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 1)._0;
  if (_bind.$tag === 13) {
    const _YYObj__char_set_T = _bind;
    const __dollar2 = _YYObj__char_set_T._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T(__dollar2);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_12(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 44, moonbitlang$ulex$lib$parser$$yy_action_24);
}
function moonbitlang$ulex$lib$parser$$yy_state_11(_lookahead) {
  if (_lookahead === 10) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_12);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_12(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 9) {
    const _YYObj_Char = _bind;
    const __dollar1 = _YYObj_Char._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$singleton(__dollar1));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_36(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 9) {
    const _YYObj_Char = _bind;
    const __dollar1 = _YYObj_Char._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 2)._0;
    if (_bind$2.$tag === 9) {
      const _YYObj_Char$2 = _bind$2;
      const __dollar3 = _YYObj_Char$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$range(__dollar1, __dollar3));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_5(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 46, moonbitlang$ulex$lib$parser$$yy_action_36);
}
function moonbitlang$ulex$lib$parser$$yy_state_4(_lookahead) {
  if (_lookahead === 24) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_5);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_3(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 18: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_4);
      }
      case 10: {
        break _L;
      }
      case 24: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 46, moonbitlang$ulex$lib$parser$$yy_action_12);
}
function moonbitlang$ulex$lib$parser$$yy_action_43(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj__char_set_T = _bind;
    const __dollar1 = _YYObj__char_set_T._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_25(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 13) {
    const _YYObj__char_set_T = _bind;
    const __dollar1 = _YYObj__char_set_T._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 1)._0;
    if (_bind$2.$tag === 13) {
      const _YYObj__char_set_T$2 = _bind$2;
      const __dollar2 = _YYObj__char_set_T$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$core$builtin$$Add$op_add$38$(__dollar1, __dollar2));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_7(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 45, moonbitlang$ulex$lib$parser$$yy_action_25);
}
function moonbitlang$ulex$lib$parser$$yy_state_6(_lookahead) {
  switch (_lookahead) {
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_3);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_6);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_7);
    }
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 45, moonbitlang$ulex$lib$parser$$yy_action_43);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_8(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 2)._0;
  if (_bind.$tag === 13) {
    const _YYObj__char_set_T = _bind;
    const __dollar3 = _YYObj__char_set_T._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$CharSet$negated(__dollar3));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_10(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 44, moonbitlang$ulex$lib$parser$$yy_action_8);
}
function moonbitlang$ulex$lib$parser$$yy_state_9(_lookahead) {
  if (_lookahead === 10) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_10);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_8(_lookahead) {
  switch (_lookahead) {
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_3);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_6);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_9);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_2(_lookahead) {
  switch (_lookahead) {
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_3);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_6);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_8);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_11);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_5(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 1)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar2 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(__dollar2);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_21(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 43, moonbitlang$ulex$lib$parser$$yy_action_5);
}
function moonbitlang$ulex$lib$parser$$yy_state_20(_lookahead) {
  if (_lookahead === 8) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_21);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_27(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_21(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => moonbitlang$ulex$lib$regex$$opt(__dollar1(ctx)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_23(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 42, moonbitlang$ulex$lib$parser$$yy_action_21);
}
function moonbitlang$ulex$lib$parser$$yy_action_38(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => moonbitlang$ulex$lib$regex$$plus(__dollar1(ctx)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_24(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 42, moonbitlang$ulex$lib$parser$$yy_action_38);
}
function moonbitlang$ulex$lib$parser$$yy_action_35(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => moonbitlang$ulex$lib$regex$$star(__dollar1(ctx)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_25(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 42, moonbitlang$ulex$lib$parser$$yy_action_35);
}
function moonbitlang$ulex$lib$parser$$yy_action_42(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 2)._0;
    if (_bind$2.$tag === 12) {
      const _YYObj__Context______type_Regex$2 = _bind$2;
      const __dollar3 = _YYObj__Context______type_Regex$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => {
        _L: {
          const _bind$3 = __dollar1(ctx).desc;
          if (_bind$3.$tag === 1) {
            const _Character = _bind$3;
            const _cset1 = _Character._0;
            const _bind$4 = __dollar3(ctx).desc;
            if (_bind$4.$tag === 1) {
              const _Character$2 = _bind$4;
              const _cset2 = _Character$2._0;
              return moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$CharSet$difference(_cset1, _cset2), undefined);
            } else {
              break _L;
            }
          } else {
            break _L;
          }
        }
        return $panic();
      });
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_27(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 41, moonbitlang$ulex$lib$parser$$yy_action_42);
}
function moonbitlang$ulex$lib$parser$$yy_action_9(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_3(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 2)._0;
    if (_bind$2.$tag === 12) {
      const _YYObj__Context______type_Regex$2 = _bind$2;
      const __dollar3 = _YYObj__Context______type_Regex$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => {
        _L: {
          const _bind$3 = __dollar1(ctx).desc;
          if (_bind$3.$tag === 1) {
            const _Character = _bind$3;
            const _cset1 = _Character._0;
            const _bind$4 = __dollar3(ctx).desc;
            if (_bind$4.$tag === 1) {
              const _Character$2 = _bind$4;
              const _cset2 = _Character$2._0;
              return moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$CharSet$difference(_cset1, _cset2), undefined);
            } else {
              break _L;
            }
          } else {
            break _L;
          }
        }
        return $panic();
      });
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_30(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 41, moonbitlang$ulex$lib$parser$$yy_action_3);
}
function moonbitlang$ulex$lib$parser$$yy_action_26(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_14(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 1)._0;
    if (_bind$2.$tag === 12) {
      const _YYObj__Context______type_Regex$2 = _bind$2;
      const __dollar2 = _YYObj__Context______type_Regex$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => moonbitlang$ulex$lib$regex$$seq(__dollar1(ctx), __dollar2(ctx)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_32(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 40, moonbitlang$ulex$lib$parser$$yy_action_14);
}
function moonbitlang$ulex$lib$parser$$yy_action_17(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_2(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 2)._0;
    if (_bind$2.$tag === 12) {
      const _YYObj__Context______type_Regex$2 = _bind$2;
      const __dollar3 = _YYObj__Context______type_Regex$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => moonbitlang$ulex$lib$regex$$alt(__dollar1(ctx), __dollar3(ctx)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_35(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 39, moonbitlang$ulex$lib$parser$$yy_action_2);
}
function moonbitlang$ulex$lib$parser$$yy_action_4(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_1(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 2)._0;
    if (_bind$2.$tag === 8) {
      const _YYObj_String = _bind$2;
      const __dollar3 = _YYObj_String._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex((ctx) => moonbitlang$ulex$lib$regex$$bind(__dollar1(ctx), __dollar3));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_38(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 38, moonbitlang$ulex$lib$parser$$yy_action_1);
}
function moonbitlang$ulex$lib$parser$$yy_state_37(_lookahead) {
  if (_lookahead === 23) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_38);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_36(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 4: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_37);
      }
      case 0: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 38, moonbitlang$ulex$lib$parser$$yy_action_4);
}
function moonbitlang$ulex$lib$parser$$yy_state_19(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_20);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_22);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_28);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_31);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_33);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_36);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_22(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 17: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_23);
      }
      case 16: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_24);
      }
      case 15: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_25);
      }
      case 20: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_26);
      }
      case 0: {
        break _L;
      }
      case 1: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 7: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 9: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 24: {
        break _L;
      }
      case 25: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 42, moonbitlang$ulex$lib$parser$$yy_action_27);
}
function moonbitlang$ulex$lib$parser$$yy_state_26(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_27);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_28(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 20: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_29);
      }
      case 0: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 40, moonbitlang$ulex$lib$parser$$yy_action_9);
}
function moonbitlang$ulex$lib$parser$$yy_state_29(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_30);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_31(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 9: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
      }
      case 1: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
      }
      case 5: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
      }
      case 25: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
      }
      case 24: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
      }
      case 23: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
      }
      case 44: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
      }
      case 7: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
      }
      case 43: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_22);
      }
      case 41: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_28);
      }
      case 42: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_31);
      }
      case 40: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_32);
      }
      case 0: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 40, moonbitlang$ulex$lib$parser$$yy_action_26);
}
function moonbitlang$ulex$lib$parser$$yy_state_33(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 14: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_34);
      }
      case 0: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 39, moonbitlang$ulex$lib$parser$$yy_action_17);
}
function moonbitlang$ulex$lib$parser$$yy_state_34(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_22);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_28);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_31);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_33);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_35);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_13(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Regex$46$YYObj__Context______type_Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_39(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 37, moonbitlang$ulex$lib$parser$$yy_action_13);
}
function moonbitlang$ulex$lib$parser$$Context$define_regex(self, name, regex) {
  return { named_regexes: moonbitlang$core$immut$sorted_map$$T$add$82$(self.named_regexes, name, regex) };
}
function moonbitlang$ulex$lib$parser$$yy_action_39(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 1)._0;
  if (_bind.$tag === 8) {
    const _YYObj_String = _bind;
    const __dollar2 = _YYObj_String._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 3)._0;
    if (_bind$2.$tag === 12) {
      const _YYObj__Context______type_Regex = _bind$2;
      const __dollar4 = _YYObj__Context______type_Regex._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_____Context$46$YYObj__Context_____Context((ctx) => moonbitlang$ulex$lib$parser$$Context$define_regex(ctx, __dollar2, __dollar4(ctx)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_50(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(5, 32, moonbitlang$ulex$lib$parser$$yy_action_39);
}
function moonbitlang$ulex$lib$parser$$yy_state_49(_lookahead) {
  if (_lookahead === 12) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_50);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_48(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_22);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_28);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_31);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_33);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_36);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_39);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_49);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_47(_lookahead) {
  if (_lookahead === 11) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_48);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_46(_lookahead) {
  if (_lookahead === 23) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_47);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_23(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 1)._0;
  if (_bind.$tag === 11) {
    const _YYObj__Context_____Context = _bind;
    const __dollar2 = _YYObj__Context_____Context._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
    if (_bind$2.$tag === 11) {
      const _YYObj__Context_____Context$2 = _bind$2;
      const __dollar1 = _YYObj__Context_____Context$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_____Context$46$YYObj__Context_____Context((ctx) => __dollar2(__dollar1(ctx)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_52(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 31, moonbitlang$ulex$lib$parser$$yy_action_23);
}
function moonbitlang$ulex$lib$parser$$yy_state_51(_lookahead) {
  switch (_lookahead) {
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_46);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_51);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_52);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(0, 31, moonbitlang$ulex$lib$parser$$yy_action_22);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_18(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______immut_list_T___type_Regex__String____type_CodeBlock__$46$YYObj__Context______immut_list_T___type_Regex__String____type_CodeBlock__((_ctx) => $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$33$);
}
function moonbitlang$ulex$lib$parser$$yy_action_10(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 12) {
    const _YYObj__Context______type_Regex = _bind;
    const __dollar1 = _YYObj__Context______type_Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 2)._0;
    if (_bind$2.$tag === 8) {
      const _YYObj_String = _bind$2;
      const __dollar3 = _YYObj_String._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context_______type_Regex__String____type_CodeBlock_$46$YYObj__Context_______type_Regex__String____type_CodeBlock_((ctx) => ({ _0: __dollar1(ctx), _1: undefined, _2: __dollar3 }));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_58(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(3, 36, moonbitlang$ulex$lib$parser$$yy_action_10);
}
function moonbitlang$ulex$lib$parser$$yy_state_57(_lookahead) {
  if (_lookahead === 22) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_58);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_56(_lookahead) {
  if (_lookahead === 13) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_57);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_16(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 15) {
    const _YYObj__Context_______type_Regex__String____type_CodeBlock_ = _bind;
    const __dollar1 = _YYObj__Context_______type_Regex__String____type_CodeBlock_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 1)._0;
    if (_bind$2.$tag === 14) {
      const _YYObj__Context______immut_list_T___type_Regex__String____type_CodeBlock__ = _bind$2;
      const __dollar2 = _YYObj__Context______immut_list_T___type_Regex__String____type_CodeBlock__._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______immut_list_T___type_Regex__String____type_CodeBlock__$46$YYObj__Context______immut_list_T___type_Regex__String____type_CodeBlock__((ctx) => new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$33$(__dollar1(ctx), __dollar2(ctx)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_60(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 35, moonbitlang$ulex$lib$parser$$yy_action_16);
}
function moonbitlang$ulex$lib$parser$$yy_state_59(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_22);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_28);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_31);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_33);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_36);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_39);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_56);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_59);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_60);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(0, 35, moonbitlang$ulex$lib$parser$$yy_action_18);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_28(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 7) {
    const _YYObj__String__String_ = _bind;
    const __dollar1 = _YYObj__String__String_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 2)._0;
    if (_bind$2.$tag === 14) {
      const _YYObj__Context______immut_list_T___type_Regex__String____type_CodeBlock__ = _bind$2;
      const __dollar3 = _YYObj__Context______immut_list_T___type_Regex__String____type_CodeBlock__._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Rule$46$YYObj__Context______type_Rule((ctx) => ({ name: __dollar1._0, signature: __dollar1._1, lexee: "lexbuf", patterns: moonbitlang$core$immut$list$$T$to_array$98$(__dollar3(ctx)) }));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_63(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(5, 34, moonbitlang$ulex$lib$parser$$yy_action_28);
}
function moonbitlang$ulex$lib$parser$$yy_state_62(_lookahead) {
  if (_lookahead === 6) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_63);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_61(_lookahead) {
  if (_lookahead === 6) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_62);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_55(_lookahead) {
  switch (_lookahead) {
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_13);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_14);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_15);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_16);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_17);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_18);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_19);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_22);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_28);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_31);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_33);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_36);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_39);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_56);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_59);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_61);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(0, 35, moonbitlang$ulex$lib$parser$$yy_action_18);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_54(_lookahead) {
  if (_lookahead === 2) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_55);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_19(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 16) {
    const _YYObj__Context______type_Rule = _bind;
    const __dollar1 = _YYObj__Context______type_Rule._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______immut_list_T__type_Rule_$46$YYObj__Context______immut_list_T__type_Rule_((ctx) => new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$34$(__dollar1(ctx), $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$34$));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_30(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 16) {
    const _YYObj__Context______type_Rule = _bind;
    const __dollar1 = _YYObj__Context______type_Rule._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 1)._0;
    if (_bind$2.$tag === 17) {
      const _YYObj__Context______immut_list_T__type_Rule_ = _bind$2;
      const __dollar2 = _YYObj__Context______immut_list_T__type_Rule_._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______immut_list_T__type_Rule_$46$YYObj__Context______immut_list_T__type_Rule_((ctx) => new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$34$(__dollar1(ctx), __dollar2(ctx)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_65(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 33, moonbitlang$ulex$lib$parser$$yy_action_30);
}
function moonbitlang$ulex$lib$parser$$yy_state_64(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 21: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_54);
      }
      case 34: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_64);
      }
      case 33: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_65);
      }
      case 0: {
        break _L;
      }
      case 22: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(1, 33, moonbitlang$ulex$lib$parser$$yy_action_19);
}
function moonbitlang$ulex$lib$parser$$yy_action_40(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String("");
}
function moonbitlang$ulex$lib$parser$$yy_action_31(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 8) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj_String$46$YYObj_String(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_67(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(1, 30, moonbitlang$ulex$lib$parser$$yy_action_31);
}
function moonbitlang$ulex$lib$parser$$yy_action_20(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 1)._0;
  if (_bind.$tag === 11) {
    const _YYObj__Context_____Context = _bind;
    const __dollar2 = _YYObj__Context_____Context._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
    if (_bind$2.$tag === 8) {
      const _YYObj_String = _bind$2;
      const __dollar1 = _YYObj_String._0;
      const _bind$3 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 2)._0;
      if (_bind$3.$tag === 17) {
        const _YYObj__Context______immut_list_T__type_Rule_ = _bind$3;
        const __dollar3 = _YYObj__Context______immut_list_T__type_Rule_._0;
        const _bind$4 = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 3)._0;
        if (_bind$4.$tag === 8) {
          const _YYObj_String$2 = _bind$4;
          const __dollar4 = _YYObj_String$2._0;
          return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Lex$46$YYObj__Context______type_Lex((ctx) => {
            const ctx$2 = __dollar2(ctx);
            return { header: __dollar1, rules: moonbitlang$core$immut$list$$T$to_array$97$(__dollar3(ctx$2)), trailer: __dollar4 };
          });
        } else {
          return $panic();
        }
      } else {
        return $panic();
      }
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_68(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(4, 28, moonbitlang$ulex$lib$parser$$yy_action_20);
}
function moonbitlang$ulex$lib$parser$$yy_state_66(_lookahead) {
  switch (_lookahead) {
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_67);
    }
    case 30: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_68);
    }
    case 0: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(0, 30, moonbitlang$ulex$lib$parser$$yy_action_40);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_53(_lookahead) {
  switch (_lookahead) {
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_54);
    }
    case 34: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_64);
    }
    case 33: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_66);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_45(_lookahead) {
  switch (_lookahead) {
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_46);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_51);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_53);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(0, 31, moonbitlang$ulex$lib$parser$$yy_action_22);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$parser$$yy_action_37(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$14$(_args, 0)._0;
  if (_bind.$tag === 10) {
    const _YYObj__Context______type_Lex = _bind;
    const __dollar1 = _YYObj__Context______type_Lex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$parser$46$YYObj__Context______type_Lex$46$YYObj__Context______type_Lex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_70(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$ReduceNoLookahead(2, 26, moonbitlang$ulex$lib$parser$$yy_action_37);
}
function moonbitlang$ulex$lib$parser$$yy_state_69(_lookahead) {
  if (_lookahead === 0) {
    return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_70);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$parser$$yy_state_42(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 26: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_43);
      }
      case 22: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_44);
      }
      case 29: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_45);
      }
      case 28: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$parser$$yy_state_69);
      }
      case 0: {
        return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(0, 28, moonbitlang$ulex$lib$parser$$yy_action_33);
      }
      case 3: {
        break _L;
      }
      case 21: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$parser$46$YYDecision$Reduce(0, 29, moonbitlang$ulex$lib$parser$$yy_action_34);
}
function moonbitlang$ulex$lib$parser$$lex_eoi(read_token, start_pos) {
  return moonbitlang$ulex$lib$parser$$yy_parse$207$(read_token, start_pos, moonbitlang$ulex$lib$parser$$yy_state_42, (_param9) => {
    if (_param9.$tag === 10) {
      const _YYObj__Context______type_Lex = _param9;
      const _result = _YYObj__Context______type_Lex._0;
      return _result;
    } else {
      return $panic();
    }
  });
}
function moonbitlang$ulex$lib$parser$$parse_lex_from_string(input) {
  const lexbuf = moonbitlang$ulex$45$runtime$lexbuf$$StringLexbuf$from_string(input);
  const _bind = moonbitlang$ulex$lib$parser$$lex_eoi(() => moonbitlang$ulex$lib$parser$$token$206$(lexbuf), 0);
  let _func;
  if (_bind.$tag === 1) {
    const _ok = _bind;
    _func = _ok._0;
  } else {
    return _bind;
  }
  return new Result$Ok$35$(_func({ named_regexes: $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$13$ }));
}
function moonbitlang$ulex$lib$parser$$Token$kind(self) {
  switch (self.$tag) {
    case 0: {
      return 0;
    }
    case 1: {
      return 1;
    }
    case 2: {
      return 2;
    }
    case 3: {
      return 3;
    }
    case 4: {
      return 4;
    }
    case 5: {
      return 5;
    }
    case 6: {
      return 6;
    }
    case 7: {
      return 7;
    }
    case 8: {
      return 8;
    }
    case 9: {
      return 9;
    }
    case 10: {
      return 10;
    }
    case 11: {
      return 11;
    }
    case 12: {
      return 12;
    }
    case 13: {
      return 13;
    }
    case 14: {
      return 14;
    }
    case 15: {
      return 15;
    }
    case 16: {
      return 16;
    }
    case 17: {
      return 17;
    }
    case 18: {
      return 18;
    }
    case 19: {
      return 19;
    }
    case 20: {
      return 20;
    }
    case 21: {
      return 21;
    }
    case 22: {
      return 22;
    }
    case 23: {
      return 23;
    }
    case 24: {
      return 24;
    }
    default: {
      return 25;
    }
  }
}
function moonbitlang$core$builtin$$Show$output$183$(self, logger) {
  let _tmp;
  switch (self) {
    case 0: {
      _tmp = "EOI";
      break;
    }
    case 1: {
      _tmp = "\"eof\"";
      break;
    }
    case 2: {
      _tmp = "\"parse {\"";
      break;
    }
    case 3: {
      _tmp = "\"regex\"";
      break;
    }
    case 4: {
      _tmp = "\"as\"";
      break;
    }
    case 5: {
      _tmp = "\"_\"";
      break;
    }
    case 6: {
      _tmp = "\"}\"";
      break;
    }
    case 7: {
      _tmp = "\"(\"";
      break;
    }
    case 8: {
      _tmp = "\")\"";
      break;
    }
    case 9: {
      _tmp = "\"[\"";
      break;
    }
    case 10: {
      _tmp = "\"]\"";
      break;
    }
    case 11: {
      _tmp = "\"=\"";
      break;
    }
    case 12: {
      _tmp = "\";\"";
      break;
    }
    case 13: {
      _tmp = "\"=>\"";
      break;
    }
    case 14: {
      _tmp = "\"|\"";
      break;
    }
    case 15: {
      _tmp = "\"*\"";
      break;
    }
    case 16: {
      _tmp = "\"+\"";
      break;
    }
    case 17: {
      _tmp = "\"?\"";
      break;
    }
    case 18: {
      _tmp = "\"-\"";
      break;
    }
    case 19: {
      _tmp = "\"^\"";
      break;
    }
    case 20: {
      _tmp = "BACKSLASH";
      break;
    }
    case 21: {
      _tmp = "RULE_LC_IDENT_LPAREN_CODE_RPAREN_ARROW_CODE_LBRACE";
      break;
    }
    case 22: {
      _tmp = "LBRACE_CODE_RBRACE";
      break;
    }
    case 23: {
      _tmp = "LC_IDENT";
      break;
    }
    case 24: {
      _tmp = "CHAR";
      break;
    }
    default: {
      _tmp = "STRING";
    }
  }
  logger.method_0(logger.self, _tmp);
}
(() => {
})();
function moonbitlang$core$builtin$$Hash$hash_combine$3$(_x_68, _x_69) {
  moonbitlang$core$builtin$$Hash$hash_combine$7$(_x_68, _x_69);
}
function moonbitlang$core$builtin$$Eq$op_equal$55$(_x_58, _x_59) {
  return moonbitlang$core$builtin$$Eq$op_equal$204$(_x_58, _x_59);
}
function moonbitlang$core$builtin$$Compare$compare$55$(_x_54, _x_55) {
  return moonbitlang$core$builtin$$Compare$compare$204$(_x_54, _x_55);
}
function moonbitlang$core$builtin$$Hash$hash_combine$55$(_x_50, _x_51) {
  moonbitlang$core$builtin$$Hash$hash_combine$204$(_x_50, _x_51);
}
function moonbitlang$ulex$lib$util$bounded_enum$$BoundedEnum$pred$3$(self) {
  return self > -1 ? self - 1 | 0 : $panic();
}
function moonbitlang$ulex$lib$util$bounded_enum$$BoundedEnum$succ$3$(self) {
  return self < 1114111 ? self + 1 | 0 : $panic();
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofChar$repr(self) {
  return self === -1 ? $64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Eof : new $64$moonbitlang$47$ulex$47$lib$47$util$47$eof_char_set$46$EofCharRepr$Char(self);
}
function moonbitlang$ulex$lib$util$eof_char_set$$range(min, max) {
  return moonbitlang$ulex$lib$util$diet$$interval$3$(min, max);
}
function moonbitlang$ulex$lib$util$eof_char_set$$from_char_set(cset) {
  const result = { val: moonbitlang$ulex$lib$util$eof_char_set$$empty };
  const _bind = moonbitlang$ulex$lib$util$char_set$$CharSet$iter_ranges(cset);
  _bind((r) => {
    result.val = moonbitlang$core$builtin$$Add$op_add$55$(result.val, moonbitlang$ulex$lib$util$eof_char_set$$range(r._0, r._1));
    return 1;
  });
  return result.val;
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$is_empty(self) {
  return moonbitlang$ulex$lib$util$diet$$Tree$is_empty$3$(self);
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$union(self, other) {
  return moonbitlang$ulex$lib$util$diet$$union$3$(self, other);
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$intersection(self, other) {
  return moonbitlang$ulex$lib$util$diet$$intersection$3$(self, other);
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$difference(self, other) {
  return moonbitlang$ulex$lib$util$diet$$difference$3$(self, other);
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$subset(self, other) {
  return moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$is_empty(moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$difference(self, other));
}
function moonbitlang$core$builtin$$Add$op_add$55$(self, other) {
  return moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$union(self, other);
}
function moonbitlang$core$builtin$$Sub$op_sub$55$(self, other) {
  return moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$difference(self, other);
}
function moonbitlang$core$builtin$$BitAnd$land$55$(self, other) {
  return moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$intersection(self, other);
}
function moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$iter_ranges(self) {
  return moonbitlang$ulex$lib$util$diet$$Tree$iter_intervals$3$(self);
}
function moonbitlang$core$builtin$$Compare$compare$201$(_x_668, _x_669) {
  if (_x_668 === 0) {
    if (_x_669 === 0) {
      return 0;
    } else {
      return -1;
    }
  } else {
    if (_x_669 === 0) {
      return 1;
    } else {
      return 0;
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$95$(_x_656, _x_657) {
  return moonbitlang$core$builtin$$Eq$op_equal$93$(_x_656, _x_657);
}
function moonbitlang$core$builtin$$Hash$hash_combine$95$(_x_648, _x_649) {
  moonbitlang$core$builtin$$Hash$hash_combine$93$(_x_648, _x_649);
}
function moonbitlang$core$builtin$$Compare$compare$95$(_x_644, _x_645) {
  return moonbitlang$core$builtin$$Compare$compare$93$(_x_644, _x_645);
}
function moonbitlang$core$builtin$$Eq$op_equal$148$(_x_624, _x_625) {
  if (_x_624.$tag === 0) {
    const _Dynamic_dfa = _x_624;
    const _$42$x0_626 = _Dynamic_dfa._0;
    if (_x_625.$tag === 0) {
      const _Dynamic_dfa$2 = _x_625;
      const _$42$y0_627 = _Dynamic_dfa$2._0;
      return _$42$x0_626._0 === _$42$y0_627._0 && _$42$x0_626._1 === _$42$y0_627._1;
    } else {
      return false;
    }
  } else {
    const _Static_dfa = _x_624;
    const _$42$x0_628 = _Static_dfa._0;
    if (_x_625.$tag === 1) {
      const _Static_dfa$2 = _x_625;
      const _$42$y0_629 = _Static_dfa$2._0;
      return moonbitlang$core$builtin$$Eq$op_equal$208$(_$42$x0_628, _$42$y0_629);
    } else {
      return false;
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$41$(_x_608, _x_609) {
  return moonbitlang$core$builtin$$Eq$op_equal$150$(_x_608, _x_609);
}
function moonbitlang$core$builtin$$Compare$compare$41$(_x_604, _x_605) {
  return moonbitlang$core$builtin$$Compare$compare$150$(_x_604, _x_605);
}
function moonbitlang$core$builtin$$Eq$op_equal$25$(_x_578, _x_579) {
  if (_x_578.$tag === 0) {
    const _Set = _x_578;
    const _$42$x0_580 = _Set._0;
    if (_x_579.$tag === 0) {
      const _Set$2 = _x_579;
      const _$42$y0_581 = _Set$2._0;
      return _$42$x0_580._0 === _$42$y0_581._0 && _$42$x0_580._1 === _$42$y0_581._1;
    } else {
      return false;
    }
  } else {
    const _Copy = _x_578;
    const _$42$x0_582 = _Copy._0;
    const _$42$x1_583 = _Copy._1;
    if (_x_579.$tag === 1) {
      const _Copy$2 = _x_579;
      const _$42$y0_584 = _Copy$2._0;
      const _$42$y1_585 = _Copy$2._1;
      return _$42$x0_582._0 === _$42$y0_584._0 && _$42$x0_582._1 === _$42$y0_584._1 && (_$42$x1_583._0 === _$42$y1_585._0 && _$42$x1_583._1 === _$42$y1_585._1);
    } else {
      return false;
    }
  }
}
function moonbitlang$core$builtin$$Compare$compare$25$(_x_560, _x_561) {
  if (_x_560.$tag === 0) {
    const _Set = _x_560;
    const _$42$x0_562 = _Set._0;
    if (_x_561.$tag === 0) {
      const _Set$2 = _x_561;
      const _$42$y0_563 = _Set$2._0;
      return moonbitlang$core$builtin$$Compare$compare$46$(_$42$x0_562, _$42$y0_563);
    } else {
      return -1;
    }
  } else {
    const _Copy = _x_560;
    const _$42$x0_564 = _Copy._0;
    const _$42$x1_565 = _Copy._1;
    if (_x_561.$tag === 0) {
      return 1;
    } else {
      const _Copy$2 = _x_561;
      const _$42$y0_566 = _Copy$2._0;
      const _$42$y1_567 = _Copy$2._1;
      const _bind = moonbitlang$core$builtin$$Compare$compare$46$(_$42$x0_564, _$42$y0_566);
      if (_bind === 0) {
        return moonbitlang$core$builtin$$Compare$compare$46$(_$42$x1_565, _$42$y1_567);
      } else {
        return _bind;
      }
    }
  }
}
function moonbitlang$core$builtin$$Eq$op_equal$208$(_x_504, _x_505) {
  if (_x_504.$tag === 0) {
    const _RelativeToStart = _x_504;
    const _$42$x0_506 = _RelativeToStart._0;
    if (_x_505.$tag === 0) {
      const _RelativeToStart$2 = _x_505;
      const _$42$y0_507 = _RelativeToStart$2._0;
      return _$42$x0_506 === _$42$y0_507;
    } else {
      return false;
    }
  } else {
    const _RelativeToEnd = _x_504;
    const _$42$x0_508 = _RelativeToEnd._0;
    if (_x_505.$tag === 1) {
      const _RelativeToEnd$2 = _x_505;
      const _$42$y0_509 = _RelativeToEnd$2._0;
      return _$42$x0_508 === _$42$y0_509;
    } else {
      return false;
    }
  }
}
function moonbitlang$ulex$lib$automaton$$get_regex_static_known_tag_positions(re) {
  let map = $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$21$;
  const queue = [{ _0: re, _1: 0 }];
  while (true) {
    const _bind = moonbitlang$core$array$$Array$pop$188$(queue);
    if (_bind === undefined) {
      break;
    } else {
      const _Some = _bind;
      const _x = _Some;
      const _re = _x._0;
      const _offset = _x._1;
      const _bind$2 = _re.desc;
      switch (_bind$2.$tag) {
        case 3: {
          break;
        }
        case 0: {
          break;
        }
        case 1: {
          break;
        }
        case 6: {
          const _Capture = _bind$2;
          const _re$2 = _Capture._0;
          const _name = _Capture._1;
          moonbitlang$core$array$$Array$push$188$(queue, { _0: _re$2, _1: _offset });
          map = moonbitlang$core$immut$sorted_map$$T$add$87$(map, { _0: _name, _1: 1 }, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToEnd(_offset));
          const _bind$3 = _re$2.len;
          if (_bind$3 === undefined) {
          } else {
            const _Some$2 = _bind$3;
            const _len = _Some$2;
            map = moonbitlang$core$immut$sorted_map$$T$add$87$(map, { _0: _name, _1: 0 }, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToEnd(_offset - _len | 0));
          }
          break;
        }
        case 5: {
          const _Concat = _bind$2;
          const _re1 = _Concat._0;
          const _re2 = _Concat._1;
          moonbitlang$core$array$$Array$push$188$(queue, { _0: _re2, _1: _offset });
          const _bind$4 = _re2.len;
          if (_bind$4 === undefined) {
          } else {
            const _Some$2 = _bind$4;
            const _len = _Some$2;
            moonbitlang$core$array$$Array$push$188$(queue, { _0: _re1, _1: _offset - _len | 0 });
          }
          break;
        }
        case 4: {
          const _Alter = _bind$2;
          const _re1$2 = _Alter._0;
          const _re2$2 = _Alter._1;
          moonbitlang$core$array$$Array$push$188$(queue, { _0: _re1$2, _1: _offset });
          moonbitlang$core$array$$Array$push$188$(queue, { _0: _re2$2, _1: _offset });
          break;
        }
      }
      continue;
    }
  }
  const queue$2 = [{ _0: re, _1: 0 }];
  while (true) {
    const _bind = moonbitlang$core$array$$Array$pop$188$(queue$2);
    if (_bind === undefined) {
      break;
    } else {
      const _Some = _bind;
      const _x = _Some;
      const _re = _x._0;
      const _offset = _x._1;
      const _bind$2 = _re.desc;
      switch (_bind$2.$tag) {
        case 3: {
          break;
        }
        case 0: {
          break;
        }
        case 1: {
          break;
        }
        case 6: {
          const _Capture = _bind$2;
          const _re$2 = _Capture._0;
          const _name = _Capture._1;
          moonbitlang$core$array$$Array$push$188$(queue$2, { _0: _re$2, _1: _offset });
          map = moonbitlang$core$immut$sorted_map$$T$add$87$(map, { _0: _name, _1: 0 }, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToStart(_offset));
          const _bind$3 = _re$2.len;
          if (_bind$3 === undefined) {
          } else {
            const _Some$2 = _bind$3;
            const _len = _Some$2;
            map = moonbitlang$core$immut$sorted_map$$T$add$87$(map, { _0: _name, _1: 1 }, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$StaticKnownTagPosition$RelativeToStart(_offset + _len | 0));
          }
          break;
        }
        case 5: {
          const _Concat = _bind$2;
          const _re1 = _Concat._0;
          const _re2 = _Concat._1;
          moonbitlang$core$array$$Array$push$188$(queue$2, { _0: _re1, _1: _offset });
          const _bind$4 = _re1.len;
          if (_bind$4 === undefined) {
          } else {
            const _Some$2 = _bind$4;
            const _len = _Some$2;
            moonbitlang$core$array$$Array$push$188$(queue$2, { _0: _re2, _1: _offset + _len | 0 });
          }
          break;
        }
        case 4: {
          const _Alter = _bind$2;
          const _re1$2 = _Alter._0;
          const _re2$2 = _Alter._1;
          moonbitlang$core$array$$Array$push$188$(queue$2, { _0: _re1$2, _1: _offset });
          moonbitlang$core$array$$Array$push$188$(queue$2, { _0: _re2$2, _1: _offset });
          break;
        }
      }
      continue;
    }
  }
  return map;
}
function moonbitlang$ulex$lib$automaton$$get_regex_captures(re, lowered_re) {
  const vars = moonbitlang$ulex$lib$regex$$get_capture_vars(re);
  const static_tag_positions = moonbitlang$ulex$lib$automaton$$get_regex_static_known_tag_positions(lowered_re);
  const _bind = moonbitlang$core$immut$sorted_map$$T$iter$86$(vars);
  const result = moonbitlang$core$builtin$$Iter$to_array$189$((_p) => _bind((_p$2) => {
    const _name = _p$2._0;
    const _re_class = _p$2._1;
    let var_type;
    if (_re_class === 0) {
      var_type = 0;
    } else {
      var_type = 1;
    }
    const start_pos = moonbitlang$core$immut$sorted_map$$T$get$87$(static_tag_positions, { _0: _name, _1: 0 });
    const end_pos = moonbitlang$core$immut$sorted_map$$T$get$87$(static_tag_positions, { _0: _name, _1: 1 });
    return _p({ _0: _name, _1: { _0: var_type, _1: { _0: start_pos, _1: end_pos } } });
  }));
  return result;
}
function moonbitlang$ulex$lib$automaton$$TagState$new() {
  return $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$19$;
}
function moonbitlang$ulex$lib$automaton$$TagState$update_by_tag(self, tag, rank) {
  const _bind = moonbitlang$core$immut$sorted_map$$T$get$79$(self, tag);
  if (_bind === undefined) {
    return moonbitlang$core$immut$sorted_map$$T$add$79$(self, tag, rank);
  } else {
    const _Some = _bind;
    const _old_rank = _Some;
    return _old_rank > rank ? moonbitlang$core$immut$sorted_map$$T$add$79$(self, tag, rank) : self;
  }
}
function moonbitlang$ulex$lib$automaton$$TagState$update_by_tags(self, tags) {
  const state = { val: self };
  const _bind = moonbitlang$core$immut$sorted_set$$T$iter$7$(tags);
  _bind((tag) => {
    state.val = moonbitlang$ulex$lib$automaton$$TagState$update_by_tag(state.val, tag, -1);
    return 1;
  });
  return state.val;
}
function moonbitlang$ulex$lib$automaton$$tagState_min(self_, other) {
  const tags = moonbitlang$core$builtin$$Add$op_add$58$(moonbitlang$core$immut$sorted_set$$from_array$7$(moonbitlang$core$immut$sorted_map$$T$keys$79$(self_)), moonbitlang$core$immut$sorted_set$$from_array$7$(moonbitlang$core$immut$sorted_map$$T$keys$79$(other)));
  const _foreach_result = { val: $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$36$ };
  const _bind = moonbitlang$core$immut$sorted_set$$T$iter$7$(tags);
  _bind((tag) => {
    const _bind$2 = moonbitlang$core$immut$sorted_map$$T$get$79$(self_, tag);
    const _bind$3 = moonbitlang$core$immut$sorted_map$$T$get$79$(other, tag);
    if (_bind$2 === undefined) {
      _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$36$(other);
      return 0;
    } else {
      if (_bind$3 === undefined) {
        _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$36$(self_);
        return 0;
      } else {
        const _Some = _bind$2;
        const _r1 = _Some;
        const _Some$2 = _bind$3;
        const _r2 = _Some$2;
        if (_r1 !== _r2) {
          _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Break$36$(_r1 < _r2 ? self_ : other);
          return 0;
        }
      }
    }
    return 1;
  });
  const _tmp = _foreach_result.val;
  switch (_tmp.$tag) {
    case 0: {
      return self_;
    }
    case 1: {
      const _break = _tmp;
      return _break._0;
    }
    case 2: {
      const _return = _tmp;
      return _return._0;
    }
    case 3: {
      return $panic();
    }
    default: {
      return $panic();
    }
  }
}
function moonbitlang$ulex$lib$automaton$$DFA$new(code_blocks, captures) {
  const _bind = [];
  const _bind$2 = moonbitlang$core$builtin$$Map$from_array$160$([]);
  const _bind$3 = moonbitlang$core$builtin$$Map$new$156$(8);
  return { graph: _bind, start_node: -1, tag_actions: _bind$2, end_nodes: _bind$3, code_blocks: code_blocks, captures: captures, node_count: 0 };
}
function moonbitlang$ulex$lib$automaton$$DFA$new_node(self) {
  const id = self.node_count;
  self.node_count = self.node_count + 1 | 0;
  moonbitlang$core$array$$Array$push$140$(self.graph, []);
  return id;
}
function moonbitlang$ulex$lib$automaton$$DFA$add_edge(self, from, e, to) {
  const _arr = moonbitlang$core$array$$Array$op_get$140$(self.graph, from);
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const tran = _arr[_i];
      if (moonbitlang$core$builtin$$Eq$op_equal$55$(tran._0, e) && tran._1 === to) {
        return undefined;
      }
      if (moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$subset(e, tran._0)) {
        $panic();
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$array$$Array$push$185$(moonbitlang$core$array$$Array$op_get$140$(self.graph, from), { _0: e, _1: to });
}
function moonbitlang$ulex$lib$automaton$$state_canonicalize(state, tag_count) {
  const mat = moonbitlang$core$array$$Array$makei$36$(tag_count, (_i) => []);
  const _bind = moonbitlang$core$immut$sorted_map$$T$iter$77$(state);
  _bind((pair) => {
    const tags = pair._1;
    const _bind$2 = moonbitlang$core$immut$sorted_map$$T$iter2$79$(tags);
    _bind$2((tag, rank) => {
      moonbitlang$core$array$$Array$push$7$(moonbitlang$core$array$$Array$op_get$36$(mat, tag), rank);
      return 1;
    });
    return 1;
  });
  const _p = mat.length;
  let _tmp = 0;
  while (true) {
    const _p$2 = _tmp;
    if (_p$2 < _p) {
      const _p$3 = mat[_p$2];
      const x = _p$3;
      moonbitlang$core$array$$Array$op_set$36$(mat, _p$2, moonbitlang$core$sorted_set$$T$to_array$7$(moonbitlang$core$sorted_set$$from_iter$7$(moonbitlang$core$array$$Array$iter$7$(x))));
      _tmp = _p$2 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _bind$2 = moonbitlang$core$immut$sorted_map$$T$iter$77$(state);
  const new_state = moonbitlang$core$immut$sorted_map$$from_iter$77$((_p$2) => _bind$2((_p$3) => {
    const tags = moonbitlang$core$immut$sorted_map$$T$map_with_key$89$(_p$3._1, (tag, x) => {
      const _arr = moonbitlang$core$array$$Array$op_get$36$(mat, tag);
      const _len = _arr.length;
      let _tmp$2 = 0;
      while (true) {
        const _i = _tmp$2;
        if (_i < _len) {
          const y = _arr[_i];
          if (x === y) {
            return _i;
          }
          _tmp$2 = _i + 1 | 0;
          continue;
        } else {
          return moonbitlang$core$abort$$abort$7$("unreachable");
        }
      }
    });
    return _p$2({ _0: _p$3._0, _1: tags });
  }));
  const tag_action = [];
  const _len = mat.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len) {
      const ops = mat[_i];
      const _len$2 = ops.length;
      let _tmp$3 = 0;
      while (true) {
        const _i$2 = _tmp$3;
        if (_i$2 < _len$2) {
          const src_rank = ops[_i$2];
          if (src_rank === -1) {
            moonbitlang$core$array$$Array$push$25$(tag_action, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Set({ _0: _i, _1: _i$2 }));
          } else {
            if (_i$2 !== src_rank) {
              moonbitlang$core$array$$Array$push$25$(tag_action, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Copy({ _0: _i, _1: _i$2 }, { _0: _i, _1: src_rank }));
            }
          }
          _tmp$3 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$array$$Array$sort$25$(tag_action);
  return { _0: new_state, _1: tag_action };
}
function moonbitlang$ulex$lib$automaton$$DFA$register_node(self, nfa, node, os) {
  const code_blocks = moonbitlang$core$builtin$$Iter$collect$7$(moonbitlang$core$builtin$$Iter$filter_map$203$(moonbitlang$core$immut$sorted_map$$T$iter$77$(os), (x) => moonbitlang$core$builtin$$Map$get$79$(nfa.end_nodes, x._0.num)));
  if (!(code_blocks.length === 0)) {
    const _p = moonbitlang$core$array$$Array$op_get$7$(code_blocks, 0);
    let min_code_block;
    let _tmp = 0;
    let _tmp$2 = _p;
    while (true) {
      const _p$2 = _tmp;
      const _p$3 = _tmp$2;
      if (_p$2 < code_blocks.length) {
        const _tmp$3 = _p$2 + 1 | 0;
        const _tmp$4 = moonbitlang$core$math$$minimum$7$(_p$3, moonbitlang$core$array$$Array$op_get$7$(code_blocks, _p$2));
        _tmp = _tmp$3;
        _tmp$2 = _tmp$4;
        continue;
      } else {
        min_code_block = _p$3;
        break;
      }
    }
    const _bind = moonbitlang$core$immut$sorted_map$$T$iter$77$(os);
    const end_nodes = moonbitlang$core$builtin$$Iter$to_array$56$((_p$2) => _bind((_p$3) => moonbitlang$core$builtin$$Eq$op_equal$109$(moonbitlang$core$builtin$$Map$get$79$(nfa.end_nodes, _p$3._0.num), min_code_block) ? _p$2(_p$3) : 1));
    if (end_nodes.length === 1) {
      const tagState = moonbitlang$core$array$$Array$op_get$56$(end_nodes, 0)._1;
      const _p$2 = moonbitlang$core$array$$Array$op_get$143$(nfa.captures, min_code_block)._0;
      const _p$3 = new Array(_p$2.length);
      const _p$4 = _p$2.length;
      let _tmp$3 = 0;
      while (true) {
        const _p$5 = _tmp$3;
        if (_p$5 < _p$4) {
          const _p$6 = _p$2[_p$5];
          const _param399 = _p$6;
          const _x = _param399._1;
          const _begin = _x._0;
          const _end = _x._1;
          let _tmp$4;
          if (_begin.$tag === 0) {
            const _Dynamic_nfa = _begin;
            const _tag = _Dynamic_nfa._0;
            _tmp$4 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Dynamic_dfa({ _0: _tag, _1: moonbitlang$core$option$$Option$unwrap$7$(moonbitlang$core$immut$sorted_map$$T$get$79$(tagState, _tag)) });
          } else {
            const _Static_nfa = _begin;
            const _info = _Static_nfa._0;
            _tmp$4 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Static_dfa(_info);
          }
          const _tmp$5 = _tmp$4;
          let _tmp$6;
          if (_end.$tag === 0) {
            const _Dynamic_nfa = _end;
            const _tag = _Dynamic_nfa._0;
            _tmp$6 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Dynamic_dfa({ _0: _tag, _1: moonbitlang$core$option$$Option$unwrap$7$(moonbitlang$core$immut$sorted_map$$T$get$79$(tagState, _tag)) });
          } else {
            const _Static_nfa = _end;
            const _info = _Static_nfa._0;
            _tmp$6 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Static_dfa(_info);
          }
          _p$3[_p$5] = { _0: _tmp$5, _1: _tmp$6 };
          _tmp$3 = _p$5 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const min_tags = _p$3;
      moonbitlang$core$builtin$$Map$set$156$(self.end_nodes, node, { _0: min_code_block, _1: min_tags });
      return;
    } else {
      moonbitlang$core$abort$$abort$4$("error");
      return;
    }
  } else {
    return;
  }
}
function moonbitlang$ulex$lib$automaton$$get_eps_closure$46$get_tags$124$4(result, n) {
  return moonbitlang$core$option$$Option$or$18$(moonbitlang$core$immut$sorted_map$$T$get$85$(result.val, n), $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$);
}
function moonbitlang$ulex$lib$automaton$$NFA$get_eps_closure(self) {
  const _p = self.graph;
  const _p$2 = new Array(_p.length);
  const _p$3 = _p.length;
  let _tmp = 0;
  while (true) {
    const _p$4 = _tmp;
    if (_p$4 < _p$3) {
      const _p$5 = _p[_p$4];
      const x = _p$5;
      const result = { val: moonbitlang$core$immut$sorted_map$$T$add$85$($64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$18$, x, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$) };
      const queue = moonbitlang$core$queue$$from_array$94$([x]);
      while (true) {
        const _bind = moonbitlang$core$queue$$T$pop$94$(queue);
        if (_bind === undefined) {
          break;
        } else {
          const _Some = _bind;
          const _o = _Some;
          const o_tags = moonbitlang$ulex$lib$automaton$$get_eps_closure$46$get_tags$124$4(result, _o);
          const _bind$2 = moonbitlang$core$immut$sorted_set$$T$iter$57$(_o.eps);
          _bind$2((e) => {
            const _u = e._0;
            const _tag = e._1;
            let new_u_tags = moonbitlang$core$immut$sorted_set$$T$union$7$(moonbitlang$ulex$lib$automaton$$get_eps_closure$46$get_tags$124$4(result, _u), o_tags);
            if (_tag === undefined) {
            } else {
              const _Some$2 = _tag;
              const _tag$2 = _Some$2;
              new_u_tags = moonbitlang$core$immut$sorted_set$$T$add$7$(new_u_tags, _tag$2);
            }
            if (moonbitlang$core$builtin$$op_notequal$128$(new_u_tags, moonbitlang$core$immut$sorted_map$$T$get$85$(result.val, _u))) {
              result.val = moonbitlang$core$immut$sorted_map$$T$add$85$(result.val, _u, new_u_tags);
              moonbitlang$core$queue$$T$push$94$(queue, _u);
            }
            return 1;
          });
          continue;
        }
      }
      _p$2[_p$4] = result.val;
      _tmp = _p$4 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return _p$2;
}
function moonbitlang$ulex$lib$automaton$$from_nfa$46$get_id$124$324(_env, state) {
  const nfa = _env._3;
  const dfa = _env._2;
  const node_map = _env._1;
  const queue = _env._0;
  return moonbitlang$core$builtin$$Map$get_or_init$152$(node_map, state, () => {
    const node = moonbitlang$ulex$lib$automaton$$DFA$new_node(dfa);
    moonbitlang$ulex$lib$automaton$$DFA$register_node(dfa, nfa, node, state);
    moonbitlang$core$queue$$T$push$78$(queue, state);
    return node;
  });
}
function moonbitlang$ulex$lib$automaton$$from_nfa$46$42$func$124$1038(_env, _p) {
  const _bind = _env._1;
  const _tag_state = _env._0;
  return _bind((_p$2) => {
    const _cset = _p$2._0;
    const _target = _p$2._1;
    return _p({ _0: _cset, _1: { _0: _target, _1: _tag_state } });
  });
}
function moonbitlang$ulex$lib$automaton$$from_nfa$46$add_tran$124$348(new_nfa_trans, cset, targets) {
  if (!moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$is_empty(cset)) {
    moonbitlang$core$array$$Array$push$186$(new_nfa_trans, { _0: cset, _1: targets });
    return;
  } else {
    return;
  }
}
function moonbitlang$ulex$lib$automaton$$DFA$from_nfa(nfa) {
  const eps_closure = moonbitlang$ulex$lib$automaton$$NFA$get_eps_closure(nfa);
  const initial = moonbitlang$core$array$$Array$op_get$141$(eps_closure, nfa.start_node);
  const _bind = moonbitlang$core$immut$sorted_map$$T$iter$85$(initial);
  const initial_state = moonbitlang$core$immut$sorted_map$$from_iter$77$((_p) => _bind((_p$2) => {
    const _x = _p$2._0;
    const _y = _p$2._1;
    return _p({ _0: _x, _1: moonbitlang$ulex$lib$automaton$$TagState$update_by_tags(moonbitlang$ulex$lib$automaton$$TagState$new(), _y) });
  }));
  const _bind$2 = moonbitlang$ulex$lib$automaton$$state_canonicalize(initial_state, nfa.tag_count);
  const _initial_state = _bind$2._0;
  const _start_action = _bind$2._1;
  const _p = nfa.captures;
  const _p$2 = new Array(_p.length);
  const _p$3 = _p.length;
  let _tmp = 0;
  while (true) {
    const _p$4 = _tmp;
    if (_p$4 < _p$3) {
      const _p$5 = _p[_p$4];
      const x = _p$5;
      const _p$6 = x._0;
      const _p$7 = new Array(_p$6.length);
      const _p$8 = _p$6.length;
      let _tmp$2 = 0;
      while (true) {
        const _p$9 = _tmp$2;
        if (_p$9 < _p$8) {
          const _p$10 = _p$6[_p$9];
          const y = _p$10;
          _p$7[_p$9] = y._0;
          _tmp$2 = _p$9 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _p$2[_p$4] = { _0: _p$7, _1: x._1 };
      _tmp = _p$4 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const captures = _p$2;
  const dfa = moonbitlang$ulex$lib$automaton$$DFA$new(nfa.code_blocks, captures);
  const node_map = moonbitlang$core$builtin$$Map$new$152$(8);
  const queue = moonbitlang$core$queue$$new$78$();
  const _env = { _0: queue, _1: node_map, _2: dfa, _3: nfa };
  const start_node = moonbitlang$ulex$lib$automaton$$from_nfa$46$get_id$124$324(_env, _initial_state);
  dfa.start_node = start_node;
  moonbitlang$core$builtin$$Map$op_set$160$(dfa.tag_actions, start_node, _start_action);
  while (true) {
    const _bind$3 = moonbitlang$core$queue$$T$pop$78$(queue);
    if (_bind$3 === undefined) {
      break;
    } else {
      const _Some = _bind$3;
      const _cur_state = _Some;
      const from_n = moonbitlang$core$option$$Option$unwrap$7$(moonbitlang$core$builtin$$Map$get$152$(node_map, _cur_state));
      const _bind$4 = moonbitlang$core$immut$sorted_map$$T$iter$77$(_cur_state);
      const char_set_by_nfa_target = moonbitlang$core$builtin$$Map$from_array$159$([]);
      const _p$4 = (nfa_tran) => {
        const _cset = nfa_tran._0;
        const _target = nfa_tran._1;
        const _bind$5 = moonbitlang$core$builtin$$Map$get$159$(char_set_by_nfa_target, _target);
        if (_bind$5 === undefined) {
          moonbitlang$core$builtin$$Map$op_set$159$(char_set_by_nfa_target, _target, _cset);
        } else {
          const _Some$2 = _bind$5;
          const _old_cset = _Some$2;
          moonbitlang$core$builtin$$Map$op_set$159$(char_set_by_nfa_target, _target, moonbitlang$core$builtin$$Add$op_add$55$(_old_cset, _cset));
        }
        return 1;
      };
      _bind$4((_p$5) => {
        const _nfa_node = _p$5._0;
        const _tag_state = _p$5._1;
        const _bind$5 = moonbitlang$core$array$$Array$iter$190$(_nfa_node.trans);
        const _env$2 = { _0: _tag_state, _1: _bind$5 };
        return moonbitlang$ulex$lib$automaton$$from_nfa$46$42$func$124$1038(_env$2, _p$4);
      });
      const nfa_trans = { val: [] };
      const all_char_set = { val: moonbitlang$ulex$lib$util$eof_char_set$$empty };
      const _bind$5 = moonbitlang$core$builtin$$Map$iter2$159$(char_set_by_nfa_target);
      _bind$5((target, char_set) => {
        const targets = new $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Node$6$($64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$6$, 1, target);
        const new_nfa_trans = [];
        moonbitlang$ulex$lib$automaton$$from_nfa$46$add_tran$124$348(new_nfa_trans, moonbitlang$core$builtin$$Sub$op_sub$55$(char_set, all_char_set.val), targets);
        const _arr = nfa_trans.val;
        const _len = _arr.length;
        let _tmp$2 = 0;
        while (true) {
          const _i = _tmp$2;
          if (_i < _len) {
            const nfa_tran = _arr[_i];
            const _old_cset = nfa_tran._0;
            const _old_targets = nfa_tran._1;
            moonbitlang$ulex$lib$automaton$$from_nfa$46$add_tran$124$348(new_nfa_trans, moonbitlang$core$builtin$$BitAnd$land$55$(_old_cset, char_set), moonbitlang$core$builtin$$Add$op_add$61$(_old_targets, targets));
            moonbitlang$ulex$lib$automaton$$from_nfa$46$add_tran$124$348(new_nfa_trans, moonbitlang$core$builtin$$Sub$op_sub$55$(_old_cset, char_set), _old_targets);
            _tmp$2 = _i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        all_char_set.val = moonbitlang$core$builtin$$Add$op_add$55$(all_char_set.val, char_set);
        nfa_trans.val = new_nfa_trans;
        return 1;
      });
      const next_states = moonbitlang$core$builtin$$Map$new$153$(8);
      const _arr = nfa_trans.val;
      const _len = _arr.length;
      let _tmp$2 = 0;
      while (true) {
        const _i = _tmp$2;
        if (_i < _len) {
          const tran = _arr[_i];
          const _cset = tran._0;
          const _targets = tran._1;
          const _bind$6 = moonbitlang$core$immut$sorted_set$$T$iter$56$(_targets);
          _bind$6((target) => {
            const _step_node = target._0;
            const _from_tagState = target._1;
            const state_map = { val: moonbitlang$core$option$$Option$or_else$78$(moonbitlang$core$builtin$$Map$get$153$(next_states, _cset), () => $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$17$) };
            const _bind$7 = moonbitlang$core$immut$sorted_map$$T$iter$85$(moonbitlang$core$array$$Array$op_get$141$(eps_closure, _step_node.num));
            _bind$7((pair) => {
              const _eps_node = pair._0;
              const _tags = pair._1;
              const upd_tagState = moonbitlang$ulex$lib$automaton$$TagState$update_by_tags(_from_tagState, _tags);
              const old_tagState = moonbitlang$core$immut$sorted_map$$T$op_get$77$(state_map.val, _eps_node);
              let new_tagState;
              if (old_tagState === undefined) {
                new_tagState = upd_tagState;
              } else {
                const _Some$2 = old_tagState;
                const _old_tagState = _Some$2;
                new_tagState = moonbitlang$ulex$lib$automaton$$tagState_min(upd_tagState, _old_tagState);
              }
              state_map.val = moonbitlang$core$immut$sorted_map$$T$add$77$(state_map.val, _eps_node, new_tagState);
              return 1;
            });
            moonbitlang$core$builtin$$Map$op_set$153$(next_states, _cset, state_map.val);
            return 1;
          });
          _tmp$2 = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const trans = moonbitlang$core$builtin$$Iter$to_array$187$(moonbitlang$core$builtin$$Map$iter$153$(next_states));
      const _len$2 = trans.length;
      let _tmp$3 = 0;
      while (true) {
        const _i = _tmp$3;
        if (_i < _len$2) {
          const tran = trans[_i];
          const _cset = tran._0;
          const _state = tran._1;
          const _bind$6 = moonbitlang$ulex$lib$automaton$$state_canonicalize(_state, nfa.tag_count);
          const _state$2 = _bind$6._0;
          const _action = _bind$6._1;
          const to_n = moonbitlang$ulex$lib$automaton$$from_nfa$46$get_id$124$324(_env, _state$2);
          moonbitlang$core$builtin$$Map$op_set$160$(dfa.tag_actions, to_n, _action);
          moonbitlang$ulex$lib$automaton$$DFA$add_edge(dfa, from_n, _cset, to_n);
          _tmp$3 = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      continue;
    }
  }
  return dfa;
}
function moonbitlang$ulex$lib$automaton$$collect_symbols$46$check_add$124$113(new_temp_char_sets, temp_char_set) {
  if (!moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$is_empty(temp_char_set)) {
    new_temp_char_sets.val = moonbitlang$core$immut$sorted_set$$T$add$55$(new_temp_char_sets.val, temp_char_set);
    return;
  } else {
    return;
  }
}
function moonbitlang$ulex$lib$automaton$$collect_symbols(dfa) {
  let char_sets = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$;
  const _arr = dfa.graph;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const trans = _arr[_i];
      const _len$2 = trans.length;
      let _tmp$2 = 0;
      while (true) {
        const _i$2 = _tmp$2;
        if (_i$2 < _len$2) {
          const tran = trans[_i$2];
          const _input = tran._0;
          char_sets = moonbitlang$core$immut$sorted_set$$T$add$55$(char_sets, _input);
          _tmp$2 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const all_char_set = { val: moonbitlang$ulex$lib$util$eof_char_set$$empty };
  const temp_char_sets = { val: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$ };
  const _bind = moonbitlang$core$immut$sorted_set$$T$iter$55$(char_sets);
  _bind((char_set) => {
    const new_temp_char_sets = { val: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$4$ };
    moonbitlang$ulex$lib$automaton$$collect_symbols$46$check_add$124$113(new_temp_char_sets, moonbitlang$core$builtin$$Sub$op_sub$55$(char_set, all_char_set.val));
    const _bind$2 = moonbitlang$core$immut$sorted_set$$T$iter$55$(temp_char_sets.val);
    _bind$2((temp_char_set) => {
      moonbitlang$ulex$lib$automaton$$collect_symbols$46$check_add$124$113(new_temp_char_sets, moonbitlang$core$builtin$$BitAnd$land$55$(temp_char_set, char_set));
      moonbitlang$ulex$lib$automaton$$collect_symbols$46$check_add$124$113(new_temp_char_sets, moonbitlang$core$builtin$$Sub$op_sub$55$(temp_char_set, char_set));
      return 1;
    });
    all_char_set.val = moonbitlang$core$builtin$$Add$op_add$55$(all_char_set.val, char_set);
    temp_char_sets.val = new_temp_char_sets.val;
    return 1;
  });
  const next_symbol_id = { val: 0 };
  return moonbitlang$core$immut$sorted_set$$T$map$63$(temp_char_sets.val, (char_set) => {
    const symbol = { id: next_symbol_id.val, char_set: char_set };
    next_symbol_id.val = next_symbol_id.val + 1 | 0;
    return symbol;
  });
}
function moonbitlang$ulex$lib$automaton$$minimize$46$get_new_state$124$178(_env, state) {
  const state_to_new_state = _env._3;
  const new_dfa = _env._2;
  const partition_to_new_state = _env._1;
  const state_to_partition = _env._0;
  const partition = moonbitlang$core$option$$Option$unwrap$18$(moonbitlang$core$builtin$$Map$get$157$(state_to_partition, state));
  const _bind = moonbitlang$core$builtin$$Map$get$158$(partition_to_new_state, partition);
  if (_bind === undefined) {
    const new_state = moonbitlang$ulex$lib$automaton$$DFA$new_node(new_dfa);
    moonbitlang$core$builtin$$Map$op_set$158$(partition_to_new_state, partition, new_state);
    const _bind$2 = moonbitlang$core$immut$sorted_set$$T$iter$7$(partition);
    _bind$2((state$2) => {
      moonbitlang$core$builtin$$Map$op_set$79$(state_to_new_state, state$2, new_state);
      return 1;
    });
    return new_state;
  } else {
    const _Some = _bind;
    const _new_state = _Some;
    return _new_state;
  }
}
function moonbitlang$ulex$lib$automaton$$DFA$minimize(dfa) {
  const symbols = moonbitlang$ulex$lib$automaton$$collect_symbols(dfa);
  const all_states = moonbitlang$core$immut$sorted_set$$from_iter$7$(moonbitlang$core$int$$Int$until(0, dfa.graph.length - 1 | 0, 1, true));
  const final_states = moonbitlang$core$immut$sorted_set$$from_iter$7$(moonbitlang$core$builtin$$Map$keys$156$(dfa.end_nodes));
  const partitions = { val: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$3$ };
  const _end133 = dfa.code_blocks.length;
  let _tmp = 0;
  while (true) {
    const pattern_id = _tmp;
    if (pattern_id < _end133) {
      const groups = { val: $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$15$ };
      const _bind = moonbitlang$core$builtin$$Map$iter2$156$(dfa.end_nodes);
      _bind((end_node, end_node_info) => {
        const tag_action = moonbitlang$core$option$$Option$unwrap$41$(moonbitlang$core$builtin$$Map$get$160$(dfa.tag_actions, end_node));
        if (end_node_info._0 === pattern_id) {
          groups.val = moonbitlang$core$immut$sorted_map$$T$add$83$(groups.val, tag_action, moonbitlang$core$immut$sorted_set$$T$add$7$(moonbitlang$core$option$$Option$or$18$(moonbitlang$core$immut$sorted_map$$T$get$83$(groups.val, tag_action), $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$), end_node));
        }
        return 1;
      });
      const _bind$2 = moonbitlang$core$immut$sorted_map$$T$iter2$83$(groups.val);
      _bind$2((__, partition) => {
        partitions.val = moonbitlang$core$immut$sorted_set$$T$add$18$(partitions.val, partition);
        return 1;
      });
      _tmp = pattern_id + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const groups = { val: $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$15$ };
  const _bind = moonbitlang$core$immut$sorted_set$$T$iter$7$(moonbitlang$core$immut$sorted_set$$T$difference$7$(all_states, final_states));
  _bind((state) => {
    const tag_action = moonbitlang$core$option$$Option$unwrap$41$(moonbitlang$core$builtin$$Map$get$160$(dfa.tag_actions, state));
    groups.val = moonbitlang$core$immut$sorted_map$$T$add$83$(groups.val, tag_action, moonbitlang$core$immut$sorted_set$$T$add$7$(moonbitlang$core$option$$Option$or$18$(moonbitlang$core$immut$sorted_map$$T$get$83$(groups.val, tag_action), $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$), state));
    return 1;
  });
  const _bind$2 = moonbitlang$core$immut$sorted_map$$T$iter2$83$(groups.val);
  _bind$2((__, partition) => {
    partitions.val = moonbitlang$core$immut$sorted_set$$T$add$18$(partitions.val, partition);
    return 1;
  });
  const result = moonbitlang$core$sorted_map$$new$100$();
  const _arr = dfa.graph;
  const _len = _arr.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len) {
      const trans = _arr[_i];
      const _len$2 = trans.length;
      let _tmp$3 = 0;
      while (true) {
        const _i$2 = _tmp$3;
        if (_i$2 < _len$2) {
          const tran = trans[_i$2];
          const _input = tran._0;
          const _target = tran._1;
          const _bind$3 = moonbitlang$core$immut$sorted_set$$T$iter$28$(symbols);
          _bind$3((symbol) => {
            if (moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$subset(symbol.char_set, _input)) {
              const map = moonbitlang$core$option$$Option$or$108$(moonbitlang$core$sorted_map$$T$get$100$(result, _target), $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$16$);
              const map$2 = moonbitlang$core$immut$sorted_map$$T$add$84$(map, symbol, moonbitlang$core$immut$sorted_set$$T$add$7$(moonbitlang$core$option$$Option$or$18$(moonbitlang$core$immut$sorted_map$$T$get$84$(map, symbol), $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$), _i));
              moonbitlang$core$sorted_map$$T$op_set$100$(result, _target, map$2);
            }
            return 1;
          });
          _tmp$3 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const symbolized_invert_map = result;
  const worklist = { val: partitions.val };
  while (true) {
    if (!moonbitlang$core$immut$sorted_set$$T$is_empty$18$(worklist.val)) {
      const a = moonbitlang$core$immut$sorted_set$$T$min$18$(worklist.val);
      worklist.val = moonbitlang$core$immut$sorted_set$$T$remove_min$18$(worklist.val);
      let _foreach_result = $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$37$;
      const _bind$3 = moonbitlang$core$immut$sorted_set$$T$iter$28$(symbols);
      _bind$3((symbol) => {
        const x = { val: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$ };
        const _bind$4 = moonbitlang$core$immut$sorted_set$$T$iter$7$(a);
        _bind$4((target) => {
          const _bind$5 = moonbitlang$core$sorted_map$$T$get$100$(symbolized_invert_map, target);
          let sources;
          if (_bind$5 === undefined) {
            sources = $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$;
          } else {
            const _Some = _bind$5;
            const _map = _Some;
            sources = moonbitlang$core$option$$Option$or$18$(moonbitlang$core$immut$sorted_map$$T$get$84$(_map, symbol), $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$);
          }
          x.val = moonbitlang$core$builtin$$Add$op_add$58$(x.val, sources);
          return 1;
        });
        if (!moonbitlang$core$immut$sorted_set$$T$is_empty$7$(x.val)) {
          const _bind$5 = moonbitlang$core$immut$sorted_set$$T$iter$18$(partitions.val);
          _bind$5((y) => {
            const intersection = moonbitlang$core$immut$sorted_set$$T$intersection$7$(x.val, y);
            const difference = moonbitlang$core$immut$sorted_set$$T$difference$7$(y, x.val);
            if (!moonbitlang$core$immut$sorted_set$$T$is_empty$7$(intersection) && !moonbitlang$core$immut$sorted_set$$T$is_empty$7$(difference)) {
              partitions.val = moonbitlang$core$immut$sorted_set$$T$remove$18$(partitions.val, y);
              partitions.val = moonbitlang$core$immut$sorted_set$$T$add$18$(partitions.val, intersection);
              partitions.val = moonbitlang$core$immut$sorted_set$$T$add$18$(partitions.val, difference);
              if (moonbitlang$core$immut$sorted_set$$T$contains$18$(worklist.val, y)) {
                worklist.val = moonbitlang$core$immut$sorted_set$$T$remove$18$(worklist.val, y);
                worklist.val = moonbitlang$core$immut$sorted_set$$T$add$18$(worklist.val, intersection);
                worklist.val = moonbitlang$core$immut$sorted_set$$T$add$18$(worklist.val, difference);
              } else {
                if (moonbitlang$core$immut$sorted_set$$T$size$7$(intersection) <= moonbitlang$core$immut$sorted_set$$T$size$7$(difference)) {
                  worklist.val = moonbitlang$core$immut$sorted_set$$T$add$18$(worklist.val, intersection);
                } else {
                  worklist.val = moonbitlang$core$immut$sorted_set$$T$add$18$(worklist.val, difference);
                }
              }
            }
            return 1;
          });
        } else {
          return 1;
        }
        return 1;
      });
      const _tmp$3 = _foreach_result;
      switch (_tmp$3.$tag) {
        case 0: {
          break;
        }
        case 1: {
          const _break = _tmp$3;
          _break._0;
          break;
        }
        case 2: {
          const _return = _tmp$3;
          return _return._0;
        }
        case 3: {
          $panic();
          break;
        }
        default: {
          $panic();
        }
      }
      continue;
    } else {
      break;
    }
  }
  const new_dfa = moonbitlang$ulex$lib$automaton$$DFA$new(dfa.code_blocks, dfa.captures);
  const state_to_partition = moonbitlang$core$builtin$$Map$from_array$157$([]);
  const _bind$3 = moonbitlang$core$immut$sorted_set$$T$iter$18$(partitions.val);
  _bind$3((partition) => {
    const _bind$4 = moonbitlang$core$immut$sorted_set$$T$iter$7$(partition);
    _bind$4((state) => {
      moonbitlang$core$builtin$$Map$op_set$157$(state_to_partition, state, partition);
      return 1;
    });
    return 1;
  });
  const partition_to_new_state = moonbitlang$core$builtin$$Map$from_array$158$([]);
  const state_to_new_state = moonbitlang$core$builtin$$Map$from_array$79$([]);
  const _env = { _0: state_to_partition, _1: partition_to_new_state, _2: new_dfa, _3: state_to_new_state };
  new_dfa.start_node = moonbitlang$ulex$lib$automaton$$minimize$46$get_new_state$124$178(_env, dfa.start_node);
  const _bind$4 = moonbitlang$core$immut$sorted_set$$T$iter$18$(partitions.val);
  _bind$4((partition) => {
    const new_state = moonbitlang$ulex$lib$automaton$$minimize$46$get_new_state$124$178(_env, moonbitlang$core$immut$sorted_set$$T$min$7$(partition));
    const _bind$5 = moonbitlang$core$immut$sorted_set$$T$iter$28$(symbols);
    _bind$5((symbol) => {
      const _bind$6 = moonbitlang$core$immut$sorted_set$$T$iter$7$(partition);
      _bind$6((state) => {
        const _arr$2 = moonbitlang$core$array$$Array$op_get$140$(dfa.graph, state);
        const _len$2 = _arr$2.length;
        let _tmp$3 = 0;
        while (true) {
          const _i = _tmp$3;
          if (_i < _len$2) {
            const tran = _arr$2[_i];
            const _input = tran._0;
            const _target = tran._1;
            if (moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$subset(symbol.char_set, _input)) {
              const new_target = moonbitlang$ulex$lib$automaton$$minimize$46$get_new_state$124$178(_env, _target);
              moonbitlang$ulex$lib$automaton$$DFA$add_edge(new_dfa, new_state, symbol.char_set, new_target);
            }
            _tmp$3 = _i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        return 1;
      });
      return 1;
    });
    return 1;
  });
  const _bind$5 = moonbitlang$core$builtin$$Map$iter2$160$(dfa.tag_actions);
  _bind$5((node, tag_action) => {
    const _bind$6 = moonbitlang$core$builtin$$Map$get$79$(state_to_new_state, node);
    if (_bind$6 === undefined) {
    } else {
      const _Some = _bind$6;
      const _new_state = _Some;
      moonbitlang$core$builtin$$Map$op_set$160$(new_dfa.tag_actions, _new_state, tag_action);
    }
    return 1;
  });
  const _bind$6 = moonbitlang$core$builtin$$Map$iter2$156$(dfa.end_nodes);
  _bind$6((end_state, end_state_info) => {
    const _bind$7 = moonbitlang$core$builtin$$Map$get$79$(state_to_new_state, end_state);
    if (_bind$7 === undefined) {
    } else {
      const _Some = _bind$7;
      const _new_end_state = _Some;
      _L: {
        _L$2: {
          const _bind$8 = moonbitlang$core$builtin$$Map$get$156$(new_dfa.end_nodes, _new_end_state);
          if (_bind$8 === undefined) {
            break _L$2;
          } else {
            _L$3: {
              const _bind$9 = moonbitlang$core$builtin$$Map$get$156$(new_dfa.end_nodes, _new_end_state);
              if (_bind$9 === undefined) {
                break _L$3;
              } else {
                const _Some$2 = _bind$9;
                const _end_state_info2 = _Some$2;
                if (moonbitlang$core$builtin$$Eq$op_equal$145$(_end_state_info2, end_state_info)) {
                  break _L$2;
                } else {
                  break _L$3;
                }
              }
            }
            $panic();
          }
          break _L;
        }
        moonbitlang$core$builtin$$Map$op_set$156$(new_dfa.end_nodes, _new_end_state, end_state_info);
      }
    }
    return 1;
  });
  return new_dfa;
}
function moonbitlang$ulex$lib$automaton$$minimize_tags$46$map_capture_pos$124$230(tag_to_new_tag, pos) {
  _L: {
    if (pos.$tag === 0) {
      const _Dynamic_dfa = pos;
      const _tag_var = _Dynamic_dfa._0;
      const _bind = moonbitlang$core$builtin$$Map$get$79$(tag_to_new_tag, _tag_var._0);
      if (_bind === undefined) {
        break _L;
      } else {
        const _Some = _bind;
        const _new_tag = _Some;
        return new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$DFACapturePosition$Dynamic_dfa({ _0: _new_tag, _1: _tag_var._1 });
      }
    } else {
      break _L;
    }
  }
  return pos;
}
function moonbitlang$ulex$lib$automaton$$DFA$minimize_tags(self) {
  const tag_to_state_actions_map = moonbitlang$core$builtin$$Map$from_array$155$([]);
  const _bind = moonbitlang$core$builtin$$Map$iter2$160$(self.tag_actions);
  _bind((node, action) => {
    const _arr = action;
    const _len = _arr.length;
    let _tmp = 0;
    while (true) {
      const _i = _tmp;
      if (_i < _len) {
        const op = _arr[_i];
        let dest;
        _L: {
          if (op.$tag === 0) {
            const _Set = op;
            const _dest = _Set._0;
            dest = _dest;
            break _L;
          } else {
            const _Copy = op;
            const _dest = _Copy._0;
            dest = _dest;
            break _L;
          }
        }
        let op2;
        if (op.$tag === 0) {
          const _Set = op;
          const _dest = _Set._0;
          op2 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Set({ _0: -1, _1: _dest._1 });
        } else {
          const _Copy = op;
          const _dest = _Copy._0;
          const _src = _Copy._1;
          op2 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Copy({ _0: -1, _1: _dest._1 }, { _0: -1, _1: _src._1 });
        }
        const _bind$2 = moonbitlang$core$builtin$$Map$get$155$(tag_to_state_actions_map, dest._0);
        if (_bind$2 === undefined) {
          moonbitlang$core$builtin$$Map$op_set$155$(tag_to_state_actions_map, dest._0, moonbitlang$core$immut$sorted_map$$T$add$75$($64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$14$, node, [op2]));
        } else {
          const _Some = _bind$2;
          const _map = _Some;
          const _bind$3 = moonbitlang$core$immut$sorted_map$$T$get$75$(_map, node);
          if (_bind$3.$tag === 0) {
            moonbitlang$core$builtin$$Map$op_set$155$(tag_to_state_actions_map, dest._0, moonbitlang$core$immut$sorted_map$$T$add$75$(_map, node, [op2]));
          } else {
            const _Some$2 = _bind$3;
            const _ops = _Some$2._0;
            moonbitlang$core$array$$Array$push$25$(_ops, op2);
          }
        }
        _tmp = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return 1;
  });
  const _bind$2 = moonbitlang$core$builtin$$Map$iter2$155$(tag_to_state_actions_map);
  _bind$2((__, state_actions_map) => {
    const _bind$3 = moonbitlang$core$immut$sorted_map$$T$iter2$75$(state_actions_map);
    _bind$3((__$2, ops) => {
      moonbitlang$core$array$$Array$sort$25$(ops);
      return 1;
    });
    return 1;
  });
  const groups = moonbitlang$core$sorted_map$$new$99$();
  const _bind$3 = moonbitlang$core$builtin$$Map$iter2$155$(tag_to_state_actions_map);
  _bind$3((tag, state_actions_map) => {
    moonbitlang$core$sorted_map$$T$op_set$99$(groups, state_actions_map, moonbitlang$core$immut$sorted_set$$T$add$7$(moonbitlang$core$option$$Option$or$18$(moonbitlang$core$sorted_map$$T$get$99$(groups, state_actions_map), $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$2$), tag));
    return 1;
  });
  const tag_to_new_tag = moonbitlang$core$builtin$$Map$from_array$79$([]);
  const num_tags = { val: 0 };
  const _bind$4 = moonbitlang$core$sorted_map$$T$iter2$99$(groups);
  _bind$4((__, tags) => {
    const new_tag = num_tags.val;
    num_tags.val = num_tags.val + 1 | 0;
    const _bind$5 = moonbitlang$core$immut$sorted_set$$T$iter$7$(tags);
    _bind$5((tag) => {
      moonbitlang$core$builtin$$Map$op_set$79$(tag_to_new_tag, tag, new_tag);
      return 1;
    });
    return 1;
  });
  const _tmp = self.graph;
  const _tmp$2 = self.start_node;
  const _bind$5 = moonbitlang$core$builtin$$Map$iter$160$(self.tag_actions);
  const _tmp$3 = moonbitlang$core$builtin$$Map$from_iter$160$((_p) => _bind$5((_p$2) => {
    const _node_id = _p$2._0;
    const _action = _p$2._1;
    const _p$3 = new Array(_action.length);
    const _p$4 = _action.length;
    let _tmp$4 = 0;
    while (true) {
      const _p$5 = _tmp$4;
      if (_p$5 < _p$4) {
        const _p$6 = _action[_p$5];
        const op = _p$6;
        let _tmp$5;
        if (op.$tag === 0) {
          const _Set = op;
          const _dest = _Set._0;
          _tmp$5 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Set({ _0: moonbitlang$core$option$$Option$unwrap$7$(moonbitlang$core$builtin$$Map$get$79$(tag_to_new_tag, _dest._0)), _1: _dest._1 });
        } else {
          const _Copy = op;
          const _dest = _Copy._0;
          const _src = _Copy._1;
          _tmp$5 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$TagOp$Copy({ _0: moonbitlang$core$option$$Option$unwrap$7$(moonbitlang$core$builtin$$Map$get$79$(tag_to_new_tag, _dest._0)), _1: _dest._1 }, { _0: moonbitlang$core$option$$Option$unwrap$7$(moonbitlang$core$builtin$$Map$get$79$(tag_to_new_tag, _src._0)), _1: _src._1 });
        }
        _p$3[_p$5] = _tmp$5;
        _tmp$4 = _p$5 + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    const ops = _p$3;
    moonbitlang$core$array$$Array$dedup$25$(ops);
    return _p({ _0: _node_id, _1: ops });
  }));
  const _bind$6 = moonbitlang$core$builtin$$Map$iter$156$(self.end_nodes);
  const _tmp$4 = moonbitlang$core$builtin$$Map$from_iter$156$((_p) => _bind$6((_p$2) => {
    const _node_id = _p$2._0;
    const _x = _p$2._1;
    const _pattern_id = _x._0;
    const _captures = _x._1;
    const _p$3 = new Array(_captures.length);
    const _p$4 = _captures.length;
    let _tmp$5 = 0;
    while (true) {
      const _p$5 = _tmp$5;
      if (_p$5 < _p$4) {
        const _p$6 = _captures[_p$5];
        const capture = _p$6;
        const _begin = capture._0;
        const _end = capture._1;
        _p$3[_p$5] = { _0: moonbitlang$ulex$lib$automaton$$minimize_tags$46$map_capture_pos$124$230(tag_to_new_tag, _begin), _1: moonbitlang$ulex$lib$automaton$$minimize_tags$46$map_capture_pos$124$230(tag_to_new_tag, _end) };
        _tmp$5 = _p$5 + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return _p({ _0: _node_id, _1: { _0: _pattern_id, _1: _p$3 } });
  }));
  const _tmp$5 = self.code_blocks;
  const _tmp$6 = self.captures;
  return { graph: _tmp, start_node: _tmp$2, tag_actions: _tmp$3, end_nodes: _tmp$4, code_blocks: _tmp$5, captures: _tmp$6, node_count: self.node_count };
}
function moonbitlang$ulex$lib$automaton$$NFA$new_nfa() {
  const _bind = [];
  const _bind$2 = [];
  const _bind$3 = moonbitlang$core$builtin$$Map$new$79$(8);
  const _bind$4 = [];
  return { graph: _bind, end_nodes: _bind$3, code_blocks: _bind$2, captures: _bind$4, start_node: -1, node_count: 0, tag_count: 0 };
}
function moonbitlang$ulex$lib$automaton$$NFA$new_node(self) {
  const new_id = self.node_count;
  self.node_count = self.node_count + 1 | 0;
  const node = { num: new_id, eps: $64$moonbitlang$47$core$47$immut$47$sorted_set$46$T$Empty$5$, trans: [] };
  moonbitlang$core$array$$Array$push$94$(self.graph, node);
  return (new_id + 1 | 0) === self.graph.length ? node : $panic();
}
function moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, from, s, to) {
  switch (s.$tag) {
    case 0: {
      from.eps = moonbitlang$core$immut$sorted_set$$T$add$57$(from.eps, { _0: to, _1: undefined });
      return;
    }
    case 1: {
      const _EpsWithTag = s;
      const _tag = _EpsWithTag._0;
      from.eps = moonbitlang$core$immut$sorted_set$$T$add$57$(from.eps, { _0: to, _1: _tag });
      return;
    }
    default: {
      const _EChar = s;
      const _c = _EChar._0;
      moonbitlang$core$array$$Array$push$190$(from.trans, { _0: _c, _1: to });
      return;
    }
  }
}
function moonbitlang$ulex$lib$automaton$$NFA$register_regex_rec(self, node, re, name2pos) {
  const new_node = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
  moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, node, $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps, new_node);
  const _bind = re.desc;
  let final_;
  switch (_bind.$tag) {
    case 0: {
      const next_node = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
      moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, new_node, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EChar(moonbitlang$ulex$lib$util$eof_char_set$$eof), next_node);
      final_ = next_node;
      break;
    }
    case 1: {
      const _Character = _bind;
      const _cset = _Character._0;
      const next_node$2 = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
      moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, new_node, new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EChar(moonbitlang$ulex$lib$util$eof_char_set$$from_char_set(_cset)), next_node$2);
      final_ = next_node$2;
      break;
    }
    case 3: {
      const next_node$3 = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
      moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, new_node, $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps, next_node$3);
      final_ = next_node$3;
      break;
    }
    case 2: {
      const _Repetition = _bind;
      const _re = _Repetition._0;
      const final_$2 = moonbitlang$ulex$lib$automaton$$NFA$register_regex_rec(self, new_node, _re, name2pos);
      moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, final_$2, $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps, new_node);
      final_ = final_$2;
      break;
    }
    case 5: {
      const _Concat = _bind;
      const _re1 = _Concat._0;
      const _re2 = _Concat._1;
      const mid = moonbitlang$ulex$lib$automaton$$NFA$register_regex_rec(self, new_node, _re1, name2pos);
      final_ = moonbitlang$ulex$lib$automaton$$NFA$register_regex_rec(self, mid, _re2, name2pos);
      break;
    }
    case 4: {
      const _Alter = _bind;
      const _re1$2 = _Alter._0;
      const _re2$2 = _Alter._1;
      const final_1 = moonbitlang$ulex$lib$automaton$$NFA$register_regex_rec(self, new_node, _re1$2, name2pos);
      const final_2 = moonbitlang$ulex$lib$automaton$$NFA$register_regex_rec(self, new_node, _re2$2, name2pos);
      const final_$3 = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
      moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, final_1, $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps, final_$3);
      moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, final_2, $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps, final_$3);
      final_ = final_$3;
      break;
    }
    default: {
      const _Capture = _bind;
      const _re$2 = _Capture._0;
      const _name = _Capture._1;
      const start = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
      const final_$4 = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
      const tail = moonbitlang$ulex$lib$automaton$$NFA$register_regex_rec(self, start, _re$2, name2pos);
      const _bind$2 = name2pos(_name);
      const _begin_tag = _bind$2._0;
      const _end_tag = _bind$2._1;
      let _tmp;
      if (_begin_tag.$tag === 0) {
        const _Dynamic_nfa = _begin_tag;
        const _begin_tag$2 = _Dynamic_nfa._0;
        _tmp = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EpsWithTag(_begin_tag$2);
      } else {
        _tmp = $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps;
      }
      moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, new_node, _tmp, start);
      let _tmp$2;
      if (_end_tag.$tag === 0) {
        const _Dynamic_nfa = _end_tag;
        const _end_tag$2 = _Dynamic_nfa._0;
        _tmp$2 = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$EpsWithTag(_end_tag$2);
      } else {
        _tmp$2 = $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps;
      }
      moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, tail, _tmp$2, final_$4);
      final_ = final_$4;
    }
  }
  const new_final = moonbitlang$ulex$lib$automaton$$NFA$new_node(self);
  moonbitlang$ulex$lib$automaton$$NFA$add_edge(self, final_, $64$moonbitlang$47$ulex$47$lib$47$automaton$46$Input$Eps, new_final);
  return new_final;
}
function moonbitlang$ulex$lib$automaton$$NFA$register_regex(self, node, re, code_block, name2pos) {
  const final_ = moonbitlang$ulex$lib$automaton$$NFA$register_regex_rec(self, node, re, name2pos);
  const id = self.code_blocks.length;
  moonbitlang$core$array$$Array$push$0$(self.code_blocks, code_block);
  moonbitlang$core$builtin$$Map$set$79$(self.end_nodes, final_.num, id);
}
function moonbitlang$ulex$lib$automaton$$from_rule$46$alloc_tag$124$64(nfa) {
  const tag = nfa.tag_count;
  nfa.tag_count = nfa.tag_count + 1 | 0;
  return tag;
}
function moonbitlang$ulex$lib$automaton$$NFA$from_rule(rule, encoding) {
  const nfa = moonbitlang$ulex$lib$automaton$$NFA$new_nfa();
  const node = moonbitlang$ulex$lib$automaton$$NFA$new_node(nfa);
  nfa.start_node = node.num;
  const _arr = rule.patterns;
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const pattern = _arr[_i];
      const _re = pattern._0;
      const _rest_binder = pattern._1;
      const _code_block = pattern._2;
      const lowered_re = moonbitlang$ulex$lib$regex$$lower(_re, encoding);
      const _p = moonbitlang$ulex$lib$automaton$$get_regex_captures(_re, lowered_re);
      const _p$2 = new Array(_p.length);
      const _p$3 = _p.length;
      let _tmp$2 = 0;
      while (true) {
        const _p$4 = _tmp$2;
        if (_p$4 < _p$3) {
          const _p$5 = _p[_p$4];
          const it = _p$5;
          const _name = it._0;
          const _x = it._1;
          const _var_type = _x._0;
          const _x$2 = _x._1;
          const _begin = _x$2._0;
          const _end = _x$2._1;
          let begin;
          if (_begin === undefined) {
            begin = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Dynamic_nfa(moonbitlang$ulex$lib$automaton$$from_rule$46$alloc_tag$124$64(nfa));
          } else {
            const _Some = _begin;
            const _info = _Some;
            begin = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Static_nfa(_info);
          }
          let end;
          if (_end === undefined) {
            end = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Dynamic_nfa(moonbitlang$ulex$lib$automaton$$from_rule$46$alloc_tag$124$64(nfa));
          } else {
            const _Some = _end;
            const _info = _Some;
            end = new $64$moonbitlang$47$ulex$47$lib$47$automaton$46$NFACapturePosition$Static_nfa(_info);
          }
          _p$2[_p$4] = { _0: { _0: _name, _1: _var_type }, _1: { _0: begin, _1: end } };
          _tmp$2 = _p$4 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const capture_names = _p$2;
      const _bind = moonbitlang$core$array$$Array$iter$197$(capture_names);
      const map = moonbitlang$core$builtin$$Map$from_iter$161$((_p$4) => _bind((_p$5) => {
        const _x = _p$5._0;
        const _name = _x._0;
        const _x$2 = _p$5._1;
        const _begin_tag = _x$2._0;
        const _end_tag = _x$2._1;
        return _p$4({ _0: _name, _1: { _0: _begin_tag, _1: _end_tag } });
      }));
      moonbitlang$ulex$lib$automaton$$NFA$register_regex(nfa, node, lowered_re, _code_block, (x) => moonbitlang$core$option$$Option$unwrap$164$(moonbitlang$core$builtin$$Map$get$161$(map, x)));
      moonbitlang$core$array$$Array$push$143$(nfa.captures, { _0: capture_names, _1: _rest_binder });
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return nfa;
}
function moonbitlang$ulex$lib$automaton$$DFA$from_rule(rule, encoding) {
  return moonbitlang$ulex$lib$automaton$$DFA$minimize_tags(moonbitlang$ulex$lib$automaton$$DFA$minimize(moonbitlang$ulex$lib$automaton$$DFA$from_nfa(moonbitlang$ulex$lib$automaton$$NFA$from_rule(rule, encoding))));
}
function moonbitlang$core$builtin$$Hash$hash_combine$94$(self, hasher) {
  moonbitlang$core$builtin$$Hasher$combine_int(hasher, self.num);
}
function moonbitlang$ulex$lib$codegen$codeblock_parser$$scan_codeblock_rbrace$206$(subst, lexbuf) {
  let _tmp = subst;
  let _tmp$2 = lexbuf;
  _L: while (true) {
    const subst$2 = _tmp;
    const lexbuf$2 = _tmp$2;
    let _match_pattern = moonbitlang$core$int$$max_value;
    const _match_start = { val: lexbuf$2.pos };
    const _match_end = { val: -1 };
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _capture_1_start = -1;
    let _capture_1_end = -1;
    let _tag_0 = -1;
    let _tag_1 = -1;
    let _tag_2 = -1;
    let _tmp$3 = 0;
    _L$2: while (true) {
      const _param = _tmp$3;
      switch (_param) {
        case 0: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end.val = lexbuf$2.pos;
          }
          const _bind = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$4;
          if (_bind >= 0 && _bind <= 35) {
            _tmp$4 = 1;
          } else {
            if (_bind === 36) {
              _tmp$4 = 2;
            } else {
              if (_bind >= 37 && _bind <= 122) {
                _tmp$4 = 1;
              } else {
                if (_bind === 123) {
                  _tmp$4 = 3;
                } else {
                  if (_bind === 124) {
                    _tmp$4 = 1;
                  } else {
                    if (_bind === 125) {
                      _tmp$4 = 4;
                    } else {
                      if (_bind >= 126 && _bind <= 1114111) {
                        _tmp$4 = 1;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$4;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 4) {
            _match_pattern = 4;
            _match_end.val = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 4) {
            _match_pattern = 4;
            _match_end.val = lexbuf$2.pos;
          }
          const _bind$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$5;
          if (_bind$2 >= 65 && _bind$2 <= 90) {
            _tmp$5 = 5;
          } else {
            if (_bind$2 === 95) {
              _tmp$5 = 5;
            } else {
              if (_bind$2 >= 97 && _bind$2 <= 100) {
                _tmp$5 = 5;
              } else {
                if (_bind$2 === 101) {
                  _tmp$5 = 6;
                } else {
                  if (_bind$2 >= 102 && _bind$2 <= 114) {
                    _tmp$5 = 5;
                  } else {
                    if (_bind$2 === 115) {
                      _tmp$5 = 7;
                    } else {
                      if (_bind$2 >= 116 && _bind$2 <= 122) {
                        _tmp$5 = 5;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$5;
          continue _L$2;
        }
        case 3: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end.val = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 4: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end.val = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 5: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end.val = lexbuf$2.pos;
            _capture_0_start = _match_start.val + 1 | 0;
            _capture_0_end = _match_end.val;
          }
          const _bind$3 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$6;
          if (_bind$3 >= 48 && _bind$3 <= 57) {
            _tmp$6 = 5;
          } else {
            if (_bind$3 >= 65 && _bind$3 <= 90) {
              _tmp$6 = 5;
            } else {
              if (_bind$3 === 95) {
                _tmp$6 = 5;
              } else {
                if (_bind$3 >= 97 && _bind$3 <= 122) {
                  _tmp$6 = 5;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$3 = _tmp$6;
          continue _L$2;
        }
        case 6: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end.val = lexbuf$2.pos;
            _capture_0_start = _match_start.val + 1 | 0;
            _capture_0_end = _match_end.val;
          }
          const _bind$4 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$7;
          if (_bind$4 >= 48 && _bind$4 <= 57) {
            _tmp$7 = 5;
          } else {
            if (_bind$4 >= 65 && _bind$4 <= 90) {
              _tmp$7 = 5;
            } else {
              if (_bind$4 === 95) {
                _tmp$7 = 5;
              } else {
                if (_bind$4 >= 97 && _bind$4 <= 109) {
                  _tmp$7 = 5;
                } else {
                  if (_bind$4 === 110) {
                    _tmp$7 = 8;
                  } else {
                    if (_bind$4 >= 111 && _bind$4 <= 122) {
                      _tmp$7 = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$7;
          continue _L$2;
        }
        case 7: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end.val = lexbuf$2.pos;
            _capture_0_start = _match_start.val + 1 | 0;
            _capture_0_end = _match_end.val;
          }
          const _bind$5 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$8;
          if (_bind$5 >= 48 && _bind$5 <= 57) {
            _tmp$8 = 5;
          } else {
            if (_bind$5 >= 65 && _bind$5 <= 90) {
              _tmp$8 = 5;
            } else {
              if (_bind$5 === 95) {
                _tmp$8 = 5;
              } else {
                if (_bind$5 >= 97 && _bind$5 <= 115) {
                  _tmp$8 = 5;
                } else {
                  if (_bind$5 === 116) {
                    _tmp$8 = 9;
                  } else {
                    if (_bind$5 >= 117 && _bind$5 <= 122) {
                      _tmp$8 = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$8;
          continue _L$2;
        }
        case 8: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end.val = lexbuf$2.pos;
            _capture_0_start = _match_start.val + 1 | 0;
            _capture_0_end = _match_end.val;
          }
          const _bind$6 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$9;
          if (_bind$6 >= 48 && _bind$6 <= 57) {
            _tmp$9 = 5;
          } else {
            if (_bind$6 >= 65 && _bind$6 <= 90) {
              _tmp$9 = 5;
            } else {
              if (_bind$6 === 95) {
                _tmp$9 = 5;
              } else {
                if (_bind$6 >= 97 && _bind$6 <= 99) {
                  _tmp$9 = 5;
                } else {
                  if (_bind$6 === 100) {
                    _tmp$9 = 10;
                  } else {
                    if (_bind$6 >= 101 && _bind$6 <= 122) {
                      _tmp$9 = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$9;
          continue _L$2;
        }
        case 9: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end.val = lexbuf$2.pos;
            _capture_0_start = _match_start.val + 1 | 0;
            _capture_0_end = _match_end.val;
          }
          const _bind$7 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$10;
          if (_bind$7 >= 48 && _bind$7 <= 57) {
            _tmp$10 = 5;
          } else {
            if (_bind$7 >= 65 && _bind$7 <= 90) {
              _tmp$10 = 5;
            } else {
              if (_bind$7 === 95) {
                _tmp$10 = 5;
              } else {
                if (_bind$7 === 97) {
                  _tmp$10 = 11;
                } else {
                  if (_bind$7 >= 98 && _bind$7 <= 122) {
                    _tmp$10 = 5;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$10;
          continue _L$2;
        }
        case 10: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end.val = lexbuf$2.pos;
            _capture_0_start = _match_start.val + 1 | 0;
            _capture_0_end = _match_end.val;
          }
          const _bind$8 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$11;
          if (_bind$8 >= 48 && _bind$8 <= 57) {
            _tmp$11 = 5;
          } else {
            if (_bind$8 >= 65 && _bind$8 <= 90) {
              _tmp$11 = 5;
            } else {
              if (_bind$8 === 95) {
                _tmp$11 = 5;
              } else {
                if (_bind$8 >= 97 && _bind$8 <= 111) {
                  _tmp$11 = 5;
                } else {
                  if (_bind$8 === 112) {
                    _tmp$11 = 12;
                  } else {
                    if (_bind$8 >= 113 && _bind$8 <= 122) {
                      _tmp$11 = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$11;
          continue _L$2;
        }
        case 11: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end.val = lexbuf$2.pos;
            _capture_0_start = _match_start.val + 1 | 0;
            _capture_0_end = _match_end.val;
          }
          const _bind$9 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$12;
          if (_bind$9 >= 48 && _bind$9 <= 57) {
            _tmp$12 = 5;
          } else {
            if (_bind$9 >= 65 && _bind$9 <= 90) {
              _tmp$12 = 5;
            } else {
              if (_bind$9 === 95) {
                _tmp$12 = 5;
              } else {
                if (_bind$9 >= 97 && _bind$9 <= 113) {
                  _tmp$12 = 5;
                } else {
                  if (_bind$9 === 114) {
                    _tmp$12 = 13;
                  } else {
                    if (_bind$9 >= 115 && _bind$9 <= 122) {
                      _tmp$12 = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$12;
          continue _L$2;
        }
        case 12: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end.val = lexbuf$2.pos;
            _capture_0_start = _match_start.val + 1 | 0;
            _capture_0_end = _match_end.val;
          }
          const _bind$10 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$13;
          if (_bind$10 >= 48 && _bind$10 <= 57) {
            _tmp$13 = 5;
          } else {
            if (_bind$10 >= 65 && _bind$10 <= 90) {
              _tmp$13 = 5;
            } else {
              if (_bind$10 === 95) {
                _tmp$13 = 5;
              } else {
                if (_bind$10 >= 97 && _bind$10 <= 110) {
                  _tmp$13 = 5;
                } else {
                  if (_bind$10 === 111) {
                    _tmp$13 = 14;
                  } else {
                    if (_bind$10 >= 112 && _bind$10 <= 122) {
                      _tmp$13 = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$13;
          continue _L$2;
        }
        case 13: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end.val = lexbuf$2.pos;
            _capture_0_start = _match_start.val + 1 | 0;
            _capture_0_end = _match_end.val;
          }
          const _bind$11 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$14;
          if (_bind$11 >= 48 && _bind$11 <= 57) {
            _tmp$14 = 5;
          } else {
            if (_bind$11 >= 65 && _bind$11 <= 90) {
              _tmp$14 = 5;
            } else {
              if (_bind$11 === 95) {
                _tmp$14 = 5;
              } else {
                if (_bind$11 >= 97 && _bind$11 <= 115) {
                  _tmp$14 = 5;
                } else {
                  if (_bind$11 === 116) {
                    _tmp$14 = 10;
                  } else {
                    if (_bind$11 >= 117 && _bind$11 <= 122) {
                      _tmp$14 = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$14;
          continue _L$2;
        }
        case 14: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end.val = lexbuf$2.pos;
            _capture_0_start = _match_start.val + 1 | 0;
            _capture_0_end = _match_end.val;
          }
          const _bind$12 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$15;
          if (_bind$12 >= 48 && _bind$12 <= 57) {
            _tmp$15 = 5;
          } else {
            if (_bind$12 >= 65 && _bind$12 <= 90) {
              _tmp$15 = 5;
            } else {
              if (_bind$12 === 95) {
                _tmp$15 = 5;
              } else {
                if (_bind$12 >= 97 && _bind$12 <= 114) {
                  _tmp$15 = 5;
                } else {
                  if (_bind$12 === 115) {
                    _tmp$15 = 15;
                  } else {
                    if (_bind$12 >= 116 && _bind$12 <= 122) {
                      _tmp$15 = 5;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$15;
          continue _L$2;
        }
        case 15: {
          _tag_0 = lexbuf$2.pos;
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end.val = lexbuf$2.pos;
            _capture_0_start = _match_start.val + 1 | 0;
            _capture_0_end = _match_end.val;
          }
          const _bind$13 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$16;
          if (_bind$13 === 40) {
            _tmp$16 = 16;
          } else {
            if (_bind$13 >= 48 && _bind$13 <= 57) {
              _tmp$16 = 5;
            } else {
              if (_bind$13 >= 65 && _bind$13 <= 90) {
                _tmp$16 = 5;
              } else {
                if (_bind$13 === 95) {
                  _tmp$16 = 5;
                } else {
                  if (_bind$13 >= 97 && _bind$13 <= 122) {
                    _tmp$16 = 5;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$16;
          continue _L$2;
        }
        case 16: {
          _tag_1 = lexbuf$2.pos;
          const _bind$14 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$17;
          if (_bind$14 === 9) {
            _tmp$17 = 16;
          } else {
            if (_bind$14 === 32) {
              _tmp$17 = 16;
            } else {
              if (_bind$14 >= 65 && _bind$14 <= 90) {
                _tmp$17 = 17;
              } else {
                if (_bind$14 === 95) {
                  _tmp$17 = 17;
                } else {
                  if (_bind$14 >= 97 && _bind$14 <= 122) {
                    _tmp$17 = 17;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$17;
          continue _L$2;
        }
        case 17: {
          _tag_2 = lexbuf$2.pos;
          const _bind$15 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$18;
          if (_bind$15 === 9) {
            _tmp$18 = 18;
          } else {
            if (_bind$15 === 32) {
              _tmp$18 = 18;
            } else {
              if (_bind$15 === 41) {
                _tmp$18 = 19;
              } else {
                if (_bind$15 >= 48 && _bind$15 <= 57) {
                  _tmp$18 = 17;
                } else {
                  if (_bind$15 >= 65 && _bind$15 <= 90) {
                    _tmp$18 = 17;
                  } else {
                    if (_bind$15 === 95) {
                      _tmp$18 = 17;
                    } else {
                      if (_bind$15 >= 97 && _bind$15 <= 122) {
                        _tmp$18 = 17;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$18;
          continue _L$2;
        }
        case 18: {
          const _bind$16 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$next_as_int$206$(lexbuf$2);
          let _tmp$19;
          switch (_bind$16) {
            case 9: {
              _tmp$19 = 18;
              break;
            }
            case 32: {
              _tmp$19 = 18;
              break;
            }
            case 41: {
              _tmp$19 = 19;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$19;
          continue _L$2;
        }
        case 19: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end.val = lexbuf$2.pos;
            _capture_0_start = _match_start.val + 1 | 0;
            _capture_0_end = _tag_0;
            _capture_1_start = _tag_1;
            _capture_1_end = _tag_2;
          }
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 5) {
      moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$reset$206$(lexbuf$2, _match_end.val);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          moonbitlang$ulex$lib$codegen$codeblock_parser$$scan_codeblock_rbrace$206$(subst$2, lexbuf$2);
          continue _L;
        }
        case 1: {
          return;
        }
        case 2: {
          const t1 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          const t2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_1_start, _capture_1_end);
          const _tmp$4 = _match_start.val;
          const _tmp$5 = _match_end.val;
          let _tmp$6;
          switch (t1) {
            case "startpos": {
              _tmp$6 = new $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$StartPosOf(t2);
              break;
            }
            case "endpos": {
              _tmp$6 = new $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$EndPosOf(t2);
              break;
            }
            default: {
              _tmp$6 = $panic();
            }
          }
          moonbitlang$core$array$$Array$push$184$(subst$2, { start: _tmp$4, end: _tmp$5, desc: _tmp$6 });
          continue _L;
        }
        case 3: {
          const t1$2 = moonbitlang$ulex$45$runtime$lexbuf$$IStringLexbuf$get_string$206$(lexbuf$2, _capture_0_start, _capture_0_end);
          _L$3: {
            _L$4: {
              switch (t1$2) {
                case "startpos": {
                  break _L$4;
                }
                case "endpos": {
                  break _L$4;
                }
              }
              break _L$3;
            }
            const _tmp$7 = _match_start.val;
            const _tmp$8 = _match_end.val;
            let _tmp$9;
            switch (t1$2) {
              case "startpos": {
                _tmp$9 = $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$StartPos;
                break;
              }
              case "endpos": {
                _tmp$9 = $64$moonbitlang$47$ulex$47$lib$47$codegen$47$codeblock_parser$46$SubstItemDesc$EndPos;
                break;
              }
              default: {
                _tmp$9 = $panic();
              }
            }
            moonbitlang$core$array$$Array$push$184$(subst$2, { start: _tmp$7, end: _tmp$8, desc: _tmp$9 });
          }
          continue _L;
        }
        case 4: {
          continue _L;
        }
        case 5: {
          return;
        }
        default: {
          $panic();
          return;
        }
      }
    } else {
      $panic();
      return;
    }
  }
}
function moonbitlang$ulex$lib$codegen$codeblock_parser$$parse_codeblock(str) {
  const lexbuf = moonbitlang$ulex$45$runtime$lexbuf$$StringLexbuf$from_string(str);
  const subst = [];
  moonbitlang$ulex$lib$codegen$codeblock_parser$$scan_codeblock_rbrace$206$(subst, lexbuf);
  return subst;
}
function moonbitlang$ulex$lib$codegen$$group_trans$46$42$func$124$175(_env, _p) {
  const _bind = _env._1;
  const _state = _env._0;
  return _bind((_p$2) => {
    const _min = _p$2._0;
    const _max = _p$2._1;
    const _bind$2 = moonbitlang$ulex$lib$util$eof_char_set$$EofChar$repr(_min);
    let _tmp;
    if (_bind$2.$tag === 0) {
      _tmp = -1;
    } else {
      const _Char = _bind$2;
      const _c = _Char._0;
      _tmp = _c;
    }
    const _tmp$2 = _tmp;
    const _bind$3 = moonbitlang$ulex$lib$util$eof_char_set$$EofChar$repr(_max);
    let _tmp$3;
    if (_bind$3.$tag === 0) {
      _tmp$3 = -1;
    } else {
      const _Char = _bind$3;
      const _c = _Char._0;
      _tmp$3 = _c;
    }
    return _p({ _0: { _0: _tmp$2, _1: _tmp$3 }, _1: _state });
  });
}
function moonbitlang$ulex$lib$codegen$$group_trans(trans) {
  const char_set_by_state = moonbitlang$core$builtin$$Map$from_array$154$([]);
  const _len = trans.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const tran = trans[_i];
      const _char_set = tran._0;
      const _next_state = tran._1;
      const _bind = moonbitlang$core$builtin$$Map$get$154$(char_set_by_state, _next_state);
      if (_bind === undefined) {
        moonbitlang$core$builtin$$Map$op_set$154$(char_set_by_state, _next_state, _char_set);
      } else {
        const _Some = _bind;
        const _existing_char_set = _Some;
        moonbitlang$core$builtin$$Map$op_set$154$(char_set_by_state, _next_state, moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$union(_char_set, _existing_char_set));
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _bind = moonbitlang$core$builtin$$Map$iter$154$(char_set_by_state);
  const result = moonbitlang$core$builtin$$Iter$to_array$24$((_p) => _bind((_p$2) => {
    const _state = _p$2._0;
    const _char_set = _p$2._1;
    const _bind$2 = moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$iter_ranges(_char_set);
    const _env = { _0: _state, _1: _bind$2 };
    return moonbitlang$ulex$lib$codegen$$group_trans$46$42$func$124$175(_env, _p);
  }));
  moonbitlang$core$array$$Array$sort$24$(result);
  return result;
}
function moonbitlang$ulex$lib$codegen$$rewrite_codeblock$46$index_of_name$124$121(captures, name) {
  const _p = captures.length;
  let _tmp;
  let _tmp$2 = 0;
  while (true) {
    const _p$2 = _tmp$2;
    if (_p$2 < _p) {
      const _p$3 = captures[_p$2];
      const _param123 = _p$3;
      const _n = _param123._0;
      if (_n === name) {
        _tmp = _p$2;
        break;
      }
      _tmp$2 = _p$2 + 1 | 0;
      continue;
    } else {
      _tmp = undefined;
      break;
    }
  }
  return moonbitlang$core$option$$Option$unwrap$7$(_tmp);
}
function moonbitlang$ulex$lib$codegen$$rewrite_codeblock(codeblock, subst, captures) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(0);
  let last_index = 0;
  const _len = subst.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const item = subst[_i];
      moonbitlang$core$builtin$$Logger$write_substring$40$(buf, codeblock, last_index, item.start - last_index | 0);
      const _bind = item.desc;
      switch (_bind.$tag) {
        case 0: {
          const _StartPosOf = _bind;
          const _name = _StartPosOf._0;
          moonbitlang$core$builtin$$Logger$write_string$40$(buf, `_capture_${moonbitlang$core$builtin$$Show$to_string$7$(moonbitlang$ulex$lib$codegen$$rewrite_codeblock$46$index_of_name$124$121(captures, _name))}_start`);
          break;
        }
        case 1: {
          const _EndPosOf = _bind;
          const _name$2 = _EndPosOf._0;
          moonbitlang$core$builtin$$Logger$write_string$40$(buf, `_capture_${moonbitlang$core$builtin$$Show$to_string$7$(moonbitlang$ulex$lib$codegen$$rewrite_codeblock$46$index_of_name$124$121(captures, _name$2))}_end`);
          break;
        }
        case 2: {
          moonbitlang$core$builtin$$Logger$write_string$40$(buf, "_match_start");
          break;
        }
        default: {
          moonbitlang$core$builtin$$Logger$write_string$40$(buf, "_match_end");
        }
      }
      last_index = item.end;
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (last_index < codeblock.length) {
    moonbitlang$core$builtin$$Logger$write_substring$40$(buf, codeblock, last_index, codeblock.length - last_index | 0);
  }
  return buf.val;
}
function moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$30(tag_var) {
  return tag_var._1 === 0 ? `_tag_${moonbitlang$core$builtin$$Show$to_string$7$(tag_var._0)}` : `_tag_${moonbitlang$core$builtin$$Show$to_string$7$(tag_var._0)}_${moonbitlang$core$builtin$$Show$to_string$7$(tag_var._1)}`;
}
function moonbitlang$ulex$lib$codegen$$codegen_rule_inner(rule, code_unit, default_encoding) {
  const out = moonbitlang$core$builtin$$StringBuilder$new(0);
  let encoding;
  _L: {
    _L$2: {
      switch (code_unit) {
        case 0: {
          encoding = default_encoding;
          break;
        }
        case 1: {
          break _L$2;
        }
        default: {
          break _L$2;
        }
      }
      break _L;
    }
    encoding = undefined;
  }
  const dfa = moonbitlang$ulex$lib$automaton$$DFA$from_rule(rule, encoding);
  const _bind = moonbitlang$core$array$$Array$iter$139$(dfa.captures);
  const max_num_capture_vars = moonbitlang$core$option$$Option$or$7$(moonbitlang$core$builtin$$Iter$maximum$7$((_p) => _bind((_p$2) => _p(_p$2._0.length))), 0);
  const max_pattern_id = dfa.code_blocks.length - 1 | 0;
  const _p = rule.lexee;
  moonbitlang$core$builtin$$Logger$write_string$40$(out, `  // The matched pattern id\n  let mut _match_pattern = @int.max_value\n  let mut _match_start = ${_p}.curr_pos()\n  let mut _match_end = -1\n`);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i <= max_num_capture_vars) {
      moonbitlang$core$builtin$$Logger$write_string$40$(out, `  let mut _capture_${moonbitlang$core$builtin$$Show$to_string$7$(i)}_start = -1\n  let mut _capture_${moonbitlang$core$builtin$$Show$to_string$7$(i)}_end = -1\n`);
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const all_tag_actions = moonbitlang$core$sorted_set$$new$41$();
  const _bind$2 = moonbitlang$core$builtin$$Map$iter2$160$(dfa.tag_actions);
  _bind$2((__, tag_action) => {
    moonbitlang$core$sorted_set$$T$add$41$(all_tag_actions, tag_action);
    return 1;
  });
  const all_tag_vars = moonbitlang$core$sorted_set$$new$42$();
  const _bind$3 = moonbitlang$core$sorted_set$$T$iter$41$(all_tag_actions);
  _bind$3((tag_action) => {
    const _arr = tag_action;
    const _len = _arr.length;
    let _tmp$2 = 0;
    while (true) {
      const _i = _tmp$2;
      if (_i < _len) {
        const op = _arr[_i];
        if (op.$tag === 0) {
          const _Set = op;
          const _dest = _Set._0;
          moonbitlang$core$sorted_set$$T$add$42$(all_tag_vars, _dest);
        } else {
          const _Copy = op;
          const _dest = _Copy._0;
          const _src = _Copy._1;
          moonbitlang$core$sorted_set$$T$add$42$(all_tag_vars, _dest);
          moonbitlang$core$sorted_set$$T$add$42$(all_tag_vars, _src);
        }
        _tmp$2 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return 1;
  });
  const _bind$4 = moonbitlang$core$sorted_set$$T$iter$42$(all_tag_vars);
  _bind$4((tag_var) => {
    const _p$2 = moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$30(tag_var);
    moonbitlang$core$builtin$$Logger$write_string$40$(out, `  let mut ${_p$2} = -1\n`);
    return 1;
  });
  const start_tags = moonbitlang$core$sorted_set$$new$7$();
  const _bind$5 = moonbitlang$core$sorted_set$$T$iter$7$(start_tags);
  _bind$5((tag) => {
    const _p$2 = moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$30({ _0: tag, _1: 0 });
    const _p$3 = rule.lexee;
    moonbitlang$core$builtin$$Logger$write_string$40$(out, `  ${_p$2} = ${_p$3}.curr_pos()\n`);
    return 1;
  });
  moonbitlang$core$builtin$$Logger$write_string$40$(out, `  loop ${moonbitlang$core$builtin$$Show$to_string$7$(dfa.start_node)} {\n`);
  const _arr = dfa.graph;
  const _len = _arr.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len) {
      const trans = _arr[_i];
      moonbitlang$core$builtin$$Logger$write_string$40$(out, `    ${moonbitlang$core$builtin$$Show$to_string$7$(_i)} => {\n`);
      const tag_action = moonbitlang$core$option$$Option$unwrap$41$(moonbitlang$core$builtin$$Map$get$160$(dfa.tag_actions, _i));
      const buf = [];
      const _arr$2 = tag_action;
      const _len$2 = _arr$2.length;
      let _tmp$3 = 0;
      while (true) {
        const _i$2 = _tmp$3;
        if (_i$2 < _len$2) {
          const op = _arr$2[_i$2];
          if (op.$tag === 0) {
            const _Set = op;
            const _dest = _Set._0;
            const _p$2 = moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$30(_dest);
            const _p$3 = rule.lexee;
            moonbitlang$core$array$$Array$push$0$(buf, `${_p$2} = ${_p$3}.curr_pos()`);
          } else {
            const _Copy = op;
            const _dest = _Copy._0;
            const _src = _Copy._1;
            const _p$2 = moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$30(_dest);
            const _p$3 = moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$30(_src);
            moonbitlang$core$array$$Array$push$0$(buf, `${_p$2} = ${_p$3}`);
          }
          _tmp$3 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      let _bind$6;
      if (buf.length === 0) {
        _bind$6 = undefined;
      } else {
        const _bind$7 = moonbitlang$core$array$$Array$iter$0$(buf);
        _bind$6 = moonbitlang$core$builtin$$Iter$join((_p$2) => _bind$7((_p$3) => _p$2(`      ${_p$3}`)), "\n");
      }
      if (_bind$6 === undefined) {
      } else {
        const _Some = _bind$6;
        const _tag_action_code = _Some;
        moonbitlang$core$builtin$$Logger$write_string$40$(out, `${_tag_action_code}\n`);
      }
      const _bind$7 = moonbitlang$core$builtin$$Map$get$156$(dfa.end_nodes, _i);
      if (_bind$7 === undefined) {
      } else {
        const _Some = _bind$7;
        const _x = _Some;
        const _pattern_id = _x._0;
        const _captures = _x._1;
        const _tmp$4 = moonbitlang$core$builtin$$Show$to_string$7$(_pattern_id);
        const _tmp$5 = moonbitlang$core$builtin$$Show$to_string$7$(_pattern_id);
        const _p$2 = rule.lexee;
        moonbitlang$core$builtin$$Logger$write_string$40$(out, `      if _match_pattern >= ${_tmp$4} {\n        _match_pattern = ${_tmp$5}\n        _match_end = ${_p$2}.curr_pos()\n`);
        const _len$3 = _captures.length;
        let _tmp$6 = 0;
        while (true) {
          const _i$2 = _tmp$6;
          if (_i$2 < _len$3) {
            const capture = _captures[_i$2];
            const _begin = capture._0;
            const _end = capture._1;
            if (_begin.$tag === 0) {
              const _Dynamic_dfa = _begin;
              const _begin_tag_var = _Dynamic_dfa._0;
              const _tmp$7 = moonbitlang$core$builtin$$Show$to_string$7$(_i$2);
              const _p$3 = moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$30(_begin_tag_var);
              moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${_tmp$7}_start = ${_p$3}\n`);
            } else {
              const _Static_dfa = _begin;
              const _x$2 = _Static_dfa._0;
              if (_x$2.$tag === 0) {
                const _RelativeToStart = _x$2;
                const _offset = _RelativeToStart._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_start = _match_start\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_start = _match_start + ${moonbitlang$core$builtin$$Show$to_string$7$(_offset)}\n`);
                }
              } else {
                const _RelativeToEnd = _x$2;
                const _offset = _RelativeToEnd._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_start = _match_end\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_start = _match_end + ${moonbitlang$core$builtin$$Show$to_string$7$(_offset)}\n`);
                }
              }
            }
            if (_end.$tag === 0) {
              const _Dynamic_dfa = _end;
              const _end_tag_var = _Dynamic_dfa._0;
              const _tmp$7 = moonbitlang$core$builtin$$Show$to_string$7$(_i$2);
              const _p$3 = moonbitlang$ulex$lib$codegen$$codegen_rule_inner$46$gen_tag_var$124$30(_end_tag_var);
              moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${_tmp$7}_end = ${_p$3}\n`);
            } else {
              const _Static_dfa = _end;
              const _x$2 = _Static_dfa._0;
              if (_x$2.$tag === 0) {
                const _RelativeToStart = _x$2;
                const _offset = _RelativeToStart._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_end = _match_start\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_end = _match_start + ${moonbitlang$core$builtin$$Show$to_string$7$(_offset)}\n`);
                }
              } else {
                const _RelativeToEnd = _x$2;
                const _offset = _RelativeToEnd._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_end = _match_end\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_end = _match_end + ${moonbitlang$core$builtin$$Show$to_string$7$(_offset)}\n`);
                }
              }
            }
            _tmp$6 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$40$(out, "      }\n");
      }
      const grouped_trans = moonbitlang$ulex$lib$codegen$$group_trans(trans);
      if (grouped_trans.length === 0) {
        moonbitlang$core$builtin$$Logger$write_string$40$(out, "      break\n");
      } else {
        const _p$2 = rule.lexee;
        moonbitlang$core$builtin$$Logger$write_string$40$(out, `      continue match ${_p$2}.next_as_int() {\n`);
        const _len$3 = grouped_trans.length;
        let _tmp$4 = 0;
        while (true) {
          const _i$2 = _tmp$4;
          if (_i$2 < _len$3) {
            const tran = grouped_trans[_i$2];
            const _x = tran._0;
            const _first_char = _x._0;
            const _last_char = _x._1;
            const _next_state = tran._1;
            const pattern = _first_char === _last_char ? moonbitlang$core$builtin$$Show$to_string$7$(_first_char) : `${moonbitlang$core$builtin$$Show$to_string$7$(_first_char)}..=${moonbitlang$core$builtin$$Show$to_string$7$(_last_char)}`;
            moonbitlang$core$builtin$$Logger$write_string$40$(out, `        ${pattern} => ${moonbitlang$core$builtin$$Show$to_string$7$(_next_state)}\n`);
            _tmp$4 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$40$(out, "        _ => break\n      }\n");
      }
      moonbitlang$core$builtin$$Logger$write_string$40$(out, "    }\n");
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$40$(out, "    _ => panic()\n  }\n");
  const _tmp$3 = moonbitlang$core$builtin$$Show$to_string$7$(max_pattern_id);
  const _p$2 = rule.lexee;
  moonbitlang$core$builtin$$Logger$write_string$40$(out, `\n  guard _match_pattern <= ${_tmp$3} else {\n    // No pattern matched\n    panic()\n  }\n\n  ${_p$2}.reset(pos=_match_end)\n  match _match_pattern {\n`);
  const _arr$2 = dfa.code_blocks;
  const _len$2 = _arr$2.length;
  let _tmp$4 = 0;
  while (true) {
    const _i = _tmp$4;
    if (_i < _len$2) {
      const codeblock = _arr$2[_i];
      moonbitlang$core$builtin$$Logger$write_string$40$(out, `    ${moonbitlang$core$builtin$$Show$to_string$7$(_i)} => {\n      ()\n`);
      const subst = moonbitlang$ulex$lib$codegen$codeblock_parser$$parse_codeblock(codeblock);
      const captures = moonbitlang$core$array$$Array$op_get$139$(dfa.captures, _i);
      const _arr$3 = captures._0;
      const _len$3 = _arr$3.length;
      let _tmp$5 = 0;
      while (true) {
        const _i$2 = _tmp$5;
        if (_i$2 < _len$3) {
          const capture = _arr$3[_i$2];
          const _name = capture._0;
          const _var_type = capture._1;
          if (_var_type === 0) {
            const _p$3 = rule.lexee;
            moonbitlang$core$builtin$$Logger$write_string$40$(out, `      let ${_name} = ${_p$3}.get_char(_capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_start, _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_end)\n`);
          } else {
            const _p$3 = rule.lexee;
            moonbitlang$core$builtin$$Logger$write_string$40$(out, `      let ${_name} = ${_p$3}.get_string(_capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_start, _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_end)\n`);
          }
          let _tmp$6;
          let _return_value;
          _L$2: {
            _L$3: {
              const _len$4 = subst.length;
              let _tmp$7 = 0;
              while (true) {
                const _i$3 = _tmp$7;
                if (_i$3 < _len$4) {
                  const item = subst[_i$3];
                  let n;
                  _L$4: {
                    _L$5: {
                      const _bind$6 = item.desc;
                      switch (_bind$6.$tag) {
                        case 0: {
                          const _StartPosOf = _bind$6;
                          const _n = _StartPosOf._0;
                          n = _n;
                          break _L$5;
                        }
                        case 1: {
                          const _EndPosOf = _bind$6;
                          const _n$2 = _EndPosOf._0;
                          n = _n$2;
                          break _L$5;
                        }
                        case 2: {
                          break;
                        }
                      }
                      break _L$4;
                    }
                    if (n === _name) {
                      _return_value = true;
                      break _L$3;
                    }
                  }
                  _tmp$7 = _i$3 + 1 | 0;
                  continue;
                } else {
                  break;
                }
              }
              _tmp$6 = false;
              break _L$2;
            }
            _tmp$6 = _return_value;
          }
          if (_tmp$6) {
            moonbitlang$core$builtin$$Logger$write_string$40$(out, `      let _ = ${_name}\n`);
          }
          _tmp$5 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const _p$3 = moonbitlang$ulex$lib$codegen$$rewrite_codeblock(codeblock, subst, captures._0);
      moonbitlang$core$builtin$$Logger$write_string$40$(out, `${_p$3}\n`);
      moonbitlang$core$builtin$$Logger$write_string$40$(out, "    }\n");
      _tmp$4 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$40$(out, "    _ => panic()\n  }");
  return out.val;
}
function moonbitlang$ulex$lib$codegen$$codegen_rule(rule, code_unit, default_encoding) {
  const inner = moonbitlang$ulex$lib$codegen$$codegen_rule_inner(rule, code_unit, default_encoding);
  const _p = rule.signature;
  return `fn ${_p} {\n${inner}\n}\n\n`;
}
function moonbitlang$ulex$lib$codegen$$codegen_lex(lex, code_unit, default_encoding) {
  const _tmp = lex.header;
  const _p = lex.rules;
  const _p$2 = new Array(_p.length);
  const _p$3 = _p.length;
  let _tmp$2 = 0;
  while (true) {
    const _p$4 = _tmp$2;
    if (_p$4 < _p$3) {
      const _p$5 = _p[_p$4];
      const rule = _p$5;
      _p$2[_p$4] = moonbitlang$ulex$lib$codegen$$codegen_rule(rule, code_unit, default_encoding);
      _tmp$2 = _p$4 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _tmp$3 = moonbitlang$core$array$$Array$join(_p$2, "\n");
  return moonbitlang$core$array$$Array$join([_tmp, _tmp$3, lex.trailer], "\n\n");
}
function Yoorkin$trie$$T$lookup$209$(self, path) {
  const _bind = moonbitlang$core$string$$String$to_array(path);
  let _tmp = { buf: _bind, start: 0, len: _bind.length };
  let _tmp$2 = self;
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (_param.len === 0) {
      return _param$2.value;
    } else {
      const _x = _param.buf[_param.start];
      const _tmp$3 = _param.buf;
      const _tmp$4 = 1 + _param.start | 0;
      const _some = _param.len;
      const _x$2 = { buf: _tmp$3, start: _tmp$4, len: _some - 1 | 0 };
      const _bind$2 = moonbitlang$core$immut$sorted_map$$T$op_get$81$(_param$2.forks, _x);
      if (_bind$2 === undefined) {
        return undefined;
      } else {
        const _Some = _bind$2;
        const _subtree = _Some;
        _tmp = _x$2;
        _tmp$2 = _subtree;
        continue;
      }
    }
  }
}
function Yoorkin$trie$$add$46$aux$47$7529(value, _param18, _param19) {
  if (_param18.len === 0) {
    return { value: value, forks: _param19.forks };
  } else {
    const _x = _param18.buf[_param18.start];
    const _tmp = _param18.buf;
    const _tmp$2 = 1 + _param18.start | 0;
    const _some = _param18.len;
    const _x$2 = { buf: _tmp, start: _tmp$2, len: _some - 1 | 0 };
    const subtree = moonbitlang$core$option$$Option$or$106$(moonbitlang$core$immut$sorted_map$$T$op_get$81$(_param19.forks, _x), { value: undefined, forks: $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$12$ });
    return { value: _param19.value, forks: moonbitlang$core$immut$sorted_map$$T$add$81$(_param19.forks, _x, Yoorkin$trie$$add$46$aux$47$7529(value, _x$2, subtree)) };
  }
}
function Yoorkin$trie$$T$add$209$(self, path, value) {
  const _bind = moonbitlang$core$string$$String$to_array(path);
  return Yoorkin$trie$$add$46$aux$47$7529(value, { buf: _bind, start: 0, len: _bind.length }, self);
}
function Yoorkin$trie$$empty$209$() {
  return { value: undefined, forks: $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$12$ };
}
function Yoorkin$ArgParser$$interpret(trie, xs, fallback) {
  const _bind = xs.length;
  let _tmp = xs;
  let _tmp$2 = 0;
  let _tmp$3 = _bind;
  _L: while (true) {
    const _param_buf = _tmp;
    const _param_start = _tmp$2;
    const _param_len = _tmp$3;
    if (_param_len === 0) {
      return;
    } else {
      const _x = _param_buf[_param_start];
      const _bind$2 = 1 + _param_start | 0;
      const _some = _param_len;
      const _bind$3 = _some - 1 | 0;
      const _bind$4 = Yoorkin$trie$$T$lookup$209$(trie, _x);
      if (_bind$4 === undefined) {
        fallback(_x);
        _tmp$2 = _bind$2;
        _tmp$3 = _bind$3;
        continue;
      } else {
        const _Some = _bind$4;
        const _spec = _Some;
        _L$2: {
          switch (_spec.$tag) {
            case 1: {
              const _String = _spec;
              const _f = _String._0;
              if (_bind$3 >= 1) {
                const _y = _param_buf[_bind$2];
                const _bind$5 = 1 + _bind$2 | 0;
                const _some$2 = _bind$3;
                const _bind$6 = _some$2 - 1 | 0;
                _f(_y);
                _tmp$2 = _bind$5;
                _tmp$3 = _bind$6;
                continue _L;
              } else {
                break _L$2;
              }
            }
            case 2: {
              const _Set_string = _spec;
              const _r = _Set_string._0;
              if (_bind$3 >= 1) {
                const _y = _param_buf[_bind$2];
                const _bind$5 = 1 + _bind$2 | 0;
                const _some$2 = _bind$3;
                const _bind$6 = _some$2 - 1 | 0;
                _r.val = _y;
                _tmp$2 = _bind$5;
                _tmp$3 = _bind$6;
                continue _L;
              } else {
                break _L$2;
              }
            }
            case 3: {
              const _Set = _spec;
              const _r$2 = _Set._0;
              _r$2.val = true;
              _tmp$2 = _bind$2;
              _tmp$3 = _bind$3;
              continue _L;
            }
            case 4: {
              const _Clear = _spec;
              const _r$3 = _Clear._0;
              _r$3.val = false;
              _tmp$2 = _bind$2;
              _tmp$3 = _bind$3;
              continue _L;
            }
            default: {
              const _Unit = _spec;
              const _f$2 = _Unit._0;
              _f$2();
              _tmp$2 = _bind$2;
              _tmp$3 = _bind$3;
              continue _L;
            }
          }
        }
        moonbitlang$core$builtin$$println$0$(`missing argument for ${_x}`);
        return;
      }
    }
  }
}
function Yoorkin$ArgParser$$parse$46$aux$124$7(_param5, _param6) {
  const _x = _param5._0;
  const _help_msg = _param5._1;
  const _a = _param6._0;
  const _b = _param6._1;
  const _spec = _param6._2;
  const _help = _param6._3;
  const trie = Yoorkin$trie$$T$add$209$(Yoorkin$trie$$T$add$209$(_x, _a, _spec), _b, _spec);
  const help_msg = `${_help_msg}  ${_a}\t${_b}\t${_help}\n`;
  return { _0: trie, _1: help_msg };
}
function Yoorkin$ArgParser$$parse(speclist, rest, usage_msg, argv) {
  const _p = { _0: Yoorkin$trie$$empty$209$(), _1: `${usage_msg}\n options:\n` };
  let _bind;
  let _tmp = 0;
  let _tmp$2 = _p;
  while (true) {
    const _p$2 = _tmp;
    const _p$3 = _tmp$2;
    if (_p$2 < speclist.length) {
      const _tmp$3 = _p$2 + 1 | 0;
      const _tmp$4 = Yoorkin$ArgParser$$parse$46$aux$124$7(_p$3, moonbitlang$core$array$$Array$op_get$137$(speclist, _p$2));
      _tmp = _tmp$3;
      _tmp$2 = _tmp$4;
      continue;
    } else {
      _bind = _p$3;
      break;
    }
  }
  const _trie = _bind._0;
  const _help_msg = _bind._1;
  const help_spec = new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    moonbitlang$core$builtin$$println$0$(_help_msg);
  });
  const trie = Yoorkin$trie$$T$add$209$(Yoorkin$trie$$T$add$209$(_trie, "--help", help_spec), "-h", help_spec);
  Yoorkin$ArgParser$$interpret(trie, argv, rest);
}
function moonbitlang$x$internal$ffi$$mbt_string_to_utf8_bytes(str, is_filename) {
  const res = [];
  const len = str.length;
  let i = 0;
  while (true) {
    if (i < len) {
      const _tmp = i;
      $bound_check(str, _tmp);
      let c = str.charCodeAt(_tmp);
      if (55296 <= c && c <= 56319) {
        c = c - 55296 | 0;
        i = i + 1 | 0;
        const _tmp$2 = i;
        $bound_check(str, _tmp$2);
        const l = str.charCodeAt(_tmp$2) - 56320 | 0;
        c = ((c << 10) + l | 0) + 65536 | 0;
      }
      if (c < 128) {
        moonbitlang$core$array$$Array$push$16$(res, c & 255);
      } else {
        if (c < 2048) {
          moonbitlang$core$array$$Array$push$16$(res, (192 + (c >> 6) | 0) & 255);
          moonbitlang$core$array$$Array$push$16$(res, (128 + (c & 63) | 0) & 255);
        } else {
          if (c < 65536) {
            moonbitlang$core$array$$Array$push$16$(res, (224 + (c >> 12) | 0) & 255);
            moonbitlang$core$array$$Array$push$16$(res, (128 + (c >> 6 & 63) | 0) & 255);
            moonbitlang$core$array$$Array$push$16$(res, (128 + (c & 63) | 0) & 255);
          } else {
            moonbitlang$core$array$$Array$push$16$(res, (240 + (c >> 18) | 0) & 255);
            moonbitlang$core$array$$Array$push$16$(res, (128 + (c >> 12 & 63) | 0) & 255);
            moonbitlang$core$array$$Array$push$16$(res, (128 + (c >> 6 & 63) | 0) & 255);
            moonbitlang$core$array$$Array$push$16$(res, (128 + (c & 63) | 0) & 255);
          }
        }
      }
      i = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (is_filename) {
    moonbitlang$core$array$$Array$push$16$(res, 0 & 255);
  }
  return moonbitlang$core$bytes$$Bytes$from_array(res);
}
function moonbitlang$x$internal$ffi$$utf8_bytes_to_mbt_string(bytes) {
  const res = [];
  const len = bytes.length;
  let i = 0;
  while (true) {
    if (i < len) {
      const _tmp = i;
      $bound_check(bytes, _tmp);
      let c = bytes[_tmp];
      if (c < 128) {
        moonbitlang$core$array$$Array$push$70$(res, c);
        i = i + 1 | 0;
      } else {
        if (c < 224) {
          if ((i + 1 | 0) >= len) {
            break;
          }
          const _tmp$2 = (c & 31) << 6;
          const _tmp$3 = i + 1 | 0;
          $bound_check(bytes, _tmp$3);
          c = _tmp$2 | bytes[_tmp$3] & 63;
          moonbitlang$core$array$$Array$push$70$(res, c);
          i = i + 2 | 0;
        } else {
          if (c < 240) {
            if ((i + 2 | 0) >= len) {
              break;
            }
            const _tmp$2 = (c & 15) << 12;
            const _tmp$3 = i + 1 | 0;
            $bound_check(bytes, _tmp$3);
            const _tmp$4 = _tmp$2 | (bytes[_tmp$3] & 63) << 6;
            const _tmp$5 = i + 2 | 0;
            $bound_check(bytes, _tmp$5);
            c = _tmp$4 | bytes[_tmp$5] & 63;
            moonbitlang$core$array$$Array$push$70$(res, c);
            i = i + 3 | 0;
          } else {
            if ((i + 3 | 0) >= len) {
              break;
            }
            const _tmp$2 = (c & 7) << 18;
            const _tmp$3 = i + 1 | 0;
            $bound_check(bytes, _tmp$3);
            const _tmp$4 = _tmp$2 | (bytes[_tmp$3] & 63) << 12;
            const _tmp$5 = i + 2 | 0;
            $bound_check(bytes, _tmp$5);
            const _tmp$6 = _tmp$4 | (bytes[_tmp$5] & 63) << 6;
            const _tmp$7 = i + 3 | 0;
            $bound_check(bytes, _tmp$7);
            c = _tmp$6 | bytes[_tmp$7] & 63;
            c = c - 65536 | 0;
            moonbitlang$core$array$$Array$push$70$(res, (c >> 10) + 55296 | 0);
            moonbitlang$core$array$$Array$push$70$(res, (c & 1023) + 56320 | 0);
            i = i + 4 | 0;
          }
        }
      }
      continue;
    } else {
      break;
    }
  }
  return moonbitlang$core$string$$String$from_array(res);
}
function moonbitlang$x$sys$internal$ffi$$get_cli_args() {
  return moonbitlang$x$sys$internal$ffi$$get_cli_args_internal();
}
function moonbitlang$x$sys$$get_cli_args() {
  return moonbitlang$x$sys$internal$ffi$$get_cli_args();
}
function moonbitlang$x$fs$$read_file_to_bytes_internal(path) {
  const res = moonbitlang$x$fs$$read_file_ffi(path);
  if (res === -1) {
    return new Result$Err$38$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(moonbitlang$x$fs$$get_error_message_ffi()));
  }
  return new Result$Ok$39$(moonbitlang$x$fs$$get_file_content_ffi());
}
function moonbitlang$x$fs$$read_file_to_string_internal(path, encoding) {
  if (encoding === "utf8") {
    const _bind = moonbitlang$x$fs$$read_file_to_bytes_internal(path);
    let bytes;
    if (_bind.$tag === 1) {
      const _ok = _bind;
      bytes = _ok._0;
    } else {
      return _bind;
    }
    return new Result$Ok$41$(moonbitlang$x$internal$ffi$$utf8_bytes_to_mbt_string(bytes));
  } else {
    return new Result$Err$40$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(`Unsupported encoding: ${encoding}, only utf8 is supported for now`));
  }
}
function moonbitlang$x$fs$$write_bytes_to_file_internal(path, content) {
  const res = moonbitlang$x$fs$$write_file_ffi(path, content);
  if (res === -1) {
    return new Result$Err$43$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(moonbitlang$x$fs$$get_error_message_ffi()));
  } else {
    return new Result$Ok$42$(undefined);
  }
}
function moonbitlang$x$fs$$write_string_to_file_internal(path, content, encoding) {
  if (encoding === "utf8") {
    const bytes = moonbitlang$x$internal$ffi$$mbt_string_to_utf8_bytes(content, false);
    return moonbitlang$x$fs$$write_bytes_to_file_internal(path, bytes);
  } else {
    return new Result$Err$43$(new Error$moonbitlang$47$x$47$fs$46$IOError$46$IOError(`Unsupported encoding: ${encoding}, only utf8 is supported for now`));
  }
}
function moonbitlang$x$fs$$read_file_to_bytes(path) {
  return moonbitlang$x$fs$$read_file_to_bytes_internal(path);
}
function moonbitlang$x$fs$$read_file_to_string(path, encoding) {
  return moonbitlang$x$fs$$read_file_to_string_internal(path, encoding);
}
function moonbitlang$x$fs$$write_string_to_file(path, content, encoding) {
  return moonbitlang$x$fs$$write_string_to_file_internal(path, content, encoding);
}
function moonbitlang$ulex$main$util$$exit$4$(code) {
  moonbitlang$ulex$main$util$$ffi_exit(code);
  $panic();
}
function moonbitlang$ulex$main$util$$exit$210$(code) {
  moonbitlang$ulex$main$util$$ffi_exit(code);
  return $panic();
}
function moonbitlang$core$builtin$$Show$output$122$(_x_76, _x_77) {
  if (_x_76.$tag === 0) {
    const _InterpLit = _x_76;
    const _$42$arg_78 = _InterpLit._0;
    const _$42$arg_79 = _InterpLit._1;
    _x_77.method_0(_x_77.self, "InterpLit(");
    _x_77.method_0(_x_77.self, "repr=");
    moonbitlang$core$builtin$$Logger$write_object$0$(_x_77, _$42$arg_78);
    _x_77.method_0(_x_77.self, ", ");
    _x_77.method_0(_x_77.self, "loc=");
    moonbitlang$core$builtin$$Logger$write_object$124$(_x_77, _$42$arg_79);
    _x_77.method_0(_x_77.self, ")");
    return;
  } else {
    const _InterpSource = _x_76;
    const _$42$arg_80 = _InterpSource._0;
    _x_77.method_0(_x_77.self, "InterpSource(");
    moonbitlang$core$builtin$$Logger$write_object$125$(_x_77, _$42$arg_80);
    _x_77.method_0(_x_77.self, ")");
    return;
  }
}
function moonbitlang$core$builtin$$Show$output$125$(_x_62, _x_63) {
  _x_63.method_0(_x_63.self, "{");
  _x_63.method_0(_x_63.self, "source: ");
  moonbitlang$core$builtin$$Logger$write_object$0$(_x_63, _x_62.source);
  _x_63.method_0(_x_63.self, ", ");
  _x_63.method_0(_x_63.self, "loc: ");
  moonbitlang$core$builtin$$Logger$write_object$124$(_x_63, _x_62.loc);
  _x_63.method_0(_x_63.self, "}");
}
function moonbitlang$core$builtin$$Show$output$107$(_x_55, _x_56) {
  _x_56.method_0(_x_56.self, "{");
  _x_56.method_0(_x_56.self, "fname: ");
  moonbitlang$core$builtin$$Logger$write_object$0$(_x_56, _x_55.fname);
  _x_56.method_0(_x_56.self, ", ");
  _x_56.method_0(_x_56.self, "lnum: ");
  moonbitlang$core$builtin$$Logger$write_object$7$(_x_56, _x_55.lnum);
  _x_56.method_0(_x_56.self, ", ");
  _x_56.method_0(_x_56.self, "bol: ");
  moonbitlang$core$builtin$$Logger$write_object$7$(_x_56, _x_55.bol);
  _x_56.method_0(_x_56.self, ", ");
  _x_56.method_0(_x_56.self, "cnum: ");
  moonbitlang$core$builtin$$Logger$write_object$7$(_x_56, _x_55.cnum);
  _x_56.method_0(_x_56.self, "}");
}
function moonbitlang$core$builtin$$Show$output$114$(_x_48, _x_49) {
  _x_49.method_0(_x_49.self, "{");
  _x_49.method_0(_x_49.self, "content: ");
  moonbitlang$core$builtin$$Logger$write_object$0$(_x_49, _x_48.content);
  _x_49.method_0(_x_49.self, ", ");
  _x_49.method_0(_x_49.self, "kind: ");
  moonbitlang$core$builtin$$Logger$write_object$119$(_x_49, _x_48.kind);
  _x_49.method_0(_x_49.self, ", ");
  _x_49.method_0(_x_49.self, "consumed_by_docstring: ");
  moonbitlang$core$builtin$$Logger$write_object$120$(_x_49, _x_48.consumed_by_docstring);
  _x_49.method_0(_x_49.self, "}");
}
function moonbitlang$core$builtin$$Show$output$119$(_x_40, _x_41) {
  if (_x_40.$tag === 0) {
    _x_41.method_0(_x_41.self, "InlineTrailing");
    return;
  } else {
    const _Ownline = _x_40;
    const _$42$arg_42 = _Ownline._0;
    const _$42$arg_43 = _Ownline._1;
    _x_41.method_0(_x_41.self, "Ownline(");
    _x_41.method_0(_x_41.self, "leading_blank_line=");
    moonbitlang$core$builtin$$Logger$write_object$34$(_x_41, _$42$arg_42);
    _x_41.method_0(_x_41.self, ", ");
    _x_41.method_0(_x_41.self, "trailing_blank_line=");
    moonbitlang$core$builtin$$Logger$write_object$34$(_x_41, _$42$arg_43);
    _x_41.method_0(_x_41.self, ")");
    return;
  }
}
function moonbitlang$core$builtin$$Show$output$124$(_x_36, _x_37) {
  _x_37.method_0(_x_37.self, "{");
  _x_37.method_0(_x_37.self, "start: ");
  moonbitlang$core$builtin$$Logger$write_object$107$(_x_37, _x_36.start);
  _x_37.method_0(_x_37.self, ", ");
  _x_37.method_0(_x_37.self, "end: ");
  moonbitlang$core$builtin$$Logger$write_object$107$(_x_37, _x_36.end);
  _x_37.method_0(_x_37.self, "}");
}
function moonbitlang$core$builtin$$Compare$compare$107$(self, other) {
  return self.fname === other.fname ? $compare_int(self.cnum, other.cnum) : $panic();
}
function moonbitlang$core$builtin$$Show$output$110$(_x_4, _x_5) {
  switch (_x_4.$tag) {
    case 0: {
      const _CHAR = _x_4;
      const _$42$arg_6 = _CHAR._0;
      _x_5.method_0(_x_5.self, "CHAR(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_6);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 1: {
      const _INT = _x_4;
      const _$42$arg_7 = _INT._0;
      _x_5.method_0(_x_5.self, "INT(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_7);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 2: {
      const _BYTE = _x_4;
      const _$42$arg_8 = _BYTE._0;
      _x_5.method_0(_x_5.self, "BYTE(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_8);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 3: {
      const _BYTES = _x_4;
      const _$42$arg_9 = _BYTES._0;
      _x_5.method_0(_x_5.self, "BYTES(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_9);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 4: {
      const _FLOAT = _x_4;
      const _$42$arg_10 = _FLOAT._0;
      _x_5.method_0(_x_5.self, "FLOAT(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_10);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 5: {
      const _STRING = _x_4;
      const _$42$arg_11 = _STRING._0;
      _x_5.method_0(_x_5.self, "STRING(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_11);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 6: {
      const _MULTILINE_STRING = _x_4;
      const _$42$arg_12 = _MULTILINE_STRING._0;
      _x_5.method_0(_x_5.self, "MULTILINE_STRING(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_12);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 7: {
      const _MULTILINE_INTERP = _x_4;
      const _$42$arg_13 = _MULTILINE_INTERP._0;
      _x_5.method_0(_x_5.self, "MULTILINE_INTERP(");
      moonbitlang$core$builtin$$Logger$write_object$2$(_x_5, _$42$arg_13);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 8: {
      const _INTERP = _x_4;
      const _$42$arg_14 = _INTERP._0;
      _x_5.method_0(_x_5.self, "INTERP(");
      moonbitlang$core$builtin$$Logger$write_object$2$(_x_5, _$42$arg_14);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 9: {
      const _ATTRIBUTE = _x_4;
      const _$42$arg_15 = _ATTRIBUTE._0;
      _x_5.method_0(_x_5.self, "ATTRIBUTE(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_15);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 10: {
      const _LIDENT = _x_4;
      const _$42$arg_16 = _LIDENT._0;
      _x_5.method_0(_x_5.self, "LIDENT(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_16);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 11: {
      const _UIDENT = _x_4;
      const _$42$arg_17 = _UIDENT._0;
      _x_5.method_0(_x_5.self, "UIDENT(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_17);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 12: {
      _x_5.method_0(_x_5.self, "LIDENT_LEX");
      return;
    }
    case 13: {
      _x_5.method_0(_x_5.self, "UIDENT_REGEX");
      return;
    }
    case 14: {
      const _POST_LABEL = _x_4;
      const _$42$arg_18 = _POST_LABEL._0;
      _x_5.method_0(_x_5.self, "POST_LABEL(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_18);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 15: {
      const _COMMENT = _x_4;
      const _$42$arg_19 = _COMMENT._0;
      _x_5.method_0(_x_5.self, "COMMENT(");
      moonbitlang$core$builtin$$Logger$write_object$114$(_x_5, _$42$arg_19);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 16: {
      _x_5.method_0(_x_5.self, "NEWLINE");
      return;
    }
    case 17: {
      const _INFIX1 = _x_4;
      const _$42$arg_20 = _INFIX1._0;
      _x_5.method_0(_x_5.self, "INFIX1(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_20);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 18: {
      const _INFIX2 = _x_4;
      const _$42$arg_21 = _INFIX2._0;
      _x_5.method_0(_x_5.self, "INFIX2(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_21);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 19: {
      const _INFIX3 = _x_4;
      const _$42$arg_22 = _INFIX3._0;
      _x_5.method_0(_x_5.self, "INFIX3(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_22);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 20: {
      const _INFIX4 = _x_4;
      const _$42$arg_23 = _INFIX4._0;
      _x_5.method_0(_x_5.self, "INFIX4(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_23);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 21: {
      const _AUGMENTED_ASSIGNMENT = _x_4;
      const _$42$arg_24 = _AUGMENTED_ASSIGNMENT._0;
      _x_5.method_0(_x_5.self, "AUGMENTED_ASSIGNMENT(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_24);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 22: {
      _x_5.method_0(_x_5.self, "EOF");
      return;
    }
    case 23: {
      _x_5.method_0(_x_5.self, "FALSE");
      return;
    }
    case 24: {
      _x_5.method_0(_x_5.self, "TRUE");
      return;
    }
    case 25: {
      _x_5.method_0(_x_5.self, "PUB");
      return;
    }
    case 26: {
      _x_5.method_0(_x_5.self, "PRIV");
      return;
    }
    case 27: {
      _x_5.method_0(_x_5.self, "READONLY");
      return;
    }
    case 28: {
      _x_5.method_0(_x_5.self, "IMPORT");
      return;
    }
    case 29: {
      _x_5.method_0(_x_5.self, "EXTERN");
      return;
    }
    case 30: {
      _x_5.method_0(_x_5.self, "BREAK");
      return;
    }
    case 31: {
      _x_5.method_0(_x_5.self, "CONTINUE");
      return;
    }
    case 32: {
      _x_5.method_0(_x_5.self, "STRUCT");
      return;
    }
    case 33: {
      _x_5.method_0(_x_5.self, "ENUM");
      return;
    }
    case 34: {
      _x_5.method_0(_x_5.self, "TRAIT");
      return;
    }
    case 35: {
      _x_5.method_0(_x_5.self, "DERIVE");
      return;
    }
    case 36: {
      _x_5.method_0(_x_5.self, "IMPL");
      return;
    }
    case 37: {
      _x_5.method_0(_x_5.self, "WITH");
      return;
    }
    case 38: {
      _x_5.method_0(_x_5.self, "RAISE");
      return;
    }
    case 39: {
      _x_5.method_0(_x_5.self, "THROW");
      return;
    }
    case 40: {
      _x_5.method_0(_x_5.self, "TRY");
      return;
    }
    case 41: {
      _x_5.method_0(_x_5.self, "CATCH");
      return;
    }
    case 42: {
      _x_5.method_0(_x_5.self, "ASYNC");
      return;
    }
    case 43: {
      _x_5.method_0(_x_5.self, "TYPEALIAS");
      return;
    }
    case 44: {
      _x_5.method_0(_x_5.self, "TRAITALIAS");
      return;
    }
    case 45: {
      _x_5.method_0(_x_5.self, "FNALIAS");
      return;
    }
    case 46: {
      _x_5.method_0(_x_5.self, "EQUAL");
      return;
    }
    case 47: {
      _x_5.method_0(_x_5.self, "LPAREN");
      return;
    }
    case 48: {
      _x_5.method_0(_x_5.self, "RPAREN");
      return;
    }
    case 49: {
      _x_5.method_0(_x_5.self, "COMMA");
      return;
    }
    case 50: {
      _x_5.method_0(_x_5.self, "MINUS");
      return;
    }
    case 51: {
      _x_5.method_0(_x_5.self, "QUESTION");
      return;
    }
    case 52: {
      _x_5.method_0(_x_5.self, "EXCLAMATION");
      return;
    }
    case 53: {
      const _DOT_LIDENT = _x_4;
      const _$42$arg_25 = _DOT_LIDENT._0;
      _x_5.method_0(_x_5.self, "DOT_LIDENT(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_25);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 54: {
      const _DOT_UIDENT = _x_4;
      const _$42$arg_26 = _DOT_UIDENT._0;
      _x_5.method_0(_x_5.self, "DOT_UIDENT(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_26);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 55: {
      const _DOT_INT = _x_4;
      const _$42$arg_27 = _DOT_INT._0;
      _x_5.method_0(_x_5.self, "DOT_INT(");
      moonbitlang$core$builtin$$Logger$write_object$7$(_x_5, _$42$arg_27);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 56: {
      _x_5.method_0(_x_5.self, "DOT_LPAREN");
      return;
    }
    case 57: {
      _x_5.method_0(_x_5.self, "COLONCOLON");
      return;
    }
    case 58: {
      _x_5.method_0(_x_5.self, "COLON");
      return;
    }
    case 59: {
      const _SEMI = _x_4;
      const _$42$arg_28 = _SEMI._0;
      _x_5.method_0(_x_5.self, "SEMI(");
      moonbitlang$core$builtin$$Logger$write_object$34$(_x_5, _$42$arg_28);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 60: {
      _x_5.method_0(_x_5.self, "LBRACKET");
      return;
    }
    case 61: {
      _x_5.method_0(_x_5.self, "PLUS");
      return;
    }
    case 62: {
      _x_5.method_0(_x_5.self, "RBRACKET");
      return;
    }
    case 63: {
      _x_5.method_0(_x_5.self, "UNDERSCORE");
      return;
    }
    case 64: {
      _x_5.method_0(_x_5.self, "BAR");
      return;
    }
    case 65: {
      _x_5.method_0(_x_5.self, "LBRACE");
      return;
    }
    case 66: {
      _x_5.method_0(_x_5.self, "RBRACE");
      return;
    }
    case 67: {
      _x_5.method_0(_x_5.self, "AMPERAMPER");
      return;
    }
    case 68: {
      _x_5.method_0(_x_5.self, "AMPER");
      return;
    }
    case 69: {
      _x_5.method_0(_x_5.self, "CARET");
      return;
    }
    case 70: {
      _x_5.method_0(_x_5.self, "BARBAR");
      return;
    }
    case 71: {
      const _PACKAGE_NAME = _x_4;
      const _$42$arg_29 = _PACKAGE_NAME._0;
      _x_5.method_0(_x_5.self, "PACKAGE_NAME(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_5, _$42$arg_29);
      _x_5.method_0(_x_5.self, ")");
      return;
    }
    case 72: {
      _x_5.method_0(_x_5.self, "AS");
      return;
    }
    case 73: {
      _x_5.method_0(_x_5.self, "PIPE");
      return;
    }
    case 74: {
      _x_5.method_0(_x_5.self, "ELSE");
      return;
    }
    case 75: {
      _x_5.method_0(_x_5.self, "FN");
      return;
    }
    case 76: {
      _x_5.method_0(_x_5.self, "IF");
      return;
    }
    case 77: {
      _x_5.method_0(_x_5.self, "LET");
      return;
    }
    case 78: {
      _x_5.method_0(_x_5.self, "CONST");
      return;
    }
    case 79: {
      _x_5.method_0(_x_5.self, "MATCH");
      return;
    }
    case 80: {
      _x_5.method_0(_x_5.self, "MUTABLE");
      return;
    }
    case 81: {
      _x_5.method_0(_x_5.self, "TYPE");
      return;
    }
    case 82: {
      _x_5.method_0(_x_5.self, "FAT_ARROW");
      return;
    }
    case 83: {
      _x_5.method_0(_x_5.self, "THIN_ARROW");
      return;
    }
    case 84: {
      _x_5.method_0(_x_5.self, "WHILE");
      return;
    }
    case 85: {
      _x_5.method_0(_x_5.self, "RETURN");
      return;
    }
    case 86: {
      _x_5.method_0(_x_5.self, "DOTDOT");
      return;
    }
    case 87: {
      _x_5.method_0(_x_5.self, "RANGE_INCLUSIVE");
      return;
    }
    case 88: {
      _x_5.method_0(_x_5.self, "RANGE_EXCLUSIVE");
      return;
    }
    case 89: {
      _x_5.method_0(_x_5.self, "ELLIPSIS");
      return;
    }
    case 90: {
      _x_5.method_0(_x_5.self, "TEST");
      return;
    }
    case 91: {
      _x_5.method_0(_x_5.self, "LOOP");
      return;
    }
    case 92: {
      _x_5.method_0(_x_5.self, "GUARD");
      return;
    }
    case 93: {
      _x_5.method_0(_x_5.self, "FOR");
      return;
    }
    case 94: {
      _x_5.method_0(_x_5.self, "IN");
      return;
    }
    default: {
      _x_5.method_0(_x_5.self, "IS");
      return;
    }
  }
}
function moonbitlang$core$builtin$$Show$output$115$(self, logger) {
  let _tmp;
  switch (self) {
    case 0: {
      _tmp = "CHAR";
      break;
    }
    case 1: {
      _tmp = "INT";
      break;
    }
    case 2: {
      _tmp = "BYTE";
      break;
    }
    case 3: {
      _tmp = "BYTES";
      break;
    }
    case 4: {
      _tmp = "FLOAT";
      break;
    }
    case 5: {
      _tmp = "STRING";
      break;
    }
    case 6: {
      _tmp = "MULTILINE_STRING";
      break;
    }
    case 7: {
      _tmp = "MULTILINE_INTERP";
      break;
    }
    case 8: {
      _tmp = "INTERP";
      break;
    }
    case 9: {
      _tmp = "ATTRIBUTE";
      break;
    }
    case 10: {
      _tmp = "LIDENT";
      break;
    }
    case 11: {
      _tmp = "UIDENT";
      break;
    }
    case 12: {
      _tmp = "\"lex\"";
      break;
    }
    case 13: {
      _tmp = "\"Regex\"";
      break;
    }
    case 14: {
      _tmp = "POST_LABEL";
      break;
    }
    case 15: {
      _tmp = "COMMENT";
      break;
    }
    case 16: {
      _tmp = "NEWLINE";
      break;
    }
    case 17: {
      _tmp = "INFIX1";
      break;
    }
    case 18: {
      _tmp = "INFIX2";
      break;
    }
    case 19: {
      _tmp = "INFIX3";
      break;
    }
    case 20: {
      _tmp = "INFIX4";
      break;
    }
    case 21: {
      _tmp = "AUGMENTED_ASSIGNMENT";
      break;
    }
    case 22: {
      _tmp = "EOF";
      break;
    }
    case 23: {
      _tmp = "FALSE";
      break;
    }
    case 24: {
      _tmp = "TRUE";
      break;
    }
    case 25: {
      _tmp = "\"pub\"";
      break;
    }
    case 26: {
      _tmp = "\"priv\"";
      break;
    }
    case 27: {
      _tmp = "\"readonly\"";
      break;
    }
    case 28: {
      _tmp = "\"import\"";
      break;
    }
    case 29: {
      _tmp = "\"extern\"";
      break;
    }
    case 30: {
      _tmp = "\"break\"";
      break;
    }
    case 31: {
      _tmp = "\"continue\"";
      break;
    }
    case 32: {
      _tmp = "\"struct\"";
      break;
    }
    case 33: {
      _tmp = "\"enum\"";
      break;
    }
    case 34: {
      _tmp = "\"trait\"";
      break;
    }
    case 35: {
      _tmp = "\"derive\"";
      break;
    }
    case 36: {
      _tmp = "\"impl\"";
      break;
    }
    case 37: {
      _tmp = "\"with\"";
      break;
    }
    case 38: {
      _tmp = "\"raise\"";
      break;
    }
    case 39: {
      _tmp = "\"throw\"";
      break;
    }
    case 40: {
      _tmp = "\"try\"";
      break;
    }
    case 41: {
      _tmp = "\"catch\"";
      break;
    }
    case 42: {
      _tmp = "\"async\"";
      break;
    }
    case 43: {
      _tmp = "\"typealias\"";
      break;
    }
    case 44: {
      _tmp = "\"traitalias\"";
      break;
    }
    case 45: {
      _tmp = "\"fnalias\"";
      break;
    }
    case 46: {
      _tmp = "\"=\"";
      break;
    }
    case 47: {
      _tmp = "\"(\"";
      break;
    }
    case 48: {
      _tmp = "\")\"";
      break;
    }
    case 49: {
      _tmp = "\",\"";
      break;
    }
    case 50: {
      _tmp = "\"-\"";
      break;
    }
    case 51: {
      _tmp = "\"?\"";
      break;
    }
    case 52: {
      _tmp = "\"!\"";
      break;
    }
    case 53: {
      _tmp = "DOT_LIDENT";
      break;
    }
    case 54: {
      _tmp = "DOT_UIDENT";
      break;
    }
    case 55: {
      _tmp = "DOT_INT";
      break;
    }
    case 56: {
      _tmp = "\".(\"";
      break;
    }
    case 57: {
      _tmp = "\"::\"";
      break;
    }
    case 58: {
      _tmp = "\":\"";
      break;
    }
    case 59: {
      _tmp = "\";\"";
      break;
    }
    case 60: {
      _tmp = "\"[\"";
      break;
    }
    case 61: {
      _tmp = "\"+\"";
      break;
    }
    case 62: {
      _tmp = "\"]\"";
      break;
    }
    case 63: {
      _tmp = "\"_\"";
      break;
    }
    case 64: {
      _tmp = "\"|\"";
      break;
    }
    case 65: {
      _tmp = "\"{\"";
      break;
    }
    case 66: {
      _tmp = "\"}\"";
      break;
    }
    case 67: {
      _tmp = "\"&&\"";
      break;
    }
    case 68: {
      _tmp = "\"&\"";
      break;
    }
    case 69: {
      _tmp = "\"^\"";
      break;
    }
    case 70: {
      _tmp = "\"||\"";
      break;
    }
    case 71: {
      _tmp = "PACKAGE_NAME";
      break;
    }
    case 72: {
      _tmp = "\"as\"";
      break;
    }
    case 73: {
      _tmp = "\"|>\"";
      break;
    }
    case 74: {
      _tmp = "\"else\"";
      break;
    }
    case 75: {
      _tmp = "\"fn\"";
      break;
    }
    case 76: {
      _tmp = "\"if\"";
      break;
    }
    case 77: {
      _tmp = "\"let\"";
      break;
    }
    case 78: {
      _tmp = "\"const\"";
      break;
    }
    case 79: {
      _tmp = "\"match\"";
      break;
    }
    case 80: {
      _tmp = "\"mut\"";
      break;
    }
    case 81: {
      _tmp = "\"type\"";
      break;
    }
    case 82: {
      _tmp = "\"=>\"";
      break;
    }
    case 83: {
      _tmp = "\"->\"";
      break;
    }
    case 84: {
      _tmp = "\"while\"";
      break;
    }
    case 85: {
      _tmp = "\"return\"";
      break;
    }
    case 86: {
      _tmp = "\"..\"";
      break;
    }
    case 87: {
      _tmp = "\"..=\"";
      break;
    }
    case 88: {
      _tmp = "\"..<\"";
      break;
    }
    case 89: {
      _tmp = "\"...\"";
      break;
    }
    case 90: {
      _tmp = "\"test\"";
      break;
    }
    case 91: {
      _tmp = "\"loop\"";
      break;
    }
    case 92: {
      _tmp = "\"guard\"";
      break;
    }
    case 93: {
      _tmp = "\"for\"";
      break;
    }
    case 94: {
      _tmp = "\"in\"";
      break;
    }
    default: {
      _tmp = "\"is\"";
    }
  }
  logger.method_0(logger.self, _tmp);
}
function moonbitlang$ulex$lib$new_frontend$lexer$$digit_value(c) {
  if (c >= 97 && c <= 102) {
    const _tmp = (c >>> 0) + (10 >>> 0) | 0;
    const _p = 97;
    return (_tmp >>> 0) - (_p >>> 0) | 0;
  } else {
    if (c >= 65 && c <= 70) {
      const _tmp = (c >>> 0) + (10 >>> 0) | 0;
      const _p = 65;
      return (_tmp >>> 0) - (_p >>> 0) | 0;
    } else {
      if (c >= 48 && c <= 57) {
        const _p = 48;
        return (c >>> 0) - (_p >>> 0) | 0;
      } else {
        return $panic();
      }
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$char_for_hex_escape(hex) {
  const codep = { val: 0 };
  const _foreach_result = { val: $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Continue$44$ };
  const _bind = moonbitlang$core$string$$String$iter(hex);
  _bind((c) => {
    const digit = moonbitlang$ulex$lib$new_frontend$lexer$$digit_value(c);
    codep.val = ((Math.imul(codep.val, 16) | 0) >>> 0) + (digit >>> 0) | 0;
    if (codep.val >>> 0 > 1114111 >>> 0) {
      _foreach_result.val = new $64$moonbitlang$47$core$47$builtin$46$ForeachResult$Return$44$(undefined);
      return 0;
    }
    return 1;
  });
  const _tmp = _foreach_result.val;
  switch (_tmp.$tag) {
    case 0: {
      return codep.val;
    }
    case 1: {
      const _break = _tmp;
      return _break._0;
    }
    case 2: {
      const _return = _tmp;
      return _return._0;
    }
    case 3: {
      return $panic();
    }
    default: {
      return $panic();
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(self, cnum) {
  const _bind = self.file;
  const _bind$2 = self.current_line;
  const _bind$3 = self.start_cnum + cnum | 0;
  const _bind$4 = self.current_bol;
  return { fname: _bind, lnum: _bind$2, bol: _bind$4, cnum: _bind$3 };
}
function moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(self, start, end, err) {
  const loc_start = moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(self, start);
  const loc_end = moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(self, end);
  moonbitlang$core$array$$Array$push$182$(self.errors, { _0: loc_start, _1: loc_end, _2: err });
}
function moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(self, start, end) {
  _L: {
    const _bind = moonbitlang$core$bytes$$Bytes$op_as_view(self.content, start, end);
    if (_bind.len === 1) {
      const _x = _bind.bytes[_bind.start];
      if (_x >= 0 && _x <= 127) {
        return _x;
      } else {
        break _L;
      }
    } else {
      if (_bind.len === 2) {
        const _x = _bind.bytes[_bind.start];
        if (_x >= 192 && _x <= 223) {
          const _x$2 = _bind.bytes[_bind.start + 1 | 0];
          if (_x$2 >= 128 && _x$2 <= 191) {
            return (_x & 31) << 6 | _x$2 & 63;
          } else {
            break _L;
          }
        } else {
          break _L;
        }
      } else {
        if (_bind.len === 3) {
          const _x = _bind.bytes[_bind.start];
          if (_x >= 224 && _x <= 239) {
            const _x$2 = _bind.bytes[_bind.start + 1 | 0];
            if (_x$2 >= 128 && _x$2 <= 191) {
              const _x$3 = _bind.bytes[_bind.start + 2 | 0];
              if (_x$3 >= 128 && _x$3 <= 191) {
                return (_x & 15) << 12 | (_x$2 & 63) << 6 | _x$3 & 63;
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          } else {
            break _L;
          }
        } else {
          if (_bind.len === 4) {
            const _x = _bind.bytes[_bind.start];
            if (_x >= 240 && _x <= 247) {
              const _x$2 = _bind.bytes[_bind.start + 1 | 0];
              if (_x$2 >= 128 && _x$2 <= 191) {
                const _x$3 = _bind.bytes[_bind.start + 2 | 0];
                if (_x$3 >= 128 && _x$3 <= 191) {
                  const _x$4 = _bind.bytes[_bind.start + 3 | 0];
                  if (_x$4 >= 128 && _x$4 <= 191) {
                    return (_x & 7) << 18 | (_x$2 & 63) << 12 | (_x$3 & 63) << 6 | _x$4 & 63;
                  } else {
                    break _L;
                  }
                } else {
                  break _L;
                }
              } else {
                break _L;
              }
            } else {
              break _L;
            }
          } else {
            break _L;
          }
        }
      }
    }
  }
  return $panic();
}
function moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(self) {
  const pos = self.pos;
  const end = self.end;
  if (pos < end) {
    const _tmp = self.content;
    $bound_check(_tmp, pos);
    const c = _tmp[pos];
    self.pos = self.pos + 1 | 0;
    return c;
  }
  return -1;
}
function moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(self, pos) {
  self.pos = pos;
}
function moonbitlang$ulex$lib$new_frontend$lexer$$interp_handle(lexbuf, env) {
  let _tmp = lexbuf;
  let _tmp$2 = env;
  _L: while (true) {
    const lexbuf$2 = _tmp;
    const env$2 = _tmp$2;
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf$2.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _tmp$3 = 0;
    _L$2: while (true) {
      const _param = _tmp$3;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$4;
          if (_bind === -1) {
            _tmp$4 = 1;
          } else {
            if (_bind >= 0 && _bind <= 8) {
              _tmp$4 = 2;
            } else {
              if (_bind === 9) {
                _tmp$4 = 3;
              } else {
                if (_bind === 10) {
                  _tmp$4 = 4;
                } else {
                  if (_bind >= 11 && _bind <= 12) {
                    _tmp$4 = 3;
                  } else {
                    if (_bind === 13) {
                      _tmp$4 = 4;
                    } else {
                      if (_bind >= 14 && _bind <= 31) {
                        _tmp$4 = 2;
                      } else {
                        if (_bind === 32) {
                          _tmp$4 = 3;
                        } else {
                          if (_bind === 33) {
                            _tmp$4 = 2;
                          } else {
                            if (_bind === 34) {
                              _tmp$4 = 5;
                            } else {
                              if (_bind >= 35 && _bind <= 122) {
                                _tmp$4 = 2;
                              } else {
                                if (_bind === 123) {
                                  _tmp$4 = 5;
                                } else {
                                  if (_bind === 124) {
                                    _tmp$4 = 2;
                                  } else {
                                    if (_bind === 125) {
                                      _tmp$4 = 6;
                                    } else {
                                      if (_bind >= 126 && _bind <= 127) {
                                        _tmp$4 = 2;
                                      } else {
                                        if (_bind === 194) {
                                          _tmp$4 = 7;
                                        } else {
                                          if (_bind >= 195 && _bind <= 223) {
                                            _tmp$4 = 8;
                                          } else {
                                            if (_bind === 224) {
                                              _tmp$4 = 9;
                                            } else {
                                              if (_bind === 225) {
                                                _tmp$4 = 10;
                                              } else {
                                                if (_bind === 226) {
                                                  _tmp$4 = 11;
                                                } else {
                                                  if (_bind === 227) {
                                                    _tmp$4 = 12;
                                                  } else {
                                                    if (_bind >= 228 && _bind <= 236) {
                                                      _tmp$4 = 9;
                                                    } else {
                                                      if (_bind === 237) {
                                                        _tmp$4 = 13;
                                                      } else {
                                                        if (_bind === 238) {
                                                          _tmp$4 = 9;
                                                        } else {
                                                          if (_bind === 239) {
                                                            _tmp$4 = 14;
                                                          } else {
                                                            if (_bind === 240) {
                                                              _tmp$4 = 15;
                                                            } else {
                                                              if (_bind >= 241 && _bind <= 244) {
                                                                _tmp$4 = 16;
                                                              } else {
                                                                break _L$2;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$4;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 4) {
            _match_pattern = 4;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          break _L$2;
        }
        case 3: {
          if (_match_pattern >= 4) {
            _match_pattern = 4;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$5;
          if (_bind$2 === 9) {
            _tmp$5 = 22;
          } else {
            if (_bind$2 >= 11 && _bind$2 <= 12) {
              _tmp$5 = 22;
            } else {
              if (_bind$2 === 32) {
                _tmp$5 = 22;
              } else {
                if (_bind$2 === 125) {
                  _tmp$5 = 6;
                } else {
                  if (_bind$2 === 194) {
                    _tmp$5 = 23;
                  } else {
                    if (_bind$2 === 225) {
                      _tmp$5 = 24;
                    } else {
                      if (_bind$2 === 226) {
                        _tmp$5 = 25;
                      } else {
                        if (_bind$2 === 227) {
                          _tmp$5 = 26;
                        } else {
                          if (_bind$2 === 239) {
                            _tmp$5 = 27;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$5;
          continue _L$2;
        }
        case 4: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 5: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          break _L$2;
        }
        case 6: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 7: {
          const _bind$3 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$6;
          if (_bind$3 >= 128 && _bind$3 <= 159) {
            _tmp$6 = 2;
          } else {
            if (_bind$3 === 160) {
              _tmp$6 = 3;
            } else {
              if (_bind$3 >= 161 && _bind$3 <= 191) {
                _tmp$6 = 2;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$6;
          continue _L$2;
        }
        case 8: {
          const _bind$4 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$7;
          if (_bind$4 >= 128 && _bind$4 <= 191) {
            _tmp$7 = 2;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$7;
          continue _L$2;
        }
        case 9: {
          const _bind$5 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$8;
          if (_bind$5 >= 128 && _bind$5 <= 191) {
            _tmp$8 = 8;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$8;
          continue _L$2;
        }
        case 10: {
          const _bind$6 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$9;
          if (_bind$6 >= 128 && _bind$6 <= 153) {
            _tmp$9 = 8;
          } else {
            if (_bind$6 === 154) {
              _tmp$9 = 19;
            } else {
              if (_bind$6 >= 155 && _bind$6 <= 191) {
                _tmp$9 = 8;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$9;
          continue _L$2;
        }
        case 11: {
          const _bind$7 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$10;
          if (_bind$7 === 128) {
            _tmp$10 = 20;
          } else {
            if (_bind$7 === 129) {
              _tmp$10 = 21;
            } else {
              if (_bind$7 >= 130 && _bind$7 <= 191) {
                _tmp$10 = 8;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$10;
          continue _L$2;
        }
        case 12: {
          const _bind$8 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$11;
          if (_bind$8 === 128) {
            _tmp$11 = 19;
          } else {
            if (_bind$8 >= 129 && _bind$8 <= 191) {
              _tmp$11 = 8;
            } else {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$11;
          continue _L$2;
        }
        case 13: {
          const _bind$9 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$12;
          if (_bind$9 >= 128 && _bind$9 <= 159) {
            _tmp$12 = 8;
          } else {
            if (_bind$9 >= 160 && _bind$9 <= 191) {
              _tmp$12 = 17;
            } else {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$12;
          continue _L$2;
        }
        case 14: {
          const _bind$10 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$13;
          if (_bind$10 >= 128 && _bind$10 <= 186) {
            _tmp$13 = 8;
          } else {
            if (_bind$10 === 187) {
              _tmp$13 = 18;
            } else {
              if (_bind$10 >= 188 && _bind$10 <= 191) {
                _tmp$13 = 8;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$13;
          continue _L$2;
        }
        case 15: {
          const _bind$11 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$14;
          if (_bind$11 >= 144 && _bind$11 <= 191) {
            _tmp$14 = 9;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$14;
          continue _L$2;
        }
        case 16: {
          const _bind$12 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$15;
          if (_bind$12 >= 128 && _bind$12 <= 191) {
            _tmp$15 = 9;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$15;
          continue _L$2;
        }
        case 17: {
          const _bind$13 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$16;
          if (_bind$13 >= 128 && _bind$13 <= 191) {
            _tmp$16 = 5;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$16;
          continue _L$2;
        }
        case 18: {
          const _bind$14 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$17;
          if (_bind$14 >= 128 && _bind$14 <= 190) {
            _tmp$17 = 2;
          } else {
            if (_bind$14 === 191) {
              _tmp$17 = 3;
            } else {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$17;
          continue _L$2;
        }
        case 19: {
          const _bind$15 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$18;
          if (_bind$15 === 128) {
            _tmp$18 = 3;
          } else {
            if (_bind$15 >= 129 && _bind$15 <= 191) {
              _tmp$18 = 2;
            } else {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$18;
          continue _L$2;
        }
        case 20: {
          const _bind$16 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$19;
          if (_bind$16 >= 128 && _bind$16 <= 138) {
            _tmp$19 = 3;
          } else {
            if (_bind$16 >= 139 && _bind$16 <= 174) {
              _tmp$19 = 2;
            } else {
              if (_bind$16 === 175) {
                _tmp$19 = 3;
              } else {
                if (_bind$16 >= 176 && _bind$16 <= 191) {
                  _tmp$19 = 2;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$3 = _tmp$19;
          continue _L$2;
        }
        case 21: {
          const _bind$17 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$20;
          if (_bind$17 >= 128 && _bind$17 <= 158) {
            _tmp$20 = 2;
          } else {
            if (_bind$17 === 159) {
              _tmp$20 = 3;
            } else {
              if (_bind$17 >= 160 && _bind$17 <= 191) {
                _tmp$20 = 2;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$3 = _tmp$20;
          continue _L$2;
        }
        case 22: {
          const _bind$18 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$21;
          if (_bind$18 === 9) {
            _tmp$21 = 22;
          } else {
            if (_bind$18 >= 11 && _bind$18 <= 12) {
              _tmp$21 = 22;
            } else {
              if (_bind$18 === 32) {
                _tmp$21 = 22;
              } else {
                if (_bind$18 === 125) {
                  _tmp$21 = 6;
                } else {
                  if (_bind$18 === 194) {
                    _tmp$21 = 23;
                  } else {
                    if (_bind$18 === 225) {
                      _tmp$21 = 24;
                    } else {
                      if (_bind$18 === 226) {
                        _tmp$21 = 25;
                      } else {
                        if (_bind$18 === 227) {
                          _tmp$21 = 26;
                        } else {
                          if (_bind$18 === 239) {
                            _tmp$21 = 27;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$3 = _tmp$21;
          continue _L$2;
        }
        case 23: {
          const _bind$19 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$22;
          if (_bind$19 === 160) {
            _tmp$22 = 22;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$22;
          continue _L$2;
        }
        case 24: {
          const _bind$20 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$23;
          if (_bind$20 === 154) {
            _tmp$23 = 29;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$23;
          continue _L$2;
        }
        case 25: {
          const _bind$21 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$24;
          switch (_bind$21) {
            case 128: {
              _tmp$24 = 30;
              break;
            }
            case 129: {
              _tmp$24 = 31;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$24;
          continue _L$2;
        }
        case 26: {
          const _bind$22 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$25;
          if (_bind$22 === 128) {
            _tmp$25 = 29;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$25;
          continue _L$2;
        }
        case 27: {
          const _bind$23 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$26;
          if (_bind$23 === 187) {
            _tmp$26 = 28;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$26;
          continue _L$2;
        }
        case 28: {
          const _bind$24 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$27;
          if (_bind$24 === 191) {
            _tmp$27 = 22;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$27;
          continue _L$2;
        }
        case 29: {
          const _bind$25 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$28;
          if (_bind$25 === 128) {
            _tmp$28 = 22;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$28;
          continue _L$2;
        }
        case 30: {
          const _bind$26 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$29;
          if (_bind$26 >= 128 && _bind$26 <= 138) {
            _tmp$29 = 22;
          } else {
            if (_bind$26 === 175) {
              _tmp$29 = 22;
            } else {
              break _L$2;
            }
          }
          _tmp$3 = _tmp$29;
          continue _L$2;
        }
        case 31: {
          const _bind$27 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$30;
          if (_bind$27 === 159) {
            _tmp$30 = 22;
          } else {
            break _L$2;
          }
          _tmp$3 = _tmp$30;
          continue _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 5) {
      moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(lexbuf$2, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          return _match_start;
        }
        case 1: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$UnterminatedString);
          return _match_start;
        }
        case 2: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$UnterminatedStringInVariableInterploation);
          moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(lexbuf$2, _match_start);
          return _match_start;
        }
        case 3: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$UnterminatedStringInVariableInterploation);
          return _match_start;
        }
        case 4: {
          const c = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_char$40$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, c);
          continue _L;
        }
        case 5: {
          const c$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$IllegalCharacter(c$2));
          continue _L;
        }
        default: {
          return $panic();
        }
      }
    } else {
      return $panic();
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(self, start, end) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(0);
  let _tmp = moonbitlang$core$bytes$$Bytes$op_as_view(self.content, start, end);
  while (true) {
    const _param = _tmp;
    let next;
    _L: {
      if (_param.len >= 1) {
        const _x = _param.bytes[_param.start];
        if (_x >= 0 && _x <= 127) {
          const _x$2 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
          moonbitlang$core$builtin$$Logger$write_char$40$(buf, _x);
          _tmp = _x$2;
          continue;
        } else {
          if (_param.len >= 2) {
            if (_x >= 192 && _x <= 223) {
              const _x$2 = _param.bytes[_param.start + 1 | 0];
              if (_x$2 >= 128 && _x$2 <= 191) {
                const _x$3 = { bytes: _param.bytes, start: _param.start + 2 | 0, len: _param.len - 2 | 0 };
                moonbitlang$core$builtin$$Logger$write_char$40$(buf, (_x & 31) << 6 | _x$2 & 63);
                _tmp = _x$3;
                continue;
              } else {
                if (_param.len >= 3) {
                  if (_param.len >= 4) {
                    const _x$3 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
                    next = _x$3;
                    break _L;
                  } else {
                    const _x$3 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
                    next = _x$3;
                    break _L;
                  }
                } else {
                  const _x$3 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
                  next = _x$3;
                  break _L;
                }
              }
            } else {
              if (_param.len >= 3) {
                if (_x >= 224 && _x <= 239) {
                  const _x$2 = _param.bytes[_param.start + 1 | 0];
                  if (_x$2 >= 128 && _x$2 <= 191) {
                    const _x$3 = _param.bytes[_param.start + 2 | 0];
                    if (_x$3 >= 128 && _x$3 <= 191) {
                      const _x$4 = { bytes: _param.bytes, start: _param.start + 3 | 0, len: _param.len - 3 | 0 };
                      moonbitlang$core$builtin$$Logger$write_char$40$(buf, (_x & 15) << 12 | (_x$2 & 63) << 6 | _x$3 & 63);
                      _tmp = _x$4;
                      continue;
                    } else {
                      if (_param.len >= 4) {
                        const _x$4 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
                        next = _x$4;
                        break _L;
                      } else {
                        const _x$4 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
                        next = _x$4;
                        break _L;
                      }
                    }
                  } else {
                    if (_param.len >= 4) {
                      const _x$3 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
                      next = _x$3;
                      break _L;
                    } else {
                      const _x$3 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
                      next = _x$3;
                      break _L;
                    }
                  }
                } else {
                  if (_param.len >= 4) {
                    if (_x >= 240 && _x <= 247) {
                      const _x$2 = _param.bytes[_param.start + 1 | 0];
                      if (_x$2 >= 128 && _x$2 <= 191) {
                        const _x$3 = _param.bytes[_param.start + 2 | 0];
                        if (_x$3 >= 128 && _x$3 <= 191) {
                          const _x$4 = _param.bytes[_param.start + 3 | 0];
                          if (_x$4 >= 128 && _x$4 <= 191) {
                            const _x$5 = { bytes: _param.bytes, start: _param.start + 4 | 0, len: _param.len - 4 | 0 };
                            moonbitlang$core$builtin$$Logger$write_char$40$(buf, (_x & 7) << 18 | (_x$2 & 63) << 12 | (_x$3 & 63) << 6 | _x$4 & 63);
                            _tmp = _x$5;
                            continue;
                          } else {
                            const _x$5 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
                            next = _x$5;
                            break _L;
                          }
                        } else {
                          const _x$4 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
                          next = _x$4;
                          break _L;
                        }
                      } else {
                        const _x$3 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
                        next = _x$3;
                        break _L;
                      }
                    } else {
                      const _x$2 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
                      next = _x$2;
                      break _L;
                    }
                  } else {
                    const _x$2 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
                    next = _x$2;
                    break _L;
                  }
                }
              } else {
                const _x$2 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
                next = _x$2;
                break _L;
              }
            }
          } else {
            const _x$2 = { bytes: _param.bytes, start: _param.start + 1 | 0, len: _param.len - 1 | 0 };
            next = _x$2;
            break _L;
          }
        }
      } else {
        break;
      }
    }
    _tmp = next;
    continue;
  }
  return buf.val;
}
function moonbitlang$ulex$lib$new_frontend$lexer$$normal(lexbuf, env, end_with_newline, allow_interp, startpos) {
  let _tmp = lexbuf;
  let _tmp$2 = env;
  let _tmp$3 = end_with_newline;
  let _tmp$4 = allow_interp;
  let _tmp$5 = startpos;
  _L: while (true) {
    const lexbuf$2 = _tmp;
    const env$2 = _tmp$2;
    const end_with_newline$2 = _tmp$3;
    const allow_interp$2 = _tmp$4;
    const startpos$2 = _tmp$5;
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf$2.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _tmp$6 = 0;
    _L$2: while (true) {
      const _param = _tmp$6;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$7;
          if (_bind === -1) {
            _tmp$7 = 1;
          } else {
            if (_bind >= 0 && _bind <= 12) {
              _tmp$7 = 2;
            } else {
              if (_bind === 13) {
                _tmp$7 = 3;
              } else {
                if (_bind >= 14 && _bind <= 33) {
                  _tmp$7 = 2;
                } else {
                  if (_bind === 34) {
                    _tmp$7 = 4;
                  } else {
                    if (_bind >= 35 && _bind <= 91) {
                      _tmp$7 = 2;
                    } else {
                      if (_bind === 92) {
                        _tmp$7 = 5;
                      } else {
                        if (_bind >= 93 && _bind <= 127) {
                          _tmp$7 = 2;
                        } else {
                          if (_bind >= 194 && _bind <= 223) {
                            _tmp$7 = 6;
                          } else {
                            if (_bind >= 224 && _bind <= 239) {
                              _tmp$7 = 7;
                            } else {
                              if (_bind === 240) {
                                _tmp$7 = 8;
                              } else {
                                if (_bind >= 241 && _bind <= 244) {
                                  _tmp$7 = 9;
                                } else {
                                  break _L$2;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$6 = _tmp$7;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 11) {
            _match_pattern = 11;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 13) {
            _match_pattern = 13;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          break _L$2;
        }
        case 3: {
          if (_match_pattern >= 13) {
            _match_pattern = 13;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$8;
          if (_bind$2 === 10) {
            _tmp$8 = 10;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$8;
          continue _L$2;
        }
        case 4: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 5: {
          if (_match_pattern >= 13) {
            _match_pattern = 13;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$3 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$9;
          if (_bind$3 >= 0 && _bind$3 <= 31) {
            _tmp$9 = 11;
          } else {
            if (_bind$3 === 32) {
              _tmp$9 = 12;
            } else {
              if (_bind$3 === 33) {
                _tmp$9 = 11;
              } else {
                if (_bind$3 === 34) {
                  _tmp$9 = 12;
                } else {
                  if (_bind$3 >= 35 && _bind$3 <= 38) {
                    _tmp$9 = 11;
                  } else {
                    if (_bind$3 === 39) {
                      _tmp$9 = 12;
                    } else {
                      if (_bind$3 >= 40 && _bind$3 <= 91) {
                        _tmp$9 = 11;
                      } else {
                        if (_bind$3 === 92) {
                          _tmp$9 = 12;
                        } else {
                          if (_bind$3 >= 93 && _bind$3 <= 97) {
                            _tmp$9 = 11;
                          } else {
                            if (_bind$3 === 98) {
                              _tmp$9 = 12;
                            } else {
                              if (_bind$3 >= 99 && _bind$3 <= 109) {
                                _tmp$9 = 11;
                              } else {
                                if (_bind$3 === 110) {
                                  _tmp$9 = 12;
                                } else {
                                  if (_bind$3 === 111) {
                                    _tmp$9 = 13;
                                  } else {
                                    if (_bind$3 >= 112 && _bind$3 <= 113) {
                                      _tmp$9 = 11;
                                    } else {
                                      if (_bind$3 === 114) {
                                        _tmp$9 = 12;
                                      } else {
                                        if (_bind$3 === 115) {
                                          _tmp$9 = 11;
                                        } else {
                                          if (_bind$3 === 116) {
                                            _tmp$9 = 12;
                                          } else {
                                            if (_bind$3 === 117) {
                                              _tmp$9 = 14;
                                            } else {
                                              if (_bind$3 >= 118 && _bind$3 <= 119) {
                                                _tmp$9 = 11;
                                              } else {
                                                if (_bind$3 === 120) {
                                                  _tmp$9 = 15;
                                                } else {
                                                  if (_bind$3 >= 121 && _bind$3 <= 122) {
                                                    _tmp$9 = 11;
                                                  } else {
                                                    if (_bind$3 === 123) {
                                                      _tmp$9 = 16;
                                                    } else {
                                                      if (_bind$3 >= 124 && _bind$3 <= 127) {
                                                        _tmp$9 = 11;
                                                      } else {
                                                        if (_bind$3 >= 194 && _bind$3 <= 223) {
                                                          _tmp$9 = 17;
                                                        } else {
                                                          if (_bind$3 >= 224 && _bind$3 <= 239) {
                                                            _tmp$9 = 18;
                                                          } else {
                                                            if (_bind$3 === 240) {
                                                              _tmp$9 = 19;
                                                            } else {
                                                              if (_bind$3 >= 241 && _bind$3 <= 244) {
                                                                _tmp$9 = 20;
                                                              } else {
                                                                break _L$2;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$6 = _tmp$9;
          continue _L$2;
        }
        case 6: {
          const _bind$4 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$10;
          if (_bind$4 >= 128 && _bind$4 <= 191) {
            _tmp$10 = 2;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$10;
          continue _L$2;
        }
        case 7: {
          const _bind$5 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$11;
          if (_bind$5 >= 128 && _bind$5 <= 191) {
            _tmp$11 = 6;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$11;
          continue _L$2;
        }
        case 8: {
          const _bind$6 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$12;
          if (_bind$6 >= 144 && _bind$6 <= 191) {
            _tmp$12 = 7;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$12;
          continue _L$2;
        }
        case 9: {
          const _bind$7 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$13;
          if (_bind$7 >= 128 && _bind$7 <= 191) {
            _tmp$13 = 7;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$13;
          continue _L$2;
        }
        case 10: {
          if (_match_pattern >= 12) {
            _match_pattern = 12;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 11: {
          if (_match_pattern >= 10) {
            _match_pattern = 10;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          break _L$2;
        }
        case 12: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 2 | 0;
          }
          break _L$2;
        }
        case 13: {
          if (_match_pattern >= 10) {
            _match_pattern = 10;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$8 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$14;
          if (_bind$8 >= 0 && _bind$8 <= 47) {
            _tmp$14 = 28;
          } else {
            if (_bind$8 >= 48 && _bind$8 <= 51) {
              _tmp$14 = 29;
            } else {
              if (_bind$8 >= 52 && _bind$8 <= 127) {
                _tmp$14 = 28;
              } else {
                if (_bind$8 >= 194 && _bind$8 <= 223) {
                  _tmp$14 = 30;
                } else {
                  if (_bind$8 >= 224 && _bind$8 <= 239) {
                    _tmp$14 = 31;
                  } else {
                    if (_bind$8 === 240) {
                      _tmp$14 = 32;
                    } else {
                      if (_bind$8 >= 241 && _bind$8 <= 244) {
                        _tmp$14 = 33;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$6 = _tmp$14;
          continue _L$2;
        }
        case 14: {
          if (_match_pattern >= 10) {
            _match_pattern = 10;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$9 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$15;
          if (_bind$9 >= 48 && _bind$9 <= 57) {
            _tmp$15 = 26;
          } else {
            if (_bind$9 >= 65 && _bind$9 <= 70) {
              _tmp$15 = 26;
            } else {
              if (_bind$9 >= 97 && _bind$9 <= 102) {
                _tmp$15 = 26;
              } else {
                if (_bind$9 === 123) {
                  _tmp$15 = 27;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$6 = _tmp$15;
          continue _L$2;
        }
        case 15: {
          if (_match_pattern >= 10) {
            _match_pattern = 10;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$10 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$16;
          if (_bind$10 >= 0 && _bind$10 <= 47) {
            _tmp$16 = 34;
          } else {
            if (_bind$10 >= 48 && _bind$10 <= 57) {
              _tmp$16 = 35;
            } else {
              if (_bind$10 >= 58 && _bind$10 <= 64) {
                _tmp$16 = 34;
              } else {
                if (_bind$10 >= 65 && _bind$10 <= 70) {
                  _tmp$16 = 35;
                } else {
                  if (_bind$10 >= 71 && _bind$10 <= 96) {
                    _tmp$16 = 34;
                  } else {
                    if (_bind$10 >= 97 && _bind$10 <= 102) {
                      _tmp$16 = 35;
                    } else {
                      if (_bind$10 >= 103 && _bind$10 <= 127) {
                        _tmp$16 = 34;
                      } else {
                        if (_bind$10 >= 194 && _bind$10 <= 223) {
                          _tmp$16 = 36;
                        } else {
                          if (_bind$10 >= 224 && _bind$10 <= 239) {
                            _tmp$16 = 37;
                          } else {
                            if (_bind$10 === 240) {
                              _tmp$16 = 38;
                            } else {
                              if (_bind$10 >= 241 && _bind$10 <= 244) {
                                _tmp$16 = 39;
                              } else {
                                break _L$2;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$6 = _tmp$16;
          continue _L$2;
        }
        case 16: {
          if (_match_pattern >= 9) {
            _match_pattern = 9;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          const _bind$11 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$17;
          if (_bind$11 === 9) {
            _tmp$17 = 16;
          } else {
            if (_bind$11 >= 11 && _bind$11 <= 12) {
              _tmp$17 = 16;
            } else {
              if (_bind$11 === 32) {
                _tmp$17 = 16;
              } else {
                if (_bind$11 === 194) {
                  _tmp$17 = 21;
                } else {
                  if (_bind$11 === 225) {
                    _tmp$17 = 22;
                  } else {
                    if (_bind$11 === 226) {
                      _tmp$17 = 23;
                    } else {
                      if (_bind$11 === 227) {
                        _tmp$17 = 24;
                      } else {
                        if (_bind$11 === 239) {
                          _tmp$17 = 25;
                        } else {
                          break _L$2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$6 = _tmp$17;
          continue _L$2;
        }
        case 17: {
          const _bind$12 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$18;
          if (_bind$12 >= 128 && _bind$12 <= 191) {
            _tmp$18 = 11;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$18;
          continue _L$2;
        }
        case 18: {
          const _bind$13 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$19;
          if (_bind$13 >= 128 && _bind$13 <= 191) {
            _tmp$19 = 17;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$19;
          continue _L$2;
        }
        case 19: {
          const _bind$14 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$20;
          if (_bind$14 >= 144 && _bind$14 <= 191) {
            _tmp$20 = 18;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$20;
          continue _L$2;
        }
        case 20: {
          const _bind$15 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$21;
          if (_bind$15 >= 128 && _bind$15 <= 191) {
            _tmp$21 = 18;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$21;
          continue _L$2;
        }
        case 21: {
          const _bind$16 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$22;
          if (_bind$16 === 160) {
            _tmp$22 = 16;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$22;
          continue _L$2;
        }
        case 22: {
          const _bind$17 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$23;
          if (_bind$17 === 154) {
            _tmp$23 = 41;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$23;
          continue _L$2;
        }
        case 23: {
          const _bind$18 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$24;
          switch (_bind$18) {
            case 128: {
              _tmp$24 = 42;
              break;
            }
            case 129: {
              _tmp$24 = 43;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$6 = _tmp$24;
          continue _L$2;
        }
        case 24: {
          const _bind$19 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$25;
          if (_bind$19 === 128) {
            _tmp$25 = 41;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$25;
          continue _L$2;
        }
        case 25: {
          const _bind$20 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$26;
          if (_bind$20 === 187) {
            _tmp$26 = 40;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$26;
          continue _L$2;
        }
        case 26: {
          const _bind$21 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$27;
          if (_bind$21 >= 48 && _bind$21 <= 57) {
            _tmp$27 = 51;
          } else {
            if (_bind$21 >= 65 && _bind$21 <= 70) {
              _tmp$27 = 51;
            } else {
              if (_bind$21 >= 97 && _bind$21 <= 102) {
                _tmp$27 = 51;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$6 = _tmp$27;
          continue _L$2;
        }
        case 27: {
          const _bind$22 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$28;
          if (_bind$22 >= 0 && _bind$22 <= 9) {
            _tmp$28 = 44;
          } else {
            if (_bind$22 >= 11 && _bind$22 <= 12) {
              _tmp$28 = 44;
            } else {
              if (_bind$22 >= 14 && _bind$22 <= 47) {
                _tmp$28 = 44;
              } else {
                if (_bind$22 >= 48 && _bind$22 <= 57) {
                  _tmp$28 = 45;
                } else {
                  if (_bind$22 >= 58 && _bind$22 <= 64) {
                    _tmp$28 = 44;
                  } else {
                    if (_bind$22 >= 65 && _bind$22 <= 70) {
                      _tmp$28 = 45;
                    } else {
                      if (_bind$22 >= 71 && _bind$22 <= 96) {
                        _tmp$28 = 44;
                      } else {
                        if (_bind$22 >= 97 && _bind$22 <= 102) {
                          _tmp$28 = 45;
                        } else {
                          if (_bind$22 >= 103 && _bind$22 <= 124) {
                            _tmp$28 = 44;
                          } else {
                            if (_bind$22 === 125) {
                              _tmp$28 = 46;
                            } else {
                              if (_bind$22 >= 126 && _bind$22 <= 127) {
                                _tmp$28 = 44;
                              } else {
                                if (_bind$22 >= 194 && _bind$22 <= 223) {
                                  _tmp$28 = 47;
                                } else {
                                  if (_bind$22 >= 224 && _bind$22 <= 239) {
                                    _tmp$28 = 48;
                                  } else {
                                    if (_bind$22 === 240) {
                                      _tmp$28 = 49;
                                    } else {
                                      if (_bind$22 >= 241 && _bind$22 <= 244) {
                                        _tmp$28 = 50;
                                      } else {
                                        break _L$2;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$6 = _tmp$28;
          continue _L$2;
        }
        case 28: {
          const _bind$23 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$29;
          if (_bind$23 >= 0 && _bind$23 <= 127) {
            _tmp$29 = 52;
          } else {
            if (_bind$23 >= 194 && _bind$23 <= 223) {
              _tmp$29 = 53;
            } else {
              if (_bind$23 >= 224 && _bind$23 <= 239) {
                _tmp$29 = 54;
              } else {
                if (_bind$23 === 240) {
                  _tmp$29 = 55;
                } else {
                  if (_bind$23 >= 241 && _bind$23 <= 244) {
                    _tmp$29 = 56;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$6 = _tmp$29;
          continue _L$2;
        }
        case 29: {
          const _bind$24 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$30;
          if (_bind$24 >= 0 && _bind$24 <= 47) {
            _tmp$30 = 52;
          } else {
            if (_bind$24 >= 48 && _bind$24 <= 55) {
              _tmp$30 = 57;
            } else {
              if (_bind$24 >= 56 && _bind$24 <= 127) {
                _tmp$30 = 52;
              } else {
                if (_bind$24 >= 194 && _bind$24 <= 223) {
                  _tmp$30 = 53;
                } else {
                  if (_bind$24 >= 224 && _bind$24 <= 239) {
                    _tmp$30 = 54;
                  } else {
                    if (_bind$24 === 240) {
                      _tmp$30 = 55;
                    } else {
                      if (_bind$24 >= 241 && _bind$24 <= 244) {
                        _tmp$30 = 56;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$6 = _tmp$30;
          continue _L$2;
        }
        case 30: {
          const _bind$25 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$31;
          if (_bind$25 >= 128 && _bind$25 <= 191) {
            _tmp$31 = 28;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$31;
          continue _L$2;
        }
        case 31: {
          const _bind$26 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$32;
          if (_bind$26 >= 128 && _bind$26 <= 191) {
            _tmp$32 = 30;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$32;
          continue _L$2;
        }
        case 32: {
          const _bind$27 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$33;
          if (_bind$27 >= 144 && _bind$27 <= 191) {
            _tmp$33 = 31;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$33;
          continue _L$2;
        }
        case 33: {
          const _bind$28 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$34;
          if (_bind$28 >= 128 && _bind$28 <= 191) {
            _tmp$34 = 31;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$34;
          continue _L$2;
        }
        case 34: {
          const _bind$29 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$35;
          if (_bind$29 >= 0 && _bind$29 <= 127) {
            _tmp$35 = 58;
          } else {
            if (_bind$29 >= 194 && _bind$29 <= 223) {
              _tmp$35 = 59;
            } else {
              if (_bind$29 >= 224 && _bind$29 <= 239) {
                _tmp$35 = 60;
              } else {
                if (_bind$29 === 240) {
                  _tmp$35 = 61;
                } else {
                  if (_bind$29 >= 241 && _bind$29 <= 244) {
                    _tmp$35 = 62;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$6 = _tmp$35;
          continue _L$2;
        }
        case 35: {
          const _bind$30 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$36;
          if (_bind$30 >= 0 && _bind$30 <= 47) {
            _tmp$36 = 58;
          } else {
            if (_bind$30 >= 48 && _bind$30 <= 57) {
              _tmp$36 = 63;
            } else {
              if (_bind$30 >= 58 && _bind$30 <= 64) {
                _tmp$36 = 58;
              } else {
                if (_bind$30 >= 65 && _bind$30 <= 70) {
                  _tmp$36 = 63;
                } else {
                  if (_bind$30 >= 71 && _bind$30 <= 96) {
                    _tmp$36 = 58;
                  } else {
                    if (_bind$30 >= 97 && _bind$30 <= 102) {
                      _tmp$36 = 63;
                    } else {
                      if (_bind$30 >= 103 && _bind$30 <= 127) {
                        _tmp$36 = 58;
                      } else {
                        if (_bind$30 >= 194 && _bind$30 <= 223) {
                          _tmp$36 = 59;
                        } else {
                          if (_bind$30 >= 224 && _bind$30 <= 239) {
                            _tmp$36 = 60;
                          } else {
                            if (_bind$30 === 240) {
                              _tmp$36 = 61;
                            } else {
                              if (_bind$30 >= 241 && _bind$30 <= 244) {
                                _tmp$36 = 62;
                              } else {
                                break _L$2;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$6 = _tmp$36;
          continue _L$2;
        }
        case 36: {
          const _bind$31 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$37;
          if (_bind$31 >= 128 && _bind$31 <= 191) {
            _tmp$37 = 34;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$37;
          continue _L$2;
        }
        case 37: {
          const _bind$32 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$38;
          if (_bind$32 >= 128 && _bind$32 <= 191) {
            _tmp$38 = 36;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$38;
          continue _L$2;
        }
        case 38: {
          const _bind$33 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$39;
          if (_bind$33 >= 144 && _bind$33 <= 191) {
            _tmp$39 = 37;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$39;
          continue _L$2;
        }
        case 39: {
          const _bind$34 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$40;
          if (_bind$34 >= 128 && _bind$34 <= 191) {
            _tmp$40 = 37;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$40;
          continue _L$2;
        }
        case 40: {
          const _bind$35 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$41;
          if (_bind$35 === 191) {
            _tmp$41 = 16;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$41;
          continue _L$2;
        }
        case 41: {
          const _bind$36 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$42;
          if (_bind$36 === 128) {
            _tmp$42 = 16;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$42;
          continue _L$2;
        }
        case 42: {
          const _bind$37 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$43;
          if (_bind$37 >= 128 && _bind$37 <= 138) {
            _tmp$43 = 16;
          } else {
            if (_bind$37 === 175) {
              _tmp$43 = 16;
            } else {
              break _L$2;
            }
          }
          _tmp$6 = _tmp$43;
          continue _L$2;
        }
        case 43: {
          const _bind$38 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$44;
          if (_bind$38 === 159) {
            _tmp$44 = 16;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$44;
          continue _L$2;
        }
        case 44: {
          const _bind$39 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$45;
          if (_bind$39 >= 0 && _bind$39 <= 9) {
            _tmp$45 = 44;
          } else {
            if (_bind$39 >= 11 && _bind$39 <= 12) {
              _tmp$45 = 44;
            } else {
              if (_bind$39 >= 14 && _bind$39 <= 124) {
                _tmp$45 = 44;
              } else {
                if (_bind$39 === 125) {
                  _tmp$45 = 46;
                } else {
                  if (_bind$39 >= 126 && _bind$39 <= 127) {
                    _tmp$45 = 44;
                  } else {
                    if (_bind$39 >= 194 && _bind$39 <= 223) {
                      _tmp$45 = 47;
                    } else {
                      if (_bind$39 >= 224 && _bind$39 <= 239) {
                        _tmp$45 = 48;
                      } else {
                        if (_bind$39 === 240) {
                          _tmp$45 = 49;
                        } else {
                          if (_bind$39 >= 241 && _bind$39 <= 244) {
                            _tmp$45 = 50;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$6 = _tmp$45;
          continue _L$2;
        }
        case 45: {
          const _bind$40 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$46;
          if (_bind$40 >= 0 && _bind$40 <= 9) {
            _tmp$46 = 44;
          } else {
            if (_bind$40 >= 11 && _bind$40 <= 12) {
              _tmp$46 = 44;
            } else {
              if (_bind$40 >= 14 && _bind$40 <= 47) {
                _tmp$46 = 44;
              } else {
                if (_bind$40 >= 48 && _bind$40 <= 57) {
                  _tmp$46 = 45;
                } else {
                  if (_bind$40 >= 58 && _bind$40 <= 64) {
                    _tmp$46 = 44;
                  } else {
                    if (_bind$40 >= 65 && _bind$40 <= 70) {
                      _tmp$46 = 45;
                    } else {
                      if (_bind$40 >= 71 && _bind$40 <= 96) {
                        _tmp$46 = 44;
                      } else {
                        if (_bind$40 >= 97 && _bind$40 <= 102) {
                          _tmp$46 = 45;
                        } else {
                          if (_bind$40 >= 103 && _bind$40 <= 124) {
                            _tmp$46 = 44;
                          } else {
                            if (_bind$40 === 125) {
                              _tmp$46 = 64;
                            } else {
                              if (_bind$40 >= 126 && _bind$40 <= 127) {
                                _tmp$46 = 44;
                              } else {
                                if (_bind$40 >= 194 && _bind$40 <= 223) {
                                  _tmp$46 = 47;
                                } else {
                                  if (_bind$40 >= 224 && _bind$40 <= 239) {
                                    _tmp$46 = 48;
                                  } else {
                                    if (_bind$40 === 240) {
                                      _tmp$46 = 49;
                                    } else {
                                      if (_bind$40 >= 241 && _bind$40 <= 244) {
                                        _tmp$46 = 50;
                                      } else {
                                        break _L$2;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$6 = _tmp$46;
          continue _L$2;
        }
        case 46: {
          if (_match_pattern >= 8) {
            _match_pattern = 8;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          break _L$2;
        }
        case 47: {
          const _bind$41 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$47;
          if (_bind$41 >= 128 && _bind$41 <= 191) {
            _tmp$47 = 44;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$47;
          continue _L$2;
        }
        case 48: {
          const _bind$42 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$48;
          if (_bind$42 >= 128 && _bind$42 <= 191) {
            _tmp$48 = 47;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$48;
          continue _L$2;
        }
        case 49: {
          const _bind$43 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$49;
          if (_bind$43 >= 144 && _bind$43 <= 191) {
            _tmp$49 = 48;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$49;
          continue _L$2;
        }
        case 50: {
          const _bind$44 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$50;
          if (_bind$44 >= 128 && _bind$44 <= 191) {
            _tmp$50 = 48;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$50;
          continue _L$2;
        }
        case 51: {
          const _bind$45 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$51;
          if (_bind$45 >= 48 && _bind$45 <= 57) {
            _tmp$51 = 65;
          } else {
            if (_bind$45 >= 65 && _bind$45 <= 70) {
              _tmp$51 = 65;
            } else {
              if (_bind$45 >= 97 && _bind$45 <= 102) {
                _tmp$51 = 65;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$6 = _tmp$51;
          continue _L$2;
        }
        case 52: {
          const _bind$46 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$52;
          if (_bind$46 >= 0 && _bind$46 <= 127) {
            _tmp$52 = 66;
          } else {
            if (_bind$46 >= 194 && _bind$46 <= 223) {
              _tmp$52 = 67;
            } else {
              if (_bind$46 >= 224 && _bind$46 <= 239) {
                _tmp$52 = 68;
              } else {
                if (_bind$46 === 240) {
                  _tmp$52 = 69;
                } else {
                  if (_bind$46 >= 241 && _bind$46 <= 244) {
                    _tmp$52 = 70;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$6 = _tmp$52;
          continue _L$2;
        }
        case 53: {
          const _bind$47 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$53;
          if (_bind$47 >= 128 && _bind$47 <= 191) {
            _tmp$53 = 52;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$53;
          continue _L$2;
        }
        case 54: {
          const _bind$48 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$54;
          if (_bind$48 >= 128 && _bind$48 <= 191) {
            _tmp$54 = 53;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$54;
          continue _L$2;
        }
        case 55: {
          const _bind$49 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$55;
          if (_bind$49 >= 144 && _bind$49 <= 191) {
            _tmp$55 = 54;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$55;
          continue _L$2;
        }
        case 56: {
          const _bind$50 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$56;
          if (_bind$50 >= 128 && _bind$50 <= 191) {
            _tmp$56 = 54;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$56;
          continue _L$2;
        }
        case 57: {
          const _bind$51 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$57;
          if (_bind$51 >= 0 && _bind$51 <= 47) {
            _tmp$57 = 66;
          } else {
            if (_bind$51 >= 48 && _bind$51 <= 55) {
              _tmp$57 = 71;
            } else {
              if (_bind$51 >= 56 && _bind$51 <= 127) {
                _tmp$57 = 66;
              } else {
                if (_bind$51 >= 194 && _bind$51 <= 223) {
                  _tmp$57 = 67;
                } else {
                  if (_bind$51 >= 224 && _bind$51 <= 239) {
                    _tmp$57 = 68;
                  } else {
                    if (_bind$51 === 240) {
                      _tmp$57 = 69;
                    } else {
                      if (_bind$51 >= 241 && _bind$51 <= 244) {
                        _tmp$57 = 70;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$6 = _tmp$57;
          continue _L$2;
        }
        case 58: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          break _L$2;
        }
        case 59: {
          const _bind$52 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$58;
          if (_bind$52 >= 128 && _bind$52 <= 191) {
            _tmp$58 = 58;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$58;
          continue _L$2;
        }
        case 60: {
          const _bind$53 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$59;
          if (_bind$53 >= 128 && _bind$53 <= 191) {
            _tmp$59 = 59;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$59;
          continue _L$2;
        }
        case 61: {
          const _bind$54 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$60;
          if (_bind$54 >= 144 && _bind$54 <= 191) {
            _tmp$60 = 60;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$60;
          continue _L$2;
        }
        case 62: {
          const _bind$55 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$61;
          if (_bind$55 >= 128 && _bind$55 <= 191) {
            _tmp$61 = 60;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$61;
          continue _L$2;
        }
        case 63: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 4 | 0;
          }
          break _L$2;
        }
        case 64: {
          if (_match_pattern >= 7) {
            _match_pattern = 7;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          break _L$2;
        }
        case 65: {
          const _bind$56 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$62;
          if (_bind$56 >= 48 && _bind$56 <= 57) {
            _tmp$62 = 72;
          } else {
            if (_bind$56 >= 65 && _bind$56 <= 70) {
              _tmp$62 = 72;
            } else {
              if (_bind$56 >= 97 && _bind$56 <= 102) {
                _tmp$62 = 72;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$6 = _tmp$62;
          continue _L$2;
        }
        case 66: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          break _L$2;
        }
        case 67: {
          const _bind$57 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$63;
          if (_bind$57 >= 128 && _bind$57 <= 191) {
            _tmp$63 = 66;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$63;
          continue _L$2;
        }
        case 68: {
          const _bind$58 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$64;
          if (_bind$58 >= 128 && _bind$58 <= 191) {
            _tmp$64 = 67;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$64;
          continue _L$2;
        }
        case 69: {
          const _bind$59 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$65;
          if (_bind$59 >= 144 && _bind$59 <= 191) {
            _tmp$65 = 68;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$65;
          continue _L$2;
        }
        case 70: {
          const _bind$60 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$66;
          if (_bind$60 >= 128 && _bind$60 <= 191) {
            _tmp$66 = 68;
          } else {
            break _L$2;
          }
          _tmp$6 = _tmp$66;
          continue _L$2;
        }
        case 71: {
          if (_match_pattern >= 4) {
            _match_pattern = 4;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 5 | 0;
          }
          break _L$2;
        }
        case 72: {
          if (_match_pattern >= 6) {
            _match_pattern = 6;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_start + 6 | 0;
          }
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 13) {
      moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(lexbuf$2, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          if (end_with_newline$2) {
            moonbitlang$core$builtin$$Logger$write_char$40$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, 34);
            continue _L;
          } else {
            if (!(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val === "")) {
              moonbitlang$core$array$$Array$push$122$(moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpLit(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val, { start: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, startpos$2), end: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, _match_end) }));
              return;
            } else {
              return;
            }
          }
        }
        case 1: {
          const repr = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_string$40$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, repr);
          continue _L;
        }
        case 2: {
          const repr$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_string$40$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, repr$2);
          continue _L;
        }
        case 3: {
          const repr$3 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence(repr$3));
          continue _L;
        }
        case 4: {
          const repr$4 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_string$40$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, repr$4);
          continue _L;
        }
        case 5: {
          const repr$5 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence(repr$5));
          continue _L;
        }
        case 6: {
          const repr$6 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_string$40$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, repr$6);
          continue _L;
        }
        case 7: {
          const repr$7 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_string$40$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, repr$7);
          continue _L;
        }
        case 8: {
          const repr$8 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence(repr$8));
          continue _L;
        }
        case 9: {
          const repr$9 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start, _capture_0_end);
          if (allow_interp$2) {
            if (!(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val === "")) {
              moonbitlang$core$array$$Array$push$122$(moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpLit(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val, { start: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, startpos$2), end: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, _match_end) }));
            }
            moonbitlang$core$builtin$$StringBuilder$reset(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf);
            const apos = _match_end;
            const bpos = moonbitlang$ulex$lib$new_frontend$lexer$$interp_handle(lexbuf$2, env$2);
            const loc = { start: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, apos), end: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, bpos) };
            if (moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val === "") {
              moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpMissingExpression);
            } else {
              const source = moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val;
              moonbitlang$core$array$$Array$push$122$(moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpSource({ source: source, loc: loc }));
            }
            moonbitlang$core$builtin$$StringBuilder$reset(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf);
          } else {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence(repr$9));
          }
          continue _L;
        }
        case 10: {
          const repr$10 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence(repr$10));
          continue _L;
        }
        case 11: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$UnterminatedString);
          if (!(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val === "")) {
            moonbitlang$core$array$$Array$push$122$(moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpLit(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val, { start: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, startpos$2), end: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, _match_end) }));
            return;
          } else {
            return;
          }
        }
        case 12: {
          moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(lexbuf$2, lexbuf$2.pos - 1 | 0);
          if (!end_with_newline$2) {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$UnterminatedString);
          }
          if (!(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val === "")) {
            moonbitlang$core$array$$Array$push$122$(moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpLit(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf.val, { start: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, startpos$2), end: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, _match_end) }));
            return;
          } else {
            return;
          }
        }
        case 13: {
          const repr$11 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf$2, _capture_0_start, _capture_0_end);
          const _self = moonbitlang$core$builtin$$StringBuilder$new(0);
          moonbitlang$core$builtin$$Logger$write_char$40$(_self, repr$11);
          const _p = _self;
          moonbitlang$core$builtin$$Logger$write_string$40$(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf, _p.val);
          continue _L;
        }
        default: {
          $panic();
          return;
        }
      }
    } else {
      $panic();
      return;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$string(lexbuf, env, end_with_newline, allow_interp, startpos) {
  moonbitlang$core$builtin$$StringBuilder$reset(moonbitlang$ulex$lib$new_frontend$lexer$$string_repr_buf);
  moonbitlang$ulex$lib$new_frontend$lexer$$normal(lexbuf, env, end_with_newline, allow_interp, startpos);
  if (moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val.length === 0) {
    return [new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$InterpElem$InterpLit("", { start: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, startpos), end: moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env, lexbuf.pos) })];
  } else {
    const interps = moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val;
    moonbitlang$ulex$lib$new_frontend$lexer$$string_interps.val = [];
    return interps;
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$invalid_byte(lexbuf, env, start) {
  let _tmp = lexbuf;
  let _tmp$2 = env;
  let _tmp$3 = start;
  _L: while (true) {
    const lexbuf$2 = _tmp;
    const env$2 = _tmp$2;
    const start$2 = _tmp$3;
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf$2.pos;
    let _match_end = -1;
    let _capture_0_start = -1;
    let _capture_0_end = -1;
    let _tmp$4 = 0;
    _L$2: while (true) {
      const _param = _tmp$4;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$5;
          if (_bind === -1) {
            _tmp$5 = 1;
          } else {
            if (_bind >= 0 && _bind <= 9) {
              _tmp$5 = 2;
            } else {
              if (_bind === 10) {
                _tmp$5 = 1;
              } else {
                if (_bind >= 11 && _bind <= 12) {
                  _tmp$5 = 2;
                } else {
                  if (_bind === 13) {
                    _tmp$5 = 1;
                  } else {
                    if (_bind >= 14 && _bind <= 38) {
                      _tmp$5 = 2;
                    } else {
                      if (_bind === 39) {
                        _tmp$5 = 1;
                      } else {
                        if (_bind >= 40 && _bind <= 127) {
                          _tmp$5 = 2;
                        } else {
                          if (_bind >= 194 && _bind <= 223) {
                            _tmp$5 = 3;
                          } else {
                            if (_bind >= 224 && _bind <= 236) {
                              _tmp$5 = 4;
                            } else {
                              if (_bind === 237) {
                                _tmp$5 = 5;
                              } else {
                                if (_bind >= 238 && _bind <= 239) {
                                  _tmp$5 = 4;
                                } else {
                                  if (_bind === 240) {
                                    _tmp$5 = 6;
                                  } else {
                                    if (_bind >= 241 && _bind <= 244) {
                                      _tmp$5 = 7;
                                    } else {
                                      break _L$2;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$5;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
            _capture_0_start = _match_start;
            _capture_0_end = _match_end;
          }
          break _L$2;
        }
        case 3: {
          const _bind$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$6;
          if (_bind$2 >= 128 && _bind$2 <= 191) {
            _tmp$6 = 2;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$6;
          continue _L$2;
        }
        case 4: {
          const _bind$3 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$7;
          if (_bind$3 >= 128 && _bind$3 <= 191) {
            _tmp$7 = 3;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$7;
          continue _L$2;
        }
        case 5: {
          const _bind$4 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$8;
          if (_bind$4 >= 128 && _bind$4 <= 159) {
            _tmp$8 = 3;
          } else {
            if (_bind$4 >= 160 && _bind$4 <= 191) {
              _tmp$8 = 8;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$8;
          continue _L$2;
        }
        case 6: {
          const _bind$5 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$9;
          if (_bind$5 >= 144 && _bind$5 <= 191) {
            _tmp$9 = 4;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$9;
          continue _L$2;
        }
        case 7: {
          const _bind$6 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$10;
          if (_bind$6 >= 128 && _bind$6 <= 191) {
            _tmp$10 = 4;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$10;
          continue _L$2;
        }
        case 8: {
          const _bind$7 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$11;
          if (_bind$7 >= 128 && _bind$7 <= 191) {
            _tmp$11 = 9;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$11;
          continue _L$2;
        }
        case 9: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 2) {
      moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(lexbuf$2, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, start$2, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidByteLiteral(moonbitlang$ulex$lib$new_frontend$lexer$$invalid_byte_repr_buf.val));
          moonbitlang$core$builtin$$StringBuilder$reset(moonbitlang$ulex$lib$new_frontend$lexer$$invalid_byte_repr_buf);
          return;
        }
        case 1: {
          const c = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf$2, _capture_0_start, _capture_0_end);
          moonbitlang$core$builtin$$Logger$write_char$40$(moonbitlang$ulex$lib$new_frontend$lexer$$invalid_byte_repr_buf, c);
          continue _L;
        }
        case 2: {
          continue _L;
        }
        default: {
          $panic();
          return;
        }
      }
    } else {
      $panic();
      return;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$can_occur_after_semicolon(token) {
  switch (token.$tag) {
    case 11: {
      return true;
    }
    case 10: {
      return true;
    }
    case 4: {
      return true;
    }
    case 1: {
      return true;
    }
    case 2: {
      return true;
    }
    case 3: {
      return true;
    }
    case 24: {
      return true;
    }
    case 23: {
      return true;
    }
    case 5: {
      return true;
    }
    case 6: {
      return true;
    }
    case 7: {
      return true;
    }
    case 8: {
      return true;
    }
    case 0: {
      return true;
    }
    case 65: {
      return true;
    }
    case 47: {
      return true;
    }
    case 60: {
      return true;
    }
    case 63: {
      return true;
    }
    case 30: {
      return true;
    }
    case 31: {
      return true;
    }
    case 85: {
      return true;
    }
    case 39: {
      return true;
    }
    case 38: {
      return true;
    }
    case 81: {
      return true;
    }
    case 43: {
      return true;
    }
    case 32: {
      return true;
    }
    case 34: {
      return true;
    }
    case 44: {
      return true;
    }
    case 71: {
      return true;
    }
    case 80: {
      return true;
    }
    case 79: {
      return true;
    }
    case 40: {
      return true;
    }
    case 77: {
      return true;
    }
    case 78: {
      return true;
    }
    case 36: {
      return true;
    }
    case 28: {
      return true;
    }
    case 29: {
      return true;
    }
    case 76: {
      return true;
    }
    case 92: {
      return true;
    }
    case 84: {
      return true;
    }
    case 42: {
      return true;
    }
    case 75: {
      return true;
    }
    case 45: {
      return true;
    }
    case 22: {
      return true;
    }
    case 33: {
      return true;
    }
    case 25: {
      return true;
    }
    case 26: {
      return true;
    }
    case 27: {
      return true;
    }
    case 90: {
      return true;
    }
    case 91: {
      return true;
    }
    case 93: {
      return true;
    }
    case 89: {
      return true;
    }
    case 14: {
      return true;
    }
    case 9: {
      return true;
    }
    case 12: {
      return true;
    }
    case 13: {
      return true;
    }
    case 15: {
      return true;
    }
    case 16: {
      return true;
    }
    case 50: {
      return true;
    }
    case 61: {
      return true;
    }
    case 17: {
      return true;
    }
    case 18: {
      return true;
    }
    case 19: {
      return true;
    }
    case 20: {
      return true;
    }
    case 67: {
      return true;
    }
    case 70: {
      return true;
    }
    case 69: {
      return true;
    }
    case 68: {
      return true;
    }
    case 66: {
      return false;
    }
    case 54: {
      return false;
    }
    case 53: {
      return false;
    }
    case 56: {
      return false;
    }
    case 55: {
      return false;
    }
    case 57: {
      return false;
    }
    case 48: {
      return false;
    }
    case 62: {
      return false;
    }
    case 59: {
      return false;
    }
    case 82: {
      return false;
    }
    case 83: {
      return false;
    }
    case 94: {
      return false;
    }
    case 73: {
      return false;
    }
    case 46: {
      return false;
    }
    case 21: {
      return false;
    }
    case 74: {
      return false;
    }
    case 41: {
      return false;
    }
    case 49: {
      return false;
    }
    case 58: {
      return false;
    }
    case 64: {
      return false;
    }
    case 72: {
      return false;
    }
    case 95: {
      return false;
    }
    case 86: {
      return false;
    }
    case 35: {
      return false;
    }
    case 37: {
      return false;
    }
    case 51: {
      return false;
    }
    case 87: {
      return false;
    }
    case 88: {
      return false;
    }
    default: {
      return false;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$can_occur_before_semicolon(token) {
  switch (token.$tag) {
    case 11: {
      return true;
    }
    case 10: {
      return true;
    }
    case 54: {
      return true;
    }
    case 53: {
      return true;
    }
    case 55: {
      return true;
    }
    case 4: {
      return true;
    }
    case 1: {
      return true;
    }
    case 2: {
      return true;
    }
    case 3: {
      return true;
    }
    case 24: {
      return true;
    }
    case 23: {
      return true;
    }
    case 5: {
      return true;
    }
    case 6: {
      return true;
    }
    case 7: {
      return true;
    }
    case 8: {
      return true;
    }
    case 0: {
      return true;
    }
    case 66: {
      return true;
    }
    case 48: {
      return true;
    }
    case 62: {
      return true;
    }
    case 63: {
      return true;
    }
    case 30: {
      return true;
    }
    case 31: {
      return true;
    }
    case 85: {
      return true;
    }
    case 39: {
      return true;
    }
    case 51: {
      return true;
    }
    case 52: {
      return true;
    }
    case 87: {
      return true;
    }
    case 88: {
      return true;
    }
    case 73: {
      return true;
    }
    case 89: {
      return true;
    }
    case 14: {
      return true;
    }
    case 81: {
      return false;
    }
    case 43: {
      return false;
    }
    case 32: {
      return false;
    }
    case 59: {
      return false;
    }
    case 61: {
      return false;
    }
    case 71: {
      return false;
    }
    case 16: {
      return false;
    }
    case 80: {
      return false;
    }
    case 50: {
      return false;
    }
    case 79: {
      return false;
    }
    case 40: {
      return false;
    }
    case 41: {
      return false;
    }
    case 47: {
      return false;
    }
    case 56: {
      return false;
    }
    case 77: {
      return false;
    }
    case 78: {
      return false;
    }
    case 60: {
      return false;
    }
    case 65: {
      return false;
    }
    case 17: {
      return false;
    }
    case 20: {
      return false;
    }
    case 19: {
      return false;
    }
    case 18: {
      return false;
    }
    case 36: {
      return false;
    }
    case 37: {
      return false;
    }
    case 28: {
      return false;
    }
    case 76: {
      return false;
    }
    case 92: {
      return false;
    }
    case 84: {
      return false;
    }
    case 42: {
      return false;
    }
    case 75: {
      return false;
    }
    case 45: {
      return false;
    }
    case 82: {
      return false;
    }
    case 83: {
      return false;
    }
    case 94: {
      return false;
    }
    case 46: {
      return false;
    }
    case 21: {
      return false;
    }
    case 22: {
      return false;
    }
    case 33: {
      return false;
    }
    case 74: {
      return false;
    }
    case 29: {
      return false;
    }
    case 15: {
      return false;
    }
    case 49: {
      return false;
    }
    case 58: {
      return false;
    }
    case 70: {
      return false;
    }
    case 64: {
      return false;
    }
    case 72: {
      return false;
    }
    case 95: {
      return false;
    }
    case 67: {
      return false;
    }
    case 86: {
      return false;
    }
    case 25: {
      return false;
    }
    case 26: {
      return false;
    }
    case 27: {
      return false;
    }
    case 34: {
      return false;
    }
    case 44: {
      return false;
    }
    case 35: {
      return false;
    }
    case 57: {
      return false;
    }
    case 90: {
      return false;
    }
    case 91: {
      return false;
    }
    case 93: {
      return false;
    }
    case 68: {
      return false;
    }
    case 69: {
      return false;
    }
    case 38: {
      return false;
    }
    case 9: {
      return false;
    }
    case 12: {
      return false;
    }
    default: {
      return false;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$ASIContext$add_token$114$(self, tokens, last_unhandled_comment, next_token) {
  switch (next_token.$tag) {
    case 15: {
      return;
    }
    case 16: {
      if (self.last_unhandled_newline < 0) {
        self.last_unhandled_newline = tokens.length;
        return;
      } else {
        return;
      }
    }
    default: {
      if (self.last_unhandled_newline >= 0) {
        let _tmp = self.last_unhandled_newline - 1 | 0;
        _L: while (true) {
          const _param = _tmp;
          if (_param >= 0) {
            const _bind = moonbitlang$core$array$$Array$op_get$138$(tokens, _param);
            const _x = _bind._0;
            if (_x.$tag === 15) {
              _tmp = _param - 1 | 0;
              continue;
            } else {
              const _endp = _bind._2;
              if (moonbitlang$ulex$lib$new_frontend$lexer$$can_occur_before_semicolon(_x) && moonbitlang$ulex$lib$new_frontend$lexer$$can_occur_after_semicolon(next_token)) {
                _L$2: {
                  switch (_x.$tag) {
                    case 6: {
                      switch (next_token.$tag) {
                        case 6: {
                          break _L;
                        }
                        case 7: {
                          break _L;
                        }
                        default: {
                          break _L$2;
                        }
                      }
                    }
                    case 7: {
                      switch (next_token.$tag) {
                        case 6: {
                          break _L;
                        }
                        case 7: {
                          break _L;
                        }
                        default: {
                          break _L$2;
                        }
                      }
                    }
                    default: {
                      break _L$2;
                    }
                  }
                }
                moonbitlang$core$array$$Array$insert$138$(tokens, _param + 1 | 0, { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$SEMI(false), _1: _endp, _2: _endp });
                const _bind$2 = last_unhandled_comment.val;
                if (_bind$2 === undefined) {
                  break;
                } else {
                  const _Some = _bind$2;
                  const _x$2 = _Some;
                  const _c = _x$2._0;
                  const _i = _x$2._1;
                  if (_i >= (_param + 1 | 0)) {
                    last_unhandled_comment.val = { _0: _c, _1: _i + 1 | 0 };
                    break;
                  } else {
                    break;
                  }
                }
              } else {
                break;
              }
            }
          } else {
            break;
          }
        }
        self.last_unhandled_newline = -1;
        return;
      } else {
        return;
      }
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$add_token$46$count_newlines$124$100(_env, start_index, direction) {
  const self = _env._1;
  const at_file_start = _env._0;
  let count = 0;
  let index = start_index;
  while (true) {
    const target_index = index + direction | 0;
    _L: {
      _L$2: {
        const _bind = moonbitlang$core$array$$Array$get$138$(self.tokens, target_index);
        if (_bind === undefined) {
          break _L$2;
        } else {
          const _Some = _bind;
          const _x = _Some;
          const _x$2 = _x._0;
          switch (_x$2.$tag) {
            case 15: {
              return count;
            }
            case 16: {
              if (count >= 2) {
                return count;
              } else {
                count = count + 1 | 0;
                index = target_index;
              }
              break;
            }
            case 22: {
              break _L$2;
            }
            default: {
              return count;
            }
          }
        }
        break _L;
      }
      if (direction < 0) {
        at_file_start.val = true;
      }
      return 0;
    }
    continue;
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$add_token$46$handle_comment$124$94(self, ci) {
  const _c = ci._0;
  const _i = ci._1;
  const at_file_start = { val: false };
  const _env = { _0: at_file_start, _1: self };
  const leading_newlines = moonbitlang$core$math$$minimum$7$(2, moonbitlang$ulex$lib$new_frontend$lexer$$add_token$46$count_newlines$124$100(_env, _i, -1));
  const trailing_newlines = moonbitlang$core$math$$minimum$7$(2, moonbitlang$ulex$lib$new_frontend$lexer$$add_token$46$count_newlines$124$100(_env, _i, 1));
  const _bind = moonbitlang$core$array$$Array$op_get$138$(self.tokens, _i);
  const _start = _bind._1;
  const _end = _bind._2;
  const kind = leading_newlines === 0 && !at_file_start.val ? $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$CommentKind$InlineTrailing : new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$CommentKind$Ownline(leading_newlines === 2 && !at_file_start.val, trailing_newlines === 2);
  moonbitlang$core$array$$Array$op_set$138$(self.tokens, _i, { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COMMENT({ content: _c.content, kind: kind, consumed_by_docstring: _c.consumed_by_docstring }), _1: _start, _2: _end });
}
function moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token(self, tok, start, end) {
  moonbitlang$ulex$lib$new_frontend$lexer$$ASIContext$add_token$114$(self.asi_context, self.tokens, self.last_unhandled_comment, tok);
  moonbitlang$core$array$$Array$push$138$(self.tokens, { _0: tok, _1: start, _2: end });
  if (self.comment) {
    const tok_index = self.tokens.length - 1 | 0;
    let c;
    _L: {
      const _bind = self.last_unhandled_comment.val;
      if (tok.$tag === 16) {
        return;
      } else {
        if (_bind === undefined) {
          if (tok.$tag === 15) {
            const _COMMENT = tok;
            const _c = _COMMENT._0;
            c = _c;
            break _L;
          } else {
            return;
          }
        } else {
          const _Some = _bind;
          const _ci = _Some;
          if (tok.$tag === 15) {
            const _COMMENT = tok;
            const _c = _COMMENT._0;
            moonbitlang$ulex$lib$new_frontend$lexer$$add_token$46$handle_comment$124$94(self, _ci);
            c = _c;
            break _L;
          } else {
            moonbitlang$ulex$lib$new_frontend$lexer$$add_token$46$handle_comment$124$94(self, _ci);
            return;
          }
        }
      }
    }
    self.last_unhandled_comment.val = { _0: c, _1: tok_index };
    return;
  } else {
    return;
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(self, tok, start, end, start_offset) {
  const start$2 = moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(self, start + start_offset | 0);
  const end$2 = moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(self, end);
  moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token(self, tok, start$2, end$2);
}
function moonbitlang$ulex$lib$new_frontend$lexer$$tokens(lexbuf, env, preserve_comment) {
  let _tmp = lexbuf;
  let _tmp$2 = env;
  let _tmp$3 = preserve_comment;
  _L: while (true) {
    const lexbuf$2 = _tmp;
    const env$2 = _tmp$2;
    const preserve_comment$2 = _tmp$3;
    let _match_pattern = moonbitlang$core$int$$max_value;
    let _match_start = lexbuf$2.pos;
    let _match_end = -1;
    const _capture_0_start = { val: -1 };
    const _capture_0_end = { val: -1 };
    let _capture_1_start = -1;
    let _capture_1_end = -1;
    let _tmp$4 = 0;
    _L$2: while (true) {
      const _param = _tmp$4;
      switch (_param) {
        case 0: {
          const _bind = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$5;
          if (_bind === -1) {
            _tmp$5 = 1;
          } else {
            if (_bind >= 0 && _bind <= 8) {
              _tmp$5 = 2;
            } else {
              if (_bind === 9) {
                _tmp$5 = 3;
              } else {
                if (_bind === 10) {
                  _tmp$5 = 4;
                } else {
                  if (_bind >= 11 && _bind <= 12) {
                    _tmp$5 = 3;
                  } else {
                    if (_bind === 13) {
                      _tmp$5 = 5;
                    } else {
                      if (_bind >= 14 && _bind <= 31) {
                        _tmp$5 = 2;
                      } else {
                        if (_bind === 32) {
                          _tmp$5 = 3;
                        } else {
                          if (_bind === 33) {
                            _tmp$5 = 6;
                          } else {
                            if (_bind === 34) {
                              _tmp$5 = 7;
                            } else {
                              if (_bind === 35) {
                                _tmp$5 = 8;
                              } else {
                                if (_bind === 36) {
                                  _tmp$5 = 9;
                                } else {
                                  if (_bind === 37) {
                                    _tmp$5 = 10;
                                  } else {
                                    if (_bind === 38) {
                                      _tmp$5 = 11;
                                    } else {
                                      if (_bind === 39) {
                                        _tmp$5 = 12;
                                      } else {
                                        if (_bind === 40) {
                                          _tmp$5 = 13;
                                        } else {
                                          if (_bind === 41) {
                                            _tmp$5 = 14;
                                          } else {
                                            if (_bind === 42) {
                                              _tmp$5 = 15;
                                            } else {
                                              if (_bind === 43) {
                                                _tmp$5 = 16;
                                              } else {
                                                if (_bind === 44) {
                                                  _tmp$5 = 17;
                                                } else {
                                                  if (_bind === 45) {
                                                    _tmp$5 = 18;
                                                  } else {
                                                    if (_bind === 46) {
                                                      _tmp$5 = 19;
                                                    } else {
                                                      if (_bind === 47) {
                                                        _tmp$5 = 20;
                                                      } else {
                                                        if (_bind === 48) {
                                                          _tmp$5 = 21;
                                                        } else {
                                                          if (_bind >= 49 && _bind <= 57) {
                                                            _tmp$5 = 22;
                                                          } else {
                                                            if (_bind === 58) {
                                                              _tmp$5 = 23;
                                                            } else {
                                                              if (_bind === 59) {
                                                                _tmp$5 = 24;
                                                              } else {
                                                                if (_bind === 60) {
                                                                  _tmp$5 = 25;
                                                                } else {
                                                                  if (_bind === 61) {
                                                                    _tmp$5 = 26;
                                                                  } else {
                                                                    if (_bind === 62) {
                                                                      _tmp$5 = 27;
                                                                    } else {
                                                                      if (_bind === 63) {
                                                                        _tmp$5 = 28;
                                                                      } else {
                                                                        if (_bind === 64) {
                                                                          _tmp$5 = 29;
                                                                        } else {
                                                                          if (_bind >= 65 && _bind <= 90) {
                                                                            _tmp$5 = 30;
                                                                          } else {
                                                                            if (_bind === 91) {
                                                                              _tmp$5 = 31;
                                                                            } else {
                                                                              if (_bind === 92) {
                                                                                _tmp$5 = 2;
                                                                              } else {
                                                                                if (_bind === 93) {
                                                                                  _tmp$5 = 32;
                                                                                } else {
                                                                                  if (_bind === 94) {
                                                                                    _tmp$5 = 33;
                                                                                  } else {
                                                                                    if (_bind === 95) {
                                                                                      _tmp$5 = 34;
                                                                                    } else {
                                                                                      if (_bind === 96) {
                                                                                        _tmp$5 = 2;
                                                                                      } else {
                                                                                        if (_bind === 97) {
                                                                                          _tmp$5 = 34;
                                                                                        } else {
                                                                                          if (_bind === 98) {
                                                                                            _tmp$5 = 35;
                                                                                          } else {
                                                                                            if (_bind >= 99 && _bind <= 122) {
                                                                                              _tmp$5 = 34;
                                                                                            } else {
                                                                                              if (_bind === 123) {
                                                                                                _tmp$5 = 36;
                                                                                              } else {
                                                                                                if (_bind === 124) {
                                                                                                  _tmp$5 = 37;
                                                                                                } else {
                                                                                                  if (_bind === 125) {
                                                                                                    _tmp$5 = 38;
                                                                                                  } else {
                                                                                                    if (_bind >= 126 && _bind <= 127) {
                                                                                                      _tmp$5 = 2;
                                                                                                    } else {
                                                                                                      if (_bind === 194) {
                                                                                                        _tmp$5 = 39;
                                                                                                      } else {
                                                                                                        if (_bind >= 195 && _bind <= 201) {
                                                                                                          _tmp$5 = 40;
                                                                                                        } else {
                                                                                                          if (_bind === 202) {
                                                                                                            _tmp$5 = 41;
                                                                                                          } else {
                                                                                                            if (_bind >= 203 && _bind <= 223) {
                                                                                                              _tmp$5 = 42;
                                                                                                            } else {
                                                                                                              if (_bind === 224) {
                                                                                                                _tmp$5 = 43;
                                                                                                              } else {
                                                                                                                if (_bind === 225) {
                                                                                                                  _tmp$5 = 44;
                                                                                                                } else {
                                                                                                                  if (_bind === 226) {
                                                                                                                    _tmp$5 = 45;
                                                                                                                  } else {
                                                                                                                    if (_bind === 227) {
                                                                                                                      _tmp$5 = 46;
                                                                                                                    } else {
                                                                                                                      if (_bind >= 228 && _bind <= 233) {
                                                                                                                        _tmp$5 = 47;
                                                                                                                      } else {
                                                                                                                        if (_bind === 234) {
                                                                                                                          _tmp$5 = 48;
                                                                                                                        } else {
                                                                                                                          if (_bind >= 235 && _bind <= 236) {
                                                                                                                            _tmp$5 = 47;
                                                                                                                          } else {
                                                                                                                            if (_bind === 237) {
                                                                                                                              _tmp$5 = 49;
                                                                                                                            } else {
                                                                                                                              if (_bind === 238) {
                                                                                                                                _tmp$5 = 43;
                                                                                                                              } else {
                                                                                                                                if (_bind === 239) {
                                                                                                                                  _tmp$5 = 50;
                                                                                                                                } else {
                                                                                                                                  if (_bind === 240) {
                                                                                                                                    _tmp$5 = 51;
                                                                                                                                  } else {
                                                                                                                                    if (_bind >= 241 && _bind <= 242) {
                                                                                                                                      _tmp$5 = 52;
                                                                                                                                    } else {
                                                                                                                                      if (_bind === 243) {
                                                                                                                                        _tmp$5 = 53;
                                                                                                                                      } else {
                                                                                                                                        if (_bind === 244) {
                                                                                                                                          _tmp$5 = 52;
                                                                                                                                        } else {
                                                                                                                                          break _L$2;
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$5;
          continue _L$2;
        }
        case 1: {
          if (_match_pattern >= 66) {
            _match_pattern = 66;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 2: {
          if (_match_pattern >= 70) {
            _match_pattern = 70;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          break _L$2;
        }
        case 3: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
          }
          const _bind$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$6;
          if (_bind$2 === 9) {
            _tmp$6 = 3;
          } else {
            if (_bind$2 >= 11 && _bind$2 <= 12) {
              _tmp$6 = 3;
            } else {
              if (_bind$2 === 32) {
                _tmp$6 = 3;
              } else {
                if (_bind$2 === 194) {
                  _tmp$6 = 132;
                } else {
                  if (_bind$2 === 225) {
                    _tmp$6 = 133;
                  } else {
                    if (_bind$2 === 226) {
                      _tmp$6 = 134;
                    } else {
                      if (_bind$2 === 227) {
                        _tmp$6 = 135;
                      } else {
                        if (_bind$2 === 239) {
                          _tmp$6 = 136;
                        } else {
                          break _L$2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$6;
          continue _L$2;
        }
        case 4: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 5: {
          if (_match_pattern >= 0) {
            _match_pattern = 0;
            _match_end = lexbuf$2.pos;
          }
          const _bind$3 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$7;
          if (_bind$3 === 10) {
            _tmp$7 = 4;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$7;
          continue _L$2;
        }
        case 6: {
          if (_match_pattern >= 62) {
            _match_pattern = 62;
            _match_end = lexbuf$2.pos;
          }
          const _bind$4 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$8;
          if (_bind$4 === 61) {
            _tmp$8 = 86;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$8;
          continue _L$2;
        }
        case 7: {
          if (_match_pattern >= 11) {
            _match_pattern = 11;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 8: {
          if (_match_pattern >= 70) {
            _match_pattern = 70;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$5 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$9;
          if (_bind$5 >= 65 && _bind$5 <= 90) {
            _tmp$9 = 114;
          } else {
            if (_bind$5 >= 97 && _bind$5 <= 122) {
              _tmp$9 = 114;
            } else {
              if (_bind$5 === 124) {
                _tmp$9 = 115;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$9;
          continue _L$2;
        }
        case 9: {
          if (_match_pattern >= 70) {
            _match_pattern = 70;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$6 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$10;
          if (_bind$6 === 124) {
            _tmp$10 = 116;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$10;
          continue _L$2;
        }
        case 10: {
          if (_match_pattern >= 30) {
            _match_pattern = 30;
            _match_end = lexbuf$2.pos;
          }
          const _bind$7 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$11;
          if (_bind$7 === 61) {
            _tmp$11 = 111;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$11;
          continue _L$2;
        }
        case 11: {
          if (_match_pattern >= 23) {
            _match_pattern = 23;
            _match_end = lexbuf$2.pos;
          }
          const _bind$8 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$12;
          if (_bind$8 === 38) {
            _tmp$12 = 112;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$12;
          continue _L$2;
        }
        case 12: {
          if (_match_pattern >= 70) {
            _match_pattern = 70;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$9 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$13;
          if (_bind$9 >= 0 && _bind$9 <= 9) {
            _tmp$13 = 119;
          } else {
            if (_bind$9 >= 11 && _bind$9 <= 12) {
              _tmp$13 = 119;
            } else {
              if (_bind$9 >= 14 && _bind$9 <= 38) {
                _tmp$13 = 119;
              } else {
                if (_bind$9 >= 40 && _bind$9 <= 91) {
                  _tmp$13 = 119;
                } else {
                  if (_bind$9 === 92) {
                    _tmp$13 = 120;
                  } else {
                    if (_bind$9 >= 93 && _bind$9 <= 127) {
                      _tmp$13 = 119;
                    } else {
                      if (_bind$9 >= 194 && _bind$9 <= 223) {
                        _tmp$13 = 121;
                      } else {
                        if (_bind$9 >= 224 && _bind$9 <= 239) {
                          _tmp$13 = 122;
                        } else {
                          if (_bind$9 === 240) {
                            _tmp$13 = 123;
                          } else {
                            if (_bind$9 >= 241 && _bind$9 <= 244) {
                              _tmp$13 = 124;
                            } else {
                              break _L$2;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$13;
          continue _L$2;
        }
        case 13: {
          if (_match_pattern >= 25) {
            _match_pattern = 25;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 14: {
          if (_match_pattern >= 26) {
            _match_pattern = 26;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 15: {
          if (_match_pattern >= 28) {
            _match_pattern = 28;
            _match_end = lexbuf$2.pos;
          }
          const _bind$10 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$14;
          if (_bind$10 === 61) {
            _tmp$14 = 111;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$14;
          continue _L$2;
        }
        case 16: {
          if (_match_pattern >= 58) {
            _match_pattern = 58;
            _match_end = lexbuf$2.pos;
          }
          const _bind$11 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$15;
          if (_bind$11 === 61) {
            _tmp$15 = 111;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$15;
          continue _L$2;
        }
        case 17: {
          if (_match_pattern >= 31) {
            _match_pattern = 31;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 18: {
          if (_match_pattern >= 59) {
            _match_pattern = 59;
            _match_end = lexbuf$2.pos;
          }
          const _bind$12 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$16;
          switch (_bind$12) {
            case 61: {
              _tmp$16 = 111;
              break;
            }
            case 62: {
              _tmp$16 = 126;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$16;
          continue _L$2;
        }
        case 19: {
          if (_match_pattern >= 70) {
            _match_pattern = 70;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$13 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$17;
          if (_bind$13 === 40) {
            _tmp$17 = 94;
          } else {
            if (_bind$13 === 46) {
              _tmp$17 = 95;
            } else {
              if (_bind$13 >= 48 && _bind$13 <= 57) {
                _tmp$17 = 96;
              } else {
                if (_bind$13 >= 65 && _bind$13 <= 90) {
                  _tmp$17 = 97;
                } else {
                  if (_bind$13 === 95) {
                    _tmp$17 = 98;
                  } else {
                    if (_bind$13 >= 97 && _bind$13 <= 122) {
                      _tmp$17 = 98;
                    } else {
                      if (_bind$13 === 194) {
                        _tmp$17 = 99;
                      } else {
                        if (_bind$13 >= 195 && _bind$13 <= 201) {
                          _tmp$17 = 100;
                        } else {
                          if (_bind$13 === 202) {
                            _tmp$17 = 101;
                          } else {
                            if (_bind$13 === 225) {
                              _tmp$17 = 102;
                            } else {
                              if (_bind$13 === 226) {
                                _tmp$17 = 103;
                              } else {
                                if (_bind$13 === 227) {
                                  _tmp$17 = 104;
                                } else {
                                  if (_bind$13 >= 228 && _bind$13 <= 233) {
                                    _tmp$17 = 105;
                                  } else {
                                    if (_bind$13 === 234) {
                                      _tmp$17 = 106;
                                    } else {
                                      if (_bind$13 >= 235 && _bind$13 <= 236) {
                                        _tmp$17 = 105;
                                      } else {
                                        if (_bind$13 === 237) {
                                          _tmp$17 = 107;
                                        } else {
                                          if (_bind$13 === 239) {
                                            _tmp$17 = 108;
                                          } else {
                                            if (_bind$13 === 240) {
                                              _tmp$17 = 109;
                                            } else {
                                              if (_bind$13 === 243) {
                                                _tmp$17 = 110;
                                              } else {
                                                break _L$2;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$17;
          continue _L$2;
        }
        case 20: {
          if (_match_pattern >= 29) {
            _match_pattern = 29;
            _match_end = lexbuf$2.pos;
          }
          const _bind$14 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$18;
          switch (_bind$14) {
            case 47: {
              _tmp$18 = 125;
              break;
            }
            case 61: {
              _tmp$18 = 111;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$18;
          continue _L$2;
        }
        case 21: {
          if (_match_pattern >= 65) {
            _match_pattern = 65;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$15 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$19;
          if (_bind$15 === 46) {
            _tmp$19 = 80;
          } else {
            if (_bind$15 >= 48 && _bind$15 <= 57) {
              _tmp$19 = 22;
            } else {
              if (_bind$15 === 66) {
                _tmp$19 = 81;
              } else {
                if (_bind$15 === 76) {
                  _tmp$19 = 82;
                } else {
                  if (_bind$15 === 78) {
                    _tmp$19 = 82;
                  } else {
                    if (_bind$15 === 79) {
                      _tmp$19 = 83;
                    } else {
                      if (_bind$15 === 85) {
                        _tmp$19 = 84;
                      } else {
                        if (_bind$15 === 88) {
                          _tmp$19 = 85;
                        } else {
                          if (_bind$15 === 95) {
                            _tmp$19 = 22;
                          } else {
                            if (_bind$15 === 98) {
                              _tmp$19 = 81;
                            } else {
                              if (_bind$15 === 111) {
                                _tmp$19 = 83;
                              } else {
                                if (_bind$15 === 120) {
                                  _tmp$19 = 85;
                                } else {
                                  break _L$2;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$19;
          continue _L$2;
        }
        case 22: {
          if (_match_pattern >= 65) {
            _match_pattern = 65;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$16 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$20;
          if (_bind$16 === 46) {
            _tmp$20 = 80;
          } else {
            if (_bind$16 >= 48 && _bind$16 <= 57) {
              _tmp$20 = 22;
            } else {
              if (_bind$16 === 76) {
                _tmp$20 = 82;
              } else {
                if (_bind$16 === 78) {
                  _tmp$20 = 82;
                } else {
                  if (_bind$16 === 85) {
                    _tmp$20 = 84;
                  } else {
                    if (_bind$16 === 95) {
                      _tmp$20 = 22;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$20;
          continue _L$2;
        }
        case 23: {
          if (_match_pattern >= 41) {
            _match_pattern = 41;
            _match_end = lexbuf$2.pos;
          }
          const _bind$17 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$21;
          if (_bind$17 === 58) {
            _tmp$21 = 93;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$21;
          continue _L$2;
        }
        case 24: {
          if (_match_pattern >= 42) {
            _match_pattern = 42;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 25: {
          if (_match_pattern >= 50) {
            _match_pattern = 50;
            _match_end = lexbuf$2.pos;
          }
          const _bind$18 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$22;
          switch (_bind$18) {
            case 60: {
              _tmp$22 = 91;
              break;
            }
            case 61: {
              _tmp$22 = 92;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$22;
          continue _L$2;
        }
        case 26: {
          if (_match_pattern >= 44) {
            _match_pattern = 44;
            _match_end = lexbuf$2.pos;
          }
          const _bind$19 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$23;
          switch (_bind$19) {
            case 61: {
              _tmp$23 = 127;
              break;
            }
            case 62: {
              _tmp$23 = 128;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$23;
          continue _L$2;
        }
        case 27: {
          if (_match_pattern >= 48) {
            _match_pattern = 48;
            _match_end = lexbuf$2.pos;
          }
          const _bind$20 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$24;
          switch (_bind$20) {
            case 61: {
              _tmp$24 = 89;
              break;
            }
            case 62: {
              _tmp$24 = 90;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$24;
          continue _L$2;
        }
        case 28: {
          if (_match_pattern >= 60) {
            _match_pattern = 60;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 29: {
          if (_match_pattern >= 70) {
            _match_pattern = 70;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$21 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$25;
          if (_bind$21 >= 65 && _bind$21 <= 90) {
            _tmp$25 = 113;
          } else {
            if (_bind$21 === 95) {
              _tmp$25 = 113;
            } else {
              if (_bind$21 >= 97 && _bind$21 <= 122) {
                _tmp$25 = 113;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$25;
          continue _L$2;
        }
        case 30: {
          if (_match_pattern >= 67) {
            _match_pattern = 67;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$22 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$26;
          if (_bind$22 >= 48 && _bind$22 <= 57) {
            _tmp$26 = 30;
          } else {
            if (_bind$22 >= 65 && _bind$22 <= 90) {
              _tmp$26 = 30;
            } else {
              if (_bind$22 === 95) {
                _tmp$26 = 30;
              } else {
                if (_bind$22 >= 97 && _bind$22 <= 122) {
                  _tmp$26 = 30;
                } else {
                  if (_bind$22 === 194) {
                    _tmp$26 = 68;
                  } else {
                    if (_bind$22 >= 195 && _bind$22 <= 201) {
                      _tmp$26 = 69;
                    } else {
                      if (_bind$22 === 202) {
                        _tmp$26 = 70;
                      } else {
                        if (_bind$22 === 225) {
                          _tmp$26 = 71;
                        } else {
                          if (_bind$22 === 226) {
                            _tmp$26 = 72;
                          } else {
                            if (_bind$22 === 227) {
                              _tmp$26 = 73;
                            } else {
                              if (_bind$22 >= 228 && _bind$22 <= 233) {
                                _tmp$26 = 74;
                              } else {
                                if (_bind$22 === 234) {
                                  _tmp$26 = 75;
                                } else {
                                  if (_bind$22 >= 235 && _bind$22 <= 236) {
                                    _tmp$26 = 74;
                                  } else {
                                    if (_bind$22 === 237) {
                                      _tmp$26 = 76;
                                    } else {
                                      if (_bind$22 === 239) {
                                        _tmp$26 = 77;
                                      } else {
                                        if (_bind$22 === 240) {
                                          _tmp$26 = 78;
                                        } else {
                                          if (_bind$22 === 243) {
                                            _tmp$26 = 79;
                                          } else {
                                            break _L$2;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$26;
          continue _L$2;
        }
        case 31: {
          if (_match_pattern >= 51) {
            _match_pattern = 51;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 32: {
          if (_match_pattern >= 52) {
            _match_pattern = 52;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 33: {
          if (_match_pattern >= 24) {
            _match_pattern = 24;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 34: {
          if (_match_pattern >= 69) {
            _match_pattern = 69;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$23 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$27;
          if (_bind$23 >= 48 && _bind$23 <= 57) {
            _tmp$27 = 34;
          } else {
            if (_bind$23 >= 65 && _bind$23 <= 90) {
              _tmp$27 = 34;
            } else {
              if (_bind$23 === 95) {
                _tmp$27 = 34;
              } else {
                if (_bind$23 >= 97 && _bind$23 <= 122) {
                  _tmp$27 = 34;
                } else {
                  if (_bind$23 === 126) {
                    _tmp$27 = 57;
                  } else {
                    if (_bind$23 === 194) {
                      _tmp$27 = 58;
                    } else {
                      if (_bind$23 >= 195 && _bind$23 <= 201) {
                        _tmp$27 = 40;
                      } else {
                        if (_bind$23 === 202) {
                          _tmp$27 = 59;
                        } else {
                          if (_bind$23 === 225) {
                            _tmp$27 = 60;
                          } else {
                            if (_bind$23 === 226) {
                              _tmp$27 = 61;
                            } else {
                              if (_bind$23 === 227) {
                                _tmp$27 = 62;
                              } else {
                                if (_bind$23 >= 228 && _bind$23 <= 233) {
                                  _tmp$27 = 47;
                                } else {
                                  if (_bind$23 === 234) {
                                    _tmp$27 = 63;
                                  } else {
                                    if (_bind$23 >= 235 && _bind$23 <= 236) {
                                      _tmp$27 = 47;
                                    } else {
                                      if (_bind$23 === 237) {
                                        _tmp$27 = 64;
                                      } else {
                                        if (_bind$23 === 239) {
                                          _tmp$27 = 65;
                                        } else {
                                          if (_bind$23 === 240) {
                                            _tmp$27 = 66;
                                          } else {
                                            if (_bind$23 === 243) {
                                              _tmp$27 = 67;
                                            } else {
                                              break _L$2;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$27;
          continue _L$2;
        }
        case 35: {
          if (_match_pattern >= 69) {
            _match_pattern = 69;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$24 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$28;
          if (_bind$24 === 34) {
            _tmp$28 = 117;
          } else {
            if (_bind$24 === 39) {
              _tmp$28 = 118;
            } else {
              if (_bind$24 >= 48 && _bind$24 <= 57) {
                _tmp$28 = 34;
              } else {
                if (_bind$24 >= 65 && _bind$24 <= 90) {
                  _tmp$28 = 34;
                } else {
                  if (_bind$24 === 95) {
                    _tmp$28 = 34;
                  } else {
                    if (_bind$24 >= 97 && _bind$24 <= 122) {
                      _tmp$28 = 34;
                    } else {
                      if (_bind$24 === 126) {
                        _tmp$28 = 57;
                      } else {
                        if (_bind$24 === 194) {
                          _tmp$28 = 58;
                        } else {
                          if (_bind$24 >= 195 && _bind$24 <= 201) {
                            _tmp$28 = 40;
                          } else {
                            if (_bind$24 === 202) {
                              _tmp$28 = 59;
                            } else {
                              if (_bind$24 === 225) {
                                _tmp$28 = 60;
                              } else {
                                if (_bind$24 === 226) {
                                  _tmp$28 = 61;
                                } else {
                                  if (_bind$24 === 227) {
                                    _tmp$28 = 62;
                                  } else {
                                    if (_bind$24 >= 228 && _bind$24 <= 233) {
                                      _tmp$28 = 47;
                                    } else {
                                      if (_bind$24 === 234) {
                                        _tmp$28 = 63;
                                      } else {
                                        if (_bind$24 >= 235 && _bind$24 <= 236) {
                                          _tmp$28 = 47;
                                        } else {
                                          if (_bind$24 === 237) {
                                            _tmp$28 = 64;
                                          } else {
                                            if (_bind$24 === 239) {
                                              _tmp$28 = 65;
                                            } else {
                                              if (_bind$24 === 240) {
                                                _tmp$28 = 66;
                                              } else {
                                                if (_bind$24 === 243) {
                                                  _tmp$28 = 67;
                                                } else {
                                                  break _L$2;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$28;
          continue _L$2;
        }
        case 36: {
          if (_match_pattern >= 53) {
            _match_pattern = 53;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 37: {
          if (_match_pattern >= 57) {
            _match_pattern = 57;
            _match_end = lexbuf$2.pos;
          }
          const _bind$25 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$29;
          switch (_bind$25) {
            case 62: {
              _tmp$29 = 87;
              break;
            }
            case 124: {
              _tmp$29 = 88;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$29;
          continue _L$2;
        }
        case 38: {
          if (_match_pattern >= 54) {
            _match_pattern = 54;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 39: {
          const _bind$26 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$30;
          if (_bind$26 >= 128 && _bind$26 <= 159) {
            _tmp$30 = 2;
          } else {
            if (_bind$26 === 160) {
              _tmp$30 = 3;
            } else {
              if (_bind$26 >= 161 && _bind$26 <= 172) {
                _tmp$30 = 34;
              } else {
                if (_bind$26 === 173) {
                  _tmp$30 = 2;
                } else {
                  if (_bind$26 >= 174 && _bind$26 <= 191) {
                    _tmp$30 = 34;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$30;
          continue _L$2;
        }
        case 40: {
          const _bind$27 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$31;
          if (_bind$27 >= 128 && _bind$27 <= 191) {
            _tmp$31 = 34;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$31;
          continue _L$2;
        }
        case 41: {
          const _bind$28 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$32;
          if (_bind$28 >= 128 && _bind$28 <= 175) {
            _tmp$32 = 34;
          } else {
            if (_bind$28 >= 176 && _bind$28 <= 191) {
              _tmp$32 = 2;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$32;
          continue _L$2;
        }
        case 42: {
          const _bind$29 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$33;
          if (_bind$29 >= 128 && _bind$29 <= 191) {
            _tmp$33 = 2;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$33;
          continue _L$2;
        }
        case 43: {
          const _bind$30 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$34;
          if (_bind$30 >= 128 && _bind$30 <= 191) {
            _tmp$34 = 42;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$34;
          continue _L$2;
        }
        case 44: {
          const _bind$31 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$35;
          if (_bind$31 >= 128 && _bind$31 <= 131) {
            _tmp$35 = 42;
          } else {
            if (_bind$31 >= 132 && _bind$31 <= 135) {
              _tmp$35 = 40;
            } else {
              if (_bind$31 >= 136 && _bind$31 <= 153) {
                _tmp$35 = 42;
              } else {
                if (_bind$31 === 154) {
                  _tmp$35 = 131;
                } else {
                  if (_bind$31 >= 155 && _bind$31 <= 183) {
                    _tmp$35 = 42;
                  } else {
                    if (_bind$31 >= 184 && _bind$31 <= 187) {
                      _tmp$35 = 40;
                    } else {
                      if (_bind$31 >= 188 && _bind$31 <= 191) {
                        _tmp$35 = 42;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$35;
          continue _L$2;
        }
        case 45: {
          const _bind$32 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$36;
          if (_bind$32 === 128) {
            _tmp$36 = 137;
          } else {
            if (_bind$32 === 129) {
              _tmp$36 = 138;
            } else {
              if (_bind$32 === 130) {
                _tmp$36 = 40;
              } else {
                if (_bind$32 >= 131 && _bind$32 <= 132) {
                  _tmp$36 = 42;
                } else {
                  if (_bind$32 >= 133 && _bind$32 <= 134) {
                    _tmp$36 = 40;
                  } else {
                    if (_bind$32 >= 135 && _bind$32 <= 185) {
                      _tmp$36 = 42;
                    } else {
                      if (_bind$32 >= 186 && _bind$32 <= 187) {
                        _tmp$36 = 40;
                      } else {
                        if (_bind$32 >= 188 && _bind$32 <= 190) {
                          _tmp$36 = 42;
                        } else {
                          if (_bind$32 === 191) {
                            _tmp$36 = 139;
                          } else {
                            break _L$2;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$36;
          continue _L$2;
        }
        case 46: {
          const _bind$33 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$37;
          if (_bind$33 === 128) {
            _tmp$37 = 130;
          } else {
            if (_bind$33 >= 129 && _bind$33 <= 131) {
              _tmp$37 = 40;
            } else {
              if (_bind$33 >= 132 && _bind$33 <= 134) {
                _tmp$37 = 42;
              } else {
                if (_bind$33 >= 135 && _bind$33 <= 191) {
                  _tmp$37 = 40;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$4 = _tmp$37;
          continue _L$2;
        }
        case 47: {
          const _bind$34 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$38;
          if (_bind$34 >= 128 && _bind$34 <= 191) {
            _tmp$38 = 40;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$38;
          continue _L$2;
        }
        case 48: {
          const _bind$35 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$39;
          if (_bind$35 >= 128 && _bind$35 <= 175) {
            _tmp$39 = 42;
          } else {
            if (_bind$35 >= 176 && _bind$35 <= 191) {
              _tmp$39 = 40;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$39;
          continue _L$2;
        }
        case 49: {
          const _bind$36 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$40;
          if (_bind$36 >= 128 && _bind$36 <= 159) {
            _tmp$40 = 40;
          } else {
            if (_bind$36 >= 160 && _bind$36 <= 191) {
              _tmp$40 = 42;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$40;
          continue _L$2;
        }
        case 50: {
          const _bind$37 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$41;
          if (_bind$37 >= 128 && _bind$37 <= 163) {
            _tmp$41 = 42;
          } else {
            if (_bind$37 >= 164 && _bind$37 <= 171) {
              _tmp$41 = 40;
            } else {
              if (_bind$37 >= 172 && _bind$37 <= 183) {
                _tmp$41 = 42;
              } else {
                if (_bind$37 >= 184 && _bind$37 <= 185) {
                  _tmp$41 = 40;
                } else {
                  if (_bind$37 === 186) {
                    _tmp$41 = 42;
                  } else {
                    if (_bind$37 === 187) {
                      _tmp$41 = 129;
                    } else {
                      if (_bind$37 >= 188 && _bind$37 <= 191) {
                        _tmp$41 = 42;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$41;
          continue _L$2;
        }
        case 51: {
          const _bind$38 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$42;
          if (_bind$38 >= 144 && _bind$38 <= 158) {
            _tmp$42 = 43;
          } else {
            if (_bind$38 === 159) {
              _tmp$42 = 55;
            } else {
              if (_bind$38 >= 160 && _bind$38 <= 174) {
                _tmp$42 = 47;
              } else {
                if (_bind$38 === 175) {
                  _tmp$42 = 56;
                } else {
                  if (_bind$38 >= 176 && _bind$38 <= 178) {
                    _tmp$42 = 47;
                  } else {
                    if (_bind$38 >= 179 && _bind$38 <= 191) {
                      _tmp$42 = 43;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$42;
          continue _L$2;
        }
        case 52: {
          const _bind$39 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$43;
          if (_bind$39 >= 128 && _bind$39 <= 191) {
            _tmp$43 = 43;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$43;
          continue _L$2;
        }
        case 53: {
          const _bind$40 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$44;
          if (_bind$40 >= 128 && _bind$40 <= 159) {
            _tmp$44 = 43;
          } else {
            if (_bind$40 === 160) {
              _tmp$44 = 54;
            } else {
              if (_bind$40 >= 161 && _bind$40 <= 191) {
                _tmp$44 = 43;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$44;
          continue _L$2;
        }
        case 54: {
          const _bind$41 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$45;
          if (_bind$41 >= 128 && _bind$41 <= 131) {
            _tmp$45 = 42;
          } else {
            if (_bind$41 >= 132 && _bind$41 <= 135) {
              _tmp$45 = 40;
            } else {
              if (_bind$41 >= 136 && _bind$41 <= 191) {
                _tmp$45 = 42;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$45;
          continue _L$2;
        }
        case 55: {
          const _bind$42 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$46;
          if (_bind$42 >= 128 && _bind$42 <= 175) {
            _tmp$46 = 40;
          } else {
            if (_bind$42 >= 176 && _bind$42 <= 191) {
              _tmp$46 = 42;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$46;
          continue _L$2;
        }
        case 56: {
          const _bind$43 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$47;
          if (_bind$43 >= 128 && _bind$43 <= 159) {
            _tmp$47 = 42;
          } else {
            if (_bind$43 >= 160 && _bind$43 <= 168) {
              _tmp$47 = 40;
            } else {
              if (_bind$43 >= 169 && _bind$43 <= 191) {
                _tmp$47 = 42;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$47;
          continue _L$2;
        }
        case 57: {
          if (_match_pattern >= 68) {
            _match_pattern = 68;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end + -1 | 0;
          }
          break _L$2;
        }
        case 58: {
          const _bind$44 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$48;
          if (_bind$44 >= 161 && _bind$44 <= 172) {
            _tmp$48 = 34;
          } else {
            if (_bind$44 >= 174 && _bind$44 <= 191) {
              _tmp$48 = 34;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$48;
          continue _L$2;
        }
        case 59: {
          const _bind$45 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$49;
          if (_bind$45 >= 128 && _bind$45 <= 175) {
            _tmp$49 = 34;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$49;
          continue _L$2;
        }
        case 60: {
          const _bind$46 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$50;
          if (_bind$46 >= 132 && _bind$46 <= 135) {
            _tmp$50 = 40;
          } else {
            if (_bind$46 >= 184 && _bind$46 <= 187) {
              _tmp$50 = 40;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$50;
          continue _L$2;
        }
        case 61: {
          const _bind$47 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$51;
          if (_bind$47 >= 129 && _bind$47 <= 130) {
            _tmp$51 = 40;
          } else {
            if (_bind$47 >= 133 && _bind$47 <= 134) {
              _tmp$51 = 40;
            } else {
              if (_bind$47 >= 186 && _bind$47 <= 187) {
                _tmp$51 = 40;
              } else {
                if (_bind$47 === 191) {
                  _tmp$51 = 143;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$4 = _tmp$51;
          continue _L$2;
        }
        case 62: {
          const _bind$48 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$52;
          if (_bind$48 >= 128 && _bind$48 <= 131) {
            _tmp$52 = 40;
          } else {
            if (_bind$48 >= 135 && _bind$48 <= 191) {
              _tmp$52 = 40;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$52;
          continue _L$2;
        }
        case 63: {
          const _bind$49 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$53;
          if (_bind$49 >= 176 && _bind$49 <= 191) {
            _tmp$53 = 40;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$53;
          continue _L$2;
        }
        case 64: {
          const _bind$50 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$54;
          if (_bind$50 >= 128 && _bind$50 <= 159) {
            _tmp$54 = 40;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$54;
          continue _L$2;
        }
        case 65: {
          const _bind$51 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$55;
          if (_bind$51 >= 164 && _bind$51 <= 171) {
            _tmp$55 = 40;
          } else {
            if (_bind$51 >= 184 && _bind$51 <= 185) {
              _tmp$55 = 40;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$55;
          continue _L$2;
        }
        case 66: {
          const _bind$52 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$56;
          if (_bind$52 === 159) {
            _tmp$56 = 141;
          } else {
            if (_bind$52 >= 160 && _bind$52 <= 174) {
              _tmp$56 = 47;
            } else {
              if (_bind$52 === 175) {
                _tmp$56 = 142;
              } else {
                if (_bind$52 >= 176 && _bind$52 <= 178) {
                  _tmp$56 = 47;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$4 = _tmp$56;
          continue _L$2;
        }
        case 67: {
          const _bind$53 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$57;
          if (_bind$53 === 160) {
            _tmp$57 = 140;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$57;
          continue _L$2;
        }
        case 68: {
          const _bind$54 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$58;
          if (_bind$54 >= 161 && _bind$54 <= 172) {
            _tmp$58 = 30;
          } else {
            if (_bind$54 >= 174 && _bind$54 <= 191) {
              _tmp$58 = 30;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$58;
          continue _L$2;
        }
        case 69: {
          const _bind$55 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$59;
          if (_bind$55 >= 128 && _bind$55 <= 191) {
            _tmp$59 = 30;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$59;
          continue _L$2;
        }
        case 70: {
          const _bind$56 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$60;
          if (_bind$56 >= 128 && _bind$56 <= 175) {
            _tmp$60 = 30;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$60;
          continue _L$2;
        }
        case 71: {
          const _bind$57 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$61;
          if (_bind$57 >= 132 && _bind$57 <= 135) {
            _tmp$61 = 69;
          } else {
            if (_bind$57 >= 184 && _bind$57 <= 187) {
              _tmp$61 = 69;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$61;
          continue _L$2;
        }
        case 72: {
          const _bind$58 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$62;
          if (_bind$58 >= 129 && _bind$58 <= 130) {
            _tmp$62 = 69;
          } else {
            if (_bind$58 >= 133 && _bind$58 <= 134) {
              _tmp$62 = 69;
            } else {
              if (_bind$58 >= 186 && _bind$58 <= 187) {
                _tmp$62 = 69;
              } else {
                if (_bind$58 === 191) {
                  _tmp$62 = 147;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$4 = _tmp$62;
          continue _L$2;
        }
        case 73: {
          const _bind$59 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$63;
          if (_bind$59 >= 128 && _bind$59 <= 131) {
            _tmp$63 = 69;
          } else {
            if (_bind$59 >= 135 && _bind$59 <= 191) {
              _tmp$63 = 69;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$63;
          continue _L$2;
        }
        case 74: {
          const _bind$60 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$64;
          if (_bind$60 >= 128 && _bind$60 <= 191) {
            _tmp$64 = 69;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$64;
          continue _L$2;
        }
        case 75: {
          const _bind$61 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$65;
          if (_bind$61 >= 176 && _bind$61 <= 191) {
            _tmp$65 = 69;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$65;
          continue _L$2;
        }
        case 76: {
          const _bind$62 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$66;
          if (_bind$62 >= 128 && _bind$62 <= 159) {
            _tmp$66 = 69;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$66;
          continue _L$2;
        }
        case 77: {
          const _bind$63 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$67;
          if (_bind$63 >= 164 && _bind$63 <= 171) {
            _tmp$67 = 69;
          } else {
            if (_bind$63 >= 184 && _bind$63 <= 185) {
              _tmp$67 = 69;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$67;
          continue _L$2;
        }
        case 78: {
          const _bind$64 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$68;
          if (_bind$64 === 159) {
            _tmp$68 = 145;
          } else {
            if (_bind$64 >= 160 && _bind$64 <= 174) {
              _tmp$68 = 74;
            } else {
              if (_bind$64 === 175) {
                _tmp$68 = 146;
              } else {
                if (_bind$64 >= 176 && _bind$64 <= 178) {
                  _tmp$68 = 74;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$4 = _tmp$68;
          continue _L$2;
        }
        case 79: {
          const _bind$65 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$69;
          if (_bind$65 === 160) {
            _tmp$69 = 144;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$69;
          continue _L$2;
        }
        case 80: {
          if (_match_pattern >= 64) {
            _match_pattern = 64;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$66 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$70;
          if (_bind$66 === 46) {
            _tmp$70 = 148;
          } else {
            if (_bind$66 >= 48 && _bind$66 <= 57) {
              _tmp$70 = 149;
            } else {
              if (_bind$66 === 69) {
                _tmp$70 = 150;
              } else {
                if (_bind$66 === 95) {
                  _tmp$70 = 149;
                } else {
                  if (_bind$66 === 101) {
                    _tmp$70 = 150;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$70;
          continue _L$2;
        }
        case 81: {
          const _bind$67 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$71;
          if (_bind$67 >= 48 && _bind$67 <= 49) {
            _tmp$71 = 152;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$71;
          continue _L$2;
        }
        case 82: {
          if (_match_pattern >= 65) {
            _match_pattern = 65;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$68 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$72;
          if (_bind$68 === 46) {
            _tmp$72 = 151;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$72;
          continue _L$2;
        }
        case 83: {
          const _bind$69 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$73;
          if (_bind$69 >= 48 && _bind$69 <= 55) {
            _tmp$73 = 153;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$73;
          continue _L$2;
        }
        case 84: {
          if (_match_pattern >= 65) {
            _match_pattern = 65;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$70 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$74;
          switch (_bind$70) {
            case 46: {
              _tmp$74 = 151;
              break;
            }
            case 76: {
              _tmp$74 = 82;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$74;
          continue _L$2;
        }
        case 85: {
          const _bind$71 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$75;
          if (_bind$71 >= 48 && _bind$71 <= 57) {
            _tmp$75 = 154;
          } else {
            if (_bind$71 >= 65 && _bind$71 <= 70) {
              _tmp$75 = 154;
            } else {
              if (_bind$71 >= 97 && _bind$71 <= 102) {
                _tmp$75 = 154;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$75;
          continue _L$2;
        }
        case 86: {
          if (_match_pattern >= 61) {
            _match_pattern = 61;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 87: {
          if (_match_pattern >= 55) {
            _match_pattern = 55;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 88: {
          if (_match_pattern >= 56) {
            _match_pattern = 56;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 89: {
          if (_match_pattern >= 46) {
            _match_pattern = 46;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 90: {
          if (_match_pattern >= 47) {
            _match_pattern = 47;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 91: {
          if (_match_pattern >= 49) {
            _match_pattern = 49;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 92: {
          if (_match_pattern >= 45) {
            _match_pattern = 45;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 93: {
          if (_match_pattern >= 40) {
            _match_pattern = 40;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 94: {
          if (_match_pattern >= 32) {
            _match_pattern = 32;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 95: {
          if (_match_pattern >= 37) {
            _match_pattern = 37;
            _match_end = lexbuf$2.pos;
          }
          const _bind$72 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$76;
          switch (_bind$72) {
            case 46: {
              _tmp$76 = 171;
              break;
            }
            case 60: {
              _tmp$76 = 172;
              break;
            }
            case 61: {
              _tmp$76 = 173;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$76;
          continue _L$2;
        }
        case 96: {
          if (_match_pattern >= 33) {
            _match_pattern = 33;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
            _capture_1_start = _match_start + 1 | 0;
            _capture_1_end = _match_end;
          }
          const _bind$73 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$77;
          if (_bind$73 >= 48 && _bind$73 <= 57) {
            _tmp$77 = 96;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$77;
          continue _L$2;
        }
        case 97: {
          if (_match_pattern >= 38) {
            _match_pattern = 38;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start + 1 | 0;
            _capture_0_end.val = _match_end;
          }
          const _bind$74 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$78;
          if (_bind$74 >= 48 && _bind$74 <= 57) {
            _tmp$78 = 97;
          } else {
            if (_bind$74 >= 65 && _bind$74 <= 90) {
              _tmp$78 = 97;
            } else {
              if (_bind$74 === 95) {
                _tmp$78 = 97;
              } else {
                if (_bind$74 >= 97 && _bind$74 <= 122) {
                  _tmp$78 = 97;
                } else {
                  if (_bind$74 === 194) {
                    _tmp$78 = 159;
                  } else {
                    if (_bind$74 >= 195 && _bind$74 <= 201) {
                      _tmp$78 = 160;
                    } else {
                      if (_bind$74 === 202) {
                        _tmp$78 = 161;
                      } else {
                        if (_bind$74 === 225) {
                          _tmp$78 = 162;
                        } else {
                          if (_bind$74 === 226) {
                            _tmp$78 = 163;
                          } else {
                            if (_bind$74 === 227) {
                              _tmp$78 = 164;
                            } else {
                              if (_bind$74 >= 228 && _bind$74 <= 233) {
                                _tmp$78 = 165;
                              } else {
                                if (_bind$74 === 234) {
                                  _tmp$78 = 166;
                                } else {
                                  if (_bind$74 >= 235 && _bind$74 <= 236) {
                                    _tmp$78 = 165;
                                  } else {
                                    if (_bind$74 === 237) {
                                      _tmp$78 = 167;
                                    } else {
                                      if (_bind$74 === 239) {
                                        _tmp$78 = 168;
                                      } else {
                                        if (_bind$74 === 240) {
                                          _tmp$78 = 169;
                                        } else {
                                          if (_bind$74 === 243) {
                                            _tmp$78 = 170;
                                          } else {
                                            break _L$2;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$78;
          continue _L$2;
        }
        case 98: {
          if (_match_pattern >= 39) {
            _match_pattern = 39;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start + 1 | 0;
            _capture_0_end.val = _match_end;
          }
          const _bind$75 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$79;
          if (_bind$75 >= 48 && _bind$75 <= 57) {
            _tmp$79 = 98;
          } else {
            if (_bind$75 >= 65 && _bind$75 <= 90) {
              _tmp$79 = 98;
            } else {
              if (_bind$75 === 95) {
                _tmp$79 = 98;
              } else {
                if (_bind$75 >= 97 && _bind$75 <= 122) {
                  _tmp$79 = 98;
                } else {
                  if (_bind$75 === 194) {
                    _tmp$79 = 99;
                  } else {
                    if (_bind$75 >= 195 && _bind$75 <= 201) {
                      _tmp$79 = 100;
                    } else {
                      if (_bind$75 === 202) {
                        _tmp$79 = 101;
                      } else {
                        if (_bind$75 === 225) {
                          _tmp$79 = 102;
                        } else {
                          if (_bind$75 === 226) {
                            _tmp$79 = 103;
                          } else {
                            if (_bind$75 === 227) {
                              _tmp$79 = 104;
                            } else {
                              if (_bind$75 >= 228 && _bind$75 <= 233) {
                                _tmp$79 = 105;
                              } else {
                                if (_bind$75 === 234) {
                                  _tmp$79 = 106;
                                } else {
                                  if (_bind$75 >= 235 && _bind$75 <= 236) {
                                    _tmp$79 = 105;
                                  } else {
                                    if (_bind$75 === 237) {
                                      _tmp$79 = 107;
                                    } else {
                                      if (_bind$75 === 239) {
                                        _tmp$79 = 108;
                                      } else {
                                        if (_bind$75 === 240) {
                                          _tmp$79 = 109;
                                        } else {
                                          if (_bind$75 === 243) {
                                            _tmp$79 = 110;
                                          } else {
                                            break _L$2;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$79;
          continue _L$2;
        }
        case 99: {
          const _bind$76 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$80;
          if (_bind$76 >= 161 && _bind$76 <= 172) {
            _tmp$80 = 98;
          } else {
            if (_bind$76 >= 174 && _bind$76 <= 191) {
              _tmp$80 = 98;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$80;
          continue _L$2;
        }
        case 100: {
          const _bind$77 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$81;
          if (_bind$77 >= 128 && _bind$77 <= 191) {
            _tmp$81 = 98;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$81;
          continue _L$2;
        }
        case 101: {
          const _bind$78 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$82;
          if (_bind$78 >= 128 && _bind$78 <= 175) {
            _tmp$82 = 98;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$82;
          continue _L$2;
        }
        case 102: {
          const _bind$79 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$83;
          if (_bind$79 >= 132 && _bind$79 <= 135) {
            _tmp$83 = 100;
          } else {
            if (_bind$79 >= 184 && _bind$79 <= 187) {
              _tmp$83 = 100;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$83;
          continue _L$2;
        }
        case 103: {
          const _bind$80 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$84;
          if (_bind$80 >= 129 && _bind$80 <= 130) {
            _tmp$84 = 100;
          } else {
            if (_bind$80 >= 133 && _bind$80 <= 134) {
              _tmp$84 = 100;
            } else {
              if (_bind$80 >= 186 && _bind$80 <= 187) {
                _tmp$84 = 100;
              } else {
                if (_bind$80 === 191) {
                  _tmp$84 = 158;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$4 = _tmp$84;
          continue _L$2;
        }
        case 104: {
          const _bind$81 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$85;
          if (_bind$81 >= 128 && _bind$81 <= 131) {
            _tmp$85 = 100;
          } else {
            if (_bind$81 >= 135 && _bind$81 <= 191) {
              _tmp$85 = 100;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$85;
          continue _L$2;
        }
        case 105: {
          const _bind$82 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$86;
          if (_bind$82 >= 128 && _bind$82 <= 191) {
            _tmp$86 = 100;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$86;
          continue _L$2;
        }
        case 106: {
          const _bind$83 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$87;
          if (_bind$83 >= 176 && _bind$83 <= 191) {
            _tmp$87 = 100;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$87;
          continue _L$2;
        }
        case 107: {
          const _bind$84 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$88;
          if (_bind$84 >= 128 && _bind$84 <= 159) {
            _tmp$88 = 100;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$88;
          continue _L$2;
        }
        case 108: {
          const _bind$85 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$89;
          if (_bind$85 >= 164 && _bind$85 <= 171) {
            _tmp$89 = 100;
          } else {
            if (_bind$85 >= 184 && _bind$85 <= 185) {
              _tmp$89 = 100;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$89;
          continue _L$2;
        }
        case 109: {
          const _bind$86 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$90;
          if (_bind$86 === 159) {
            _tmp$90 = 156;
          } else {
            if (_bind$86 >= 160 && _bind$86 <= 174) {
              _tmp$90 = 105;
            } else {
              if (_bind$86 === 175) {
                _tmp$90 = 157;
              } else {
                if (_bind$86 >= 176 && _bind$86 <= 178) {
                  _tmp$90 = 105;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$4 = _tmp$90;
          continue _L$2;
        }
        case 110: {
          const _bind$87 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$91;
          if (_bind$87 === 160) {
            _tmp$91 = 155;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$91;
          continue _L$2;
        }
        case 111: {
          if (_match_pattern >= 27) {
            _match_pattern = 27;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_start + 1 | 0;
            _capture_1_start = _match_start;
            _capture_1_end = _match_start + 2 | 0;
          }
          break _L$2;
        }
        case 112: {
          if (_match_pattern >= 22) {
            _match_pattern = 22;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 113: {
          if (_match_pattern >= 16) {
            _match_pattern = 16;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start + 1 | 0;
            _capture_0_end.val = _match_end;
          }
          const _bind$88 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$92;
          if (_bind$88 === 47) {
            _tmp$92 = 174;
          } else {
            if (_bind$88 >= 48 && _bind$88 <= 57) {
              _tmp$92 = 113;
            } else {
              if (_bind$88 >= 65 && _bind$88 <= 90) {
                _tmp$92 = 113;
              } else {
                if (_bind$88 === 95) {
                  _tmp$92 = 113;
                } else {
                  if (_bind$88 >= 97 && _bind$88 <= 122) {
                    _tmp$92 = 113;
                  } else {
                    break _L$2;
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$92;
          continue _L$2;
        }
        case 114: {
          if (_match_pattern >= 15) {
            _match_pattern = 15;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start + 1 | 0;
            _capture_0_end.val = _match_end;
          }
          const _bind$89 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$93;
          if (_bind$89 >= 0 && _bind$89 <= 9) {
            _tmp$93 = 114;
          } else {
            if (_bind$89 >= 11 && _bind$89 <= 12) {
              _tmp$93 = 114;
            } else {
              if (_bind$89 >= 14 && _bind$89 <= 127) {
                _tmp$93 = 114;
              } else {
                if (_bind$89 >= 194 && _bind$89 <= 223) {
                  _tmp$93 = 175;
                } else {
                  if (_bind$89 >= 224 && _bind$89 <= 239) {
                    _tmp$93 = 176;
                  } else {
                    if (_bind$89 === 240) {
                      _tmp$93 = 177;
                    } else {
                      if (_bind$89 >= 241 && _bind$89 <= 244) {
                        _tmp$93 = 178;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$93;
          continue _L$2;
        }
        case 115: {
          if (_match_pattern >= 14) {
            _match_pattern = 14;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start + 2 | 0;
            _capture_0_end.val = _match_end;
          }
          const _bind$90 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$94;
          if (_bind$90 >= 0 && _bind$90 <= 9) {
            _tmp$94 = 115;
          } else {
            if (_bind$90 >= 11 && _bind$90 <= 12) {
              _tmp$94 = 115;
            } else {
              if (_bind$90 >= 14 && _bind$90 <= 127) {
                _tmp$94 = 115;
              } else {
                if (_bind$90 >= 194 && _bind$90 <= 223) {
                  _tmp$94 = 179;
                } else {
                  if (_bind$90 >= 224 && _bind$90 <= 239) {
                    _tmp$94 = 180;
                  } else {
                    if (_bind$90 === 240) {
                      _tmp$94 = 181;
                    } else {
                      if (_bind$90 >= 241 && _bind$90 <= 244) {
                        _tmp$94 = 182;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$94;
          continue _L$2;
        }
        case 116: {
          if (_match_pattern >= 13) {
            _match_pattern = 13;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 117: {
          if (_match_pattern >= 12) {
            _match_pattern = 12;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 118: {
          if (_match_pattern >= 21) {
            _match_pattern = 21;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_start + 2 | 0;
          }
          const _bind$91 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$95;
          if (_bind$91 >= 0 && _bind$91 <= 91) {
            _tmp$95 = 183;
          } else {
            if (_bind$91 === 92) {
              _tmp$95 = 184;
            } else {
              if (_bind$91 >= 93 && _bind$91 <= 127) {
                _tmp$95 = 183;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$95;
          continue _L$2;
        }
        case 119: {
          const _bind$92 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$96;
          if (_bind$92 === 39) {
            _tmp$96 = 189;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$96;
          continue _L$2;
        }
        case 120: {
          const _bind$93 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$97;
          switch (_bind$93) {
            case 32: {
              _tmp$97 = 185;
              break;
            }
            case 34: {
              _tmp$97 = 185;
              break;
            }
            case 39: {
              _tmp$97 = 185;
              break;
            }
            case 92: {
              _tmp$97 = 185;
              break;
            }
            case 98: {
              _tmp$97 = 185;
              break;
            }
            case 110: {
              _tmp$97 = 185;
              break;
            }
            case 111: {
              _tmp$97 = 186;
              break;
            }
            case 114: {
              _tmp$97 = 185;
              break;
            }
            case 116: {
              _tmp$97 = 185;
              break;
            }
            case 117: {
              _tmp$97 = 187;
              break;
            }
            case 120: {
              _tmp$97 = 188;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$97;
          continue _L$2;
        }
        case 121: {
          const _bind$94 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$98;
          if (_bind$94 >= 128 && _bind$94 <= 191) {
            _tmp$98 = 119;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$98;
          continue _L$2;
        }
        case 122: {
          const _bind$95 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$99;
          if (_bind$95 >= 128 && _bind$95 <= 191) {
            _tmp$99 = 121;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$99;
          continue _L$2;
        }
        case 123: {
          const _bind$96 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$100;
          if (_bind$96 >= 144 && _bind$96 <= 191) {
            _tmp$100 = 122;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$100;
          continue _L$2;
        }
        case 124: {
          const _bind$97 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$101;
          if (_bind$97 >= 128 && _bind$97 <= 191) {
            _tmp$101 = 122;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$101;
          continue _L$2;
        }
        case 125: {
          if (_match_pattern >= 4) {
            _match_pattern = 4;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$98 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$102;
          if (_bind$98 >= 0 && _bind$98 <= 9) {
            _tmp$102 = 125;
          } else {
            if (_bind$98 >= 11 && _bind$98 <= 12) {
              _tmp$102 = 125;
            } else {
              if (_bind$98 >= 14 && _bind$98 <= 127) {
                _tmp$102 = 125;
              } else {
                if (_bind$98 >= 194 && _bind$98 <= 223) {
                  _tmp$102 = 190;
                } else {
                  if (_bind$98 >= 224 && _bind$98 <= 239) {
                    _tmp$102 = 191;
                  } else {
                    if (_bind$98 === 240) {
                      _tmp$102 = 192;
                    } else {
                      if (_bind$98 >= 241 && _bind$98 <= 244) {
                        _tmp$102 = 193;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$102;
          continue _L$2;
        }
        case 126: {
          if (_match_pattern >= 3) {
            _match_pattern = 3;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 127: {
          if (_match_pattern >= 43) {
            _match_pattern = 43;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 128: {
          if (_match_pattern >= 2) {
            _match_pattern = 2;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 129: {
          const _bind$99 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$103;
          if (_bind$99 >= 128 && _bind$99 <= 190) {
            _tmp$103 = 2;
          } else {
            if (_bind$99 === 191) {
              _tmp$103 = 3;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$103;
          continue _L$2;
        }
        case 130: {
          const _bind$100 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$104;
          if (_bind$100 === 128) {
            _tmp$104 = 194;
          } else {
            if (_bind$100 >= 129 && _bind$100 <= 191) {
              _tmp$104 = 34;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$104;
          continue _L$2;
        }
        case 131: {
          const _bind$101 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$105;
          if (_bind$101 === 128) {
            _tmp$105 = 3;
          } else {
            if (_bind$101 >= 129 && _bind$101 <= 191) {
              _tmp$105 = 2;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$105;
          continue _L$2;
        }
        case 132: {
          const _bind$102 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$106;
          if (_bind$102 === 160) {
            _tmp$106 = 3;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$106;
          continue _L$2;
        }
        case 133: {
          const _bind$103 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$107;
          if (_bind$103 === 154) {
            _tmp$107 = 196;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$107;
          continue _L$2;
        }
        case 134: {
          const _bind$104 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$108;
          switch (_bind$104) {
            case 128: {
              _tmp$108 = 197;
              break;
            }
            case 129: {
              _tmp$108 = 198;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$108;
          continue _L$2;
        }
        case 135: {
          const _bind$105 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$109;
          if (_bind$105 === 128) {
            _tmp$109 = 196;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$109;
          continue _L$2;
        }
        case 136: {
          const _bind$106 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$110;
          if (_bind$106 === 187) {
            _tmp$110 = 195;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$110;
          continue _L$2;
        }
        case 137: {
          const _bind$107 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$111;
          if (_bind$107 >= 128 && _bind$107 <= 138) {
            _tmp$111 = 3;
          } else {
            if (_bind$107 >= 139 && _bind$107 <= 167) {
              _tmp$111 = 2;
            } else {
              if (_bind$107 >= 168 && _bind$107 <= 169) {
                _tmp$111 = 4;
              } else {
                if (_bind$107 >= 170 && _bind$107 <= 174) {
                  _tmp$111 = 2;
                } else {
                  if (_bind$107 === 175) {
                    _tmp$111 = 3;
                  } else {
                    if (_bind$107 >= 176 && _bind$107 <= 191) {
                      _tmp$111 = 2;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$111;
          continue _L$2;
        }
        case 138: {
          const _bind$108 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$112;
          if (_bind$108 >= 128 && _bind$108 <= 158) {
            _tmp$112 = 34;
          } else {
            if (_bind$108 === 159) {
              _tmp$112 = 194;
            } else {
              if (_bind$108 >= 160 && _bind$108 <= 191) {
                _tmp$112 = 34;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$112;
          continue _L$2;
        }
        case 139: {
          const _bind$109 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$113;
          if (_bind$109 >= 128 && _bind$109 <= 175) {
            _tmp$113 = 2;
          } else {
            if (_bind$109 >= 176 && _bind$109 <= 191) {
              _tmp$113 = 34;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$113;
          continue _L$2;
        }
        case 140: {
          const _bind$110 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$114;
          if (_bind$110 >= 132 && _bind$110 <= 135) {
            _tmp$114 = 40;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$114;
          continue _L$2;
        }
        case 141: {
          const _bind$111 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$115;
          if (_bind$111 >= 128 && _bind$111 <= 175) {
            _tmp$115 = 40;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$115;
          continue _L$2;
        }
        case 142: {
          const _bind$112 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$116;
          if (_bind$112 >= 160 && _bind$112 <= 168) {
            _tmp$116 = 40;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$116;
          continue _L$2;
        }
        case 143: {
          const _bind$113 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$117;
          if (_bind$113 >= 176 && _bind$113 <= 191) {
            _tmp$117 = 34;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$117;
          continue _L$2;
        }
        case 144: {
          const _bind$114 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$118;
          if (_bind$114 >= 132 && _bind$114 <= 135) {
            _tmp$118 = 69;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$118;
          continue _L$2;
        }
        case 145: {
          const _bind$115 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$119;
          if (_bind$115 >= 128 && _bind$115 <= 175) {
            _tmp$119 = 69;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$119;
          continue _L$2;
        }
        case 146: {
          const _bind$116 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$120;
          if (_bind$116 >= 160 && _bind$116 <= 168) {
            _tmp$120 = 69;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$120;
          continue _L$2;
        }
        case 147: {
          const _bind$117 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$121;
          if (_bind$117 >= 176 && _bind$117 <= 191) {
            _tmp$121 = 30;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$121;
          continue _L$2;
        }
        case 148: {
          if (_match_pattern >= 63) {
            _match_pattern = 63;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end + -2 | 0;
          }
          break _L$2;
        }
        case 149: {
          if (_match_pattern >= 64) {
            _match_pattern = 64;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$118 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$122;
          if (_bind$118 >= 48 && _bind$118 <= 57) {
            _tmp$122 = 149;
          } else {
            if (_bind$118 === 69) {
              _tmp$122 = 150;
            } else {
              if (_bind$118 === 95) {
                _tmp$122 = 149;
              } else {
                if (_bind$118 === 101) {
                  _tmp$122 = 150;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$4 = _tmp$122;
          continue _L$2;
        }
        case 150: {
          const _bind$119 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$123;
          if (_bind$119 === 43) {
            _tmp$123 = 199;
          } else {
            if (_bind$119 === 45) {
              _tmp$123 = 199;
            } else {
              if (_bind$119 >= 48 && _bind$119 <= 57) {
                _tmp$123 = 200;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$123;
          continue _L$2;
        }
        case 151: {
          const _bind$120 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$124;
          if (_bind$120 === 46) {
            _tmp$124 = 148;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$124;
          continue _L$2;
        }
        case 152: {
          if (_match_pattern >= 65) {
            _match_pattern = 65;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$121 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$125;
          if (_bind$121 === 46) {
            _tmp$125 = 151;
          } else {
            if (_bind$121 >= 48 && _bind$121 <= 49) {
              _tmp$125 = 152;
            } else {
              if (_bind$121 === 76) {
                _tmp$125 = 82;
              } else {
                if (_bind$121 === 78) {
                  _tmp$125 = 82;
                } else {
                  if (_bind$121 === 85) {
                    _tmp$125 = 84;
                  } else {
                    if (_bind$121 === 95) {
                      _tmp$125 = 152;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$125;
          continue _L$2;
        }
        case 153: {
          if (_match_pattern >= 65) {
            _match_pattern = 65;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$122 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$126;
          if (_bind$122 === 46) {
            _tmp$126 = 151;
          } else {
            if (_bind$122 >= 48 && _bind$122 <= 55) {
              _tmp$126 = 153;
            } else {
              if (_bind$122 === 76) {
                _tmp$126 = 82;
              } else {
                if (_bind$122 === 78) {
                  _tmp$126 = 82;
                } else {
                  if (_bind$122 === 85) {
                    _tmp$126 = 84;
                  } else {
                    if (_bind$122 === 95) {
                      _tmp$126 = 153;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$126;
          continue _L$2;
        }
        case 154: {
          if (_match_pattern >= 65) {
            _match_pattern = 65;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$123 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$127;
          if (_bind$123 === 46) {
            _tmp$127 = 201;
          } else {
            if (_bind$123 >= 48 && _bind$123 <= 57) {
              _tmp$127 = 154;
            } else {
              if (_bind$123 >= 65 && _bind$123 <= 70) {
                _tmp$127 = 154;
              } else {
                if (_bind$123 === 76) {
                  _tmp$127 = 82;
                } else {
                  if (_bind$123 === 78) {
                    _tmp$127 = 82;
                  } else {
                    if (_bind$123 === 85) {
                      _tmp$127 = 84;
                    } else {
                      if (_bind$123 === 95) {
                        _tmp$127 = 154;
                      } else {
                        if (_bind$123 >= 97 && _bind$123 <= 102) {
                          _tmp$127 = 154;
                        } else {
                          break _L$2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$127;
          continue _L$2;
        }
        case 155: {
          const _bind$124 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$128;
          if (_bind$124 >= 132 && _bind$124 <= 135) {
            _tmp$128 = 100;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$128;
          continue _L$2;
        }
        case 156: {
          const _bind$125 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$129;
          if (_bind$125 >= 128 && _bind$125 <= 175) {
            _tmp$129 = 100;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$129;
          continue _L$2;
        }
        case 157: {
          const _bind$126 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$130;
          if (_bind$126 >= 160 && _bind$126 <= 168) {
            _tmp$130 = 100;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$130;
          continue _L$2;
        }
        case 158: {
          const _bind$127 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$131;
          if (_bind$127 >= 176 && _bind$127 <= 191) {
            _tmp$131 = 98;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$131;
          continue _L$2;
        }
        case 159: {
          const _bind$128 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$132;
          if (_bind$128 >= 161 && _bind$128 <= 172) {
            _tmp$132 = 97;
          } else {
            if (_bind$128 >= 174 && _bind$128 <= 191) {
              _tmp$132 = 97;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$132;
          continue _L$2;
        }
        case 160: {
          const _bind$129 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$133;
          if (_bind$129 >= 128 && _bind$129 <= 191) {
            _tmp$133 = 97;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$133;
          continue _L$2;
        }
        case 161: {
          const _bind$130 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$134;
          if (_bind$130 >= 128 && _bind$130 <= 175) {
            _tmp$134 = 97;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$134;
          continue _L$2;
        }
        case 162: {
          const _bind$131 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$135;
          if (_bind$131 >= 132 && _bind$131 <= 135) {
            _tmp$135 = 160;
          } else {
            if (_bind$131 >= 184 && _bind$131 <= 187) {
              _tmp$135 = 160;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$135;
          continue _L$2;
        }
        case 163: {
          const _bind$132 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$136;
          if (_bind$132 >= 129 && _bind$132 <= 130) {
            _tmp$136 = 160;
          } else {
            if (_bind$132 >= 133 && _bind$132 <= 134) {
              _tmp$136 = 160;
            } else {
              if (_bind$132 >= 186 && _bind$132 <= 187) {
                _tmp$136 = 160;
              } else {
                if (_bind$132 === 191) {
                  _tmp$136 = 205;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$4 = _tmp$136;
          continue _L$2;
        }
        case 164: {
          const _bind$133 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$137;
          if (_bind$133 >= 128 && _bind$133 <= 131) {
            _tmp$137 = 160;
          } else {
            if (_bind$133 >= 135 && _bind$133 <= 191) {
              _tmp$137 = 160;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$137;
          continue _L$2;
        }
        case 165: {
          const _bind$134 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$138;
          if (_bind$134 >= 128 && _bind$134 <= 191) {
            _tmp$138 = 160;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$138;
          continue _L$2;
        }
        case 166: {
          const _bind$135 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$139;
          if (_bind$135 >= 176 && _bind$135 <= 191) {
            _tmp$139 = 160;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$139;
          continue _L$2;
        }
        case 167: {
          const _bind$136 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$140;
          if (_bind$136 >= 128 && _bind$136 <= 159) {
            _tmp$140 = 160;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$140;
          continue _L$2;
        }
        case 168: {
          const _bind$137 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$141;
          if (_bind$137 >= 164 && _bind$137 <= 171) {
            _tmp$141 = 160;
          } else {
            if (_bind$137 >= 184 && _bind$137 <= 185) {
              _tmp$141 = 160;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$141;
          continue _L$2;
        }
        case 169: {
          const _bind$138 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$142;
          if (_bind$138 === 159) {
            _tmp$142 = 203;
          } else {
            if (_bind$138 >= 160 && _bind$138 <= 174) {
              _tmp$142 = 165;
            } else {
              if (_bind$138 === 175) {
                _tmp$142 = 204;
              } else {
                if (_bind$138 >= 176 && _bind$138 <= 178) {
                  _tmp$142 = 165;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$4 = _tmp$142;
          continue _L$2;
        }
        case 170: {
          const _bind$139 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$143;
          if (_bind$139 === 160) {
            _tmp$143 = 202;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$143;
          continue _L$2;
        }
        case 171: {
          if (_match_pattern >= 34) {
            _match_pattern = 34;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 172: {
          if (_match_pattern >= 36) {
            _match_pattern = 36;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 173: {
          if (_match_pattern >= 35) {
            _match_pattern = 35;
            _match_end = lexbuf$2.pos;
          }
          break _L$2;
        }
        case 174: {
          const _bind$140 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$144;
          if (_bind$140 >= 65 && _bind$140 <= 90) {
            _tmp$144 = 113;
          } else {
            if (_bind$140 === 95) {
              _tmp$144 = 113;
            } else {
              if (_bind$140 >= 97 && _bind$140 <= 122) {
                _tmp$144 = 113;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$144;
          continue _L$2;
        }
        case 175: {
          const _bind$141 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$145;
          if (_bind$141 >= 128 && _bind$141 <= 191) {
            _tmp$145 = 114;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$145;
          continue _L$2;
        }
        case 176: {
          const _bind$142 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$146;
          if (_bind$142 >= 128 && _bind$142 <= 191) {
            _tmp$146 = 175;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$146;
          continue _L$2;
        }
        case 177: {
          const _bind$143 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$147;
          if (_bind$143 >= 144 && _bind$143 <= 191) {
            _tmp$147 = 176;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$147;
          continue _L$2;
        }
        case 178: {
          const _bind$144 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$148;
          if (_bind$144 >= 128 && _bind$144 <= 191) {
            _tmp$148 = 176;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$148;
          continue _L$2;
        }
        case 179: {
          const _bind$145 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$149;
          if (_bind$145 >= 128 && _bind$145 <= 191) {
            _tmp$149 = 115;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$149;
          continue _L$2;
        }
        case 180: {
          const _bind$146 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$150;
          if (_bind$146 >= 128 && _bind$146 <= 191) {
            _tmp$150 = 179;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$150;
          continue _L$2;
        }
        case 181: {
          const _bind$147 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$151;
          if (_bind$147 >= 144 && _bind$147 <= 191) {
            _tmp$151 = 180;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$151;
          continue _L$2;
        }
        case 182: {
          const _bind$148 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$152;
          if (_bind$148 >= 128 && _bind$148 <= 191) {
            _tmp$152 = 180;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$152;
          continue _L$2;
        }
        case 183: {
          const _bind$149 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$153;
          if (_bind$149 === 39) {
            _tmp$153 = 206;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$153;
          continue _L$2;
        }
        case 184: {
          const _bind$150 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$154;
          switch (_bind$150) {
            case 32: {
              _tmp$154 = 207;
              break;
            }
            case 34: {
              _tmp$154 = 207;
              break;
            }
            case 39: {
              _tmp$154 = 208;
              break;
            }
            case 92: {
              _tmp$154 = 207;
              break;
            }
            case 98: {
              _tmp$154 = 207;
              break;
            }
            case 110: {
              _tmp$154 = 207;
              break;
            }
            case 111: {
              _tmp$154 = 209;
              break;
            }
            case 114: {
              _tmp$154 = 207;
              break;
            }
            case 116: {
              _tmp$154 = 207;
              break;
            }
            case 120: {
              _tmp$154 = 210;
              break;
            }
            default: {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$154;
          continue _L$2;
        }
        case 185: {
          const _bind$151 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$155;
          if (_bind$151 === 39) {
            _tmp$155 = 215;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$155;
          continue _L$2;
        }
        case 186: {
          const _bind$152 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$156;
          if (_bind$152 >= 48 && _bind$152 <= 51) {
            _tmp$156 = 213;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$156;
          continue _L$2;
        }
        case 187: {
          const _bind$153 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$157;
          if (_bind$153 >= 48 && _bind$153 <= 57) {
            _tmp$157 = 211;
          } else {
            if (_bind$153 >= 65 && _bind$153 <= 70) {
              _tmp$157 = 211;
            } else {
              if (_bind$153 >= 97 && _bind$153 <= 102) {
                _tmp$157 = 211;
              } else {
                if (_bind$153 === 123) {
                  _tmp$157 = 212;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$4 = _tmp$157;
          continue _L$2;
        }
        case 188: {
          const _bind$154 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$158;
          if (_bind$154 >= 48 && _bind$154 <= 57) {
            _tmp$158 = 214;
          } else {
            if (_bind$154 >= 65 && _bind$154 <= 70) {
              _tmp$158 = 214;
            } else {
              if (_bind$154 >= 97 && _bind$154 <= 102) {
                _tmp$158 = 214;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$158;
          continue _L$2;
        }
        case 189: {
          if (_match_pattern >= 5) {
            _match_pattern = 5;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          break _L$2;
        }
        case 190: {
          const _bind$155 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$159;
          if (_bind$155 >= 128 && _bind$155 <= 191) {
            _tmp$159 = 125;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$159;
          continue _L$2;
        }
        case 191: {
          const _bind$156 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$160;
          if (_bind$156 >= 128 && _bind$156 <= 191) {
            _tmp$160 = 190;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$160;
          continue _L$2;
        }
        case 192: {
          const _bind$157 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$161;
          if (_bind$157 >= 144 && _bind$157 <= 191) {
            _tmp$161 = 191;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$161;
          continue _L$2;
        }
        case 193: {
          const _bind$158 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$162;
          if (_bind$158 >= 128 && _bind$158 <= 191) {
            _tmp$162 = 191;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$162;
          continue _L$2;
        }
        case 194: {
          if (_match_pattern >= 1) {
            _match_pattern = 1;
            _match_end = lexbuf$2.pos;
          }
          const _bind$159 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$163;
          if (_bind$159 === 9) {
            _tmp$163 = 3;
          } else {
            if (_bind$159 >= 11 && _bind$159 <= 12) {
              _tmp$163 = 3;
            } else {
              if (_bind$159 === 32) {
                _tmp$163 = 3;
              } else {
                if (_bind$159 >= 48 && _bind$159 <= 57) {
                  _tmp$163 = 34;
                } else {
                  if (_bind$159 >= 65 && _bind$159 <= 90) {
                    _tmp$163 = 34;
                  } else {
                    if (_bind$159 === 95) {
                      _tmp$163 = 34;
                    } else {
                      if (_bind$159 >= 97 && _bind$159 <= 122) {
                        _tmp$163 = 34;
                      } else {
                        if (_bind$159 === 126) {
                          _tmp$163 = 57;
                        } else {
                          if (_bind$159 === 194) {
                            _tmp$163 = 216;
                          } else {
                            if (_bind$159 >= 195 && _bind$159 <= 201) {
                              _tmp$163 = 40;
                            } else {
                              if (_bind$159 === 202) {
                                _tmp$163 = 59;
                              } else {
                                if (_bind$159 === 225) {
                                  _tmp$163 = 217;
                                } else {
                                  if (_bind$159 === 226) {
                                    _tmp$163 = 218;
                                  } else {
                                    if (_bind$159 === 227) {
                                      _tmp$163 = 219;
                                    } else {
                                      if (_bind$159 >= 228 && _bind$159 <= 233) {
                                        _tmp$163 = 47;
                                      } else {
                                        if (_bind$159 === 234) {
                                          _tmp$163 = 63;
                                        } else {
                                          if (_bind$159 >= 235 && _bind$159 <= 236) {
                                            _tmp$163 = 47;
                                          } else {
                                            if (_bind$159 === 237) {
                                              _tmp$163 = 64;
                                            } else {
                                              if (_bind$159 === 239) {
                                                _tmp$163 = 220;
                                              } else {
                                                if (_bind$159 === 240) {
                                                  _tmp$163 = 66;
                                                } else {
                                                  if (_bind$159 === 243) {
                                                    _tmp$163 = 67;
                                                  } else {
                                                    break _L$2;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$163;
          continue _L$2;
        }
        case 195: {
          const _bind$160 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$164;
          if (_bind$160 === 191) {
            _tmp$164 = 3;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$164;
          continue _L$2;
        }
        case 196: {
          const _bind$161 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$165;
          if (_bind$161 === 128) {
            _tmp$165 = 3;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$165;
          continue _L$2;
        }
        case 197: {
          const _bind$162 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$166;
          if (_bind$162 >= 128 && _bind$162 <= 138) {
            _tmp$166 = 3;
          } else {
            if (_bind$162 === 175) {
              _tmp$166 = 3;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$166;
          continue _L$2;
        }
        case 198: {
          const _bind$163 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$167;
          if (_bind$163 === 159) {
            _tmp$167 = 3;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$167;
          continue _L$2;
        }
        case 199: {
          const _bind$164 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$168;
          if (_bind$164 >= 48 && _bind$164 <= 57) {
            _tmp$168 = 200;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$168;
          continue _L$2;
        }
        case 200: {
          if (_match_pattern >= 64) {
            _match_pattern = 64;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$165 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$169;
          if (_bind$165 >= 48 && _bind$165 <= 57) {
            _tmp$169 = 200;
          } else {
            if (_bind$165 === 95) {
              _tmp$169 = 200;
            } else {
              break _L$2;
            }
          }
          _tmp$4 = _tmp$169;
          continue _L$2;
        }
        case 201: {
          if (_match_pattern >= 64) {
            _match_pattern = 64;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$166 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$170;
          if (_bind$166 === 46) {
            _tmp$170 = 148;
          } else {
            if (_bind$166 >= 48 && _bind$166 <= 57) {
              _tmp$170 = 221;
            } else {
              if (_bind$166 >= 65 && _bind$166 <= 70) {
                _tmp$170 = 221;
              } else {
                if (_bind$166 === 80) {
                  _tmp$170 = 150;
                } else {
                  if (_bind$166 === 95) {
                    _tmp$170 = 221;
                  } else {
                    if (_bind$166 >= 97 && _bind$166 <= 102) {
                      _tmp$170 = 221;
                    } else {
                      if (_bind$166 === 112) {
                        _tmp$170 = 150;
                      } else {
                        break _L$2;
                      }
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$170;
          continue _L$2;
        }
        case 202: {
          const _bind$167 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$171;
          if (_bind$167 >= 132 && _bind$167 <= 135) {
            _tmp$171 = 160;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$171;
          continue _L$2;
        }
        case 203: {
          const _bind$168 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$172;
          if (_bind$168 >= 128 && _bind$168 <= 175) {
            _tmp$172 = 160;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$172;
          continue _L$2;
        }
        case 204: {
          const _bind$169 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$173;
          if (_bind$169 >= 160 && _bind$169 <= 168) {
            _tmp$173 = 160;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$173;
          continue _L$2;
        }
        case 205: {
          const _bind$170 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$174;
          if (_bind$170 >= 176 && _bind$170 <= 191) {
            _tmp$174 = 97;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$174;
          continue _L$2;
        }
        case 206: {
          if (_match_pattern >= 19) {
            _match_pattern = 19;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start + 2 | 0;
            _capture_0_end.val = _match_start + 3 | 0;
          }
          break _L$2;
        }
        case 207: {
          const _bind$171 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$175;
          if (_bind$171 === 39) {
            _tmp$175 = 222;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$175;
          continue _L$2;
        }
        case 208: {
          if (_match_pattern >= 19) {
            _match_pattern = 19;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start + 2 | 0;
            _capture_0_end.val = _match_start + 3 | 0;
          }
          const _bind$172 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$176;
          if (_bind$172 === 39) {
            _tmp$176 = 222;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$176;
          continue _L$2;
        }
        case 209: {
          const _bind$173 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$177;
          if (_bind$173 >= 48 && _bind$173 <= 51) {
            _tmp$177 = 223;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$177;
          continue _L$2;
        }
        case 210: {
          const _bind$174 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$178;
          if (_bind$174 >= 48 && _bind$174 <= 57) {
            _tmp$178 = 224;
          } else {
            if (_bind$174 >= 65 && _bind$174 <= 70) {
              _tmp$178 = 224;
            } else {
              if (_bind$174 >= 97 && _bind$174 <= 102) {
                _tmp$178 = 224;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$178;
          continue _L$2;
        }
        case 211: {
          const _bind$175 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$179;
          if (_bind$175 >= 48 && _bind$175 <= 57) {
            _tmp$179 = 226;
          } else {
            if (_bind$175 >= 65 && _bind$175 <= 70) {
              _tmp$179 = 226;
            } else {
              if (_bind$175 >= 97 && _bind$175 <= 102) {
                _tmp$179 = 226;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$179;
          continue _L$2;
        }
        case 212: {
          const _bind$176 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$180;
          if (_bind$176 >= 48 && _bind$176 <= 57) {
            _tmp$180 = 212;
          } else {
            if (_bind$176 >= 65 && _bind$176 <= 70) {
              _tmp$180 = 212;
            } else {
              if (_bind$176 >= 97 && _bind$176 <= 102) {
                _tmp$180 = 212;
              } else {
                if (_bind$176 === 125) {
                  _tmp$180 = 225;
                } else {
                  break _L$2;
                }
              }
            }
          }
          _tmp$4 = _tmp$180;
          continue _L$2;
        }
        case 213: {
          const _bind$177 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$181;
          if (_bind$177 >= 48 && _bind$177 <= 55) {
            _tmp$181 = 227;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$181;
          continue _L$2;
        }
        case 214: {
          const _bind$178 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$182;
          if (_bind$178 >= 48 && _bind$178 <= 57) {
            _tmp$182 = 228;
          } else {
            if (_bind$178 >= 65 && _bind$178 <= 70) {
              _tmp$182 = 228;
            } else {
              if (_bind$178 >= 97 && _bind$178 <= 102) {
                _tmp$182 = 228;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$182;
          continue _L$2;
        }
        case 215: {
          if (_match_pattern >= 6) {
            _match_pattern = 6;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_start + 4 | 0;
          }
          break _L$2;
        }
        case 216: {
          const _bind$179 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$183;
          if (_bind$179 === 160) {
            _tmp$183 = 3;
          } else {
            if (_bind$179 >= 161 && _bind$179 <= 172) {
              _tmp$183 = 34;
            } else {
              if (_bind$179 >= 174 && _bind$179 <= 191) {
                _tmp$183 = 34;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$183;
          continue _L$2;
        }
        case 217: {
          const _bind$180 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$184;
          if (_bind$180 >= 132 && _bind$180 <= 135) {
            _tmp$184 = 40;
          } else {
            if (_bind$180 === 154) {
              _tmp$184 = 196;
            } else {
              if (_bind$180 >= 184 && _bind$180 <= 187) {
                _tmp$184 = 40;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$184;
          continue _L$2;
        }
        case 218: {
          const _bind$181 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$185;
          if (_bind$181 === 128) {
            _tmp$185 = 197;
          } else {
            if (_bind$181 === 129) {
              _tmp$185 = 138;
            } else {
              if (_bind$181 === 130) {
                _tmp$185 = 40;
              } else {
                if (_bind$181 >= 133 && _bind$181 <= 134) {
                  _tmp$185 = 40;
                } else {
                  if (_bind$181 >= 186 && _bind$181 <= 187) {
                    _tmp$185 = 40;
                  } else {
                    if (_bind$181 === 191) {
                      _tmp$185 = 143;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$185;
          continue _L$2;
        }
        case 219: {
          const _bind$182 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$186;
          if (_bind$182 === 128) {
            _tmp$186 = 130;
          } else {
            if (_bind$182 >= 129 && _bind$182 <= 131) {
              _tmp$186 = 40;
            } else {
              if (_bind$182 >= 135 && _bind$182 <= 191) {
                _tmp$186 = 40;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$186;
          continue _L$2;
        }
        case 220: {
          const _bind$183 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$187;
          if (_bind$183 >= 164 && _bind$183 <= 171) {
            _tmp$187 = 40;
          } else {
            if (_bind$183 >= 184 && _bind$183 <= 185) {
              _tmp$187 = 40;
            } else {
              if (_bind$183 === 187) {
                _tmp$187 = 195;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$187;
          continue _L$2;
        }
        case 221: {
          if (_match_pattern >= 64) {
            _match_pattern = 64;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_end;
          }
          const _bind$184 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$188;
          if (_bind$184 >= 48 && _bind$184 <= 57) {
            _tmp$188 = 221;
          } else {
            if (_bind$184 >= 65 && _bind$184 <= 70) {
              _tmp$188 = 221;
            } else {
              if (_bind$184 === 80) {
                _tmp$188 = 150;
              } else {
                if (_bind$184 === 95) {
                  _tmp$188 = 221;
                } else {
                  if (_bind$184 >= 97 && _bind$184 <= 102) {
                    _tmp$188 = 221;
                  } else {
                    if (_bind$184 === 112) {
                      _tmp$188 = 150;
                    } else {
                      break _L$2;
                    }
                  }
                }
              }
            }
          }
          _tmp$4 = _tmp$188;
          continue _L$2;
        }
        case 222: {
          if (_match_pattern >= 20) {
            _match_pattern = 20;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start + 3 | 0;
            _capture_0_end.val = _match_start + 4 | 0;
          }
          break _L$2;
        }
        case 223: {
          const _bind$185 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$189;
          if (_bind$185 >= 48 && _bind$185 <= 55) {
            _tmp$189 = 229;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$189;
          continue _L$2;
        }
        case 224: {
          const _bind$186 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$190;
          if (_bind$186 >= 48 && _bind$186 <= 57) {
            _tmp$190 = 230;
          } else {
            if (_bind$186 >= 65 && _bind$186 <= 70) {
              _tmp$190 = 230;
            } else {
              if (_bind$186 >= 97 && _bind$186 <= 102) {
                _tmp$190 = 230;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$190;
          continue _L$2;
        }
        case 225: {
          const _bind$187 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$191;
          if (_bind$187 === 39) {
            _tmp$191 = 231;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$191;
          continue _L$2;
        }
        case 226: {
          const _bind$188 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$192;
          if (_bind$188 >= 48 && _bind$188 <= 57) {
            _tmp$192 = 232;
          } else {
            if (_bind$188 >= 65 && _bind$188 <= 70) {
              _tmp$192 = 232;
            } else {
              if (_bind$188 >= 97 && _bind$188 <= 102) {
                _tmp$192 = 232;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$192;
          continue _L$2;
        }
        case 227: {
          const _bind$189 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$193;
          if (_bind$189 >= 48 && _bind$189 <= 55) {
            _tmp$193 = 233;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$193;
          continue _L$2;
        }
        case 228: {
          const _bind$190 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$194;
          if (_bind$190 === 39) {
            _tmp$194 = 234;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$194;
          continue _L$2;
        }
        case 229: {
          const _bind$191 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$195;
          if (_bind$191 >= 48 && _bind$191 <= 55) {
            _tmp$195 = 235;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$195;
          continue _L$2;
        }
        case 230: {
          const _bind$192 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$196;
          if (_bind$192 === 39) {
            _tmp$196 = 236;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$196;
          continue _L$2;
        }
        case 231: {
          if (_match_pattern >= 10) {
            _match_pattern = 10;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start + 4 | 0;
            _capture_0_end.val = _match_end + -2 | 0;
            _capture_1_start = _match_start;
            _capture_1_end = _match_end;
          }
          break _L$2;
        }
        case 232: {
          const _bind$193 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$197;
          if (_bind$193 >= 48 && _bind$193 <= 57) {
            _tmp$197 = 237;
          } else {
            if (_bind$193 >= 65 && _bind$193 <= 70) {
              _tmp$197 = 237;
            } else {
              if (_bind$193 >= 97 && _bind$193 <= 102) {
                _tmp$197 = 237;
              } else {
                break _L$2;
              }
            }
          }
          _tmp$4 = _tmp$197;
          continue _L$2;
        }
        case 233: {
          const _bind$194 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$198;
          if (_bind$194 === 39) {
            _tmp$198 = 238;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$198;
          continue _L$2;
        }
        case 234: {
          if (_match_pattern >= 7) {
            _match_pattern = 7;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_start + 6 | 0;
          }
          break _L$2;
        }
        case 235: {
          const _bind$195 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$199;
          if (_bind$195 === 39) {
            _tmp$199 = 239;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$199;
          continue _L$2;
        }
        case 236: {
          if (_match_pattern >= 17) {
            _match_pattern = 17;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start + 4 | 0;
            _capture_0_end.val = _match_start + 6 | 0;
          }
          break _L$2;
        }
        case 237: {
          const _bind$196 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$next_as_int(lexbuf$2);
          let _tmp$200;
          if (_bind$196 === 39) {
            _tmp$200 = 240;
          } else {
            break _L$2;
          }
          _tmp$4 = _tmp$200;
          continue _L$2;
        }
        case 238: {
          if (_match_pattern >= 8) {
            _match_pattern = 8;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_start + 7 | 0;
          }
          break _L$2;
        }
        case 239: {
          if (_match_pattern >= 18) {
            _match_pattern = 18;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start + 4 | 0;
            _capture_0_end.val = _match_start + 7 | 0;
          }
          break _L$2;
        }
        case 240: {
          if (_match_pattern >= 9) {
            _match_pattern = 9;
            _match_end = lexbuf$2.pos;
            _capture_0_start.val = _match_start;
            _capture_0_end.val = _match_start + 8 | 0;
          }
          break _L$2;
        }
        default: {
          $panic();
          break _L$2;
        }
      }
    }
    if (_match_pattern <= 70) {
      moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(lexbuf$2, _match_end);
      const _bind = _match_pattern;
      switch (_bind) {
        case 0: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$NEWLINE, _match_start, _match_end, 0);
          env$2.current_bol = _match_end;
          env$2.current_line = env$2.current_line + 1 | 0;
          continue _L;
        }
        case 1: {
          continue _L;
        }
        case 2: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FAT_ARROW, _match_start, _match_end, 0);
          continue _L;
        }
        case 3: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$THIN_ARROW, _match_start, _match_end, 0);
          continue _L;
        }
        case 4: {
          const repr = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          if (env$2.is_interpolation) {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpInvalidComment);
          }
          if (env$2.comment) {
            const comment = { content: repr, kind: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast_types$46$CommentKind$InlineTrailing, consumed_by_docstring: moonbitlang$core$ref$$new$34$(false) };
            preserve_comment$2(comment, _match_start, _match_end);
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COMMENT(comment), _match_start, _match_end, 0);
          }
          continue _L;
        }
        case 5: {
          const repr$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR(repr$2), _match_start, _match_end, 0);
          continue _L;
        }
        case 6: {
          const repr$3 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR(repr$3), _match_start, _match_end, 0);
          continue _L;
        }
        case 7: {
          const repr$4 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR(repr$4), _match_start, _match_end, 0);
          continue _L;
        }
        case 8: {
          const repr$5 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR(repr$5), _match_start, _match_end, 0);
          continue _L;
        }
        case 9: {
          const repr$6 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR(repr$6), _match_start, _match_end, 0);
          continue _L;
        }
        case 10: {
          const hex = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          const repr$7 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_1_start, _capture_1_end);
          const _bind$2 = moonbitlang$ulex$lib$new_frontend$lexer$$char_for_hex_escape(hex);
          if (_bind$2 === undefined) {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _capture_1_start, _capture_1_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidEscapeSequence(repr$7));
          }
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CHAR(repr$7), _match_start, _match_end, 0);
          continue _L;
        }
        case 11: {
          const startpos = _match_start;
          let tok;
          let interps;
          _L$3: {
            _L$4: {
              const _bind$3 = moonbitlang$ulex$lib$new_frontend$lexer$$string(lexbuf$2, env$2, false, true, startpos);
              if (_bind$3.length === 1) {
                const _x = _bind$3[0];
                if (_x.$tag === 0) {
                  const _InterpLit = _x;
                  const _repr = _InterpLit._0;
                  tok = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$STRING(_repr);
                } else {
                  interps = _bind$3;
                  break _L$4;
                }
              } else {
                interps = _bind$3;
                break _L$4;
              }
              break _L$3;
            }
            tok = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INTERP(interps);
          }
          const endpos = lexbuf$2.pos;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token(env$2, tok, moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, startpos), moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, endpos));
          continue _L;
        }
        case 12: {
          const startpos$2 = _match_start;
          let tok$2;
          let _interps;
          _L$4: {
            _L$5: {
              const _bind$3 = moonbitlang$ulex$lib$new_frontend$lexer$$string(lexbuf$2, env$2, false, false, startpos$2);
              if (_bind$3.length === 1) {
                const _x = _bind$3[0];
                if (_x.$tag === 0) {
                  const _InterpLit = _x;
                  const _repr = _InterpLit._0;
                  tok$2 = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$STRING(_repr);
                } else {
                  _interps = _bind$3;
                  break _L$5;
                }
              } else {
                _interps = _bind$3;
                break _L$5;
              }
              break _L$4;
            }
            tok$2 = $panic();
          }
          const endpos$2 = lexbuf$2.pos;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token(env$2, tok$2, moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, startpos$2), moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, endpos$2));
          continue _L;
        }
        case 13: {
          if (env$2.is_interpolation) {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpInvalidMultilineString);
          }
          const startpos$3 = _match_start;
          const tok$3 = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MULTILINE_INTERP(moonbitlang$ulex$lib$new_frontend$lexer$$string(lexbuf$2, env$2, true, true, startpos$3));
          const endpos$3 = lexbuf$2.pos;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token(env$2, tok$3, moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, startpos$3), moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(env$2, endpos$3));
          continue _L;
        }
        case 14: {
          const s = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          if (env$2.is_interpolation) {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpInvalidMultilineString);
          }
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MULTILINE_STRING(s), _match_start, _match_end, 0);
          continue _L;
        }
        case 15: {
          const attr = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          if (env$2.is_interpolation) {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InterpInvalidAttribute);
          }
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ATTRIBUTE(attr), _match_start, _match_end, 0);
          continue _L;
        }
        case 16: {
          const pkgname = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PACKAGE_NAME(pkgname), _match_start, _match_end, 0);
          continue _L;
        }
        case 17: {
          const hex$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          const literal = `\\x${hex$2}`;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTE(literal), _match_start, _match_end, 0);
          continue _L;
        }
        case 18: {
          const oct = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          const literal$2 = `\\o${oct}`;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTE(literal$2), _match_start, _match_end, 0);
          continue _L;
        }
        case 19: {
          const ascii = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          const _self = moonbitlang$core$builtin$$StringBuilder$new(0);
          moonbitlang$core$builtin$$Logger$write_char$40$(_self, ascii);
          const _p = _self;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTE(_p.val), _match_start, _match_end, 0);
          continue _L;
        }
        case 20: {
          const e = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          const _self$2 = moonbitlang$core$builtin$$StringBuilder$new(0);
          moonbitlang$core$builtin$$Logger$write_char$40$(_self$2, e);
          const _p$2 = _self$2;
          const literal$3 = `\\${_p$2.val}`;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BYTE(literal$3), _match_start, _match_end, 0);
          continue _L;
        }
        case 21: {
          moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$invalid_byte(lexbuf$2, env$2, _capture_0_start.val);
          continue _L;
        }
        case 22: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AMPERAMPER, _match_start, _match_end, 0);
          continue _L;
        }
        case 23: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AMPER, _match_start, _match_end, 0);
          continue _L;
        }
        case 24: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$CARET, _match_start, _match_end, 0);
          continue _L;
        }
        case 25: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LPAREN, _match_start, _match_end, 0);
          continue _L;
        }
        case 26: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RPAREN, _match_start, _match_end, 0);
          continue _L;
        }
        case 27: {
          const op = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_1_start, _capture_1_end);
          const _self$3 = moonbitlang$core$builtin$$StringBuilder$new(0);
          moonbitlang$core$builtin$$Logger$write_char$40$(_self$3, op);
          const _p$3 = _self$3;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$AUGMENTED_ASSIGNMENT(_p$3.val), _capture_1_start, _capture_1_end, 0);
          continue _L;
        }
        case 28: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX3("*"), _match_start, _match_end, 0);
          continue _L;
        }
        case 29: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX3("/"), _match_start, _match_end, 0);
          continue _L;
        }
        case 30: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX3("%"), _match_start, _match_end, 0);
          continue _L;
        }
        case 31: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COMMA, _match_start, _match_end, 0);
          continue _L;
        }
        case 32: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_LPAREN, _match_start, _match_end, 0);
          continue _L;
        }
        case 33: {
          const repr$8 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          const digits = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_1_start, _capture_1_end);
          let idx;
          let _try_err;
          _L$5: {
            _L$6: {
              const _bind$3 = moonbitlang$core$strconv$$parse_int(digits, 0);
              if (_bind$3.$tag === 1) {
                const _ok = _bind$3;
                idx = _ok._0;
              } else {
                const _err = _bind$3;
                const _tmp$5 = _err._0;
                _try_err = _tmp$5;
                break _L$6;
              }
              break _L$5;
            }
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _capture_0_start.val, _capture_0_end.val, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$InvalidDotInt(repr$8));
            idx = 0;
          }
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_INT(idx), _capture_0_start.val, _capture_0_end.val, 1);
          continue _L;
        }
        case 34: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$ELLIPSIS, _match_start, _match_end, 0);
          continue _L;
        }
        case 35: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RANGE_INCLUSIVE, _match_start, _match_end, 0);
          continue _L;
        }
        case 36: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RANGE_EXCLUSIVE, _match_start, _match_end, 0);
          continue _L;
        }
        case 37: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOTDOT, _match_start, _match_end, 0);
          continue _L;
        }
        case 38: {
          const name = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_UIDENT(name), _capture_0_start.val, _capture_0_end.val, 0);
          continue _L;
        }
        case 39: {
          const name$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$DOT_LIDENT(name$2), _capture_0_start.val, _capture_0_end.val, 0);
          continue _L;
        }
        case 40: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COLONCOLON, _match_start, _match_end, 0);
          continue _L;
        }
        case 41: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$COLON, _match_start, _match_end, 0);
          continue _L;
        }
        case 42: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$SEMI(true), _match_start, _match_end, 0);
          continue _L;
        }
        case 43: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1("=="), _match_start, _match_end, 0);
          continue _L;
        }
        case 44: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EQUAL, _match_start, _match_end, 0);
          continue _L;
        }
        case 45: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1("<="), _match_start, _match_end, 0);
          continue _L;
        }
        case 46: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1(">="), _match_start, _match_end, 0);
          continue _L;
        }
        case 47: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX2(">>"), _match_start, _match_end, 0);
          continue _L;
        }
        case 48: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1(">"), _match_start, _match_end, 0);
          continue _L;
        }
        case 49: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX2("<<"), _match_start, _match_end, 0);
          continue _L;
        }
        case 50: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1("<"), _match_start, _match_end, 0);
          continue _L;
        }
        case 51: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LBRACKET, _match_start, _match_end, 0);
          continue _L;
        }
        case 52: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RBRACKET, _match_start, _match_end, 0);
          continue _L;
        }
        case 53: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LBRACE, _match_start, _match_end, 0);
          continue _L;
        }
        case 54: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$RBRACE, _match_start, _match_end, 0);
          continue _L;
        }
        case 55: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PIPE, _match_start, _match_end, 0);
          continue _L;
        }
        case 56: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BARBAR, _match_start, _match_end, 0);
          continue _L;
        }
        case 57: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$BAR, _match_start, _match_end, 0);
          continue _L;
        }
        case 58: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$PLUS, _match_start, _match_end, 0);
          continue _L;
        }
        case 59: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$MINUS, _match_start, _match_end, 0);
          continue _L;
        }
        case 60: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$QUESTION, _match_start, _match_end, 0);
          continue _L;
        }
        case 61: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INFIX1("!="), _match_start, _match_end, 0);
          continue _L;
        }
        case 62: {
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EXCLAMATION, _match_start, _match_end, 0);
          continue _L;
        }
        case 63: {
          const integer = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$reset(lexbuf$2, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INT(integer), _capture_0_start.val, _capture_0_end.val, 0);
          continue _L;
        }
        case 64: {
          const float = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$FLOAT(float), _match_start, _match_end, 0);
          continue _L;
        }
        case 65: {
          const integer$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$INT(integer$2), _match_start, _match_end, 0);
          continue _L;
        }
        case 66: {
          const end = lexbuf$2.pos;
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$EOF, end, end, 0);
          return;
        }
        case 67: {
          const raw = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          let token;
          if (raw === "Regex") {
            token = $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$UIDENT_REGEX;
          } else {
            token = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$UIDENT(raw);
          }
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, token, _match_start, _match_end, 0);
          continue _L;
        }
        case 68: {
          const raw$2 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$POST_LABEL(raw$2), _match_start, _match_end, 0);
          continue _L;
        }
        case 69: {
          const raw$3 = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_string(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          if (moonbitlang$core$hashset$$T$contains$0$(moonbitlang$ulex$lib$new_frontend$lexer$$reserved_keyword_table, raw$3)) {
            moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$Reserved_keyword(raw$3));
          }
          const _bind$3 = moonbitlang$core$hashmap$$T$get$1$(moonbitlang$ulex$lib$new_frontend$lexer$$keyword_table, raw$3);
          let _tmp$5;
          if (_bind$3 === undefined) {
            _tmp$5 = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$tokens$46$Token$LIDENT(raw$3);
          } else {
            const _Some = _bind$3;
            const _tok = _Some;
            _tmp$5 = _tok;
          }
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_token_with_loc(env$2, _tmp$5, _match_start, _match_end, 0);
          continue _L;
        }
        case 70: {
          const c = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$get_char(lexbuf$2, _capture_0_start.val, _capture_0_end.val);
          moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$add_lexing_error(env$2, _match_start, _match_end, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$lexer$46$LexicalError$IllegalCharacter(c));
          continue _L;
        }
        default: {
          $panic();
          return;
        }
      }
    } else {
      $panic();
      return;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$preserve_comment(self) {
  return self.comment ? ((comment, start, end) => {
    const docstrings = self.docstrings;
    const _bind = comment.content;
    if (moonbitlang$core$string$$String$char_length_ge(_bind, 3, 0, _bind.length)) {
      const _x = moonbitlang$core$string$$String$unsafe_char_at(_bind, moonbitlang$core$string$$String$offset_of_nth_char(_bind, 1, 0, _bind.length));
      if (_x === 47) {
        const _bind$2 = moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(self, start);
        const _bind$3 = moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$make_pos(self, end);
        const loc = { start: _bind$2, end: _bind$3 };
        if (docstrings.length === 0) {
          const _p = { _0: loc, _1: comment };
          moonbitlang$core$array$$Array$push$39$(docstrings, new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$23$(_p, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$23$));
          return;
        } else {
          _L: {
            const _bind$4 = moonbitlang$core$array$$Array$last$39$(docstrings);
            if (_bind$4 === undefined) {
              break _L;
            } else {
              const _Some = _bind$4;
              const _x$2 = _Some;
              if (_x$2.$tag === 1) {
                const _Cons = _x$2;
                const _head = _Cons._0;
                const last_idx = docstrings.length - 1 | 0;
                if ((_bind$2.lnum - _head._0.start.lnum | 0) > 1) {
                  moonbitlang$core$array$$Array$op_set$39$(docstrings, last_idx, moonbitlang$core$immut$list$$T$rev$96$(_Cons));
                  const _p = { _0: loc, _1: comment };
                  moonbitlang$core$array$$Array$push$39$(docstrings, new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$23$(_p, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$23$));
                  return;
                } else {
                  moonbitlang$core$array$$Array$op_set$39$(docstrings, last_idx, new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$23$({ _0: loc, _1: comment }, moonbitlang$core$array$$Array$op_get$39$(docstrings, last_idx)));
                  return;
                }
              } else {
                break _L;
              }
            }
          }
          $panic();
          return;
        }
      } else {
        return;
      }
    } else {
      return;
    }
  }) : (_cmt, _start, _end) => {
  };
}
function moonbitlang$ulex$lib$new_frontend$lexer$$ASIContext$new() {
  return { last_unhandled_newline: -1 };
}
function moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$from_bytes(bytes, start, end) {
  return { content: bytes, pos: start, end: end };
}
function moonbitlang$ulex$lib$new_frontend$lexer$$tokens_from_bytes(name, start_pos, is_interpolation, comment, bytes) {
  const _arg = 0;
  const _arg$2 = bytes.length;
  const lexbuf = moonbitlang$ulex$lib$new_frontend$lexer$$Lexbuf$from_bytes(bytes, _arg, _arg$2);
  const arr = moonbitlang$core$array$$Array$new$138$(100);
  const start_lnum = start_pos.lnum;
  const start_bol = start_pos.bol;
  const start_cnum = start_pos.cnum;
  const _bind = [];
  const _bind$2 = [];
  const _bind$3 = moonbitlang$core$ref$$new$33$(undefined);
  const _bind$4 = moonbitlang$ulex$lib$new_frontend$lexer$$ASIContext$new();
  const env = { errors: _bind, docstrings: _bind$2, comment: comment, file: name, tokens: arr, current_line: start_lnum, current_bol: start_bol, last_unhandled_comment: _bind$3, asi_context: _bind$4, start_cnum: start_cnum, is_interpolation: is_interpolation };
  moonbitlang$ulex$lib$new_frontend$lexer$$tokens(lexbuf, env, moonbitlang$ulex$lib$new_frontend$lexer$$LexEnv$preserve_comment(env));
  const docstrings = env.docstrings;
  if (!(docstrings.length === 0)) {
    const last_idx = docstrings.length - 1 | 0;
    moonbitlang$core$array$$Array$op_set$39$(docstrings, last_idx, moonbitlang$core$immut$list$$T$rev$96$(moonbitlang$core$array$$Array$op_get$39$(docstrings, last_idx)));
  }
  moonbitlang$core$array$$Array$rev_inplace$39$(docstrings);
  return { tokens: env.tokens, errors: env.errors, docstrings: docstrings };
}
function moonbitlang$ulex$lib$new_frontend$lexer$$tokens_from_bytes$46$start_pos$46$default() {
  return { fname: "", lnum: 1, bol: 0, cnum: 0 };
}
function moonbitlang$ulex$lib$new_frontend$ast$$Term$loc(self) {
  switch (self.$tag) {
    case 0: {
      const _Code = self;
      const _loc = _Code._0;
      return _loc;
    }
    case 1: {
      const _Nested = self;
      const _loc$2 = _Nested._1;
      return _loc$2;
    }
    case 2: {
      const _NamedRegex = self;
      const _loc$3 = _NamedRegex._2;
      return _loc$3;
    }
    case 3: {
      const _LexDef = self;
      const _loc$4 = _LexDef._2;
      return _loc$4;
    }
    default: {
      const _GeneratedCode = self;
      const _loc$5 = _GeneratedCode._1;
      return _loc$5;
    }
  }
}
function moonbitlang$core$builtin$$Show$output$133$(_x_1396, _x_1397) {
  if (_x_1396.$tag === 2) {
    const _UnexpectedToken = _x_1396;
    const _$42$arg_1398 = _UnexpectedToken._0;
    const _$42$arg_1399 = _UnexpectedToken._1;
    const _$42$arg_1400 = _UnexpectedToken._2;
    _x_1397.method_0(_x_1397.self, "UnexpectedToken(");
    moonbitlang$core$builtin$$Logger$write_object$110$(_x_1397, _$42$arg_1398);
    _x_1397.method_0(_x_1397.self, ", ");
    const _$42$x0_1401 = _$42$arg_1399._0;
    const _$42$x1_1402 = _$42$arg_1399._1;
    _x_1397.method_0(_x_1397.self, "(");
    moonbitlang$core$builtin$$Logger$write_object$107$(_x_1397, _$42$x0_1401);
    _x_1397.method_0(_x_1397.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$107$(_x_1397, _$42$x1_1402);
    _x_1397.method_0(_x_1397.self, ")");
    const _self = _x_1397;
    _self.method_0(_self.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$111$(_self, _$42$arg_1400);
    _self.method_0(_self.self, ")");
    return;
  } else {
    const _UnexpectedEndOfInput = _x_1396;
    const _$42$arg_1403 = _UnexpectedEndOfInput._0;
    const _$42$arg_1404 = _UnexpectedEndOfInput._1;
    _x_1397.method_0(_x_1397.self, "UnexpectedEndOfInput(");
    moonbitlang$core$builtin$$Logger$write_object$107$(_x_1397, _$42$arg_1403);
    _x_1397.method_0(_x_1397.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$111$(_x_1397, _$42$arg_1404);
    _x_1397.method_0(_x_1397.self, ")");
    return;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$mkloc(loc) {
  return { start: loc._0, end: loc._1 };
}
function moonbitlang$ulex$lib$new_frontend$parser$$normalize(terms) {
  const _bind = moonbitlang$core$array$$Array$iter$37$(terms);
  const terms$2 = moonbitlang$core$builtin$$Iter$to_array$37$((_p) => _bind((_p$2) => {
    let _func;
    if (_p$2.$tag === 1) {
      const _Nested = _p$2;
      const _terms = _Nested._0;
      _func = moonbitlang$core$array$$Array$iter$37$(_terms);
    } else {
      _func = moonbitlang$core$builtin$$Iter$singleton$37$(_p$2);
    }
    return _func(_p);
  }));
  if (terms$2.length === 0) {
    return [];
  } else {
    if (terms$2.length === 1) {
      const _x = terms$2[0];
      return [_x];
    } else {
      const first_start = moonbitlang$ulex$lib$new_frontend$ast$$Term$loc(moonbitlang$core$array$$Array$op_get$37$(terms$2, 0)).start;
      const last_end = moonbitlang$ulex$lib$new_frontend$ast$$Term$loc(moonbitlang$core$array$$Array$op_get$37$(terms$2, terms$2.length - 1 | 0)).end;
      const last = { val: first_start };
      const new_terms = [];
      const _len = terms$2.length;
      let _tmp = 0;
      while (true) {
        const _i = _tmp;
        if (_i < _len) {
          const term = terms$2[_i];
          _L: {
            _L$2: {
              switch (term.$tag) {
                case 1: {
                  break _L$2;
                }
                case 2: {
                  break _L$2;
                }
                case 3: {
                  break _L$2;
                }
              }
              break _L;
            }
            const term_start = moonbitlang$ulex$lib$new_frontend$ast$$Term$loc(term).start;
            const term_end = moonbitlang$ulex$lib$new_frontend$ast$$Term$loc(term).end;
            if (moonbitlang$core$builtin$$op_gt$107$(term_start, last.val)) {
              moonbitlang$core$array$$Array$push$37$(new_terms, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code({ start: last.val, end: term_start }));
            }
            moonbitlang$core$array$$Array$push$37$(new_terms, term);
            last.val = term_end;
          }
          _tmp = _i + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      if (moonbitlang$core$builtin$$op_lt$107$(last.val, last_end)) {
        moonbitlang$core$array$$Array$push$37$(new_terms, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code({ start: last.val, end: last_end }));
      }
      return new_terms;
    }
  }
}
(() => {
})();
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_0(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_1(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(args, last_pos) {
  if (args.len === 0) {
    return last_pos;
  } else {
    let _tmp = 0;
    while (true) {
      const i = _tmp;
      if (i < args.len) {
        _L: {
          const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(args, i);
          const _start_pos = _bind._1;
          const _end_pos = _bind._2;
          if (_start_pos.fname === _end_pos.fname && _start_pos.cnum === _end_pos.cnum) {
            break _L;
          }
          return _start_pos;
        }
        _tmp = i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return moonbitlang$core$array$$ArrayView$op_get$10$(args, args.len - 1 | 0)._2;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_3(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_2(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_3(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_4(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_5(_last_pos, _args) {
  moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1);
  const _sub_action_0_result = new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident_$46$YYObj__ast_Ident_(undefined);
  if (_sub_action_0_result.$tag === 21) {
    const _YYObj__ast_Ident_ = _sub_action_0_result;
    const __dollar1 = _YYObj__ast_Ident_._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___({ _0: $64$moonbitlang$47$core$47$list$46$T$Empty$29$, _1: new Option$Some$45$(__dollar1) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_7(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_8(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_10(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_9(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_10(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_11(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_12(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_14(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_13(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_14(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_15(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_16(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_18(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_17(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_18(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_19(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_20(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_21(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_23(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._0;
  if (_bind.$tag === 23) {
    const _YYObj__ast_Ident = _bind;
    const __dollar3 = _YYObj__ast_Ident._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident_$46$YYObj__ast_Ident_(__dollar3);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_22(_last_pos, _args) {
  const _sub_action_0_result = moonbitlang$ulex$lib$new_frontend$parser$$yy_action_23(moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._2, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 1, 4));
  if (_sub_action_0_result.$tag === 21) {
    const _YYObj__ast_Ident_ = _sub_action_0_result;
    const __dollar2 = _YYObj__ast_Ident_._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$OpenPattern([], __dollar2, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_25(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_24(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_25(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_26(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_27(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_29(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_28(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_29(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_30(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_31(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_32(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_33(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 25) {
    const _YYObj__list_T__ast_Term_ = _bind;
    const __dollar1 = _YYObj__list_T__ast_Term_._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Array__ast_Term_$46$YYObj_Array__ast_Term_(moonbitlang$ulex$lib$new_frontend$parser$$normalize(moonbitlang$core$list$$T$to_array$37$(__dollar1)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_34(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_35(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_36(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_37(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_38(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_39(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_40(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 23) {
    const _YYObj__ast_Ident = _bind;
    const __dollar1 = _YYObj__ast_Ident._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Regex$46$YYObj__ast_Regex(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Named(__dollar1));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_42(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_41(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_42(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_43(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_44(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_45(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_46(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._0;
  if (_bind.$tag === 28) {
    const _YYObj__list_T__ast_LexPatternItem_ = _bind;
    const __dollar3 = _YYObj__list_T__ast_LexPatternItem_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
    if (_bind$2.$tag === 29) {
      const _YYObj__ast_LexPatternItem = _bind$2;
      const __dollar1 = _YYObj__ast_LexPatternItem._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexPatternItem_$46$YYObj__list_T__ast_LexPatternItem_(new $64$moonbitlang$47$core$47$list$46$T$More$29$(__dollar1, __dollar3));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_47(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_48(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_50(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 1)._0;
  if (_bind.$tag === 23) {
    const _YYObj__ast_Ident = _bind;
    const __dollar2 = _YYObj__ast_Ident._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident_$46$YYObj__ast_Ident_(__dollar2);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_49(_last_pos, _args) {
  const _sub_action_0_result = moonbitlang$ulex$lib$new_frontend$parser$$yy_action_50(moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._2, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 1, 3));
  if (_sub_action_0_result.$tag === 21) {
    const _YYObj__ast_Ident_ = _sub_action_0_result;
    const __dollar2 = _YYObj__ast_Ident_._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$OpenPattern([], __dollar2, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_51(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_52(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_53(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_54(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_55(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_57(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_56(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_57(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_58(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_59(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_60(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_61(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_63(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_62(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_63(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_64(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_65(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_67(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_66(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_67(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_68(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 30) {
    const _YYObj__ast_LexCase = _bind;
    const __dollar1 = _YYObj__ast_LexCase._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexCase_$46$YYObj__list_T__ast_LexCase_(new $64$moonbitlang$47$core$47$list$46$T$More$30$(__dollar1, $64$moonbitlang$47$core$47$list$46$T$Empty$30$));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_69(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_70(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_71(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_72(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_73(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_74(_last_pos, _args) {
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Code$46$YYObj__ast_Code({ loc: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }) });
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_75(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_77(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_76(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_77(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_78(_last_pos, _args) {
  const _start_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._1;
  const _end_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._2;
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 1)._0;
  if (_bind.$tag === 26) {
    const _YYObj_Array__ast_Term_ = _bind;
    const __dollar2 = _YYObj_Array__ast_Term_._0;
    const _start_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._1;
    const _end_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__Location__Array__ast_Term___Location_$46$YYObj__Location__Array__ast_Term___Location_({ _0: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item0, _1: _end_pos_of_item0 }), _1: __dollar2, _2: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item2, _1: _end_pos_of_item2 }) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_80(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_79(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_80(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_81(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_82(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_83(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_34(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_85(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_84(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_85(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_87(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_86(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_87(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_88(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_89(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_90(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_91(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_92(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_93(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_94(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 1)._0;
  if (_bind.$tag === 32) {
    const _YYObj__ast_Code = _bind;
    const __dollar2 = _YYObj__ast_Code._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 3)._0;
    if (_bind$2.$tag === 31) {
      const _YYObj__list_T__ast_LexCase_ = _bind$2;
      const __dollar4 = _YYObj__list_T__ast_LexCase_._0;
      const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
      const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$LexDef(__dollar2, moonbitlang$core$list$$T$to_array$192$(__dollar4), moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_95(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_96(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_97(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 29) {
    const _YYObj__ast_LexPatternItem = _bind;
    const __dollar1 = _YYObj__ast_LexPatternItem._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexPatternItem_$46$YYObj__list_T__ast_LexPatternItem_(new $64$moonbitlang$47$core$47$list$46$T$More$29$(__dollar1, $64$moonbitlang$47$core$47$list$46$T$Empty$29$));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_98(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_99(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_100(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_101(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 1)._0;
  if (_bind.$tag === 22) {
    const _YYObj___list_T__ast_LexPatternItem____ast_Ident___ = _bind;
    const __dollar2 = _YYObj___list_T__ast_LexPatternItem____ast_Ident___._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
    const _items = __dollar2._0;
    const _rest = __dollar2._1;
    let _tmp;
    if (_rest.$tag === 0) {
      _tmp = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$ClosedPattern(moonbitlang$core$list$$T$to_array$191$(_items), moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }));
    } else {
      const _Some = _rest;
      const _rest$2 = _Some._0;
      _tmp = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$OpenPattern(moonbitlang$core$list$$T$to_array$191$(_items), _rest$2, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }));
    }
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern(_tmp);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_102(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_103(_last_pos, _args) {
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$ClosedPattern([], moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_104(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_106(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_105(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_106(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_107(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_19(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_108(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_109(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_110(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_111(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 24) {
    const _YYObj__ast_LexPattern = _bind;
    const __dollar1 = _YYObj__ast_LexPattern._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._0;
    if (_bind$2.$tag === 20) {
      const _YYObj__ast_Term = _bind$2;
      const __dollar3 = _YYObj__ast_Term._0;
      const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
      const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexCase$46$YYObj__ast_LexCase({ pattern: __dollar1, action: __dollar3, loc: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }) });
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_112(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_114(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_113(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_114(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_115(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_60(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_117(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_116(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_117(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_118(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_119(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_120(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_121(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_122(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_118(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_123(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_38(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_124(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_125(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_126(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 1)._0;
  if (_bind.$tag === 25) {
    const _YYObj__list_T__ast_Term_ = _bind;
    const __dollar2 = _YYObj__list_T__ast_Term_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
    if (_bind$2.$tag === 20) {
      const _YYObj__ast_Term = _bind$2;
      const __dollar1 = _YYObj__ast_Term._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_Term_$46$YYObj__list_T__ast_Term_(new $64$moonbitlang$47$core$47$list$46$T$More$28$(__dollar1, __dollar2));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_127(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_128(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_51(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_129(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_130(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_131(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_132(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 26) {
    const _YYObj_Array__ast_Term_ = _bind;
    const __dollar1 = _YYObj_Array__ast_Term_._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Program$46$YYObj__ast_Program({ body: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Nested(__dollar1, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })), loc: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_134(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_133(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_134(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_135(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_137(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_136(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_137(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_138(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_139(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._0;
  if (_bind.$tag === 22) {
    const _YYObj___list_T__ast_LexPatternItem____ast_Ident___ = _bind;
    const __dollar3 = _YYObj___list_T__ast_LexPatternItem____ast_Ident___._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
    if (_bind$2.$tag === 29) {
      const _YYObj__ast_LexPatternItem = _bind$2;
      const __dollar1 = _YYObj__ast_LexPatternItem._0;
      const _items = __dollar3._0;
      const _rest = __dollar3._1;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___({ _0: new $64$moonbitlang$47$core$47$list$46$T$More$29$(__dollar1, _items), _1: _rest });
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_140(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_141(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_142(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_144(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_143(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_144(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_146(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_145(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_146(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_147(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_149(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_148(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_149(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_150(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_151(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_152(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_153(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_154(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_155(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_156(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_58(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_158(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_157(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_158(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_159(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_59(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_160(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_8(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_162(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_161(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_162(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_164(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_163(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_164(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_165(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_88(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_167(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_166(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_167(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_169(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_168(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_169(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_170(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_171(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_173(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_172(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_173(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_174(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_175(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_176(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_104(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_177(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_125(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_179(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_178(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_179(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_180(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 35) {
    const _YYObj_StringLiteral = _bind;
    const __dollar1 = _YYObj_StringLiteral._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Regex$46$YYObj__ast_Regex(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Literal(__dollar1, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_181(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._0;
  if (_bind.$tag === 31) {
    const _YYObj__list_T__ast_LexCase_ = _bind;
    const __dollar3 = _YYObj__list_T__ast_LexCase_._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
    if (_bind$2.$tag === 30) {
      const _YYObj__ast_LexCase = _bind$2;
      const __dollar1 = _YYObj__ast_LexCase._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexCase_$46$YYObj__list_T__ast_LexCase_(new $64$moonbitlang$47$core$47$list$46$T$More$30$(__dollar1, __dollar3));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_182(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_4(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_183(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_184(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_185(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_135(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_186(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_188(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_187(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_188(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_189(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_190(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_171(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_191(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_192(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_193(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_26(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_195(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_194(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_195(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_196(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_197(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_198(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_199(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 27) {
    const _YYObj__ast_Regex = _bind;
    const __dollar1 = _YYObj__ast_Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._0;
    if (_bind$2.$tag === 23) {
      const _YYObj__ast_Ident = _bind$2;
      const __dollar3 = _YYObj__ast_Ident._0;
      const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
      const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPatternItem$46$YYObj__ast_LexPatternItem(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPatternItem$RegexAs(__dollar1, __dollar3, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_200(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_201(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_202(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_203(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_204(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_205(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_206(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_207(_last_pos, _args) {
  const _start_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._1;
  const _end_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._2;
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 1)._0;
  if (_bind.$tag === 26) {
    const _YYObj_Array__ast_Term_ = _bind;
    const __dollar2 = _YYObj_Array__ast_Term_._0;
    const _start_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._1;
    const _end_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._2;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
    let _tmp;
    let terms;
    _L: {
      _L$2: {
        const _self = [];
        moonbitlang$core$array$$Array$push$37$(_self, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item0, _1: _end_pos_of_item0 })));
        moonbitlang$core$array$$Array$push_iter$37$(_self, moonbitlang$core$array$$Array$iter$37$(__dollar2));
        moonbitlang$core$array$$Array$push$37$(_self, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item2, _1: _end_pos_of_item2 })));
        const _bind$2 = moonbitlang$ulex$lib$new_frontend$parser$$normalize(_self);
        if (_bind$2.length === 1) {
          const _x = _bind$2[0];
          if (_x.$tag === 0) {
            _tmp = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }));
          } else {
            terms = _bind$2;
            break _L$2;
          }
        } else {
          terms = _bind$2;
          break _L$2;
        }
        break _L;
      }
      _tmp = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Nested(terms, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }));
    }
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(_tmp);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_208(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 1)._0;
  if (_bind.$tag === 23) {
    const _YYObj__ast_Ident = _bind;
    const __dollar2 = _YYObj__ast_Ident._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 5)._0;
    if (_bind$2.$tag === 27) {
      const _YYObj__ast_Regex = _bind$2;
      const __dollar6 = _YYObj__ast_Regex._0;
      const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
      const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$NamedRegex(__dollar2, __dollar6, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_209(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_170(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_210(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_211(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_212(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_138(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_213(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_27(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_214(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_216(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_215(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_216(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_217(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 36) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident$46$YYObj__ast_Ident({ name: __dollar1, loc: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_218(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_220(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_219(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_220(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_221(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_95(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_222(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 37) {
    const _YYObj_InterpLiteral = _bind;
    const __dollar1 = _YYObj_InterpLiteral._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Regex$46$YYObj__ast_Regex(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Regex$Interp(__dollar1, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_223(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 27) {
    const _YYObj__ast_Regex = _bind;
    const __dollar1 = _YYObj__ast_Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPatternItem$46$YYObj__ast_LexPatternItem(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPatternItem$Regex(__dollar1));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_224(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 28) {
    const _YYObj__list_T__ast_LexPatternItem_ = _bind;
    const __dollar1 = _YYObj__list_T__ast_LexPatternItem_._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$OpenPattern(moonbitlang$core$list$$T$to_array$191$(__dollar1), undefined, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_225(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_147(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_226(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_227(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_229(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_228(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_229(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_230(_last_pos, _args) {
  const _start_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._1;
  const _end_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._2;
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 1)._0;
  if (_bind.$tag === 26) {
    const _YYObj_Array__ast_Term_ = _bind;
    const __dollar2 = _YYObj_Array__ast_Term_._0;
    const _start_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._1;
    const _end_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__Location__Array__ast_Term___Location_$46$YYObj__Location__Array__ast_Term___Location_({ _0: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item0, _1: _end_pos_of_item0 }), _1: __dollar2, _2: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item2, _1: _end_pos_of_item2 }) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_231(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_232(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_233(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_234(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_235(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_7(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_236(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_237(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_210(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_238(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_30(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_239(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_240(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_121(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_241(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 36) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident$46$YYObj__ast_Ident({ name: __dollar1, loc: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_242(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_35(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_243(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_130(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_244(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_245(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_12(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_246(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_247(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_Term_$46$YYObj__list_T__ast_Term_($64$moonbitlang$47$core$47$list$46$T$Empty$28$);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_248(_last_pos, _args) {
  moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._2;
  moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 1, 2);
  const _sub_action_0_result = new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Ident_$46$YYObj__ast_Ident_(undefined);
  if (_sub_action_0_result.$tag === 21) {
    const _YYObj__ast_Ident_ = _sub_action_0_result;
    const __dollar2 = _YYObj__ast_Ident_._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_LexPattern$46$YYObj__ast_LexPattern(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$LexPattern$OpenPattern([], __dollar2, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_249(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_250(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_251(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_252(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_253(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_108(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_254(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_255(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_256(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_258(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_257(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_258(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_260(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_259(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_260(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_261(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_153(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_262(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_263(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_264(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_140(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_265(_last_pos, _args) {
  const _sub_action_0_result = moonbitlang$ulex$lib$new_frontend$parser$$yy_action_23(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 3));
  if (_sub_action_0_result.$tag === 21) {
    const _YYObj__ast_Ident_ = _sub_action_0_result;
    const __dollar1 = _YYObj__ast_Ident_._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___({ _0: $64$moonbitlang$47$core$47$list$46$T$Empty$29$, _1: new Option$Some$45$(__dollar1) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_266(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_11(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_267(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_142(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_268(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_1(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_270(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_269(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_270(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_271(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_110(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_272(_last_pos, _args) {
  const _sub_action_0_result = moonbitlang$ulex$lib$new_frontend$parser$$yy_action_50(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 2));
  if (_sub_action_0_result.$tag === 21) {
    const _YYObj__ast_Ident_ = _sub_action_0_result;
    const __dollar1 = _YYObj__ast_Ident_._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___({ _0: $64$moonbitlang$47$core$47$list$46$T$Empty$29$, _1: new Option$Some$45$(__dollar1) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_273(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_274(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_275(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_276(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_277(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_32(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_278(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_252(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_279(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_280(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_31(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_281(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_282(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_37(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_283(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_284(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_286(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_285(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_286(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_287(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 30) {
    const _YYObj__ast_LexCase = _bind;
    const __dollar1 = _YYObj__ast_LexCase._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__list_T__ast_LexCase_$46$YYObj__list_T__ast_LexCase_(new $64$moonbitlang$47$core$47$list$46$T$More$30$(__dollar1, $64$moonbitlang$47$core$47$list$46$T$Empty$30$));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_288(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_100(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_289(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_15(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_290(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 33) {
    const _YYObj__Location__Array__ast_Term___Location_ = _bind;
    const __dollar1 = _YYObj__Location__Array__ast_Term___Location_._0;
    const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
    const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
    const _loc1 = __dollar1._0;
    const _terms = __dollar1._1;
    const _loc2 = __dollar1._2;
    let _tmp;
    let terms;
    _L: {
      _L$2: {
        const _self = [];
        moonbitlang$core$array$$Array$push$37$(_self, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(_loc1));
        moonbitlang$core$array$$Array$push_iter$37$(_self, moonbitlang$core$array$$Array$iter$37$(_terms));
        moonbitlang$core$array$$Array$push$37$(_self, new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(_loc2));
        const _bind$2 = moonbitlang$ulex$lib$new_frontend$parser$$normalize(_self);
        if (_bind$2.length === 1) {
          const _x = _bind$2[0];
          if (_x.$tag === 0) {
            _tmp = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }));
          } else {
            terms = _bind$2;
            break _L$2;
          }
        } else {
          terms = _bind$2;
          break _L$2;
        }
        break _L;
      }
      _tmp = new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Nested(terms, moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos }));
    }
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(_tmp);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_291(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_292(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_45(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_293(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_255(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_294(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_295(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_296(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_297(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_298(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_299(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_234(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_300(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_204(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_301(_last_pos, _args) {
  const _start_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._1;
  const _end_pos_of_item0 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._2;
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 1)._0;
  if (_bind.$tag === 26) {
    const _YYObj_Array__ast_Term_ = _bind;
    const __dollar2 = _YYObj_Array__ast_Term_._0;
    const _start_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._1;
    const _end_pos_of_item2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._2;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__Location__Array__ast_Term___Location_$46$YYObj__Location__Array__ast_Term___Location_({ _0: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item0, _1: _end_pos_of_item0 }), _1: __dollar2, _2: moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _start_pos_of_item2, _1: _end_pos_of_item2 }) });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_302(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_54(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_303(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_304(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_305(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_189(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_306(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_307(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 29) {
    const _YYObj__ast_LexPatternItem = _bind;
    const __dollar1 = _YYObj__ast_LexPatternItem._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___$46$YYObj___list_T__ast_LexPatternItem____ast_Ident___({ _0: new $64$moonbitlang$47$core$47$list$46$T$More$29$(__dollar1, $64$moonbitlang$47$core$47$list$46$T$Empty$29$), _1: Option$None$45$ });
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_308(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_120(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_309(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_227(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_310(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_174(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_311(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_263(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_312(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_313(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Unit$46$YYObj_Unit(undefined);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_action_314(_last_pos, _args) {
  moonbitlang$ulex$lib$new_frontend$parser$$yy_action_312(_last_pos, moonbitlang$core$array$$ArrayView$op_as_view$10$(_args, 0, 1));
  const _symbol_start_pos = moonbitlang$ulex$lib$new_frontend$parser$$_get_symbol_start_pos(_args, _last_pos);
  const _end_pos = _args.len === 0 ? _last_pos : moonbitlang$core$array$$ArrayView$op_get$10$(_args, _args.len - 1 | 0)._2;
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj__ast_Term$46$YYObj__ast_Term(new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Code(moonbitlang$ulex$lib$new_frontend$parser$$mkloc({ _0: _symbol_start_pos, _1: _end_pos })));
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_input(token, _start_pos, _end_pos) {
  switch (token.$tag) {
    case 0: {
      const _CHAR = token;
      const _data = _CHAR._0;
      return { _0: 0, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_CharLiteral$46$YYObj_CharLiteral(_data) };
    }
    case 1: {
      const _INT = token;
      const _data$2 = _INT._0;
      return { _0: 1, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$2) };
    }
    case 2: {
      const _BYTE = token;
      const _data$3 = _BYTE._0;
      return { _0: 2, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_CharLiteral$46$YYObj_CharLiteral(_data$3) };
    }
    case 3: {
      const _BYTES = token;
      const _data$4 = _BYTES._0;
      return { _0: 3, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_StringLiteral$46$YYObj_StringLiteral(_data$4) };
    }
    case 4: {
      const _FLOAT = token;
      const _data$5 = _FLOAT._0;
      return { _0: 4, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$5) };
    }
    case 5: {
      const _STRING = token;
      const _data$6 = _STRING._0;
      return { _0: 5, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_StringLiteral$46$YYObj_StringLiteral(_data$6) };
    }
    case 6: {
      const _MULTILINE_STRING = token;
      const _data$7 = _MULTILINE_STRING._0;
      return { _0: 6, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$7) };
    }
    case 7: {
      const _MULTILINE_INTERP = token;
      const _data$8 = _MULTILINE_INTERP._0;
      return { _0: 7, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_InterpLiteral$46$YYObj_InterpLiteral(_data$8) };
    }
    case 8: {
      const _INTERP = token;
      const _data$9 = _INTERP._0;
      return { _0: 8, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_InterpLiteral$46$YYObj_InterpLiteral(_data$9) };
    }
    case 9: {
      const _ATTRIBUTE = token;
      const _data$10 = _ATTRIBUTE._0;
      return { _0: 9, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$10) };
    }
    case 10: {
      const _LIDENT = token;
      const _data$11 = _LIDENT._0;
      return { _0: 10, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$11) };
    }
    case 11: {
      const _UIDENT = token;
      const _data$12 = _UIDENT._0;
      return { _0: 11, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$12) };
    }
    case 12: {
      return { _0: 12, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 13: {
      return { _0: 13, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 14: {
      const _POST_LABEL = token;
      const _data$13 = _POST_LABEL._0;
      return { _0: 14, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$13) };
    }
    case 15: {
      const _COMMENT = token;
      const _data$14 = _COMMENT._0;
      return { _0: 15, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Comment$46$YYObj_Comment(_data$14) };
    }
    case 16: {
      return { _0: 16, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 17: {
      const _INFIX1 = token;
      const _data$15 = _INFIX1._0;
      return { _0: 17, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$15) };
    }
    case 18: {
      const _INFIX2 = token;
      const _data$16 = _INFIX2._0;
      return { _0: 18, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$16) };
    }
    case 19: {
      const _INFIX3 = token;
      const _data$17 = _INFIX3._0;
      return { _0: 19, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$17) };
    }
    case 20: {
      const _INFIX4 = token;
      const _data$18 = _INFIX4._0;
      return { _0: 20, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$18) };
    }
    case 21: {
      const _AUGMENTED_ASSIGNMENT = token;
      const _data$19 = _AUGMENTED_ASSIGNMENT._0;
      return { _0: 21, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$19) };
    }
    case 22: {
      return { _0: 22, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 23: {
      return { _0: 23, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 24: {
      return { _0: 24, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 25: {
      return { _0: 25, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 26: {
      return { _0: 26, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 27: {
      return { _0: 27, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 28: {
      return { _0: 28, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 29: {
      return { _0: 29, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 30: {
      return { _0: 30, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 31: {
      return { _0: 31, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 32: {
      return { _0: 32, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 33: {
      return { _0: 33, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 34: {
      return { _0: 34, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 35: {
      return { _0: 35, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 36: {
      return { _0: 36, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 37: {
      return { _0: 37, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 38: {
      return { _0: 38, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 39: {
      return { _0: 39, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 40: {
      return { _0: 40, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 41: {
      return { _0: 41, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 42: {
      return { _0: 42, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 43: {
      return { _0: 43, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 44: {
      return { _0: 44, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 45: {
      return { _0: 45, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 46: {
      return { _0: 46, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 47: {
      return { _0: 47, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 48: {
      return { _0: 48, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 49: {
      return { _0: 49, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 50: {
      return { _0: 50, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 51: {
      return { _0: 51, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 52: {
      return { _0: 52, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 53: {
      const _DOT_LIDENT = token;
      const _data$20 = _DOT_LIDENT._0;
      return { _0: 53, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$20) };
    }
    case 54: {
      const _DOT_UIDENT = token;
      const _data$21 = _DOT_UIDENT._0;
      return { _0: 54, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$21) };
    }
    case 55: {
      const _DOT_INT = token;
      const _data$22 = _DOT_INT._0;
      return { _0: 55, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Int$46$YYObj_Int(_data$22) };
    }
    case 56: {
      return { _0: 56, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 57: {
      return { _0: 57, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 58: {
      return { _0: 58, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 59: {
      const _SEMI = token;
      const _data$23 = _SEMI._0;
      return { _0: 59, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Bool$46$YYObj_Bool(_data$23) };
    }
    case 60: {
      return { _0: 60, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 61: {
      return { _0: 61, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 62: {
      return { _0: 62, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 63: {
      return { _0: 63, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 64: {
      return { _0: 64, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 65: {
      return { _0: 65, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 66: {
      return { _0: 66, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 67: {
      return { _0: 67, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 68: {
      return { _0: 68, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 69: {
      return { _0: 69, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 70: {
      return { _0: 70, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 71: {
      const _PACKAGE_NAME = token;
      const _data$24 = _PACKAGE_NAME._0;
      return { _0: 71, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_String$46$YYObj_String(_data$24) };
    }
    case 72: {
      return { _0: 72, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 73: {
      return { _0: 73, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 74: {
      return { _0: 74, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 75: {
      return { _0: 75, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 76: {
      return { _0: 76, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 77: {
      return { _0: 77, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 78: {
      return { _0: 78, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 79: {
      return { _0: 79, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 80: {
      return { _0: 80, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 81: {
      return { _0: 81, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 82: {
      return { _0: 82, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 83: {
      return { _0: 83, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 84: {
      return { _0: 84, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 85: {
      return { _0: 85, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 86: {
      return { _0: 86, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 87: {
      return { _0: 87, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 88: {
      return { _0: 88, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 89: {
      return { _0: 89, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 90: {
      return { _0: 90, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 91: {
      return { _0: 91, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 92: {
      return { _0: 92, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 93: {
      return { _0: 93, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 94: {
      return { _0: 94, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
    default: {
      return { _0: 95, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void };
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_1(_lookahead) {
  return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Accept;
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_101(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_0);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_102(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_141);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_103(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_296);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_104(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_298);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_105(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_313);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_106(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_274);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_107(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_231);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_108(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_61);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_109(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_214);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_110(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_192);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_111(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_294);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_112(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_218);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_113(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_129);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_114(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_109);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_115(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_93);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_116(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_90);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_117(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_205);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_118(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_150);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_119(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_47);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_120(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_201);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_121(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_202);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_122(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_275);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_123(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_44);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_124(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_183);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_125(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_89);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_126(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_154);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_127(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_200);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_128(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_284);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_129(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_256);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_130(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_306);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_131(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_254);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_132(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_69);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_133(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_239);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_134(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_283);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_135(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_52);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_136(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_276);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_137(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_184);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_138(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_96);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_139(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_151);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_140(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_152);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_141(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_16);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_142(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_119);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_143(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_73);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_144(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_203);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_145(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_250);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_146(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_71);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_147(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_131);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_148(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_112);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_149(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_98);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_150(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_206);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_151(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_196);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_152(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_72);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_153(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_236);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_154(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_81);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_155(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_43);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_156(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_198);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_157(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_281);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_158(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_21);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_159(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_197);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_160(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_232);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_161(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_244);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_162(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_20);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_163(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_92);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_164(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_124);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_165(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_36);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_166(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_295);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_167(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_99);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_168(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_91);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_169(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_191);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_170(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_304);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_171(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_291);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_172(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_65);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_173(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_48);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_174(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_127);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_175(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_186);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_176(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_82);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_177(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_64);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_178(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_39);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_179(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_55);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_180(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_251);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_181(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_249);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_182(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_211);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_183(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_53);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_184(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_70);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_185(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_262);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_186(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_297);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_187(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_155);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_188(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_75);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_189(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_102);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_190(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_246);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_191(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_273);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_192(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_233);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_193(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_226);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_194(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 113, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_279);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_196(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(2, 101, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_303);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_195(_lookahead) {
  switch (_lookahead) {
    case 95: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_101);
    }
    case 94: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_102);
    }
    case 93: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_103);
    }
    case 92: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_104);
    }
    case 91: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_105);
    }
    case 90: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_106);
    }
    case 89: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_107);
    }
    case 88: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_108);
    }
    case 87: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_109);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_110);
    }
    case 85: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_111);
    }
    case 84: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_112);
    }
    case 83: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_113);
    }
    case 82: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_114);
    }
    case 81: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_115);
    }
    case 80: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_116);
    }
    case 79: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_117);
    }
    case 78: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_118);
    }
    case 77: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_119);
    }
    case 76: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_120);
    }
    case 75: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_121);
    }
    case 74: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_122);
    }
    case 73: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_123);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_124);
    }
    case 71: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_125);
    }
    case 70: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_126);
    }
    case 69: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_127);
    }
    case 68: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_128);
    }
    case 67: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_129);
    }
    case 64: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_130);
    }
    case 63: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_131);
    }
    case 62: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_132);
    }
    case 61: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_133);
    }
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_134);
    }
    case 59: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_135);
    }
    case 58: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_136);
    }
    case 57: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_137);
    }
    case 56: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_138);
    }
    case 55: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_139);
    }
    case 54: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_140);
    }
    case 53: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_141);
    }
    case 52: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_142);
    }
    case 51: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_143);
    }
    case 50: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_144);
    }
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_145);
    }
    case 48: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_146);
    }
    case 47: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_147);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_148);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_149);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_150);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_151);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_152);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_153);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_154);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_155);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_156);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_157);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_158);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_159);
    }
    case 34: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_160);
    }
    case 33: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_161);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_162);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_163);
    }
    case 30: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_164);
    }
    case 29: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_165);
    }
    case 28: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_166);
    }
    case 27: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_167);
    }
    case 26: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_168);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_169);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_170);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_171);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_172);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_173);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_174);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_175);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_176);
    }
    case 17: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_177);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_178);
    }
    case 15: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_179);
    }
    case 14: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_180);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_181);
    }
    case 12: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_182);
    }
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_183);
    }
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_184);
    }
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_185);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_186);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_187);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_188);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_189);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_190);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_191);
    }
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_192);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_193);
    }
    case 0: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_194);
    }
    case 113: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_195);
    }
    case 101: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_196);
    }
    case 65: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 101, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_175);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_197(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 100, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_74);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 111, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_217);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_201(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 108, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_40);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_202(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 108, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_222);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_203(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 108, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_180);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_206(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 112, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_241);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_207(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 107, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_199);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_205(_lookahead) {
  switch (_lookahead) {
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_206);
    }
    case 112: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_207);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_204(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 72: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_205);
      }
      case 49: {
        break _L;
      }
      case 62: {
        break _L;
      }
      case 82: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 107, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_223);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_210(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 106, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_46);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_208(_lookahead) {
  switch (_lookahead) {
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_209);
    }
    case 82: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 106, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_97);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_209(_lookahead) {
  switch (_lookahead) {
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200);
    }
    case 111: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_201);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_202);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_203);
    }
    case 108: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_204);
    }
    case 107: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_208);
    }
    case 106: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_210);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_214(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 105, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_139);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_217(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 105, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_265);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_216(_lookahead) {
  switch (_lookahead) {
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_206);
    }
    case 112: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_217);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_218(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(2, 105, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_272);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_215(_lookahead) {
  switch (_lookahead) {
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_206);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_216);
    }
    case 112: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_218);
    }
    case 62: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 105, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_5);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_212(_lookahead) {
  switch (_lookahead) {
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_213);
    }
    case 62: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 105, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_307);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_213(_lookahead) {
  switch (_lookahead) {
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200);
    }
    case 111: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_201);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_202);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_203);
    }
    case 108: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_204);
    }
    case 107: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_212);
    }
    case 105: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_214);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_215);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_220(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 104, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_101);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_219(_lookahead) {
  if (_lookahead === 62) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_220);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_224(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(5, 104, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_22);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_223(_lookahead) {
  if (_lookahead === 62) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_224);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_222(_lookahead) {
  switch (_lookahead) {
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_206);
    }
    case 112: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_223);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_226(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(4, 104, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_49);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_225(_lookahead) {
  if (_lookahead === 62) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_226);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_227(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 104, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_248);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_221(_lookahead) {
  switch (_lookahead) {
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_206);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_222);
    }
    case 112: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_225);
    }
    case 62: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_227);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_228(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(2, 104, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_103);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_211(_lookahead) {
  switch (_lookahead) {
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200);
    }
    case 111: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_201);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_202);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_203);
    }
    case 108: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_204);
    }
    case 107: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_212);
    }
    case 105: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_219);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_221);
    }
    case 62: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_228);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_229(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 104, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_224);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_11(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_290);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_12(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_56);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_13(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_288);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_14(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_9);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_15(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_182);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_16(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_145);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_17(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_143);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_18(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_269);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_19(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_116);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_20(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_277);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_21(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_292);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_22(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_28);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_23(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_178);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_241(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(7, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_208);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_240(_lookahead) {
  if (_lookahead === 59) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_241);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_239(_lookahead) {
  switch (_lookahead) {
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200);
    }
    case 111: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_201);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_202);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_203);
    }
    case 108: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_240);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_238(_lookahead) {
  if (_lookahead === 46) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_239);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_237(_lookahead) {
  if (_lookahead === 13) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_238);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_236(_lookahead) {
  if (_lookahead === 58) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_237);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_235(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 11: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200);
      }
      case 111: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_236);
      }
      case 0: {
        break _L;
      }
      case 1: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 3: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 6: {
        break _L;
      }
      case 7: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 9: {
        break _L;
      }
      case 10: {
        break _L;
      }
      case 12: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 16: {
        break _L;
      }
      case 17: {
        break _L;
      }
      case 18: {
        break _L;
      }
      case 19: {
        break _L;
      }
      case 20: {
        break _L;
      }
      case 21: {
        break _L;
      }
      case 22: {
        break _L;
      }
      case 23: {
        break _L;
      }
      case 24: {
        break _L;
      }
      case 25: {
        break _L;
      }
      case 26: {
        break _L;
      }
      case 27: {
        break _L;
      }
      case 28: {
        break _L;
      }
      case 29: {
        break _L;
      }
      case 30: {
        break _L;
      }
      case 31: {
        break _L;
      }
      case 32: {
        break _L;
      }
      case 33: {
        break _L;
      }
      case 34: {
        break _L;
      }
      case 35: {
        break _L;
      }
      case 36: {
        break _L;
      }
      case 37: {
        break _L;
      }
      case 38: {
        break _L;
      }
      case 39: {
        break _L;
      }
      case 40: {
        break _L;
      }
      case 41: {
        break _L;
      }
      case 42: {
        break _L;
      }
      case 43: {
        break _L;
      }
      case 44: {
        break _L;
      }
      case 45: {
        break _L;
      }
      case 46: {
        break _L;
      }
      case 47: {
        break _L;
      }
      case 48: {
        break _L;
      }
      case 49: {
        break _L;
      }
      case 50: {
        break _L;
      }
      case 51: {
        break _L;
      }
      case 52: {
        break _L;
      }
      case 53: {
        break _L;
      }
      case 54: {
        break _L;
      }
      case 55: {
        break _L;
      }
      case 56: {
        break _L;
      }
      case 57: {
        break _L;
      }
      case 58: {
        break _L;
      }
      case 59: {
        break _L;
      }
      case 60: {
        break _L;
      }
      case 61: {
        break _L;
      }
      case 62: {
        break _L;
      }
      case 63: {
        break _L;
      }
      case 64: {
        break _L;
      }
      case 65: {
        break _L;
      }
      case 66: {
        break _L;
      }
      case 67: {
        break _L;
      }
      case 68: {
        break _L;
      }
      case 69: {
        break _L;
      }
      case 70: {
        break _L;
      }
      case 71: {
        break _L;
      }
      case 72: {
        break _L;
      }
      case 73: {
        break _L;
      }
      case 74: {
        break _L;
      }
      case 75: {
        break _L;
      }
      case 76: {
        break _L;
      }
      case 77: {
        break _L;
      }
      case 78: {
        break _L;
      }
      case 79: {
        break _L;
      }
      case 80: {
        break _L;
      }
      case 81: {
        break _L;
      }
      case 82: {
        break _L;
      }
      case 83: {
        break _L;
      }
      case 84: {
        break _L;
      }
      case 85: {
        break _L;
      }
      case 86: {
        break _L;
      }
      case 87: {
        break _L;
      }
      case 88: {
        break _L;
      }
      case 89: {
        break _L;
      }
      case 90: {
        break _L;
      }
      case 91: {
        break _L;
      }
      case 92: {
        break _L;
      }
      case 93: {
        break _L;
      }
      case 94: {
        break _L;
      }
      case 95: {
        break _L;
      }
      case 114: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_311);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_24(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_24);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_243(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(2, 98, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_126);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_25(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_190);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_26(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_235);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_27(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_257);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_28(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_238);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_29(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_105);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_30(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_166);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_31(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_83);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_32(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_308);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_33(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_221);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_34(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_163);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_35(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_79);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_36(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_133);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_37(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_156);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_38(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_310);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_39(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_115);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_40(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_242);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_41(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_84);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_42(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_278);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_43(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_266);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_44(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_165);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_45(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_267);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_46(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_261);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_47(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_240);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_48(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_76);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_49(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_66);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_244(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 97, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_33);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_50(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_122);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_51(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_160);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_52(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_176);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_53(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_299);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_54(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_225);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_55(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_187);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_56(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_13);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_57(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_107);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_58(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_148);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_59(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_264);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_7(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 110, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_78);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_6(_lookahead) {
  if (_lookahead === 66) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_7);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_60(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_259);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_61(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_213);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_62(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_253);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_63(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_219);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_64(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_314);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_65(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_309);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_66(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_305);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_67(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_280);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_68(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_302);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_69(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_300);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_70(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_245);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_71(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_159);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_72(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_215);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_73(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_193);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_74(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_271);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_75(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_185);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_76(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_282);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_77(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_289);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_78(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_136);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_79(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_113);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_80(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_177);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_81(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_268);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_82(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_168);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_83(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_237);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_84(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_2);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_85(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_123);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_86(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_228);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_87(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_41);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_88(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_17);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_89(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_62);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_10(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 110, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_301);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_9(_lookahead) {
  if (_lookahead === 48) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_10);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_90(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_212);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_91(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_209);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_92(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_194);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_93(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_285);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_94(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_157);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_95(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_293);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_96(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_243);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_97(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_86);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_98(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_172);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_99(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_128);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_4(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 110, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_230);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_3(_lookahead) {
  if (_lookahead === 62) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_4);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_234(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 109, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_207);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_233(_lookahead) {
  if (_lookahead === 66) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_234);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_245(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 103, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_111);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_248(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(3, 102, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_181);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_250(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(5, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_94);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_249(_lookahead) {
  if (_lookahead === 66) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_250);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_100(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 95: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_101);
      }
      case 94: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_102);
      }
      case 93: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_103);
      }
      case 92: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_104);
      }
      case 91: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_105);
      }
      case 90: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_106);
      }
      case 89: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_107);
      }
      case 88: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_108);
      }
      case 87: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_109);
      }
      case 86: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_110);
      }
      case 85: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_111);
      }
      case 84: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_112);
      }
      case 83: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_113);
      }
      case 82: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_114);
      }
      case 81: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_115);
      }
      case 80: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_116);
      }
      case 79: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_117);
      }
      case 78: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_118);
      }
      case 77: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_119);
      }
      case 76: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_120);
      }
      case 75: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_121);
      }
      case 74: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_122);
      }
      case 73: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_123);
      }
      case 72: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_124);
      }
      case 71: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_125);
      }
      case 70: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_126);
      }
      case 69: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_127);
      }
      case 68: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_128);
      }
      case 67: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_129);
      }
      case 64: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_130);
      }
      case 63: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_131);
      }
      case 62: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_132);
      }
      case 61: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_133);
      }
      case 60: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_134);
      }
      case 59: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_135);
      }
      case 58: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_136);
      }
      case 57: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_137);
      }
      case 56: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_138);
      }
      case 55: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_139);
      }
      case 54: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_140);
      }
      case 53: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_141);
      }
      case 52: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_142);
      }
      case 51: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_143);
      }
      case 50: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_144);
      }
      case 49: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_145);
      }
      case 48: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_146);
      }
      case 47: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_147);
      }
      case 46: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_148);
      }
      case 45: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_149);
      }
      case 44: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_150);
      }
      case 43: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_151);
      }
      case 42: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_152);
      }
      case 41: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_153);
      }
      case 40: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_154);
      }
      case 39: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_155);
      }
      case 38: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_156);
      }
      case 37: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_157);
      }
      case 36: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_158);
      }
      case 35: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_159);
      }
      case 34: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_160);
      }
      case 33: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_161);
      }
      case 32: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_162);
      }
      case 31: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_163);
      }
      case 30: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_164);
      }
      case 29: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_165);
      }
      case 28: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_166);
      }
      case 27: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_167);
      }
      case 26: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_168);
      }
      case 25: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_169);
      }
      case 24: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_170);
      }
      case 23: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_171);
      }
      case 22: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_172);
      }
      case 21: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_173);
      }
      case 20: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_174);
      }
      case 19: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_175);
      }
      case 18: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_176);
      }
      case 17: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_177);
      }
      case 16: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_178);
      }
      case 15: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_179);
      }
      case 14: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_180);
      }
      case 13: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_181);
      }
      case 12: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_182);
      }
      case 11: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_183);
      }
      case 10: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_184);
      }
      case 9: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_185);
      }
      case 8: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_186);
      }
      case 7: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_187);
      }
      case 6: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_188);
      }
      case 5: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_189);
      }
      case 4: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_190);
      }
      case 3: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_191);
      }
      case 2: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_192);
      }
      case 1: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_193);
      }
      case 0: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_194);
      }
      case 113: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_195);
      }
      case 101: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_197);
      }
      case 100: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_198);
      }
      case 65: {
        break _L;
      }
      case 66: {
        break _L;
      }
      case 114: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 99, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_161);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_198(_lookahead) {
  if (_lookahead === 65) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_199);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_199(_lookahead) {
  switch (_lookahead) {
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200);
    }
    case 111: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_201);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_202);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_203);
    }
    case 108: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_204);
    }
    case 107: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_208);
    }
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_211);
    }
    case 106: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_229);
    }
    case 104: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_230);
    }
    case 103: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_246);
    }
    case 102: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_249);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_230(_lookahead) {
  if (_lookahead === 82) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_231);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_231(_lookahead) {
  switch (_lookahead) {
    case 65: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_232);
    }
    case 109: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_245);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_232(_lookahead) {
  switch (_lookahead) {
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_2);
    }
    case 65: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_5);
    }
    case 47: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_8);
    }
    case 110: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_11);
    }
    case 95: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_12);
    }
    case 94: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_13);
    }
    case 93: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_14);
    }
    case 92: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_15);
    }
    case 91: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_16);
    }
    case 90: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_17);
    }
    case 89: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_18);
    }
    case 88: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_19);
    }
    case 87: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_20);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_21);
    }
    case 85: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_22);
    }
    case 84: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_23);
    }
    case 83: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_24);
    }
    case 82: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_25);
    }
    case 81: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_26);
    }
    case 80: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_27);
    }
    case 79: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_28);
    }
    case 77: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_29);
    }
    case 76: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_30);
    }
    case 75: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_31);
    }
    case 74: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_32);
    }
    case 73: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_33);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_34);
    }
    case 71: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_35);
    }
    case 70: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_36);
    }
    case 69: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_37);
    }
    case 68: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_38);
    }
    case 67: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_39);
    }
    case 64: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_40);
    }
    case 63: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_41);
    }
    case 61: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_42);
    }
    case 59: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_43);
    }
    case 58: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_44);
    }
    case 57: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_45);
    }
    case 56: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_46);
    }
    case 55: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_47);
    }
    case 54: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_48);
    }
    case 53: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_49);
    }
    case 52: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_50);
    }
    case 51: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_51);
    }
    case 50: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_52);
    }
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_53);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_54);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_55);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_56);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_57);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_58);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_59);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_60);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_61);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_62);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_63);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_64);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_65);
    }
    case 34: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_66);
    }
    case 33: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_67);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_68);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_69);
    }
    case 30: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_70);
    }
    case 29: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_71);
    }
    case 28: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_72);
    }
    case 27: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_73);
    }
    case 26: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_74);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_75);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_76);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_77);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_78);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_79);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_80);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_81);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_82);
    }
    case 17: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_83);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_84);
    }
    case 15: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_85);
    }
    case 14: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_86);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_87);
    }
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_88);
    }
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_89);
    }
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_90);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_91);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_92);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_93);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_94);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_95);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_96);
    }
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_97);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_98);
    }
    case 0: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_99);
    }
    case 12: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_100);
    }
    case 97: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_233);
    }
    case 78: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_235);
    }
    case 99: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_242);
    }
    case 98: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_244);
    }
    case 66: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(0, 98, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_247);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_2(_lookahead) {
  switch (_lookahead) {
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_2);
    }
    case 97: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_3);
    }
    case 65: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_5);
    }
    case 47: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_8);
    }
    case 110: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_11);
    }
    case 95: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_12);
    }
    case 94: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_13);
    }
    case 93: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_14);
    }
    case 92: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_15);
    }
    case 91: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_16);
    }
    case 90: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_17);
    }
    case 89: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_18);
    }
    case 88: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_19);
    }
    case 87: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_20);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_21);
    }
    case 85: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_22);
    }
    case 84: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_23);
    }
    case 83: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_24);
    }
    case 82: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_25);
    }
    case 81: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_26);
    }
    case 80: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_27);
    }
    case 79: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_28);
    }
    case 77: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_29);
    }
    case 76: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_30);
    }
    case 75: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_31);
    }
    case 74: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_32);
    }
    case 73: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_33);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_34);
    }
    case 71: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_35);
    }
    case 70: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_36);
    }
    case 69: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_37);
    }
    case 68: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_38);
    }
    case 67: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_39);
    }
    case 64: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_40);
    }
    case 63: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_41);
    }
    case 61: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_42);
    }
    case 59: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_43);
    }
    case 58: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_44);
    }
    case 57: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_45);
    }
    case 56: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_46);
    }
    case 55: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_47);
    }
    case 54: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_48);
    }
    case 53: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_49);
    }
    case 52: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_50);
    }
    case 51: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_51);
    }
    case 50: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_52);
    }
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_53);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_54);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_55);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_56);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_57);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_58);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_59);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_60);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_61);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_62);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_63);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_64);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_65);
    }
    case 34: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_66);
    }
    case 33: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_67);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_68);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_69);
    }
    case 30: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_70);
    }
    case 29: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_71);
    }
    case 28: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_72);
    }
    case 27: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_73);
    }
    case 26: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_74);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_75);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_76);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_77);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_78);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_79);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_80);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_81);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_82);
    }
    case 17: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_83);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_84);
    }
    case 15: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_85);
    }
    case 14: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_86);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_87);
    }
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_88);
    }
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_89);
    }
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_90);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_91);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_92);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_93);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_94);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_95);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_96);
    }
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_97);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_98);
    }
    case 0: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_99);
    }
    case 12: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_100);
    }
    case 78: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_235);
    }
    case 99: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_242);
    }
    case 98: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_244);
    }
    case 62: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(0, 98, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_247);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_242(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 60: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_2);
      }
      case 65: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_5);
      }
      case 47: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_8);
      }
      case 110: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_11);
      }
      case 95: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_12);
      }
      case 94: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_13);
      }
      case 93: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_14);
      }
      case 92: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_15);
      }
      case 91: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_16);
      }
      case 90: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_17);
      }
      case 89: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_18);
      }
      case 88: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_19);
      }
      case 87: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_20);
      }
      case 86: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_21);
      }
      case 85: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_22);
      }
      case 84: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_23);
      }
      case 83: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_24);
      }
      case 82: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_25);
      }
      case 81: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_26);
      }
      case 80: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_27);
      }
      case 79: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_28);
      }
      case 77: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_29);
      }
      case 76: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_30);
      }
      case 75: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_31);
      }
      case 74: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_32);
      }
      case 73: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_33);
      }
      case 72: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_34);
      }
      case 71: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_35);
      }
      case 70: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_36);
      }
      case 69: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_37);
      }
      case 68: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_38);
      }
      case 67: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_39);
      }
      case 64: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_40);
      }
      case 63: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_41);
      }
      case 61: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_42);
      }
      case 59: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_43);
      }
      case 58: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_44);
      }
      case 57: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_45);
      }
      case 56: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_46);
      }
      case 55: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_47);
      }
      case 54: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_48);
      }
      case 53: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_49);
      }
      case 52: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_50);
      }
      case 51: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_51);
      }
      case 50: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_52);
      }
      case 49: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_53);
      }
      case 46: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_54);
      }
      case 45: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_55);
      }
      case 44: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_56);
      }
      case 43: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_57);
      }
      case 42: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_58);
      }
      case 41: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_59);
      }
      case 40: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_60);
      }
      case 39: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_61);
      }
      case 38: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_62);
      }
      case 37: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_63);
      }
      case 36: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_64);
      }
      case 35: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_65);
      }
      case 34: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_66);
      }
      case 33: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_67);
      }
      case 32: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_68);
      }
      case 31: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_69);
      }
      case 30: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_70);
      }
      case 29: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_71);
      }
      case 28: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_72);
      }
      case 27: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_73);
      }
      case 26: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_74);
      }
      case 25: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_75);
      }
      case 24: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_76);
      }
      case 23: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_77);
      }
      case 22: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_78);
      }
      case 21: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_79);
      }
      case 20: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_80);
      }
      case 19: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_81);
      }
      case 18: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_82);
      }
      case 17: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_83);
      }
      case 16: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_84);
      }
      case 15: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_85);
      }
      case 14: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_86);
      }
      case 13: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_87);
      }
      case 11: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_88);
      }
      case 10: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_89);
      }
      case 9: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_90);
      }
      case 8: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_91);
      }
      case 7: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_92);
      }
      case 6: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_93);
      }
      case 5: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_94);
      }
      case 4: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_95);
      }
      case 3: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_96);
      }
      case 2: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_97);
      }
      case 1: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_98);
      }
      case 0: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_99);
      }
      case 12: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_100);
      }
      case 78: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_235);
      }
      case 99: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_242);
      }
      case 98: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_243);
      }
      case 48: {
        break _L;
      }
      case 62: {
        break _L;
      }
      case 66: {
        break _L;
      }
      case 114: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(0, 98, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_247);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_5(_lookahead) {
  switch (_lookahead) {
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_2);
    }
    case 65: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_5);
    }
    case 97: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_6);
    }
    case 47: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_8);
    }
    case 110: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_11);
    }
    case 95: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_12);
    }
    case 94: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_13);
    }
    case 93: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_14);
    }
    case 92: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_15);
    }
    case 91: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_16);
    }
    case 90: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_17);
    }
    case 89: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_18);
    }
    case 88: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_19);
    }
    case 87: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_20);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_21);
    }
    case 85: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_22);
    }
    case 84: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_23);
    }
    case 83: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_24);
    }
    case 82: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_25);
    }
    case 81: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_26);
    }
    case 80: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_27);
    }
    case 79: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_28);
    }
    case 77: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_29);
    }
    case 76: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_30);
    }
    case 75: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_31);
    }
    case 74: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_32);
    }
    case 73: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_33);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_34);
    }
    case 71: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_35);
    }
    case 70: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_36);
    }
    case 69: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_37);
    }
    case 68: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_38);
    }
    case 67: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_39);
    }
    case 64: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_40);
    }
    case 63: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_41);
    }
    case 61: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_42);
    }
    case 59: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_43);
    }
    case 58: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_44);
    }
    case 57: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_45);
    }
    case 56: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_46);
    }
    case 55: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_47);
    }
    case 54: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_48);
    }
    case 53: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_49);
    }
    case 52: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_50);
    }
    case 51: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_51);
    }
    case 50: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_52);
    }
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_53);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_54);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_55);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_56);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_57);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_58);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_59);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_60);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_61);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_62);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_63);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_64);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_65);
    }
    case 34: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_66);
    }
    case 33: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_67);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_68);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_69);
    }
    case 30: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_70);
    }
    case 29: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_71);
    }
    case 28: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_72);
    }
    case 27: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_73);
    }
    case 26: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_74);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_75);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_76);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_77);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_78);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_79);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_80);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_81);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_82);
    }
    case 17: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_83);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_84);
    }
    case 15: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_85);
    }
    case 14: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_86);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_87);
    }
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_88);
    }
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_89);
    }
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_90);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_91);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_92);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_93);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_94);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_95);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_96);
    }
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_97);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_98);
    }
    case 0: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_99);
    }
    case 12: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_100);
    }
    case 78: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_235);
    }
    case 99: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_242);
    }
    case 98: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_244);
    }
    case 66: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(0, 98, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_247);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_8(_lookahead) {
  switch (_lookahead) {
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_2);
    }
    case 65: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_5);
    }
    case 47: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_8);
    }
    case 97: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_9);
    }
    case 110: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_11);
    }
    case 95: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_12);
    }
    case 94: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_13);
    }
    case 93: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_14);
    }
    case 92: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_15);
    }
    case 91: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_16);
    }
    case 90: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_17);
    }
    case 89: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_18);
    }
    case 88: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_19);
    }
    case 87: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_20);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_21);
    }
    case 85: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_22);
    }
    case 84: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_23);
    }
    case 83: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_24);
    }
    case 82: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_25);
    }
    case 81: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_26);
    }
    case 80: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_27);
    }
    case 79: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_28);
    }
    case 77: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_29);
    }
    case 76: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_30);
    }
    case 75: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_31);
    }
    case 74: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_32);
    }
    case 73: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_33);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_34);
    }
    case 71: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_35);
    }
    case 70: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_36);
    }
    case 69: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_37);
    }
    case 68: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_38);
    }
    case 67: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_39);
    }
    case 64: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_40);
    }
    case 63: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_41);
    }
    case 61: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_42);
    }
    case 59: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_43);
    }
    case 58: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_44);
    }
    case 57: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_45);
    }
    case 56: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_46);
    }
    case 55: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_47);
    }
    case 54: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_48);
    }
    case 53: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_49);
    }
    case 52: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_50);
    }
    case 51: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_51);
    }
    case 50: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_52);
    }
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_53);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_54);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_55);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_56);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_57);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_58);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_59);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_60);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_61);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_62);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_63);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_64);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_65);
    }
    case 34: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_66);
    }
    case 33: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_67);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_68);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_69);
    }
    case 30: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_70);
    }
    case 29: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_71);
    }
    case 28: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_72);
    }
    case 27: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_73);
    }
    case 26: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_74);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_75);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_76);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_77);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_78);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_79);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_80);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_81);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_82);
    }
    case 17: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_83);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_84);
    }
    case 15: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_85);
    }
    case 14: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_86);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_87);
    }
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_88);
    }
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_89);
    }
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_90);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_91);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_92);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_93);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_94);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_95);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_96);
    }
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_97);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_98);
    }
    case 0: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_99);
    }
    case 12: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_100);
    }
    case 78: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_235);
    }
    case 99: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_242);
    }
    case 98: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_244);
    }
    case 48: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(0, 98, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_247);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_246(_lookahead) {
  switch (_lookahead) {
    case 59: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_247);
    }
    case 66: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(1, 102, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_287);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_247(_lookahead) {
  switch (_lookahead) {
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_200);
    }
    case 111: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_201);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_202);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_203);
    }
    case 108: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_204);
    }
    case 107: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_208);
    }
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_211);
    }
    case 106: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_229);
    }
    case 104: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_230);
    }
    case 103: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_246);
    }
    case 102: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_248);
    }
    case 66: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(2, 102, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_68);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_251(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$ReduceNoLookahead(1, 96, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_132);
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_state_0(_lookahead) {
  switch (_lookahead) {
    case 96: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_1);
    }
    case 60: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_2);
    }
    case 65: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_5);
    }
    case 47: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_8);
    }
    case 110: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_11);
    }
    case 95: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_12);
    }
    case 94: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_13);
    }
    case 93: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_14);
    }
    case 92: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_15);
    }
    case 91: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_16);
    }
    case 90: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_17);
    }
    case 89: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_18);
    }
    case 88: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_19);
    }
    case 87: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_20);
    }
    case 86: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_21);
    }
    case 85: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_22);
    }
    case 84: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_23);
    }
    case 83: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_24);
    }
    case 82: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_25);
    }
    case 81: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_26);
    }
    case 80: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_27);
    }
    case 79: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_28);
    }
    case 77: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_29);
    }
    case 76: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_30);
    }
    case 75: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_31);
    }
    case 74: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_32);
    }
    case 73: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_33);
    }
    case 72: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_34);
    }
    case 71: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_35);
    }
    case 70: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_36);
    }
    case 69: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_37);
    }
    case 68: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_38);
    }
    case 67: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_39);
    }
    case 64: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_40);
    }
    case 63: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_41);
    }
    case 61: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_42);
    }
    case 59: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_43);
    }
    case 58: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_44);
    }
    case 57: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_45);
    }
    case 56: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_46);
    }
    case 55: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_47);
    }
    case 54: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_48);
    }
    case 53: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_49);
    }
    case 52: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_50);
    }
    case 51: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_51);
    }
    case 50: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_52);
    }
    case 49: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_53);
    }
    case 46: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_54);
    }
    case 45: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_55);
    }
    case 44: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_56);
    }
    case 43: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_57);
    }
    case 42: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_58);
    }
    case 41: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_59);
    }
    case 40: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_60);
    }
    case 39: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_61);
    }
    case 38: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_62);
    }
    case 37: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_63);
    }
    case 36: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_64);
    }
    case 35: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_65);
    }
    case 34: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_66);
    }
    case 33: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_67);
    }
    case 32: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_68);
    }
    case 31: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_69);
    }
    case 30: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_70);
    }
    case 29: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_71);
    }
    case 28: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_72);
    }
    case 27: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_73);
    }
    case 26: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_74);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_75);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_76);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_77);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_78);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_79);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_80);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_81);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_82);
    }
    case 17: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_83);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_84);
    }
    case 15: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_85);
    }
    case 14: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_86);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_87);
    }
    case 11: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_88);
    }
    case 10: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_89);
    }
    case 9: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_90);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_91);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_92);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_93);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_94);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_95);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_96);
    }
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_97);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_98);
    }
    case 0: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_99);
    }
    case 12: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_100);
    }
    case 78: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_235);
    }
    case 99: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_242);
    }
    case 98: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_244);
    }
    case 97: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$parser$$yy_state_251);
    }
    case 114: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Reduce(0, 98, moonbitlang$ulex$lib$new_frontend$parser$$yy_action_247);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$error(stack, token, loc) {
  const expected = [];
  const _arr = [{ _0: 0, _1: 0 }, { _0: 1, _1: 1 }, { _0: 2, _1: 2 }, { _0: 3, _1: 3 }, { _0: 4, _1: 4 }, { _0: 5, _1: 5 }, { _0: 6, _1: 6 }, { _0: 7, _1: 7 }, { _0: 8, _1: 8 }, { _0: 9, _1: 9 }, { _0: 10, _1: 10 }, { _0: 11, _1: 11 }, { _0: 12, _1: 12 }, { _0: 13, _1: 13 }, { _0: 14, _1: 14 }, { _0: 15, _1: 15 }, { _0: 16, _1: 16 }, { _0: 17, _1: 17 }, { _0: 18, _1: 18 }, { _0: 19, _1: 19 }, { _0: 20, _1: 20 }, { _0: 21, _1: 21 }, { _0: 22, _1: 22 }, { _0: 23, _1: 23 }, { _0: 24, _1: 24 }, { _0: 25, _1: 25 }, { _0: 26, _1: 26 }, { _0: 27, _1: 27 }, { _0: 28, _1: 28 }, { _0: 29, _1: 29 }, { _0: 30, _1: 30 }, { _0: 31, _1: 31 }, { _0: 32, _1: 32 }, { _0: 33, _1: 33 }, { _0: 34, _1: 34 }, { _0: 35, _1: 35 }, { _0: 36, _1: 36 }, { _0: 37, _1: 37 }, { _0: 38, _1: 38 }, { _0: 39, _1: 39 }, { _0: 40, _1: 40 }, { _0: 41, _1: 41 }, { _0: 42, _1: 42 }, { _0: 43, _1: 43 }, { _0: 44, _1: 44 }, { _0: 45, _1: 45 }, { _0: 46, _1: 46 }, { _0: 47, _1: 47 }, { _0: 48, _1: 48 }, { _0: 49, _1: 49 }, { _0: 50, _1: 50 }, { _0: 51, _1: 51 }, { _0: 52, _1: 52 }, { _0: 53, _1: 53 }, { _0: 54, _1: 54 }, { _0: 55, _1: 55 }, { _0: 56, _1: 56 }, { _0: 57, _1: 57 }, { _0: 58, _1: 58 }, { _0: 59, _1: 59 }, { _0: 60, _1: 60 }, { _0: 61, _1: 61 }, { _0: 62, _1: 62 }, { _0: 63, _1: 63 }, { _0: 64, _1: 64 }, { _0: 65, _1: 65 }, { _0: 66, _1: 66 }, { _0: 67, _1: 67 }, { _0: 68, _1: 68 }, { _0: 69, _1: 69 }, { _0: 70, _1: 70 }, { _0: 71, _1: 71 }, { _0: 72, _1: 72 }, { _0: 73, _1: 73 }, { _0: 74, _1: 74 }, { _0: 75, _1: 75 }, { _0: 76, _1: 76 }, { _0: 77, _1: 77 }, { _0: 78, _1: 78 }, { _0: 79, _1: 79 }, { _0: 80, _1: 80 }, { _0: 81, _1: 81 }, { _0: 82, _1: 82 }, { _0: 83, _1: 83 }, { _0: 84, _1: 84 }, { _0: 85, _1: 85 }, { _0: 86, _1: 86 }, { _0: 87, _1: 87 }, { _0: 88, _1: 88 }, { _0: 89, _1: 89 }, { _0: 90, _1: 90 }, { _0: 91, _1: 91 }, { _0: 92, _1: 92 }, { _0: 93, _1: 93 }, { _0: 94, _1: 94 }, { _0: 95, _1: 95 }];
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const term = _arr[_i];
      const kind = term._1;
      const symbol = term._0;
      let stack$2;
      _L: {
        stack$2 = stack;
        break _L;
      }
      let _tmp$2 = stack$2;
      _L$2: while (true) {
        const stack$3 = _tmp$2;
        if (stack$3.$tag === 0) {
          break;
        } else {
          const _Cons = stack$3;
          const _state = _Cons._0;
          let count;
          let symbol$2;
          _L$3: {
            _L$4: {
              const _bind = _state(symbol);
              switch (_bind.$tag) {
                case 0: {
                  break _L$4;
                }
                case 1: {
                  break _L$4;
                }
                case 2: {
                  const _Reduce = _bind;
                  const _count = _Reduce._0;
                  const _symbol = _Reduce._1;
                  count = _count;
                  symbol$2 = _symbol;
                  break _L$3;
                }
                case 3: {
                  const _ReduceNoLookahead = _bind;
                  const _count$2 = _ReduceNoLookahead._0;
                  const _symbol$2 = _ReduceNoLookahead._1;
                  count = _count$2;
                  symbol$2 = _symbol$2;
                  break _L$3;
                }
                default: {
                  break _L$2;
                }
              }
            }
            moonbitlang$core$array$$Array$push$115$(expected, kind);
            break;
          }
          let stack$4;
          let count$2;
          let symbol$3;
          _L$4: {
            stack$4 = stack$3;
            count$2 = count;
            symbol$3 = symbol$2;
            break _L$4;
          }
          let _tmp$3 = stack$4;
          let _tmp$4 = count$2;
          let _tmp$5 = symbol$3;
          _L$5: while (true) {
            const stack$5 = _tmp$3;
            const count$3 = _tmp$4;
            const symbol$4 = _tmp$5;
            const stack$6 = moonbitlang$core$immut$list$$T$drop$9$(stack$5, count$3);
            if (stack$6.$tag === 1) {
              const _Cons$2 = stack$6;
              const _state$2 = _Cons$2._0;
              let count$4;
              let symbol$5;
              _L$6: {
                const _bind = _state$2(symbol$4);
                switch (_bind.$tag) {
                  case 1: {
                    const _Shift = _bind;
                    const _state$3 = _Shift._0;
                    _tmp$2 = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$(_state$3, stack$6);
                    continue _L$2;
                  }
                  case 2: {
                    const _Reduce = _bind;
                    const _count = _Reduce._0;
                    const _symbol = _Reduce._1;
                    count$4 = _count;
                    symbol$5 = _symbol;
                    break _L$6;
                  }
                  case 3: {
                    const _ReduceNoLookahead = _bind;
                    const _count$2 = _ReduceNoLookahead._0;
                    const _symbol$2 = _ReduceNoLookahead._1;
                    count$4 = _count$2;
                    symbol$5 = _symbol$2;
                    break _L$6;
                  }
                  default: {
                    $panic();
                    break _L$2;
                  }
                }
              }
              _tmp$3 = stack$6;
              _tmp$4 = count$4;
              _tmp$5 = symbol$5;
              continue;
            } else {
              $panic();
              break _L$2;
            }
          }
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (token === undefined) {
    return new Result$Err$46$(new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$ParseError$46$UnexpectedEndOfInput(loc._1, expected));
  } else {
    const _Some = token;
    const _token = _Some;
    return new Result$Err$46$(new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$ParseError$46$UnexpectedToken(_token, loc, expected));
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$yy_parse$211$(tokens, start, return_, initial_pos) {
  let cursor = 0;
  const state_stack = { val: new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$(start, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$24$) };
  const data_stack = [];
  const last_pos = { val: moonbitlang$core$option$$Option$or$107$(initial_pos, moonbitlang$core$array$$Array$op_get$138$(tokens, 0)._1) };
  const state = { val: start };
  let lookahead = undefined;
  let last_shifted_state_stack = state_stack.val;
  while (true) {
    let decision;
    const _func = state.val;
    const _bind = _func(114);
    switch (_bind.$tag) {
      case 3: {
        decision = _bind;
        break;
      }
      case 0: {
        decision = _bind;
        break;
      }
      default: {
        const _bind$2 = lookahead;
        if (_bind$2 === undefined) {
          if (cursor < tokens.length) {
            const _bind$3 = moonbitlang$core$array$$Array$op_get$138$(tokens, cursor);
            const _token = _bind$3._0;
            const _start_pos = _bind$3._1;
            const _end_pos = _bind$3._2;
            cursor = cursor + 1 | 0;
            const _bind$4 = moonbitlang$ulex$lib$new_frontend$parser$$yy_input(_token, _start_pos, _end_pos);
            const _symbol = _bind$4._0;
            const _data = _bind$4._1;
            lookahead = { _0: _symbol, _1: { _0: _data, _1: _start_pos, _2: _end_pos }, _2: _token };
            const _func$2 = state.val;
            decision = _func$2(_symbol);
          } else {
            lookahead = { _0: 114, _1: { _0: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$parser$46$YYObj_Void$46$YYObj_Void, _1: last_pos.val, _2: last_pos.val }, _2: undefined };
            const _func$2 = state.val;
            decision = _func$2(114);
          }
        } else {
          const _Some = _bind$2;
          const _la = _Some;
          const _func$2 = state.val;
          decision = _func$2(_la._0);
        }
      }
    }
    let action;
    let count;
    let symbol;
    _L: {
      _L$2: {
        switch (decision.$tag) {
          case 0: {
            return new Result$Ok$47$(return_(moonbitlang$core$array$$Array$unsafe_pop$10$(data_stack)._0));
          }
          case 1: {
            const _Shift = decision;
            const _next_state = _Shift._0;
            const _bind$3 = lookahead;
            if (_bind$3 === undefined) {
              $panic();
            } else {
              const _Some = _bind$3;
              const _la = _Some;
              moonbitlang$core$array$$Array$push$10$(data_stack, _la._1);
              state_stack.val = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$(_next_state, state_stack.val);
              last_shifted_state_stack = state_stack.val;
              state.val = _next_state;
              last_pos.val = _la._1._2;
              lookahead = undefined;
            }
            break;
          }
          case 2: {
            const _Reduce = decision;
            const _count = _Reduce._0;
            const _symbol = _Reduce._1;
            const _action = _Reduce._2;
            action = _action;
            count = _count;
            symbol = _symbol;
            break _L$2;
          }
          case 3: {
            const _ReduceNoLookahead = decision;
            const _count$2 = _ReduceNoLookahead._0;
            const _symbol$2 = _ReduceNoLookahead._1;
            const _action$2 = _ReduceNoLookahead._2;
            action = _action$2;
            count = _count$2;
            symbol = _symbol$2;
            break _L$2;
          }
          default: {
            const _bind$4 = moonbitlang$core$option$$Option$unwrap$162$(lookahead);
            const _x = _bind$4._1;
            const _start_pos = _x._1;
            const _end_pos = _x._2;
            const _token = _bind$4._2;
            const _bind$5 = moonbitlang$ulex$lib$new_frontend$parser$$error(last_shifted_state_stack, _token, { _0: _start_pos, _1: _end_pos });
            if (_bind$5.$tag === 1) {
              const _ok = _bind$5;
              _ok._0;
            } else {
              return _bind$5;
            }
          }
        }
        break _L;
      }
      let _tmp = count;
      let _tmp$2 = symbol;
      let _tmp$3 = action;
      _L$3: while (true) {
        const args = moonbitlang$core$array$$Array$op_as_view$10$(data_stack, data_stack.length - count | 0, undefined);
        const data = action(last_pos.val, args);
        let start_pos;
        let end_pos;
        _L$4: {
          if (args.len === 0) {
            const _tmp$4 = last_pos.val;
            const _tmp$5 = last_pos.val;
            start_pos = _tmp$4;
            end_pos = _tmp$5;
            break _L$4;
          } else {
            const _tmp$4 = moonbitlang$core$array$$ArrayView$op_get$10$(args, 0)._1;
            const _tmp$5 = moonbitlang$core$array$$ArrayView$op_get$10$(args, args.len - 1 | 0)._2;
            start_pos = _tmp$4;
            end_pos = _tmp$5;
            break _L$4;
          }
        }
        let _tmp$4 = 0;
        while (true) {
          const i = _tmp$4;
          if (i < count) {
            moonbitlang$core$array$$Array$unsafe_pop$10$(data_stack);
            state_stack.val = moonbitlang$core$immut$list$$T$tail$9$(state_stack.val);
            _tmp$4 = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        state.val = moonbitlang$core$immut$list$$T$unsafe_head$9$(state_stack.val);
        moonbitlang$core$array$$Array$push$10$(data_stack, { _0: data, _1: start_pos, _2: end_pos });
        let action$2;
        let count$2;
        let symbol$2;
        _L$5: {
          const _func$2 = state.val;
          const _bind$3 = _func$2(symbol);
          switch (_bind$3.$tag) {
            case 0: {
              return new Result$Ok$47$(return_(moonbitlang$core$array$$Array$unsafe_pop$10$(data_stack)._0));
            }
            case 1: {
              const _Shift = _bind$3;
              const _next_state = _Shift._0;
              state_stack.val = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$24$(_next_state, state_stack.val);
              state.val = _next_state;
              break _L$3;
            }
            case 2: {
              const _Reduce = _bind$3;
              const _count = _Reduce._0;
              const _symbol = _Reduce._1;
              const _action = _Reduce._2;
              action$2 = _action;
              count$2 = _count;
              symbol$2 = _symbol;
              break _L$5;
            }
            case 3: {
              const _ReduceNoLookahead = _bind$3;
              const _count$2 = _ReduceNoLookahead._0;
              const _symbol$2 = _ReduceNoLookahead._1;
              const _action$2 = _ReduceNoLookahead._2;
              action$2 = _action$2;
              count$2 = _count$2;
              symbol$2 = _symbol$2;
              break _L$5;
            }
            default: {
              $panic();
              break _L$3;
            }
          }
        }
        _tmp = count$2;
        _tmp$2 = symbol$2;
        _tmp$3 = action$2;
        continue;
      }
    }
    continue;
  }
}
function moonbitlang$ulex$lib$new_frontend$parser$$start(tokens, initial_pos) {
  return moonbitlang$ulex$lib$new_frontend$parser$$yy_parse$211$(tokens, moonbitlang$ulex$lib$new_frontend$parser$$yy_state_0, (_param9) => {
    if (_param9.$tag === 34) {
      const _YYObj__ast_Program = _param9;
      const _result = _YYObj__ast_Program._0;
      return _result;
    } else {
      return $panic();
    }
  }, initial_pos);
}
function moonbitlang$core$builtin$$Show$output$135$(_x_344, _x_345) {
  if (_x_344.$tag === 4) {
    const _UnexpectedToken = _x_344;
    const _$42$arg_346 = _UnexpectedToken._0;
    const _$42$arg_347 = _UnexpectedToken._1;
    const _$42$arg_348 = _UnexpectedToken._2;
    _x_345.method_0(_x_345.self, "UnexpectedToken(");
    moonbitlang$core$builtin$$Logger$write_object$116$(_x_345, _$42$arg_346);
    _x_345.method_0(_x_345.self, ", ");
    const _$42$x0_349 = _$42$arg_347._0;
    const _$42$x1_350 = _$42$arg_347._1;
    _x_345.method_0(_x_345.self, "(");
    moonbitlang$core$builtin$$Logger$write_object$107$(_x_345, _$42$x0_349);
    _x_345.method_0(_x_345.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$107$(_x_345, _$42$x1_350);
    _x_345.method_0(_x_345.self, ")");
    const _self = _x_345;
    _self.method_0(_self.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$117$(_self, _$42$arg_348);
    _self.method_0(_self.self, ")");
    return;
  } else {
    const _UnexpectedEndOfInput = _x_344;
    const _$42$arg_351 = _UnexpectedEndOfInput._0;
    const _$42$arg_352 = _UnexpectedEndOfInput._1;
    _x_345.method_0(_x_345.self, "UnexpectedEndOfInput(");
    moonbitlang$core$builtin$$Logger$write_object$107$(_x_345, _$42$arg_351);
    _x_345.method_0(_x_345.self, ", ");
    moonbitlang$core$builtin$$Logger$write_object$117$(_x_345, _$42$arg_352);
    _x_345.method_0(_x_345.self, ")");
    return;
  }
}
function moonbitlang$core$builtin$$Show$output$116$(_x_324, _x_325) {
  switch (_x_324.$tag) {
    case 0: {
      _x_325.method_0(_x_325.self, "EOF");
      return;
    }
    case 1: {
      const _CHAR = _x_324;
      const _$42$arg_326 = _CHAR._0;
      _x_325.method_0(_x_325.self, "CHAR(");
      moonbitlang$core$builtin$$Logger$write_object$70$(_x_325, _$42$arg_326);
      _x_325.method_0(_x_325.self, ")");
      return;
    }
    case 2: {
      const _CHAR_ESCAPE = _x_324;
      const _$42$arg_327 = _CHAR_ESCAPE._0;
      _x_325.method_0(_x_325.self, "CHAR_ESCAPE(");
      const _$42$x0_328 = _$42$arg_327._0;
      const _$42$x1_329 = _$42$arg_327._1;
      _x_325.method_0(_x_325.self, "(");
      moonbitlang$core$builtin$$Logger$write_object$70$(_x_325, _$42$x0_328);
      _x_325.method_0(_x_325.self, ", ");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_325, _$42$x1_329);
      _x_325.method_0(_x_325.self, ")");
      _x_325.method_0(_x_325.self, ")");
      return;
    }
    case 3: {
      _x_325.method_0(_x_325.self, "DOT");
      return;
    }
    case 4: {
      _x_325.method_0(_x_325.self, "DOLLAR");
      return;
    }
    case 5: {
      _x_325.method_0(_x_325.self, "LBRACKET");
      return;
    }
    case 6: {
      _x_325.method_0(_x_325.self, "RBRACKET");
      return;
    }
    case 7: {
      _x_325.method_0(_x_325.self, "CARET");
      return;
    }
    case 8: {
      _x_325.method_0(_x_325.self, "MINUS");
      return;
    }
    case 9: {
      _x_325.method_0(_x_325.self, "STAR");
      return;
    }
    case 10: {
      _x_325.method_0(_x_325.self, "PLUS");
      return;
    }
    case 11: {
      _x_325.method_0(_x_325.self, "QUESTION");
      return;
    }
    case 12: {
      const _REPEAT = _x_324;
      const _$42$arg_330 = _REPEAT._0;
      _x_325.method_0(_x_325.self, "REPEAT(");
      const _$42$x0_331 = _$42$arg_330._0;
      const _$42$x1_332 = _$42$arg_330._1;
      _x_325.method_0(_x_325.self, "(");
      moonbitlang$core$builtin$$Logger$write_object$7$(_x_325, _$42$x0_331);
      _x_325.method_0(_x_325.self, ", ");
      moonbitlang$core$builtin$$Logger$write_object$15$(_x_325, _$42$x1_332);
      _x_325.method_0(_x_325.self, ")");
      _x_325.method_0(_x_325.self, ")");
      return;
    }
    case 13: {
      _x_325.method_0(_x_325.self, "LPAREN");
      return;
    }
    case 14: {
      _x_325.method_0(_x_325.self, "RPAREN");
      return;
    }
    case 15: {
      _x_325.method_0(_x_325.self, "BAR");
      return;
    }
    default: {
      const _TOKEN = _x_324;
      const _$42$arg_333 = _TOKEN._0;
      _x_325.method_0(_x_325.self, "TOKEN(");
      moonbitlang$core$builtin$$Logger$write_object$0$(_x_325, _$42$arg_333);
      _x_325.method_0(_x_325.self, ")");
      return;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_hex_integer(input) {
  let _tmp = 0;
  let _tmp$2 = { str: input, start: 0, end: input.length };
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (moonbitlang$core$string$$String$char_length_eq(_param$2.str, 0, _param$2.start, _param$2.end)) {
      return _param;
    } else {
      const _x = moonbitlang$core$string$$String$unsafe_char_at(_param$2.str, moonbitlang$core$string$$String$offset_of_nth_char(_param$2.str, 0, _param$2.start, _param$2.end));
      if (_x >= 48 && _x <= 57) {
        const _tmp$3 = _param$2.str;
        const _bind = moonbitlang$core$string$$String$offset_of_nth_char(_param$2.str, 1, _param$2.start, _param$2.end);
        let _tmp$4;
        if (_bind === undefined) {
          _tmp$4 = _param$2.end;
        } else {
          const _Some = _bind;
          _tmp$4 = _Some;
        }
        const _tmp$5 = _tmp$4;
        const _x$2 = { str: _tmp$3, start: _tmp$5, end: _param$2.end };
        const _tmp$6 = (Math.imul(_param, 16) | 0) + (_x - 48 | 0) | 0;
        _tmp = _tmp$6;
        _tmp$2 = _x$2;
        continue;
      } else {
        if (_x >= 65 && _x <= 70) {
          const _tmp$3 = _param$2.str;
          const _bind = moonbitlang$core$string$$String$offset_of_nth_char(_param$2.str, 1, _param$2.start, _param$2.end);
          let _tmp$4;
          if (_bind === undefined) {
            _tmp$4 = _param$2.end;
          } else {
            const _Some = _bind;
            _tmp$4 = _Some;
          }
          const _tmp$5 = _tmp$4;
          const _x$2 = { str: _tmp$3, start: _tmp$5, end: _param$2.end };
          const _tmp$6 = ((Math.imul(_param, 16) | 0) + 10 | 0) + (_x - 65 | 0) | 0;
          _tmp = _tmp$6;
          _tmp$2 = _x$2;
          continue;
        } else {
          if (_x >= 97 && _x <= 102) {
            const _tmp$3 = _param$2.str;
            const _bind = moonbitlang$core$string$$String$offset_of_nth_char(_param$2.str, 1, _param$2.start, _param$2.end);
            let _tmp$4;
            if (_bind === undefined) {
              _tmp$4 = _param$2.end;
            } else {
              const _Some = _bind;
              _tmp$4 = _Some;
            }
            const _tmp$5 = _tmp$4;
            const _x$2 = { str: _tmp$3, start: _tmp$5, end: _param$2.end };
            const _tmp$6 = ((Math.imul(_param, 16) | 0) + 10 | 0) + (_x - 97 | 0) | 0;
            _tmp = _tmp$6;
            _tmp$2 = _x$2;
            continue;
          } else {
            return $panic();
          }
        }
      }
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_integer(input) {
  let _tmp = 0;
  let _tmp$2 = { str: input, start: 0, end: input.length };
  while (true) {
    const _param = _tmp;
    const _param$2 = _tmp$2;
    if (moonbitlang$core$string$$String$char_length_eq(_param$2.str, 0, _param$2.start, _param$2.end)) {
      return _param;
    } else {
      const _x = moonbitlang$core$string$$String$unsafe_char_at(_param$2.str, moonbitlang$core$string$$String$offset_of_nth_char(_param$2.str, 0, _param$2.start, _param$2.end));
      if (_x >= 48 && _x <= 57) {
        const _tmp$3 = _param$2.str;
        const _bind = moonbitlang$core$string$$String$offset_of_nth_char(_param$2.str, 1, _param$2.start, _param$2.end);
        let _tmp$4;
        if (_bind === undefined) {
          _tmp$4 = _param$2.end;
        } else {
          const _Some = _bind;
          _tmp$4 = _Some;
        }
        const _tmp$5 = _tmp$4;
        const _x$2 = { str: _tmp$3, start: _tmp$5, end: _param$2.end };
        const _tmp$6 = (Math.imul(_param, 10) | 0) + (_x - 48 | 0) | 0;
        _tmp = _tmp$6;
        _tmp$2 = _x$2;
        continue;
      } else {
        return $panic();
      }
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$decode_utf8(bytes) {
  const res = moonbitlang$core$builtin$$StringBuilder$new(0);
  const len = bytes.len;
  let i = 0;
  while (true) {
    if (i < len) {
      let c = moonbitlang$core$bytes$$View$op_get(bytes, i);
      if (c === 0) {
        break;
      } else {
        if (c < 128) {
          moonbitlang$core$builtin$$Logger$write_char$40$(res, c);
          i = i + 1 | 0;
        } else {
          if (c < 224) {
            if ((i + 1 | 0) >= len) {
              break;
            }
            c = (c & 31) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63;
            moonbitlang$core$builtin$$Logger$write_char$40$(res, c);
            i = i + 2 | 0;
          } else {
            if (c < 240) {
              if ((i + 2 | 0) >= len) {
                break;
              }
              c = (c & 15) << 12 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 2 | 0) & 63;
              moonbitlang$core$builtin$$Logger$write_char$40$(res, c);
              i = i + 3 | 0;
            } else {
              if ((i + 3 | 0) >= len) {
                break;
              }
              c = (c & 7) << 18 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63) << 12 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 2 | 0) & 63) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 3 | 0) & 63;
              moonbitlang$core$builtin$$Logger$write_char$40$(res, c);
              i = i + 4 | 0;
            }
          }
        }
      }
      continue;
    } else {
      break;
    }
  }
  return res.val;
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_char(self, start, end) {
  return moonbitlang$core$string$$String$unsafe_char_at(moonbitlang$ulex$lib$new_frontend$regex_parser$$decode_utf8(moonbitlang$core$bytes$$Bytes$op_as_view(self.data, start, end)), 0);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(self, start, end) {
  return moonbitlang$ulex$lib$new_frontend$regex_parser$$decode_utf8(moonbitlang$core$bytes$$Bytes$op_as_view(self.data, start, end));
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(self) {
  const cnum = self.pos;
  const end = self.end;
  if (cnum >= end) {
    return -1;
  }
  const _tmp = self.data;
  $bound_check(_tmp, cnum);
  const c = _tmp[cnum];
  if (c < 128) {
    self.pos = self.pos + 1 | 0;
    return c;
  }
  if (c < 224) {
    if ((cnum + 1 | 0) < end) {
      const _tmp$2 = self.data;
      const _tmp$3 = cnum + 1 | 0;
      $bound_check(_tmp$2, _tmp$3);
      const c2 = _tmp$2[_tmp$3];
      self.pos = self.pos + 2 | 0;
      return (c & 31) << 6 | c2 & 63;
    } else {
      $panic();
    }
  }
  if (c < 240) {
    if ((cnum + 2 | 0) < end) {
      const _tmp$2 = self.data;
      const _tmp$3 = cnum + 1 | 0;
      $bound_check(_tmp$2, _tmp$3);
      const c2 = _tmp$2[_tmp$3];
      const _tmp$4 = self.data;
      const _tmp$5 = cnum + 2 | 0;
      $bound_check(_tmp$4, _tmp$5);
      const c3 = _tmp$4[_tmp$5];
      self.pos = self.pos + 3 | 0;
      return (c & 15) << 12 | (c2 & 63) << 6 | c3 & 63;
    } else {
      $panic();
    }
  }
  if ((cnum + 3 | 0) < end) {
    const _tmp$2 = self.data;
    const _tmp$3 = cnum + 1 | 0;
    $bound_check(_tmp$2, _tmp$3);
    const c2 = _tmp$2[_tmp$3];
    const _tmp$4 = self.data;
    const _tmp$5 = cnum + 2 | 0;
    $bound_check(_tmp$4, _tmp$5);
    const c3 = _tmp$4[_tmp$5];
    const _tmp$6 = self.data;
    const _tmp$7 = cnum + 3 | 0;
    $bound_check(_tmp$6, _tmp$7);
    const c4 = _tmp$6[_tmp$7];
    self.pos = self.pos + 4 | 0;
    return (c & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63;
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$reset(self, pos) {
  self.pos = pos;
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$token(lexbuf) {
  let _match_pattern = moonbitlang$core$int$$max_value;
  let _match_start = lexbuf.pos;
  let _match_end = -1;
  let _capture_0_start = -1;
  let _capture_0_end = -1;
  let _capture_1_start = -1;
  let _capture_1_end = -1;
  let _tag_0 = -1;
  let _tag_1 = -1;
  let _tmp = 0;
  _L: while (true) {
    const _param = _tmp;
    switch (_param) {
      case 0: {
        const _bind = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$2;
        if (_bind === -1) {
          _tmp$2 = 1;
        } else {
          if (_bind >= 0 && _bind <= 35) {
            _tmp$2 = 2;
          } else {
            if (_bind === 36) {
              _tmp$2 = 3;
            } else {
              if (_bind >= 37 && _bind <= 39) {
                _tmp$2 = 2;
              } else {
                if (_bind === 40) {
                  _tmp$2 = 4;
                } else {
                  if (_bind === 41) {
                    _tmp$2 = 5;
                  } else {
                    if (_bind === 42) {
                      _tmp$2 = 6;
                    } else {
                      if (_bind === 43) {
                        _tmp$2 = 7;
                      } else {
                        if (_bind === 44) {
                          _tmp$2 = 2;
                        } else {
                          if (_bind === 45) {
                            _tmp$2 = 8;
                          } else {
                            if (_bind === 46) {
                              _tmp$2 = 9;
                            } else {
                              if (_bind >= 47 && _bind <= 62) {
                                _tmp$2 = 2;
                              } else {
                                if (_bind === 63) {
                                  _tmp$2 = 10;
                                } else {
                                  if (_bind >= 64 && _bind <= 90) {
                                    _tmp$2 = 2;
                                  } else {
                                    if (_bind === 91) {
                                      _tmp$2 = 11;
                                    } else {
                                      if (_bind === 92) {
                                        _tmp$2 = 12;
                                      } else {
                                        if (_bind === 93) {
                                          _tmp$2 = 13;
                                        } else {
                                          if (_bind === 94) {
                                            _tmp$2 = 14;
                                          } else {
                                            if (_bind >= 95 && _bind <= 122) {
                                              _tmp$2 = 2;
                                            } else {
                                              if (_bind === 123) {
                                                _tmp$2 = 15;
                                              } else {
                                                if (_bind === 124) {
                                                  _tmp$2 = 16;
                                                } else {
                                                  if (_bind >= 125 && _bind <= 1114111) {
                                                    _tmp$2 = 2;
                                                  } else {
                                                    break _L;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _tmp = _tmp$2;
        continue _L;
      }
      case 1: {
        if (_match_pattern >= 0) {
          _match_pattern = 0;
          _match_end = lexbuf.pos;
        }
        break _L;
      }
      case 2: {
        if (_match_pattern >= 30) {
          _match_pattern = 30;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 1 | 0;
        }
        break _L;
      }
      case 3: {
        if (_match_pattern >= 2) {
          _match_pattern = 2;
          _match_end = lexbuf.pos;
        }
        break _L;
      }
      case 4: {
        if (_match_pattern >= 13) {
          _match_pattern = 13;
          _match_end = lexbuf.pos;
        }
        break _L;
      }
      case 5: {
        if (_match_pattern >= 14) {
          _match_pattern = 14;
          _match_end = lexbuf.pos;
        }
        break _L;
      }
      case 6: {
        if (_match_pattern >= 7) {
          _match_pattern = 7;
          _match_end = lexbuf.pos;
        }
        break _L;
      }
      case 7: {
        if (_match_pattern >= 8) {
          _match_pattern = 8;
          _match_end = lexbuf.pos;
        }
        break _L;
      }
      case 8: {
        if (_match_pattern >= 6) {
          _match_pattern = 6;
          _match_end = lexbuf.pos;
        }
        break _L;
      }
      case 9: {
        if (_match_pattern >= 1) {
          _match_pattern = 1;
          _match_end = lexbuf.pos;
        }
        break _L;
      }
      case 10: {
        if (_match_pattern >= 9) {
          _match_pattern = 9;
          _match_end = lexbuf.pos;
        }
        break _L;
      }
      case 11: {
        if (_match_pattern >= 3) {
          _match_pattern = 3;
          _match_end = lexbuf.pos;
        }
        break _L;
      }
      case 12: {
        if (_match_pattern >= 30) {
          _match_pattern = 30;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 1 | 0;
        }
        const _bind$2 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$3;
        if (_bind$2 === 92) {
          _tmp$3 = 17;
        } else {
          break _L;
        }
        _tmp = _tmp$3;
        continue _L;
      }
      case 13: {
        if (_match_pattern >= 4) {
          _match_pattern = 4;
          _match_end = lexbuf.pos;
        }
        break _L;
      }
      case 14: {
        if (_match_pattern >= 5) {
          _match_pattern = 5;
          _match_end = lexbuf.pos;
        }
        break _L;
      }
      case 15: {
        if (_match_pattern >= 30) {
          _match_pattern = 30;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 1 | 0;
        }
        const _bind$3 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$4;
        if (_bind$3 === 48) {
          _tmp$4 = 18;
        } else {
          if (_bind$3 >= 49 && _bind$3 <= 57) {
            _tmp$4 = 19;
          } else {
            break _L;
          }
        }
        _tmp = _tmp$4;
        continue _L;
      }
      case 16: {
        if (_match_pattern >= 15) {
          _match_pattern = 15;
          _match_end = lexbuf.pos;
        }
        break _L;
      }
      case 17: {
        const _bind$4 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$5;
        switch (_bind$4) {
          case 36: {
            _tmp$5 = 20;
            break;
          }
          case 40: {
            _tmp$5 = 21;
            break;
          }
          case 41: {
            _tmp$5 = 22;
            break;
          }
          case 42: {
            _tmp$5 = 23;
            break;
          }
          case 43: {
            _tmp$5 = 24;
            break;
          }
          case 46: {
            _tmp$5 = 25;
            break;
          }
          case 63: {
            _tmp$5 = 26;
            break;
          }
          case 91: {
            _tmp$5 = 27;
            break;
          }
          case 92: {
            _tmp$5 = 28;
            break;
          }
          case 93: {
            _tmp$5 = 29;
            break;
          }
          case 94: {
            _tmp$5 = 30;
            break;
          }
          case 117: {
            _tmp$5 = 31;
            break;
          }
          case 124: {
            _tmp$5 = 32;
            break;
          }
          default: {
            break _L;
          }
        }
        _tmp = _tmp$5;
        continue _L;
      }
      case 18: {
        _tag_0 = lexbuf.pos;
        const _bind$5 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$6;
        switch (_bind$5) {
          case 44: {
            _tmp$6 = 33;
            break;
          }
          case 125: {
            _tmp$6 = 34;
            break;
          }
          default: {
            break _L;
          }
        }
        _tmp = _tmp$6;
        continue _L;
      }
      case 19: {
        _tag_0 = lexbuf.pos;
        const _bind$6 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$7;
        if (_bind$6 === 44) {
          _tmp$7 = 33;
        } else {
          if (_bind$6 >= 48 && _bind$6 <= 57) {
            _tmp$7 = 19;
          } else {
            if (_bind$6 === 125) {
              _tmp$7 = 34;
            } else {
              break _L;
            }
          }
        }
        _tmp = _tmp$7;
        continue _L;
      }
      case 20: {
        if (_match_pattern >= 22) {
          _match_pattern = 22;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 3 | 0;
        }
        break _L;
      }
      case 21: {
        if (_match_pattern >= 17) {
          _match_pattern = 17;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 3 | 0;
        }
        break _L;
      }
      case 22: {
        if (_match_pattern >= 18) {
          _match_pattern = 18;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 3 | 0;
        }
        break _L;
      }
      case 23: {
        if (_match_pattern >= 25) {
          _match_pattern = 25;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 3 | 0;
        }
        break _L;
      }
      case 24: {
        if (_match_pattern >= 24) {
          _match_pattern = 24;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 3 | 0;
        }
        break _L;
      }
      case 25: {
        if (_match_pattern >= 21) {
          _match_pattern = 21;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 3 | 0;
        }
        break _L;
      }
      case 26: {
        if (_match_pattern >= 26) {
          _match_pattern = 26;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 3 | 0;
        }
        break _L;
      }
      case 27: {
        if (_match_pattern >= 19) {
          _match_pattern = 19;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 3 | 0;
        }
        break _L;
      }
      case 28: {
        const _bind$7 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$8;
        if (_bind$7 === 92) {
          _tmp$8 = 37;
        } else {
          break _L;
        }
        _tmp = _tmp$8;
        continue _L;
      }
      case 29: {
        if (_match_pattern >= 20) {
          _match_pattern = 20;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 3 | 0;
        }
        break _L;
      }
      case 30: {
        if (_match_pattern >= 23) {
          _match_pattern = 23;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 3 | 0;
        }
        break _L;
      }
      case 31: {
        const _bind$8 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$9;
        if (_bind$8 >= 48 && _bind$8 <= 57) {
          _tmp$9 = 35;
        } else {
          if (_bind$8 >= 65 && _bind$8 <= 70) {
            _tmp$9 = 35;
          } else {
            if (_bind$8 >= 97 && _bind$8 <= 102) {
              _tmp$9 = 35;
            } else {
              if (_bind$8 === 123) {
                _tmp$9 = 36;
              } else {
                break _L;
              }
            }
          }
        }
        _tmp = _tmp$9;
        continue _L;
      }
      case 32: {
        if (_match_pattern >= 27) {
          _match_pattern = 27;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 3 | 0;
        }
        break _L;
      }
      case 33: {
        _tag_1 = lexbuf.pos;
        const _bind$9 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$10;
        if (_bind$9 === 48) {
          _tmp$10 = 38;
        } else {
          if (_bind$9 >= 49 && _bind$9 <= 57) {
            _tmp$10 = 39;
          } else {
            if (_bind$9 === 125) {
              _tmp$10 = 40;
            } else {
              break _L;
            }
          }
        }
        _tmp = _tmp$10;
        continue _L;
      }
      case 34: {
        if (_match_pattern >= 12) {
          _match_pattern = 12;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start + 1 | 0;
          _capture_0_end = _match_end + -1 | 0;
        }
        break _L;
      }
      case 35: {
        const _bind$10 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$11;
        if (_bind$10 >= 48 && _bind$10 <= 57) {
          _tmp$11 = 41;
        } else {
          if (_bind$10 >= 65 && _bind$10 <= 70) {
            _tmp$11 = 41;
          } else {
            if (_bind$10 >= 97 && _bind$10 <= 102) {
              _tmp$11 = 41;
            } else {
              break _L;
            }
          }
        }
        _tmp = _tmp$11;
        continue _L;
      }
      case 36: {
        const _bind$11 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$12;
        if (_bind$11 >= 48 && _bind$11 <= 57) {
          _tmp$12 = 42;
        } else {
          if (_bind$11 >= 65 && _bind$11 <= 70) {
            _tmp$12 = 42;
          } else {
            if (_bind$11 >= 97 && _bind$11 <= 102) {
              _tmp$12 = 42;
            } else {
              break _L;
            }
          }
        }
        _tmp = _tmp$12;
        continue _L;
      }
      case 37: {
        if (_match_pattern >= 16) {
          _match_pattern = 16;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 4 | 0;
        }
        break _L;
      }
      case 38: {
        const _bind$12 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$13;
        if (_bind$12 === 125) {
          _tmp$13 = 43;
        } else {
          break _L;
        }
        _tmp = _tmp$13;
        continue _L;
      }
      case 39: {
        const _bind$13 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$14;
        if (_bind$13 >= 48 && _bind$13 <= 57) {
          _tmp$14 = 39;
        } else {
          if (_bind$13 === 125) {
            _tmp$14 = 43;
          } else {
            break _L;
          }
        }
        _tmp = _tmp$14;
        continue _L;
      }
      case 40: {
        if (_match_pattern >= 11) {
          _match_pattern = 11;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start + 1 | 0;
          _capture_0_end = _match_end + -2 | 0;
        }
        break _L;
      }
      case 41: {
        const _bind$14 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$15;
        if (_bind$14 >= 48 && _bind$14 <= 57) {
          _tmp$15 = 44;
        } else {
          if (_bind$14 >= 65 && _bind$14 <= 70) {
            _tmp$15 = 44;
          } else {
            if (_bind$14 >= 97 && _bind$14 <= 102) {
              _tmp$15 = 44;
            } else {
              break _L;
            }
          }
        }
        _tmp = _tmp$15;
        continue _L;
      }
      case 42: {
        const _bind$15 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$16;
        if (_bind$15 >= 48 && _bind$15 <= 57) {
          _tmp$16 = 42;
        } else {
          if (_bind$15 >= 65 && _bind$15 <= 70) {
            _tmp$16 = 42;
          } else {
            if (_bind$15 >= 97 && _bind$15 <= 102) {
              _tmp$16 = 42;
            } else {
              if (_bind$15 === 125) {
                _tmp$16 = 45;
              } else {
                break _L;
              }
            }
          }
        }
        _tmp = _tmp$16;
        continue _L;
      }
      case 43: {
        if (_match_pattern >= 10) {
          _match_pattern = 10;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start + 1 | 0;
          _capture_0_end = _tag_0;
          _capture_1_start = _tag_1;
          _capture_1_end = _match_end + -1 | 0;
        }
        break _L;
      }
      case 44: {
        const _bind$16 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$next_as_int(lexbuf);
        let _tmp$17;
        if (_bind$16 >= 48 && _bind$16 <= 57) {
          _tmp$17 = 46;
        } else {
          if (_bind$16 >= 65 && _bind$16 <= 70) {
            _tmp$17 = 46;
          } else {
            if (_bind$16 >= 97 && _bind$16 <= 102) {
              _tmp$17 = 46;
            } else {
              break _L;
            }
          }
        }
        _tmp = _tmp$17;
        continue _L;
      }
      case 45: {
        if (_match_pattern >= 28) {
          _match_pattern = 28;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_end;
          _capture_1_start = _match_start + 4 | 0;
          _capture_1_end = _match_end + -1 | 0;
        }
        break _L;
      }
      case 46: {
        if (_match_pattern >= 29) {
          _match_pattern = 29;
          _match_end = lexbuf.pos;
          _capture_0_start = _match_start;
          _capture_0_end = _match_start + 7 | 0;
          _capture_1_start = _match_start + 3 | 0;
          _capture_1_end = _match_start + 7 | 0;
        }
        break _L;
      }
      default: {
        $panic();
        break _L;
      }
    }
  }
  if (_match_pattern <= 30) {
    moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$reset(lexbuf, _match_end);
    const _bind = _match_pattern;
    switch (_bind) {
      case 0: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$EOF, _1: _match_start, _2: _match_end };
      }
      case 1: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$DOT, _1: _match_start, _2: _match_end };
      }
      case 2: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$DOLLAR, _1: _match_start, _2: _match_end };
      }
      case 3: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$LBRACKET, _1: _match_start, _2: _match_end };
      }
      case 4: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$RBRACKET, _1: _match_start, _2: _match_end };
      }
      case 5: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CARET, _1: _match_start, _2: _match_end };
      }
      case 6: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$MINUS, _1: _match_start, _2: _match_end };
      }
      case 7: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$STAR, _1: _match_start, _2: _match_end };
      }
      case 8: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$PLUS, _1: _match_start, _2: _match_end };
      }
      case 9: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$QUESTION, _1: _match_start, _2: _match_end };
      }
      case 10: {
        const t1 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        const t2 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_1_start, _capture_1_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$REPEAT({ _0: moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_integer(t1), _1: moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_integer(t2) }), _1: _match_start, _2: _match_end };
      }
      case 11: {
        const t = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$REPEAT({ _0: moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_integer(t), _1: undefined }), _1: _match_start, _2: _match_end };
      }
      case 12: {
        const t$2 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        const n = moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_integer(t$2);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$REPEAT({ _0: n, _1: n }), _1: _match_start, _2: _match_end };
      }
      case 13: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$LPAREN, _1: _match_start, _2: _match_end };
      }
      case 14: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$RPAREN, _1: _match_start, _2: _match_end };
      }
      case 15: {
        return { _0: $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$BAR, _1: _match_start, _2: _match_end };
      }
      case 16: {
        const t$3 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 92, _1: t$3 }), _1: _match_start, _2: _match_end };
      }
      case 17: {
        const t$4 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 40, _1: t$4 }), _1: _match_start, _2: _match_end };
      }
      case 18: {
        const t$5 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 41, _1: t$5 }), _1: _match_start, _2: _match_end };
      }
      case 19: {
        const t$6 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 91, _1: t$6 }), _1: _match_start, _2: _match_end };
      }
      case 20: {
        const t$7 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 93, _1: t$7 }), _1: _match_start, _2: _match_end };
      }
      case 21: {
        const t$8 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 46, _1: t$8 }), _1: _match_start, _2: _match_end };
      }
      case 22: {
        const t$9 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 36, _1: t$9 }), _1: _match_start, _2: _match_end };
      }
      case 23: {
        const t$10 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 94, _1: t$10 }), _1: _match_start, _2: _match_end };
      }
      case 24: {
        const t$11 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 43, _1: t$11 }), _1: _match_start, _2: _match_end };
      }
      case 25: {
        const t$12 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 42, _1: t$12 }), _1: _match_start, _2: _match_end };
      }
      case 26: {
        const t$13 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 63, _1: t$13 }), _1: _match_start, _2: _match_end };
      }
      case 27: {
        const t$14 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: 124, _1: t$14 }), _1: _match_start, _2: _match_end };
      }
      case 28: {
        const t$15 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        const t1$2 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_1_start, _capture_1_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_hex_integer(t1$2), _1: t$15 }), _1: _match_start, _2: _match_end };
      }
      case 29: {
        const t$16 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_0_start, _capture_0_end);
        const t1$3 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_string(lexbuf, _capture_1_start, _capture_1_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR_ESCAPE({ _0: moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_hex_integer(t1$3), _1: t$16 }), _1: _match_start, _2: _match_end };
      }
      case 30: {
        const t$17 = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$get_char(lexbuf, _capture_0_start, _capture_0_end);
        return { _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$CHAR(t$17), _1: _match_start, _2: _match_end };
      }
      default: {
        return $panic();
      }
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$from_string(string) {
  return { data: moonbitlang$x$encoding$$encode(0, string), end: string.length, pos: 0 };
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$tokenize_string_literal(lit, initial_pos) {
  const lexbuf = moonbitlang$ulex$lib$new_frontend$regex_parser$$Lexbuf$from_string(lit);
  const _p = (yield_) => {
    while (true) {
      const _bind = moonbitlang$ulex$lib$new_frontend$regex_parser$$token(lexbuf);
      const _tok = _bind._0;
      const _start = _bind._1;
      const _end = _bind._2;
      let _tmp;
      if (_tok.$tag === 0) {
        _tmp = true;
      } else {
        _tmp = false;
      }
      if (!_tmp) {
        const _bind$2 = yield_({ _0: _tok, _1: { fname: initial_pos.fname, lnum: initial_pos.lnum, bol: initial_pos.bol, cnum: _start }, _2: { fname: initial_pos.fname, lnum: initial_pos.lnum, bol: initial_pos.bol, cnum: _end } });
        if (_bind$2 === 0) {
          return 0;
        }
        continue;
      } else {
        return 1;
      }
    }
  };
  return _p;
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$error(stack, token, loc) {
  const expected = [];
  const _arr = [{ _0: 0, _1: 0 }, { _0: 1, _1: 1 }, { _0: 2, _1: 2 }, { _0: 3, _1: 3 }, { _0: 4, _1: 4 }, { _0: 5, _1: 5 }, { _0: 6, _1: 6 }, { _0: 7, _1: 7 }, { _0: 8, _1: 8 }, { _0: 9, _1: 9 }, { _0: 10, _1: 10 }, { _0: 11, _1: 11 }, { _0: 12, _1: 12 }, { _0: 13, _1: 13 }, { _0: 14, _1: 14 }, { _0: 15, _1: 15 }, { _0: 16, _1: 16 }];
  const _len = _arr.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const term = _arr[_i];
      const kind = term._1;
      const symbol = term._0;
      let stack$2;
      _L: {
        stack$2 = stack;
        break _L;
      }
      let _tmp$2 = stack$2;
      _L$2: while (true) {
        const stack$3 = _tmp$2;
        if (stack$3.$tag === 0) {
          break;
        } else {
          const _Cons = stack$3;
          const _state = _Cons._0;
          let count;
          let symbol$2;
          _L$3: {
            _L$4: {
              const _bind = _state(symbol);
              switch (_bind.$tag) {
                case 0: {
                  break _L$4;
                }
                case 1: {
                  break _L$4;
                }
                case 2: {
                  const _Reduce = _bind;
                  const _count = _Reduce._0;
                  const _symbol = _Reduce._1;
                  count = _count;
                  symbol$2 = _symbol;
                  break _L$3;
                }
                case 3: {
                  const _ReduceNoLookahead = _bind;
                  const _count$2 = _ReduceNoLookahead._0;
                  const _symbol$2 = _ReduceNoLookahead._1;
                  count = _count$2;
                  symbol$2 = _symbol$2;
                  break _L$3;
                }
                default: {
                  break _L$2;
                }
              }
            }
            moonbitlang$core$array$$Array$push$123$(expected, kind);
            break;
          }
          let stack$4;
          let count$2;
          let symbol$3;
          _L$4: {
            stack$4 = stack$3;
            count$2 = count;
            symbol$3 = symbol$2;
            break _L$4;
          }
          let _tmp$3 = stack$4;
          let _tmp$4 = count$2;
          let _tmp$5 = symbol$3;
          _L$5: while (true) {
            const stack$5 = _tmp$3;
            const count$3 = _tmp$4;
            const symbol$4 = _tmp$5;
            const stack$6 = moonbitlang$core$immut$list$$T$drop$22$(stack$5, count$3);
            if (stack$6.$tag === 1) {
              const _Cons$2 = stack$6;
              const _state$2 = _Cons$2._0;
              let count$4;
              let symbol$5;
              _L$6: {
                const _bind = _state$2(symbol$4);
                switch (_bind.$tag) {
                  case 1: {
                    const _Shift = _bind;
                    const _state$3 = _Shift._0;
                    _tmp$2 = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$26$(_state$3, stack$6);
                    continue _L$2;
                  }
                  case 2: {
                    const _Reduce = _bind;
                    const _count = _Reduce._0;
                    const _symbol = _Reduce._1;
                    count$4 = _count;
                    symbol$5 = _symbol;
                    break _L$6;
                  }
                  case 3: {
                    const _ReduceNoLookahead = _bind;
                    const _count$2 = _ReduceNoLookahead._0;
                    const _symbol$2 = _ReduceNoLookahead._1;
                    count$4 = _count$2;
                    symbol$5 = _symbol$2;
                    break _L$6;
                  }
                  default: {
                    $panic();
                    break _L$2;
                  }
                }
              }
              _tmp$3 = stack$6;
              _tmp$4 = count$4;
              _tmp$5 = symbol$5;
              continue;
            } else {
              $panic();
              break _L$2;
            }
          }
        }
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (token === undefined) {
    return new Result$Err$48$(new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$ParseError$46$UnexpectedEndOfInput(loc._1, expected));
  } else {
    const _Some = token;
    const _token = _Some;
    return new Result$Err$48$(new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$ParseError$46$UnexpectedToken(_token, loc, expected));
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_input(token, _start_pos, _end_pos) {
  switch (token.$tag) {
    case 0: {
      return { _0: 0, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 1: {
      const _CHAR = token;
      const _data = _CHAR._0;
      return { _0: 1, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Char$46$YYObj_Char(_data) };
    }
    case 2: {
      const _CHAR_ESCAPE = token;
      const _data$2 = _CHAR_ESCAPE._0;
      return { _0: 2, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Char__String_$46$YYObj__Char__String_(_data$2) };
    }
    case 3: {
      return { _0: 3, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 4: {
      return { _0: 4, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 5: {
      return { _0: 5, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 6: {
      return { _0: 6, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 7: {
      return { _0: 7, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 8: {
      return { _0: 8, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 9: {
      return { _0: 9, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 10: {
      return { _0: 10, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 11: {
      return { _0: 11, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 12: {
      const _REPEAT = token;
      const _data$3 = _REPEAT._0;
      return { _0: 12, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Int__Int__$46$YYObj__Int__Int__(_data$3) };
    }
    case 13: {
      return { _0: 13, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 14: {
      return { _0: 14, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    case 15: {
      return { _0: 15, _1: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void };
    }
    default: {
      const _TOKEN = token;
      const _data$4 = _TOKEN._0;
      return { _0: 16, _1: new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_String$46$YYObj_String(_data$4) };
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_parse$212$(tokens, start, return_, initial_pos) {
  let cursor = 0;
  const state_stack = { val: new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$26$(start, $64$moonbitlang$47$core$47$immut$47$list$46$T$Nil$26$) };
  const data_stack = [];
  const last_pos = { val: moonbitlang$core$option$$Option$or$107$(initial_pos, moonbitlang$core$array$$Array$op_get$142$(tokens, 0)._1) };
  const state = { val: start };
  let lookahead = undefined;
  let last_shifted_state_stack = state_stack.val;
  while (true) {
    let decision;
    const _func = state.val;
    const _bind = _func(26);
    switch (_bind.$tag) {
      case 3: {
        decision = _bind;
        break;
      }
      case 0: {
        decision = _bind;
        break;
      }
      default: {
        const _bind$2 = lookahead;
        if (_bind$2 === undefined) {
          if (cursor < tokens.length) {
            const _bind$3 = moonbitlang$core$array$$Array$op_get$142$(tokens, cursor);
            const _token = _bind$3._0;
            const _start_pos = _bind$3._1;
            const _end_pos = _bind$3._2;
            cursor = cursor + 1 | 0;
            const _bind$4 = moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_input(_token, _start_pos, _end_pos);
            const _symbol = _bind$4._0;
            const _data = _bind$4._1;
            lookahead = { _0: _symbol, _1: { _0: _data, _1: _start_pos, _2: _end_pos }, _2: _token };
            const _func$2 = state.val;
            decision = _func$2(_symbol);
          } else {
            lookahead = { _0: 26, _1: { _0: Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Void$46$YYObj_Void, _1: last_pos.val, _2: last_pos.val }, _2: undefined };
            const _func$2 = state.val;
            decision = _func$2(26);
          }
        } else {
          const _Some = _bind$2;
          const _la = _Some;
          const _func$2 = state.val;
          decision = _func$2(_la._0);
        }
      }
    }
    let action;
    let count;
    let symbol;
    _L: {
      _L$2: {
        switch (decision.$tag) {
          case 0: {
            return new Result$Ok$49$(return_(moonbitlang$core$array$$Array$unsafe_pop$10$(data_stack)._0));
          }
          case 1: {
            const _Shift = decision;
            const _next_state = _Shift._0;
            const _bind$3 = lookahead;
            if (_bind$3 === undefined) {
              $panic();
            } else {
              const _Some = _bind$3;
              const _la = _Some;
              moonbitlang$core$array$$Array$push$10$(data_stack, _la._1);
              state_stack.val = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$26$(_next_state, state_stack.val);
              last_shifted_state_stack = state_stack.val;
              state.val = _next_state;
              last_pos.val = _la._1._2;
              lookahead = undefined;
            }
            break;
          }
          case 2: {
            const _Reduce = decision;
            const _count = _Reduce._0;
            const _symbol = _Reduce._1;
            const _action = _Reduce._2;
            action = _action;
            count = _count;
            symbol = _symbol;
            break _L$2;
          }
          case 3: {
            const _ReduceNoLookahead = decision;
            const _count$2 = _ReduceNoLookahead._0;
            const _symbol$2 = _ReduceNoLookahead._1;
            const _action$2 = _ReduceNoLookahead._2;
            action = _action$2;
            count = _count$2;
            symbol = _symbol$2;
            break _L$2;
          }
          default: {
            const _bind$4 = moonbitlang$core$option$$Option$unwrap$165$(lookahead);
            const _x = _bind$4._1;
            const _start_pos = _x._1;
            const _end_pos = _x._2;
            const _token = _bind$4._2;
            const _bind$5 = moonbitlang$ulex$lib$new_frontend$regex_parser$$error(last_shifted_state_stack, _token, { _0: _start_pos, _1: _end_pos });
            if (_bind$5.$tag === 1) {
              const _ok = _bind$5;
              _ok._0;
            } else {
              return _bind$5;
            }
          }
        }
        break _L;
      }
      let _tmp = count;
      let _tmp$2 = symbol;
      let _tmp$3 = action;
      _L$3: while (true) {
        const args = moonbitlang$core$array$$Array$op_as_view$10$(data_stack, data_stack.length - count | 0, undefined);
        const data = action(last_pos.val, args);
        let start_pos;
        let end_pos;
        _L$4: {
          if (args.len === 0) {
            const _tmp$4 = last_pos.val;
            const _tmp$5 = last_pos.val;
            start_pos = _tmp$4;
            end_pos = _tmp$5;
            break _L$4;
          } else {
            const _tmp$4 = moonbitlang$core$array$$ArrayView$op_get$10$(args, 0)._1;
            const _tmp$5 = moonbitlang$core$array$$ArrayView$op_get$10$(args, args.len - 1 | 0)._2;
            start_pos = _tmp$4;
            end_pos = _tmp$5;
            break _L$4;
          }
        }
        let _tmp$4 = 0;
        while (true) {
          const i = _tmp$4;
          if (i < count) {
            moonbitlang$core$array$$Array$unsafe_pop$10$(data_stack);
            state_stack.val = moonbitlang$core$immut$list$$T$tail$22$(state_stack.val);
            _tmp$4 = i + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        state.val = moonbitlang$core$immut$list$$T$unsafe_head$22$(state_stack.val);
        moonbitlang$core$array$$Array$push$10$(data_stack, { _0: data, _1: start_pos, _2: end_pos });
        let action$2;
        let count$2;
        let symbol$2;
        _L$5: {
          const _func$2 = state.val;
          const _bind$3 = _func$2(symbol);
          switch (_bind$3.$tag) {
            case 0: {
              return new Result$Ok$49$(return_(moonbitlang$core$array$$Array$unsafe_pop$10$(data_stack)._0));
            }
            case 1: {
              const _Shift = _bind$3;
              const _next_state = _Shift._0;
              state_stack.val = new $64$moonbitlang$47$core$47$immut$47$list$46$T$Cons$26$(_next_state, state_stack.val);
              state.val = _next_state;
              break _L$3;
            }
            case 2: {
              const _Reduce = _bind$3;
              const _count = _Reduce._0;
              const _symbol = _Reduce._1;
              const _action = _Reduce._2;
              action$2 = _action;
              count$2 = _count;
              symbol$2 = _symbol;
              break _L$5;
            }
            case 3: {
              const _ReduceNoLookahead = _bind$3;
              const _count$2 = _ReduceNoLookahead._0;
              const _symbol$2 = _ReduceNoLookahead._1;
              const _action$2 = _ReduceNoLookahead._2;
              action$2 = _action$2;
              count$2 = _count$2;
              symbol$2 = _symbol$2;
              break _L$5;
            }
            default: {
              $panic();
              break _L$3;
            }
          }
        }
        _tmp = count$2;
        _tmp$2 = symbol$2;
        _tmp$3 = action$2;
        continue;
      }
    }
    continue;
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_1(_lookahead) {
  return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Accept;
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_24(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((_ctx) => moonbitlang$ulex$lib$regex$$eof);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_15(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 21, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_24);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_3(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((_ctx) => moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$any, undefined));
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_16(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 21, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_3);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_11(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((_ctx) => moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$singleton(45), undefined));
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_17(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 21, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_11);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_0(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj_Char = _bind;
    const __dollar1 = _YYObj_Char._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((_ctx) => moonbitlang$ulex$lib$regex$$char_class(moonbitlang$ulex$lib$util$char_set$$singleton(__dollar1), undefined));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_18(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 21, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_0);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_14(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 49) {
    const _YYObj__char_set_T = _bind;
    const __dollar1 = _YYObj__char_set_T._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((_ctx) => moonbitlang$ulex$lib$regex$$char_class(__dollar1, undefined));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_19(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 21, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_14);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_10(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 45) {
    const _YYObj__Char__String_ = _bind;
    const __dollar1 = _YYObj__Char__String_._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Char$46$YYObj_Char(__dollar1._0);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 25, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_10);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_7(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 47) {
    const _YYObj_String = _bind;
    const __dollar1 = _YYObj_String._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => moonbitlang$core$option$$Option$unwrap$167$(moonbitlang$core$immut$sorted_map$$T$get$82$(ctx.named_regexes, __dollar1)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_20(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 21, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_7);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_4(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 1)._0;
  if (_bind.$tag === 48) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar2 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => __dollar2(ctx));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_23(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(3, 21, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_4);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_22(_lookahead) {
  if (_lookahead === 14) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_23);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_12(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 48) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_17(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 48) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 1)._0;
    if (_bind$2.$tag === 46) {
      const _YYObj__Int__Int__ = _bind$2;
      const __dollar2 = _YYObj__Int__Int__._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => moonbitlang$ulex$lib$regex$$repeat(__dollar1(ctx), __dollar2._0, __dollar2._1));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_25(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(2, 20, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_17);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_8(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 48) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => moonbitlang$ulex$lib$regex$$opt(__dollar1(ctx)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_26(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(2, 20, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_8);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_21(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 48) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => moonbitlang$ulex$lib$regex$$plus(__dollar1(ctx)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_27(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(2, 20, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_21);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_2(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 48) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => moonbitlang$ulex$lib$regex$$star(__dollar1(ctx)));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_28(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(2, 20, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_2);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_24(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 12: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_25);
      }
      case 11: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_26);
      }
      case 10: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_27);
      }
      case 9: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_28);
      }
      case 1: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 3: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 5: {
        break _L;
      }
      case 8: {
        break _L;
      }
      case 13: {
        break _L;
      }
      case 14: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 16: {
        break _L;
      }
      case 26: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(1, 20, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_12);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_19(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 48) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_6(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj_Char = _bind;
    const __dollar1 = _YYObj_Char._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj_Char$46$YYObj_Char(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 25, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_6);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_18(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 48) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 1)._0;
    if (_bind$2.$tag === 48) {
      const _YYObj__Context_____Regex$2 = _bind$2;
      const __dollar2 = _YYObj__Context_____Regex$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => moonbitlang$ulex$lib$regex$$seq(__dollar1(ctx), __dollar2(ctx)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_30(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(2, 19, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_18);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_16(_last_pos, _args) {
  return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$empty);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_5(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._0;
  if (_bind.$tag === 49) {
    const _YYObj__char_set_T = _bind;
    const __dollar3 = _YYObj__char_set_T._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$CharSet$complement(__dollar3));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_12(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(4, 22, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_5);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_11(_lookahead) {
  if (_lookahead === 6) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_12);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_9(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj_Char = _bind;
    const __dollar1 = _YYObj_Char._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$singleton(__dollar1));
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_1(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 44) {
    const _YYObj_Char = _bind;
    const __dollar1 = _YYObj_Char._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._0;
    if (_bind$2.$tag === 44) {
      const _YYObj_Char$2 = _bind$2;
      const __dollar3 = _YYObj_Char$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$range(__dollar1, __dollar3));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_7(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(3, 24, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_1);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_6(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_7);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_5(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 8: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_6);
      }
      case 1: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 6: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(1, 24, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_9);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_15(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 49) {
    const _YYObj__char_set_T = _bind;
    const __dollar1 = _YYObj__char_set_T._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 1)._0;
    if (_bind$2.$tag === 49) {
      const _YYObj__char_set_T$2 = _bind$2;
      const __dollar2 = _YYObj__char_set_T$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T(moonbitlang$ulex$lib$util$char_set$$CharSet$union(__dollar1, __dollar2));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_9(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(2, 23, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_15);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_8(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_5);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_8);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_9);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(0, 23, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_16);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_10(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_5);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_8);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_11);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(0, 23, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_16);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_13(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 1)._0;
  if (_bind.$tag === 49) {
    const _YYObj__char_set_T = _bind;
    const __dollar2 = _YYObj__char_set_T._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__char_set_T$46$YYObj__char_set_T(__dollar2);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_14(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(3, 22, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_13);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_13(_lookahead) {
  if (_lookahead === 6) {
    return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_14);
  } else {
    return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_4(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_5);
    }
    case 24: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_8);
    }
    case 7: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_10);
    }
    case 23: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_13);
    }
    case 6: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(0, 23, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_16);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_20(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 48) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_23(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 48) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    const _bind$2 = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 2)._0;
    if (_bind$2.$tag === 48) {
      const _YYObj__Context_____Regex$2 = _bind$2;
      const __dollar3 = _YYObj__Context_____Regex$2._0;
      return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex((ctx) => moonbitlang$ulex$lib$regex$$alt(__dollar1(ctx), __dollar3(ctx)));
    } else {
      return $panic();
    }
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_33(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(3, 18, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_23);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_21(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_4);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_15);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_16);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_17);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_18);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_19);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_20);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_21);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_22);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_24);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_29);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_31);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_29(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 2: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
      }
      case 1: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
      }
      case 5: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_4);
      }
      case 4: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_15);
      }
      case 3: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_16);
      }
      case 8: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_17);
      }
      case 25: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_18);
      }
      case 22: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_19);
      }
      case 16: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_20);
      }
      case 13: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_21);
      }
      case 21: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_24);
      }
      case 20: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_29);
      }
      case 19: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_30);
      }
      case 14: {
        break _L;
      }
      case 15: {
        break _L;
      }
      case 26: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(1, 19, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_19);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_31(_lookahead) {
  _L: {
    switch (_lookahead) {
      case 15: {
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_32);
      }
      case 14: {
        break _L;
      }
      case 26: {
        break _L;
      }
      default: {
        return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
      }
    }
  }
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Reduce(1, 18, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_20);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_32(_lookahead) {
  switch (_lookahead) {
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_4);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_15);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_16);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_17);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_18);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_19);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_20);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_21);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_24);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_29);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_31);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_33);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_22(_last_pos, _args) {
  const _bind = moonbitlang$core$array$$ArrayView$op_get$10$(_args, 0)._0;
  if (_bind.$tag === 48) {
    const _YYObj__Context_____Regex = _bind;
    const __dollar1 = _YYObj__Context_____Regex._0;
    return new Error$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYObj__Context_____Regex$46$YYObj__Context_____Regex(__dollar1);
  } else {
    return $panic();
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_34(_lookahead) {
  return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$ReduceNoLookahead(1, 17, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_action_22);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_0(_lookahead) {
  switch (_lookahead) {
    case 17: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_1);
    }
    case 2: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_2);
    }
    case 1: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_3);
    }
    case 5: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_4);
    }
    case 4: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_15);
    }
    case 3: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_16);
    }
    case 8: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_17);
    }
    case 25: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_18);
    }
    case 22: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_19);
    }
    case 16: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_20);
    }
    case 13: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_21);
    }
    case 21: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_24);
    }
    case 20: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_29);
    }
    case 19: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_31);
    }
    case 18: {
      return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Shift(moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_34);
    }
    default: {
      return $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$YYDecision$Error;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_regex(tokens, initial_pos) {
  return moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_parse$212$(tokens, moonbitlang$ulex$lib$new_frontend$regex_parser$$yy_state_0, (_param29) => {
    if (_param29.$tag === 48) {
      const _YYObj__Context_____Regex = _param29;
      const _result = _YYObj__Context_____Regex._0;
      return _result;
    } else {
      return $panic();
    }
  }, initial_pos);
}
function moonbitlang$ulex$lib$new_frontend$regex_parser$$parse(regex, named_regexes) {
  const _p = (yield_) => {
    switch (regex.$tag) {
      case 0: {
        const _Literal = regex;
        const _lit = _Literal._0;
        const _loc = _Literal._1;
        return moonbitlang$core$builtin$$Iter$run$142$(moonbitlang$ulex$lib$new_frontend$regex_parser$$tokenize_string_literal(_lit, _loc.start), yield_);
      }
      case 2: {
        const _Named = regex;
        const _id = _Named._0;
        return yield_({ _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$TOKEN(_id.name), _1: _id.loc.start, _2: _id.loc.end });
      }
      default: {
        const _Interp = regex;
        const _interps = _Interp._0;
        const _len = _interps.length;
        let _tmp = 0;
        while (true) {
          const _i = _tmp;
          if (_i < _len) {
            const interp = _interps[_i];
            if (interp.$tag === 0) {
              const _InterpLit = interp;
              const _repr = _InterpLit._0;
              const _loc$2 = _InterpLit._1;
              const _bind = moonbitlang$core$builtin$$Iter$run$142$(moonbitlang$ulex$lib$new_frontend$regex_parser$$tokenize_string_literal(_repr, _loc$2.start), yield_);
              if (_bind === 0) {
                return 0;
              }
            } else {
              const _InterpSource = interp;
              const _x = _InterpSource._0;
              const _source = _x.source;
              const _loc$2 = _x.loc;
              const _bind = yield_({ _0: new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$regex_parser$46$Token$TOKEN(_source), _1: _loc$2.start, _2: _loc$2.end });
              if (_bind === 0) {
                return 0;
              }
            }
            _tmp = _i + 1 | 0;
            continue;
          } else {
            return 1;
          }
        }
      }
    }
  };
  const tokens = moonbitlang$core$builtin$$Iter$to_array$142$(_p);
  let k_regex;
  let _try_err;
  _L: {
    _L$2: {
      const _bind = moonbitlang$ulex$lib$new_frontend$regex_parser$$parse_regex(tokens, undefined);
      if (_bind.$tag === 1) {
        const _ok = _bind;
        k_regex = _ok._0;
      } else {
        const _err = _bind;
        const _tmp = _err._0;
        _try_err = _tmp;
        break _L$2;
      }
      break _L;
    }
    moonbitlang$core$builtin$$println$135$(_try_err);
    k_regex = $panic();
  }
  const regex$2 = k_regex({ named_regexes: named_regexes });
  return regex$2;
}
function moonbitlang$core$builtin$$Show$output$123$(self, logger) {
  let _tmp;
  switch (self) {
    case 0: {
      _tmp = "EOF";
      break;
    }
    case 1: {
      _tmp = "CHAR";
      break;
    }
    case 2: {
      _tmp = "CHAR_ESCAPE";
      break;
    }
    case 3: {
      _tmp = "\".\"";
      break;
    }
    case 4: {
      _tmp = "\"$\"";
      break;
    }
    case 5: {
      _tmp = "\"[\"";
      break;
    }
    case 6: {
      _tmp = "\"]\"";
      break;
    }
    case 7: {
      _tmp = "\"^\"";
      break;
    }
    case 8: {
      _tmp = "\"-\"";
      break;
    }
    case 9: {
      _tmp = "\"*\"";
      break;
    }
    case 10: {
      _tmp = "\"+\"";
      break;
    }
    case 11: {
      _tmp = "\"?\"";
      break;
    }
    case 12: {
      _tmp = "REPEAT";
      break;
    }
    case 13: {
      _tmp = "\"(\"";
      break;
    }
    case 14: {
      _tmp = "\")\"";
      break;
    }
    case 15: {
      _tmp = "\"|\"";
      break;
    }
    default: {
      _tmp = "TOKEN";
    }
  }
  logger.method_0(logger.self, _tmp);
}
(() => {
})();
function moonbitlang$ulex$lib$new_frontend$codegen$$group_trans$46$42$func$124$168(_env, _p) {
  const _bind = _env._1;
  const _state = _env._0;
  return _bind((_p$2) => {
    const _min = _p$2._0;
    const _max = _p$2._1;
    const _bind$2 = moonbitlang$ulex$lib$util$eof_char_set$$EofChar$repr(_min);
    let _tmp;
    if (_bind$2.$tag === 0) {
      _tmp = -1;
    } else {
      const _Char = _bind$2;
      const _c = _Char._0;
      _tmp = _c;
    }
    const _tmp$2 = _tmp;
    const _bind$3 = moonbitlang$ulex$lib$util$eof_char_set$$EofChar$repr(_max);
    let _tmp$3;
    if (_bind$3.$tag === 0) {
      _tmp$3 = -1;
    } else {
      const _Char = _bind$3;
      const _c = _Char._0;
      _tmp$3 = _c;
    }
    return _p({ _0: { _0: _tmp$2, _1: _tmp$3 }, _1: _state });
  });
}
function moonbitlang$ulex$lib$new_frontend$codegen$$group_trans(trans) {
  const char_set_by_state = moonbitlang$core$builtin$$Map$from_array$154$([]);
  const _len = trans.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const tran = trans[_i];
      const _char_set = tran._0;
      const _next_state = tran._1;
      const _bind = moonbitlang$core$builtin$$Map$get$154$(char_set_by_state, _next_state);
      if (_bind === undefined) {
        moonbitlang$core$builtin$$Map$op_set$154$(char_set_by_state, _next_state, _char_set);
      } else {
        const _Some = _bind;
        const _existing_char_set = _Some;
        moonbitlang$core$builtin$$Map$op_set$154$(char_set_by_state, _next_state, moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$union(_char_set, _existing_char_set));
      }
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const _bind = moonbitlang$core$builtin$$Map$iter$154$(char_set_by_state);
  const result = moonbitlang$core$builtin$$Iter$to_array$24$((_p) => _bind((_p$2) => {
    const _state = _p$2._0;
    const _char_set = _p$2._1;
    const _bind$2 = moonbitlang$ulex$lib$util$eof_char_set$$EofCharSet$iter_ranges(_char_set);
    const _env = { _0: _state, _1: _bind$2 };
    return moonbitlang$ulex$lib$new_frontend$codegen$$group_trans$46$42$func$124$168(_env, _p);
  }));
  moonbitlang$core$array$$Array$sort$24$(result);
  return result;
}
function moonbitlang$ulex$lib$new_frontend$codegen$$rewrite_codeblock$46$index_of_name$124$24(captures, name) {
  const _p = captures.length;
  let _tmp;
  let _tmp$2 = 0;
  while (true) {
    const _p$2 = _tmp$2;
    if (_p$2 < _p) {
      const _p$3 = captures[_p$2];
      const _param26 = _p$3;
      const _n = _param26._0;
      if (_n === name) {
        _tmp = _p$2;
        break;
      }
      _tmp$2 = _p$2 + 1 | 0;
      continue;
    } else {
      _tmp = undefined;
      break;
    }
  }
  return moonbitlang$core$option$$Option$unwrap$7$(_tmp);
}
function moonbitlang$ulex$lib$new_frontend$codegen$$rewrite_codeblock(codeblock, subst, captures) {
  const buf = moonbitlang$core$builtin$$StringBuilder$new(0);
  let last_index = 0;
  const _len = subst.length;
  let _tmp = 0;
  while (true) {
    const _i = _tmp;
    if (_i < _len) {
      const item = subst[_i];
      moonbitlang$core$builtin$$Logger$write_substring$40$(buf, codeblock, last_index, item.start - last_index | 0);
      const _bind = item.desc;
      switch (_bind.$tag) {
        case 0: {
          const _StartPosOf = _bind;
          const _name = _StartPosOf._0;
          moonbitlang$core$builtin$$Logger$write_string$40$(buf, `_capture_${moonbitlang$core$builtin$$Show$to_string$7$(moonbitlang$ulex$lib$new_frontend$codegen$$rewrite_codeblock$46$index_of_name$124$24(captures, _name))}_start`);
          break;
        }
        case 1: {
          const _EndPosOf = _bind;
          const _name$2 = _EndPosOf._0;
          moonbitlang$core$builtin$$Logger$write_string$40$(buf, `_capture_${moonbitlang$core$builtin$$Show$to_string$7$(moonbitlang$ulex$lib$new_frontend$codegen$$rewrite_codeblock$46$index_of_name$124$24(captures, _name$2))}_end`);
          break;
        }
        case 2: {
          moonbitlang$core$builtin$$Logger$write_string$40$(buf, "_match_start");
          break;
        }
        default: {
          moonbitlang$core$builtin$$Logger$write_string$40$(buf, "_match_end");
        }
      }
      last_index = item.end;
      _tmp = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  if (last_index < codeblock.length) {
    moonbitlang$core$builtin$$Logger$write_substring$40$(buf, codeblock, last_index, codeblock.length - last_index | 0);
  }
  return buf.val;
}
function moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$62(tag_var) {
  return tag_var._1 === 0 ? `_tag_${moonbitlang$core$builtin$$Show$to_string$7$(tag_var._0)}` : `_tag_${moonbitlang$core$builtin$$Show$to_string$7$(tag_var._0)}_${moonbitlang$core$builtin$$Show$to_string$7$(tag_var._1)}`;
}
function moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax(rule, code_unit, default_encoding) {
  const out = moonbitlang$core$builtin$$StringBuilder$new(0);
  let encoding;
  _L: {
    _L$2: {
      switch (code_unit) {
        case 0: {
          encoding = default_encoding;
          break;
        }
        case 1: {
          break _L$2;
        }
        default: {
          break _L$2;
        }
      }
      break _L;
    }
    encoding = undefined;
  }
  const dfa = moonbitlang$ulex$lib$automaton$$DFA$from_rule(rule, encoding);
  const _bind = moonbitlang$core$array$$Array$iter$139$(dfa.captures);
  const max_num_capture_vars = moonbitlang$core$option$$Option$or$7$(moonbitlang$core$builtin$$Iter$maximum$7$((_p) => _bind((_p$2) => _p(_p$2._0.length))), 0);
  const max_pattern_id = dfa.code_blocks.length - 1 | 0;
  const _p = rule.lexee;
  moonbitlang$core$builtin$$Logger$write_string$40$(out, `loop ${_p} { _lexee => {\n  let _data = _lexee.data()\n  let mut _cursor = _lexee.start_offset()\n  let _end = _cursor + _lexee.length()\n  let mut _match_pattern = @int.max_value\n  let mut _match_start = _cursor\n  let mut _match_end = -1\n`);
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i <= max_num_capture_vars) {
      moonbitlang$core$builtin$$Logger$write_string$40$(out, `  let mut _capture_${moonbitlang$core$builtin$$Show$to_string$7$(i)}_start = -1\n  let mut _capture_${moonbitlang$core$builtin$$Show$to_string$7$(i)}_end = -1\n`);
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  const all_tag_actions = moonbitlang$core$sorted_set$$new$41$();
  const _bind$2 = moonbitlang$core$builtin$$Map$iter2$160$(dfa.tag_actions);
  _bind$2((__, tag_action) => {
    moonbitlang$core$sorted_set$$T$add$41$(all_tag_actions, tag_action);
    return 1;
  });
  const all_tag_vars = moonbitlang$core$sorted_set$$new$42$();
  const _bind$3 = moonbitlang$core$sorted_set$$T$iter$41$(all_tag_actions);
  _bind$3((tag_action) => {
    const _arr = tag_action;
    const _len = _arr.length;
    let _tmp$2 = 0;
    while (true) {
      const _i = _tmp$2;
      if (_i < _len) {
        const op = _arr[_i];
        if (op.$tag === 0) {
          const _Set = op;
          const _dest = _Set._0;
          moonbitlang$core$sorted_set$$T$add$42$(all_tag_vars, _dest);
        } else {
          const _Copy = op;
          const _dest = _Copy._0;
          const _src = _Copy._1;
          moonbitlang$core$sorted_set$$T$add$42$(all_tag_vars, _dest);
          moonbitlang$core$sorted_set$$T$add$42$(all_tag_vars, _src);
        }
        _tmp$2 = _i + 1 | 0;
        continue;
      } else {
        break;
      }
    }
    return 1;
  });
  const _bind$4 = moonbitlang$core$sorted_set$$T$iter$42$(all_tag_vars);
  _bind$4((tag_var) => {
    const _p$2 = moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$62(tag_var);
    moonbitlang$core$builtin$$Logger$write_string$40$(out, `  let mut ${_p$2} = -1\n`);
    return 1;
  });
  const start_tags = moonbitlang$core$sorted_set$$new$7$();
  const _bind$5 = moonbitlang$core$sorted_set$$T$iter$7$(start_tags);
  _bind$5((tag) => {
    const _p$2 = moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$62({ _0: tag, _1: 0 });
    moonbitlang$core$builtin$$Logger$write_string$40$(out, `  ${_p$2} = _cursor\n`);
    return 1;
  });
  moonbitlang$core$builtin$$Logger$write_string$40$(out, `  loop ${moonbitlang$core$builtin$$Show$to_string$7$(dfa.start_node)} {\n`);
  const _arr = dfa.graph;
  const _len = _arr.length;
  let _tmp$2 = 0;
  while (true) {
    const _i = _tmp$2;
    if (_i < _len) {
      const trans = _arr[_i];
      moonbitlang$core$builtin$$Logger$write_string$40$(out, `    ${moonbitlang$core$builtin$$Show$to_string$7$(_i)} => {\n`);
      const tag_action = moonbitlang$core$option$$Option$unwrap$41$(moonbitlang$core$builtin$$Map$get$160$(dfa.tag_actions, _i));
      const buf = [];
      const _arr$2 = tag_action;
      const _len$2 = _arr$2.length;
      let _tmp$3 = 0;
      while (true) {
        const _i$2 = _tmp$3;
        if (_i$2 < _len$2) {
          const op = _arr$2[_i$2];
          if (op.$tag === 0) {
            const _Set = op;
            const _dest = _Set._0;
            const _p$2 = moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$62(_dest);
            moonbitlang$core$array$$Array$push$0$(buf, `${_p$2} = _cursor`);
          } else {
            const _Copy = op;
            const _dest = _Copy._0;
            const _src = _Copy._1;
            const _p$2 = moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$62(_dest);
            const _p$3 = moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$62(_src);
            moonbitlang$core$array$$Array$push$0$(buf, `${_p$2} = ${_p$3}`);
          }
          _tmp$3 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      let _bind$6;
      if (buf.length === 0) {
        _bind$6 = undefined;
      } else {
        const _bind$7 = moonbitlang$core$array$$Array$iter$0$(buf);
        _bind$6 = moonbitlang$core$builtin$$Iter$join((_p$2) => _bind$7((_p$3) => _p$2(`      ${_p$3}`)), "\n");
      }
      if (_bind$6 === undefined) {
      } else {
        const _Some = _bind$6;
        const _tag_action_code = _Some;
        moonbitlang$core$builtin$$Logger$write_string$40$(out, `${_tag_action_code}\n`);
      }
      const _bind$7 = moonbitlang$core$builtin$$Map$get$156$(dfa.end_nodes, _i);
      if (_bind$7 === undefined) {
      } else {
        const _Some = _bind$7;
        const _x = _Some;
        const _pattern_id = _x._0;
        const _captures = _x._1;
        moonbitlang$core$builtin$$Logger$write_string$40$(out, `      if _match_pattern >= ${moonbitlang$core$builtin$$Show$to_string$7$(_pattern_id)} {\n        _match_pattern = ${moonbitlang$core$builtin$$Show$to_string$7$(_pattern_id)}\n        _match_end = _cursor\n`);
        const _len$3 = _captures.length;
        let _tmp$4 = 0;
        while (true) {
          const _i$2 = _tmp$4;
          if (_i$2 < _len$3) {
            const capture = _captures[_i$2];
            const _begin = capture._0;
            const _end = capture._1;
            if (_begin.$tag === 0) {
              const _Dynamic_dfa = _begin;
              const _begin_tag_var = _Dynamic_dfa._0;
              const _tmp$5 = moonbitlang$core$builtin$$Show$to_string$7$(_i$2);
              const _p$2 = moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$62(_begin_tag_var);
              moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${_tmp$5}_start = ${_p$2}\n`);
            } else {
              const _Static_dfa = _begin;
              const _x$2 = _Static_dfa._0;
              if (_x$2.$tag === 0) {
                const _RelativeToStart = _x$2;
                const _offset = _RelativeToStart._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_start = _match_start\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_start = _match_start + ${moonbitlang$core$builtin$$Show$to_string$7$(_offset)}\n`);
                }
              } else {
                const _RelativeToEnd = _x$2;
                const _offset = _RelativeToEnd._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_start = _match_end\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_start = _match_end + ${moonbitlang$core$builtin$$Show$to_string$7$(_offset)}\n`);
                }
              }
            }
            if (_end.$tag === 0) {
              const _Dynamic_dfa = _end;
              const _end_tag_var = _Dynamic_dfa._0;
              const _tmp$5 = moonbitlang$core$builtin$$Show$to_string$7$(_i$2);
              const _p$2 = moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax$46$gen_tag_var$124$62(_end_tag_var);
              moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${_tmp$5}_end = ${_p$2}\n`);
            } else {
              const _Static_dfa = _end;
              const _x$2 = _Static_dfa._0;
              if (_x$2.$tag === 0) {
                const _RelativeToStart = _x$2;
                const _offset = _RelativeToStart._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_end = _match_start\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_end = _match_start + ${moonbitlang$core$builtin$$Show$to_string$7$(_offset)}\n`);
                }
              } else {
                const _RelativeToEnd = _x$2;
                const _offset = _RelativeToEnd._0;
                if (_offset === 0) {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_end = _match_end\n`);
                } else {
                  moonbitlang$core$builtin$$Logger$write_string$40$(out, `        _capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_end = _match_end + ${moonbitlang$core$builtin$$Show$to_string$7$(_offset)}\n`);
                }
              }
            }
            _tmp$4 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$40$(out, "      }\n");
      }
      const grouped_trans = moonbitlang$ulex$lib$new_frontend$codegen$$group_trans(trans);
      if (grouped_trans.length === 0) {
        moonbitlang$core$builtin$$Logger$write_string$40$(out, "      break\n");
      } else {
        moonbitlang$core$builtin$$Logger$write_string$40$(out, "      continue match (\n        if _cursor < _end {\n          let c = _data[_cursor]\n          _cursor += 1\n          c.to_int()\n        } else {\n          -1 // EOF\n        }\n      ) {\n");
        const _len$3 = grouped_trans.length;
        let _tmp$4 = 0;
        while (true) {
          const _i$2 = _tmp$4;
          if (_i$2 < _len$3) {
            const tran = grouped_trans[_i$2];
            const _x = tran._0;
            const _first_char = _x._0;
            const _last_char = _x._1;
            const _next_state = tran._1;
            const pattern = _first_char === _last_char ? moonbitlang$core$builtin$$Show$to_string$7$(_first_char) : `${moonbitlang$core$builtin$$Show$to_string$7$(_first_char)}..=${moonbitlang$core$builtin$$Show$to_string$7$(_last_char)}`;
            moonbitlang$core$builtin$$Logger$write_string$40$(out, `        ${pattern} => ${moonbitlang$core$builtin$$Show$to_string$7$(_next_state)}\n`);
            _tmp$4 = _i$2 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        moonbitlang$core$builtin$$Logger$write_string$40$(out, "        _ => break\n      }\n");
      }
      moonbitlang$core$builtin$$Logger$write_string$40$(out, "    }\n");
      _tmp$2 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$40$(out, "    _ => panic()\n  }\n");
  moonbitlang$core$builtin$$Logger$write_string$40$(out, `\n  guard _match_pattern <= ${moonbitlang$core$builtin$$Show$to_string$7$(max_pattern_id)} else {\n    // No pattern matched\n    panic()\n  }\n\n  match _match_pattern {\n`);
  const _arr$2 = dfa.code_blocks;
  const _len$2 = _arr$2.length;
  let _tmp$3 = 0;
  while (true) {
    const _i = _tmp$3;
    if (_i < _len$2) {
      const codeblock = _arr$2[_i];
      moonbitlang$core$builtin$$Logger$write_string$40$(out, `    ${moonbitlang$core$builtin$$Show$to_string$7$(_i)} => {\n      ()\n`);
      const subst = moonbitlang$ulex$lib$codegen$codeblock_parser$$parse_codeblock(codeblock);
      const captures = moonbitlang$core$array$$Array$op_get$139$(dfa.captures, _i);
      const _arr$3 = captures._0;
      const _len$3 = _arr$3.length;
      let _tmp$4 = 0;
      while (true) {
        const _i$2 = _tmp$4;
        if (_i$2 < _len$3) {
          const capture = _arr$3[_i$2];
          const _name = capture._0;
          const _var_type = capture._1;
          if (_var_type === 0) {
            moonbitlang$core$builtin$$Logger$write_string$40$(out, `      let ${_name} = _data[_capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_start]\n`);
          } else {
            moonbitlang$core$builtin$$Logger$write_string$40$(out, `      let ${_name} = _data[_capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_start:_capture_${moonbitlang$core$builtin$$Show$to_string$7$(_i$2)}_end]\n`);
          }
          let _tmp$5;
          let _return_value;
          _L$2: {
            _L$3: {
              const _len$4 = subst.length;
              let _tmp$6 = 0;
              while (true) {
                const _i$3 = _tmp$6;
                if (_i$3 < _len$4) {
                  const item = subst[_i$3];
                  let n;
                  _L$4: {
                    _L$5: {
                      const _bind$6 = item.desc;
                      switch (_bind$6.$tag) {
                        case 0: {
                          const _StartPosOf = _bind$6;
                          const _n = _StartPosOf._0;
                          n = _n;
                          break _L$5;
                        }
                        case 1: {
                          const _EndPosOf = _bind$6;
                          const _n$2 = _EndPosOf._0;
                          n = _n$2;
                          break _L$5;
                        }
                        case 2: {
                          break;
                        }
                      }
                      break _L$4;
                    }
                    if (n === _name) {
                      _return_value = true;
                      break _L$3;
                    }
                  }
                  _tmp$6 = _i$3 + 1 | 0;
                  continue;
                } else {
                  break;
                }
              }
              _tmp$5 = false;
              break _L$2;
            }
            _tmp$5 = _return_value;
          }
          if (_tmp$5) {
            moonbitlang$core$builtin$$Logger$write_string$40$(out, `      let _ = ${_name}\n`);
          }
          _tmp$4 = _i$2 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const _bind$6 = captures._1;
      if (_bind$6 === undefined) {
      } else {
        const _Some = _bind$6;
        const _rest_binder = _Some;
        moonbitlang$core$builtin$$Logger$write_string$40$(out, `      let ${_rest_binder} = _data[_match_end:]\n`);
      }
      const _p$2 = moonbitlang$ulex$lib$new_frontend$codegen$$rewrite_codeblock(codeblock, subst, captures._0);
      moonbitlang$core$builtin$$Logger$write_string$40$(out, `${_p$2}\n`);
      moonbitlang$core$builtin$$Logger$write_string$40$(out, "    }\n");
      _tmp$3 = _i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  moonbitlang$core$builtin$$Logger$write_string$40$(out, "    _ => panic()\n  }\n} }");
  return out.val;
}
function moonbitlang$ulex$lib$new_frontend$driver$$decode_utf8(bytes) {
  const res = moonbitlang$core$builtin$$StringBuilder$new(0);
  const len = bytes.len;
  let i = 0;
  while (true) {
    if (i < len) {
      let c = moonbitlang$core$bytes$$View$op_get(bytes, i);
      if (c === 0) {
        break;
      } else {
        if (c < 128) {
          moonbitlang$core$builtin$$Logger$write_char$40$(res, c);
          i = i + 1 | 0;
        } else {
          if (c < 224) {
            if ((i + 1 | 0) >= len) {
              break;
            }
            c = (c & 31) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63;
            moonbitlang$core$builtin$$Logger$write_char$40$(res, c);
            i = i + 2 | 0;
          } else {
            if (c < 240) {
              if ((i + 2 | 0) >= len) {
                break;
              }
              c = (c & 15) << 12 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 2 | 0) & 63;
              moonbitlang$core$builtin$$Logger$write_char$40$(res, c);
              i = i + 3 | 0;
            } else {
              if ((i + 3 | 0) >= len) {
                break;
              }
              c = (c & 7) << 18 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 1 | 0) & 63) << 12 | (moonbitlang$core$bytes$$View$op_get(bytes, i + 2 | 0) & 63) << 6 | moonbitlang$core$bytes$$View$op_get(bytes, i + 3 | 0) & 63;
              moonbitlang$core$builtin$$Logger$write_char$40$(res, c);
              i = i + 4 | 0;
            }
          }
        }
      }
      continue;
    } else {
      break;
    }
  }
  return res.val;
}
function moonbitlang$ulex$lib$new_frontend$driver$$print_term(out, term, source) {
  switch (term.$tag) {
    case 0: {
      const _Code = term;
      const _loc = _Code._0;
      moonbitlang$core$builtin$$Logger$write_string$40$(out, moonbitlang$ulex$lib$new_frontend$driver$$decode_utf8(moonbitlang$core$bytes$$Bytes$op_as_view(source, _loc.start.cnum, _loc.end.cnum)));
      return;
    }
    case 4: {
      const _GeneratedCode = term;
      const _code = _GeneratedCode._0;
      moonbitlang$core$builtin$$Logger$write_string$40$(out, _code);
      return;
    }
    case 1: {
      const _Nested = term;
      const _terms = _Nested._0;
      const _len = _terms.length;
      let _tmp = 0;
      while (true) {
        const _i = _tmp;
        if (_i < _len) {
          const term$2 = _terms[_i];
          moonbitlang$ulex$lib$new_frontend$driver$$print_term(out, term$2, source);
          _tmp = _i + 1 | 0;
          continue;
        } else {
          return;
        }
      }
    }
    case 2: {
      return;
    }
    default: {
      $panic();
      return;
    }
  }
}
function moonbitlang$ulex$lib$new_frontend$driver$$generate(term, source) {
  const term$2 = moonbitlang$ulex$lib$new_frontend$driver$$expand_term(term, $64$moonbitlang$47$core$47$immut$47$sorted_map$46$T$Empty$13$, source);
  const buffer = moonbitlang$core$builtin$$StringBuilder$new(0);
  moonbitlang$ulex$lib$new_frontend$driver$$print_term(buffer, term$2, source);
  return buffer.val;
}
function moonbitlang$ulex$lib$new_frontend$driver$$expand_term(term, named_regexes, source) {
  _L: {
    switch (term.$tag) {
      case 0: {
        break _L;
      }
      case 4: {
        break _L;
      }
      case 2: {
        break _L;
      }
      case 1: {
        const _Nested = term;
        const _terms = _Nested._0;
        const _loc = _Nested._1;
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$Nested(moonbitlang$ulex$lib$new_frontend$driver$$expand_terms(_terms, named_regexes, source), _loc);
      }
      default: {
        const _LexDef = term;
        const _lexee = _LexDef._0;
        const _cases = _LexDef._1;
        const _loc$2 = _LexDef._2;
        const _tmp = moonbitlang$ulex$lib$new_frontend$driver$$decode_utf8(moonbitlang$core$bytes$$Bytes$op_as_view(source, _lexee.loc.start.cnum, _lexee.loc.end.cnum));
        const _p = new Array(_cases.length);
        const _p$2 = _cases.length;
        let _tmp$2 = 0;
        while (true) {
          const _p$3 = _tmp$2;
          if (_p$3 < _p$2) {
            const _p$4 = _cases[_p$3];
            const case_ = _p$4;
            const _bind = case_.pattern;
            let _bind$2;
            if (_bind.$tag === 0) {
              const _OpenPattern = _bind;
              const _items = _OpenPattern._0;
              const _rest = _OpenPattern._1;
              _bind$2 = { _0: _items, _1: true, _2: _rest };
            } else {
              const _ClosedPattern = _bind;
              const _items = _ClosedPattern._0;
              _bind$2 = { _0: _items, _1: false, _2: undefined };
            }
            const _items = _bind$2._0;
            const _open = _bind$2._1;
            const _rest = _bind$2._2;
            let re;
            let _tmp$3 = moonbitlang$ulex$lib$regex$$epsilon;
            let _tmp$4 = { buf: _items, start: 0, len: _items.length };
            while (true) {
              const _param = _tmp$3;
              const _param$2 = _tmp$4;
              if (_param$2.len === 0) {
                re = _param;
                break;
              } else {
                const _x = _param$2.buf[_param$2.start];
                if (_x.$tag === 0) {
                  const _Regex = _x;
                  const _re = _Regex._0;
                  const _tmp$5 = _param$2.buf;
                  const _tmp$6 = 1 + _param$2.start | 0;
                  const _some = _param$2.len;
                  const _x$2 = { buf: _tmp$5, start: _tmp$6, len: _some - 1 | 0 };
                  const _tmp$7 = moonbitlang$ulex$lib$regex$$seq(_param, moonbitlang$ulex$lib$new_frontend$regex_parser$$parse(_re, named_regexes));
                  _tmp$3 = _tmp$7;
                  _tmp$4 = _x$2;
                  continue;
                } else {
                  const _RegexAs = _x;
                  const _re = _RegexAs._0;
                  const _id = _RegexAs._1;
                  const _tmp$5 = _param$2.buf;
                  const _tmp$6 = 1 + _param$2.start | 0;
                  const _some = _param$2.len;
                  const _x$2 = { buf: _tmp$5, start: _tmp$6, len: _some - 1 | 0 };
                  const _tmp$7 = moonbitlang$ulex$lib$regex$$seq(_param, moonbitlang$ulex$lib$regex$$bind(moonbitlang$ulex$lib$new_frontend$regex_parser$$parse(_re, named_regexes), _id.name));
                  _tmp$3 = _tmp$7;
                  _tmp$4 = _x$2;
                  continue;
                }
              }
            }
            let _bind$3;
            if (_open === true) {
              _bind$3 = { _0: re, _1: _rest };
            } else {
              _bind$3 = _rest === undefined ? { _0: moonbitlang$ulex$lib$regex$$seq(re, moonbitlang$ulex$lib$regex$$eof), _1: undefined } : $panic();
            }
            const _re = _bind$3._0;
            const _rest_binder = _bind$3._1;
            let rest_binder;
            if (_rest_binder === undefined) {
              rest_binder = undefined;
            } else {
              const _Some = _rest_binder;
              const _id = _Some;
              rest_binder = _id.name;
            }
            _p[_p$3] = { _0: _re, _1: rest_binder, _2: moonbitlang$ulex$lib$new_frontend$driver$$generate(case_.action, source) };
            _tmp$2 = _p$3 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        const rule = { name: "", signature: "", lexee: _tmp, patterns: _p };
        const code = moonbitlang$ulex$lib$new_frontend$codegen$$codegen_rule_new_syntax(rule, 0, 2);
        return new $64$moonbitlang$47$ulex$47$lib$47$new_frontend$47$ast$46$Term$GeneratedCode(code, _loc$2);
      }
    }
  }
  return term;
}
function moonbitlang$ulex$lib$new_frontend$driver$$expand_terms(terms, named_regexes, source) {
  let named_regexes$2;
  let _tmp = 0;
  let _tmp$2 = named_regexes;
  while (true) {
    const _p = _tmp;
    const _p$2 = _tmp$2;
    if (_p < terms.length) {
      const _tmp$3 = _p + 1 | 0;
      const acc = _p$2;
      const term = moonbitlang$core$array$$Array$op_get$37$(terms, _p);
      let _tmp$4;
      if (term.$tag === 2) {
        const _NamedRegex = term;
        const _id = _NamedRegex._0;
        const _regex = _NamedRegex._1;
        _tmp$4 = moonbitlang$core$immut$sorted_map$$T$add$82$(acc, _id.name, moonbitlang$ulex$lib$new_frontend$regex_parser$$parse(_regex, acc));
      } else {
        _tmp$4 = acc;
      }
      const _tmp$5 = _tmp$4;
      _tmp = _tmp$3;
      _tmp$2 = _tmp$5;
      continue;
    } else {
      named_regexes$2 = _p$2;
      break;
    }
  }
  const _p = new Array(terms.length);
  const _p$2 = terms.length;
  let _tmp$3 = 0;
  while (true) {
    const _p$3 = _tmp$3;
    if (_p$3 < _p$2) {
      const _p$4 = terms[_p$3];
      const term = _p$4;
      _p[_p$3] = moonbitlang$ulex$lib$new_frontend$driver$$expand_term(term, named_regexes$2, source);
      _tmp$3 = _p$3 + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return _p;
}
function moonbitlang$ulex$lib$new_frontend$driver$$compile(content, filename) {
  const lex_result = moonbitlang$ulex$lib$new_frontend$lexer$$tokens_from_bytes(filename, moonbitlang$ulex$lib$new_frontend$lexer$$tokens_from_bytes$46$start_pos$46$default(), false, false, content);
  let ast;
  let _try_err;
  _L: {
    _L$2: {
      const _p = lex_result.tokens;
      const _p$2 = [];
      const _p$3 = _p.length;
      let _tmp = 0;
      while (true) {
        const _p$4 = _tmp;
        if (_p$4 < _p$3) {
          const _p$5 = _p[_p$4];
          const triple = _p$5;
          const _bind = triple._0;
          let _tmp$2;
          switch (_bind.$tag) {
            case 16: {
              _tmp$2 = true;
              break;
            }
            case 15: {
              _tmp$2 = true;
              break;
            }
            default: {
              _tmp$2 = false;
            }
          }
          if (!_tmp$2) {
            moonbitlang$core$array$$Array$push$138$(_p$2, _p$5);
          }
          _tmp = _p$4 + 1 | 0;
          continue;
        } else {
          break;
        }
      }
      const _bind = moonbitlang$ulex$lib$new_frontend$parser$$start(_p$2, { fname: filename, lnum: 1, bol: 0, cnum: 0 });
      if (_bind.$tag === 1) {
        const _ok = _bind;
        ast = _ok._0;
      } else {
        const _err = _bind;
        const _tmp$2 = _err._0;
        _try_err = _tmp$2;
        break _L$2;
      }
      break _L;
    }
    moonbitlang$core$builtin$$println$133$(_try_err);
    ast = $panic();
  }
  return moonbitlang$ulex$lib$new_frontend$driver$$generate(ast.body, content);
}
function moonbitlang$ulex$main$$offset_to_line_column(content, offset) {
  let line = 1;
  let column = 1;
  let _tmp = 0;
  while (true) {
    const i = _tmp;
    if (i < offset) {
      $bound_check(content, i);
      if (content.charCodeAt(i) === 10) {
        line = line + 1 | 0;
        column = 1;
      } else {
        column = column + 1 | 0;
      }
      _tmp = i + 1 | 0;
      continue;
    } else {
      break;
    }
  }
  return { _0: line, _1: column };
}
function moonbitlang$ulex$main$$array_to_or_list(arr) {
  if (arr.len === 0) {
    return $panic();
  } else {
    if (arr.len === 1) {
      const _x = arr.buf[arr.start];
      return _x;
    } else {
      const _x = arr.buf[arr.start + (arr.len - 1 | 0) | 0];
      const _tmp = arr.buf;
      const _tmp$2 = arr.start;
      const _some = arr.len - 1 | 0;
      const _x$2 = { buf: _tmp, start: _tmp$2, len: _some };
      const _self = [];
      moonbitlang$core$array$$Array$push_iter$0$(_self, moonbitlang$core$array$$ArrayView$iter$0$(_x$2));
      const left = moonbitlang$core$array$$Array$join(_self, ", ");
      return `${left} or ${_x}`;
    }
  }
}
function moonbitlang$ulex$main$$loc_to_string(filename, content, loc) {
  const _bind = moonbitlang$ulex$main$$offset_to_line_column(content, loc._0);
  const _start_line = _bind._0;
  const _start_column = _bind._1;
  const _bind$2 = moonbitlang$ulex$main$$offset_to_line_column(content, loc._1);
  const _end_line = _bind$2._0;
  const _end_column = _bind$2._1;
  return _start_line === _end_line ? `${filename}:${moonbitlang$core$builtin$$Show$to_string$7$(_start_line)}:${moonbitlang$core$builtin$$Show$to_string$7$(_start_column)}-${moonbitlang$core$builtin$$Show$to_string$7$(_end_column)}` : `${filename}:${moonbitlang$core$builtin$$Show$to_string$7$(_start_line)}:${moonbitlang$core$builtin$$Show$to_string$7$(_start_column)}-${moonbitlang$core$builtin$$Show$to_string$7$(_end_line)}:${moonbitlang$core$builtin$$Show$to_string$7$(_end_column)}`;
}
(() => {
  const output_file = moonbitlang$core$ref$$new$0$("");
  const input_file = moonbitlang$core$ref$$new$0$("");
  const code_unit = { val: 2 };
  const default_encoding = { val: undefined };
  const new_syntax = { val: false };
  Yoorkin$ArgParser$$parse([{ _0: "--new-syntax", _1: "", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    new_syntax.val = true;
  }), _3: "Use new syntax" }, { _0: "--input-file", _1: "-i", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Set_string(input_file), _3: "Input file (lexer specification)" }, { _0: "--output-format", _1: "-f", _2: new $64$Yoorkin$47$ArgParser$46$Spec$String((format) => {
    let _tmp;
    switch (format) {
      case "rust": {
        _tmp = "out.rs";
        break;
      }
      case "c": {
        _tmp = "out.c";
        break;
      }
      default: {
        moonbitlang$core$abort$$abort$4$(`Invalid output format: ${format}`);
        return undefined;
      }
    }
    output_file.val = _tmp;
  }), _3: "Output format (rust or c)" }, { _0: "--output-file", _1: "-o", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Set_string(output_file), _3: "Output file" }, { _0: "--version", _1: "-v", _2: new $64$Yoorkin$47$ArgParser$46$Spec$Unit(() => {
    moonbitlang$core$builtin$$println$0$("moonlex 0.1.0");
    moonbitlang$ulex$main$util$$exit$4$(0);
  }), _3: "Show version" }, { _0: "--code-unit", _1: "", _2: new $64$Yoorkin$47$ArgParser$46$Spec$String((code_unit_str) => {
    let _tmp;
    switch (code_unit_str) {
      case "1": {
        _tmp = 0;
        break;
      }
      case "2": {
        _tmp = 1;
        break;
      }
      case "4": {
        _tmp = 2;
        break;
      }
      default: {
        moonbitlang$core$abort$$abort$4$(`Invalid code unit: ${code_unit_str}`);
        return undefined;
      }
    }
    code_unit.val = _tmp;
  }), _3: "Set code unit (1, 2, or 4)" }, { _0: "--default-encoding", _1: "", _2: new $64$Yoorkin$47$ArgParser$46$Spec$String((encoding) => {
    let _tmp;
    switch (encoding) {
      case "ascii": {
        _tmp = 0;
        break;
      }
      case "latin1": {
        _tmp = 1;
        break;
      }
      case "utf8": {
        _tmp = 2;
        break;
      }
      case "utf16": {
        _tmp = 3;
        break;
      }
      default: {
        moonbitlang$core$abort$$abort$4$(`Invalid encoding: ${encoding}`);
        return undefined;
      }
    }
    default_encoding.val = _tmp;
  }), _3: "Set default encoding (ascii, latin1, utf8, or utf16). Only valid when code unit is 1" }], (rest) => {
    input_file.val = rest;
  }, moonbitlang$ulex$main$$_init$42$46$usage$124$1, moonbitlang$x$sys$$get_cli_args());
  const _p = input_file.val;
  const _p$2 = "";
  if (!(_p === _p$2)) {
    let output;
    if (new_syntax.val) {
      const lexer_spec_src = moonbitlang$core$result$$Result$unwrap$66$(moonbitlang$x$fs$$read_file_to_bytes(input_file.val));
      output = moonbitlang$ulex$lib$new_frontend$driver$$compile(lexer_spec_src, input_file.val);
    } else {
      const lexer_spec_src = moonbitlang$core$result$$Result$unwrap$67$(moonbitlang$x$fs$$read_file_to_string(input_file.val, "utf8"));
      let lex;
      let _try_err;
      _L: {
        _L$2: {
          const _bind = moonbitlang$ulex$lib$parser$$parse_lex_from_string(lexer_spec_src);
          if (_bind.$tag === 1) {
            const _ok = _bind;
            lex = _ok._0;
          } else {
            const _err = _bind;
            const _tmp = _err._0;
            _try_err = _tmp;
            break _L$2;
          }
          break _L;
        }
        const _UnexpectedToken = _try_err;
        const _token = _UnexpectedToken._0;
        const _loc = _UnexpectedToken._1;
        const _expected = _UnexpectedToken._2;
        const loc_str = moonbitlang$ulex$main$$loc_to_string(input_file.val, lexer_spec_src, _loc);
        const _p$3 = new Array(_expected.length);
        const _p$4 = _expected.length;
        let _tmp = 0;
        while (true) {
          const _p$5 = _tmp;
          if (_p$5 < _p$4) {
            const _p$6 = _expected[_p$5];
            _p$3[_p$5] = moonbitlang$core$builtin$$Show$to_string$198$(_p$6);
            _tmp = _p$5 + 1 | 0;
            continue;
          } else {
            break;
          }
        }
        const _bind = _p$3;
        const expected_str = moonbitlang$ulex$main$$array_to_or_list({ buf: _bind, start: 0, len: _bind.length });
        moonbitlang$ulex$main$util$$println_to_stderr(`SyntaxError: Unexpected token ${moonbitlang$core$builtin$$Show$to_string$198$(moonbitlang$ulex$lib$parser$$Token$kind(_token))}, expected ${expected_str}.\n  at ${loc_str}`);
        lex = moonbitlang$ulex$main$util$$exit$210$(1);
      }
      output = moonbitlang$ulex$lib$codegen$$codegen_lex(lex, code_unit.val, default_encoding.val);
    }
    if (output_file.val === "") {
      moonbitlang$core$builtin$$println$0$(output);
      return;
    } else {
      moonbitlang$core$result$$Result$unwrap$68$(moonbitlang$x$fs$$write_string_to_file(output_file.val, output, "utf8"));
      return;
    }
  } else {
    moonbitlang$core$abort$$abort$4$("Input file is required");
    return;
  }
})();
