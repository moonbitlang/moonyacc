// Generated by `moon tool embed --text`, do not edit.

///|
let parser_spec_src : String =
  #|%position<Int>
  #|%derive<Show> Token
  #|%start spec
  #|
  #|%token EOF
  #|%token<String> IDENT
  #|%token<String> STRING
  #|%token<(String, Int, Array[SubstItem])> LBRACE_CODE_RBRACE
  #|%token<(String, Int, Int)> PERCENT_LBRACE_CODE_PERCENT_RBRACE
  #|%token<(String, Int, Int)> PERCENT_PERCENT_CODE_EOF
  #|%token<(String, String)> PKG_AND_IDENT
  #|%token PERCENT_PERCENT "%%"
  #|%token PERCENT_START "%start"
  #|%token PERCENT_TOKEN "%token"
  #|%token PERCENT_TYPE "%type"
  #|%token PERCENT_POSITION "%position"
  #|%token PERCENT_LEFT "%left"
  #|%token PERCENT_RIGHT "%right"
  #|%token PERCENT_NONASSOC "%nonassoc"
  #|%token PERCENT_PREC "%prec"
  #|%token PERCENT_DERIVE "%derive"
  #|%token PERCENT_INLINE "%inline"
  #|%token LANGLE "<"
  #|%token RANGLE ">"
  #|%token LBRACKET "["
  #|%token RBRACKET "]"
  #|%token LPAREN "("
  #|%token RPAREN ")"
  #|%token COMMA ","
  #|%token ARROW "->"
  #|%token QUESTION "?"
  #|%token COLON ":"
  #|%token BAR "|"
  #|%token EQ "="
  #|%token SEMI ";"
  #|
  #|%%
  #|
  #|spec -> ParserSpec
  #|  : header=header decl_list=decl_list "%%" rule_list=rule_list trailer=trailer EOF { { header, decls: decl_list.to_array(), rules: rule_list.to_array(), trailer } }
  #|  ;
  #|
  #|header -> (Code, Int, Int)?
  #|  : code=PERCENT_LBRACE_CODE_PERCENT_RBRACE { Some(code) }
  #|  | { None }
  #|  ;
  #|
  #|trailer -> (Code, Int, Int)?
  #|  : code=PERCENT_LBRACE_CODE_PERCENT_RBRACE { Some(code) }
  #|  | code=PERCENT_PERCENT_CODE_EOF { Some(code) }
  #|  | { None }
  #|  ;
  #|
  #|decl_list -> @immut/list.T[Declaration]
  #|  : decl=decl decl_list=decl_list { Cons(decl, decl_list) }
  #|  | { Nil }
  #|  ;
  #|
  #|decl -> Declaration
  #|  : "%start" symbol_list=nonempty_symbol_list { Start(symbol_list.to_array()) }
  #|  | "%token" symbol_list=nonempty_symbol_list { Token(symbol_list.to_array(), type_=None) }
  #|  | "%token" "<" type_=type_expr ">" symbol_list=nonempty_symbol_list { Token(symbol_list.to_array(), type_=Some(type_)) }
  #|  | "%token" symbol=symbol image=STRING { Token1(symbol, type_=None, image=image) }
  #|  | "%token" "<" type_=type_expr ">" symbol=symbol image=STRING { Token1(symbol, type_=Some(type_), image=image) }
  #|  | "%type" "<" type_=type_expr ">" symbol_list=nonempty_symbol_list { Type(symbol_list.to_array(), type_=type_) }
  #|  | "%position" "<" type_=type_expr ">" { Position(type_=type_) }
  #|  | "%left" symbol_list=nonempty_symbol_list { Left(symbol_list.to_array()) }
  #|  | "%right" symbol_list=nonempty_symbol_list { Right(symbol_list.to_array()) }
  #|  | "%nonassoc" symbol_list=nonempty_symbol_list { Nonassoc(symbol_list.to_array()) }
  #|  | "%derive" "<" trait_list=nonempty_type_expr_list ">" type_=IDENT { Derive(traits=trait_list.to_array(), type_=type_) }
  #|  ;
  #|
  #|rule_list -> @immut/list.T[Rule]
  #|  : rule=rule { Cons(rule, Nil) }
  #|  | rule=rule rule_list=rule_list { Cons(rule, rule_list) }
  #|  ;
  #|
  #|rule -> Rule
  #|  : rule_no_modifiers { $1 }
  #|  | "%inline" rule_no_modifiers { { ..$2, inline: true } }
  #|  ;
  #|
  #|rule_no_modifiers -> Rule
  #|  : nonterminal=symbol type_=opt_rule_return_type ":" clause_list=clause_list ";" {
  #|    { inline: false, nonterminal, generic_params: [], params: [], type_, clauses: clause_list.to_array() }
  #|  }
  #|  | nonterminal=symbol generic_params=opt_rule_generic_params "(" param_list=nonempty_rule_param_list ")" type_=opt_rule_return_type ":" clause_list=clause_list ";" {
  #|    { inline: false, nonterminal, generic_params, params: param_list.to_array(),  type_, clauses: clause_list.to_array() }
  #|  }
  #|  ;
  #|
  #|opt_rule_return_type -> TypeExpr?
  #|  : "->" type_=type_expr { Some(type_) }
  #|  | { None }
  #|  ;
  #|
  #|nonempty_rule_param_list -> @immut/list.T[(String, TypeExpr?)]
  #|  : IDENT { Cons(($1, None), Nil) }
  #|  | IDENT ":" type_expr { Cons(($1, Some($3)), Nil) }
  #|  | IDENT "," nonempty_rule_param_list { Cons(($1, None), $3) }
  #|  | IDENT ":" type_expr "," nonempty_rule_param_list { Cons(($1, Some($3)), $5) }
  #|  ;
  #|
  #|opt_rule_generic_params -> Array[String]
  #|  : { [] }
  #|  | "[" nonempty_comma_ident_list "]" { $2.to_array() }
  #|  ;
  #|
  #|nonempty_comma_ident_list -> @immut/list.T[String]
  #|  : IDENT { Cons($1, Nil) }
  #|  | IDENT "," nonempty_comma_ident_list { Cons($1, $3) }
  #|  ;
  #|
  #|type_expr -> TypeExpr
  #|  : postfix_type_expr { $1 }
  #|  | "(" ")" "->" type_expr { Arrow([], $4) }
  #|  | "(" type_expr ")" "->" type_expr { Arrow([$2], $5) }
  #|  | "(" type_expr "," ")" "->" type_expr { Arrow([$2], $6) }
  #|  | "(" type_expr "," nonempty_type_expr_list ")" "->" type_expr { Arrow(@immut/list.Cons($2, $4).to_array(), $7) }
  #|  ;
  #|
  #|postfix_type_expr -> TypeExpr
  #|  : basic_type_expr { $1 }
  #|  | postfix_type_expr "?" { Option($1) }
  #|  ;
  #|
  #|basic_type_expr -> TypeExpr
  #|  : IDENT { Constr(pkg=None, $1, []) }
  #|  | PKG_AND_IDENT { Constr(pkg=Some($1.0), $1.1, []) }
  #|  | IDENT "[" nonempty_type_expr_list "]" { Constr(pkg=None, $1, $3.to_array()) }
  #|  | PKG_AND_IDENT "[" nonempty_type_expr_list "]" { Constr(pkg=Some($1.0), $1.1, $3.to_array()) }
  #|  | "(" type_expr "," nonempty_type_expr_list ")" { Tuple(@immut/list.Cons($2, $4).to_array()) }
  #|  | "(" type_expr ")" { $2 }
  #|  ;
  #|
  #|nonempty_type_expr_list -> @immut/list.T[TypeExpr]
  #|  : type_expr=type_expr { Cons(type_expr, Nil) }
  #|  | type_expr=type_expr "," type_expr_list=nonempty_type_expr_list { Cons(type_expr, type_expr_list) }
  #|  ;
  #|
  #|clause_list -> @immut/list.T[Clause]
  #|  : clause=clause { Cons(clause, Nil) }
  #|  | clause=clause "|" clause_list=clause_list { Cons(clause, clause_list) }
  #|  ;
  #|
  #|clause -> Clause
  #|  : item_list=item_list prec=rule_prec action=clause_action { { items: item_list.to_array(), prec, action } }
  #|  ;
  #|
  #|clause_action -> ClauseAction
  #|  : code=LBRACE_CODE_RBRACE {
  #|      let (code, utf8_pos, subst) = code
  #|      { code: Some({ code, utf8_pos, subst }), start: $startpos, end: $endpos }
  #|  }
  #|  | { { code: None, start: $startpos, end: $endpos } }
  #|  ;
  #|
  #|rule_prec -> Symbol?
  #|  : "%prec" symbol=symbol { Some(symbol) }
  #|  | { None }
  #|  ;
  #|
  #|item_list -> @immut/list.T[ClauseItem]
  #|  : item=item item_list=item_list { Cons(item, item_list) }
  #|  | { Nil }
  #|  ;
  #|
  #|item -> ClauseItem
  #|  : term=term { { binder: None, term: term } }
  #|  | binder=IDENT "=" term=term { { binder: Some(binder), term: term } }
  #|  ;
  #|
  #|term -> Term
  #|  : symbol=symbol { Symbol(symbol, loc=($startpos, $endpos)) }
  #|  | symbol=symbol "(" nonempty_comma_term_list ")" { RuleCall(symbol, symbol_loc=($startpos(symbol), $endpos(symbol)), $3.to_array()) }
  #|  | image=STRING { Image(image, loc=($startpos, $endpos)) }
  #|  ;
  #|
  #|nonempty_comma_term_list -> @immut/list.T[Term]
  #|  : term=term { Cons(term, Nil) }
  #|  | term=term "," term_list=nonempty_comma_term_list { Cons(term, term_list) }
  #|  ;
  #|
  #|nonempty_symbol_list -> @immut/list.T[Symbol]
  #|  : symbol=symbol { Cons(symbol, Nil) }
  #|  | symbol=symbol symbol_list=nonempty_symbol_list { Cons(symbol, symbol_list) }
  #|  ;
  #|
  #|symbol -> Symbol
  #|  : ident=IDENT { ident }
  #|  ;
  #|
