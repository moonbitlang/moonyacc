%start<unit> spec

%token EOF
%token IDENT
%token STRING
%token LANGLE_CODE_RANGLE
%token LBRACE_CODE_RBRACE
%token PERCENT_LBRACE_CODE_PERCENT_RBRACE
%token PERCENT_PERCENT_CODE_EOF
%token PKG_AND_IDENT
%token PERCENT_PERCENT "%%"
%token PERCENT_START "%start"
%token PERCENT_TOKEN "%token"
%token PERCENT_TYPE "%type"
%token PERCENT_POSITION "%position"
%token PERCENT_LEFT "%left"
%token PERCENT_RIGHT "%right"
%token PERCENT_NONASSOC "%nonassoc"
%token PERCENT_PREC "%prec"
%token PERCENT_DERIVE "%derive"
%token PERCENT_INLINE "%inline"
%token LBRACKET "["
%token RBRACKET "]"
%token LPAREN "("
%token RPAREN ")"
%token COMMA ","
%token ARROW "->"
%token QUESTION "?"
%token COLON ":"
%token BAR "|"
%token EQ "="
%token SEMI ";"

%%

spec
  : decl_list "%%" rule_list trailer EOF {}
  ;

decl_list
  : decl decl_list {}
  |  {}
  ;

decl
  : PERCENT_LBRACE_CODE_PERCENT_RBRACE {}
  | "%start" nonempty_symbol_with_loc_list {}
  | "%start" LANGLE_CODE_RANGLE nonempty_symbol_with_loc_list {}
  | "%token" nonempty_symbol_with_loc_list {}
  | "%token" LANGLE_CODE_RANGLE nonempty_symbol_with_loc_list {}
  | "%token" symbol_with_loc STRING {}
  | "%token" LANGLE_CODE_RANGLE symbol_with_loc STRING {}
  | "%type" LANGLE_CODE_RANGLE nonempty_symbol_with_loc_list {}
  | "%position" LANGLE_CODE_RANGLE {}
  | "%left" nonempty_prec_symbol_list {}
  | "%right" nonempty_prec_symbol_list {}
  | "%nonassoc" nonempty_prec_symbol_list {}
  | "%derive" LANGLE_CODE_RANGLE IDENT {}
  ;

rule_list
  : rule {}
  | rule rule_list {}
  ;

trailer
  : PERCENT_LBRACE_CODE_PERCENT_RBRACE {}
  | PERCENT_PERCENT_CODE_EOF {}
  |  {}
  ;

rule
  : rule_no_modifiers {}
  | "%inline" rule_no_modifiers {}
  ;

rule_no_modifiers
  : symbol opt_rule_return_type ":" clause_list option(";") {}
  | symbol opt_rule_generic_params "(" nonempty_rule_param_list ")" opt_rule_return_type ":" clause_list option(";") {}
  ;

opt_rule_return_type
  : "->" type_expr {}
  |  {}
  ;

nonempty_rule_param_list
  : IDENT {}
  | IDENT ":" type_expr {}
  | IDENT "," nonempty_rule_param_list {}
  | IDENT ":" type_expr "," nonempty_rule_param_list {}
  ;

opt_rule_generic_params
  :  {}
  | "[" nonempty_comma_ident_list "]" {}
  ;

nonempty_comma_ident_list
  : IDENT {}
  | IDENT "," nonempty_comma_ident_list {}
  ;

type_expr
  : postfix_type_expr {}
  | "(" ")" "->" type_expr {}
  | "(" type_expr ")" "->" type_expr {}
  | "(" type_expr "," ")" "->" type_expr {}
  | "(" type_expr "," nonempty_type_expr_list ")" "->" type_expr {}
  ;

postfix_type_expr
  : basic_type_expr {}
  | postfix_type_expr "?" {}
  ;

basic_type_expr
  : IDENT {}
  | PKG_AND_IDENT {}
  | IDENT "[" nonempty_type_expr_list "]" {}
  | PKG_AND_IDENT "[" nonempty_type_expr_list "]" {}
  | "(" type_expr "," nonempty_type_expr_list ")" {}
  | "(" type_expr ")" {}
  ;

nonempty_type_expr_list
  : type_expr {}
  | type_expr "," nonempty_type_expr_list {}
  ;

clause_list
  : "|" nonempty_clause_list {}
  | nonempty_clause_list {}
  ;

nonempty_clause_list
  : clause_without_action clause_action {}
  | clause_without_action clause_action "|" nonempty_clause_list {}
  | nonempty_clause_without_action "|" nonempty_clause_list {}
  ;

%inline clause_without_action
  : empty_clause_without_action {}
  | nonempty_clause_without_action {}
  ;

empty_clause_without_action
  : rule_prec {}
  ;

nonempty_clause_without_action
  : nonempty_item_list rule_prec {}
  ;

clause_action
  : LBRACE_CODE_RBRACE {}
  ;

rule_prec
  : "%prec" prec_symbol {}
  |  {}
  ;

nonempty_item_list
  : item {}
  | item nonempty_item_list {}
  ;

item
  : term {}
  | IDENT "=" term {}
  ;

term
  : symbol {}
  | symbol "(" nonempty_comma_term_list ")" {}
  | STRING {}
  ;

nonempty_comma_term_list
  : term {}
  | term "," nonempty_comma_term_list {}
  ;

nonempty_symbol_with_loc_list
  : symbol_with_loc {}
  | symbol_with_loc nonempty_symbol_with_loc_list {}
  ;

nonempty_prec_symbol_list
  : prec_symbol {}
  | prec_symbol nonempty_prec_symbol_list {}
  ;

prec_symbol
  : symbol {}
  | STRING {}
  ;

symbol_with_loc
  : symbol {}
  ;

symbol
  : IDENT {}
  ;

