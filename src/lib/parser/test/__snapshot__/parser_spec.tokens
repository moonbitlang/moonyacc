PERCENT_POSITION
LANGLE_CODE_RANGLE("Int")
PERCENT_DERIVE
LANGLE_CODE_RANGLE("Show")
IDENT("Token")
PERCENT_START
IDENT("spec")
PERCENT_TOKEN
IDENT("EOF")
PERCENT_TOKEN
LANGLE_CODE_RANGLE("String")
IDENT("IDENT")
PERCENT_TOKEN
LANGLE_CODE_RANGLE("String")
IDENT("STRING")
PERCENT_TOKEN
LANGLE_CODE_RANGLE("String")
IDENT("LANGLE_CODE_RANGLE")
PERCENT_TOKEN
LANGLE_CODE_RANGLE("(String, Int, Array[@ast.SubstItem])")
IDENT("LBRACE_CODE_RBRACE")
PERCENT_TOKEN
LANGLE_CODE_RANGLE("(String, Int, Int)")
IDENT("PERCENT_LBRACE_CODE_PERCENT_RBRACE")
PERCENT_TOKEN
LANGLE_CODE_RANGLE("(String, Int, Int)")
IDENT("PERCENT_PERCENT_CODE_EOF")
PERCENT_TOKEN
LANGLE_CODE_RANGLE("(String, String)")
IDENT("PKG_AND_IDENT")
PERCENT_TOKEN
IDENT("PERCENT_PERCENT")
STRING("\"%%\"")
PERCENT_TOKEN
IDENT("PERCENT_START")
STRING("\"%start\"")
PERCENT_TOKEN
IDENT("PERCENT_TOKEN")
STRING("\"%token\"")
PERCENT_TOKEN
IDENT("PERCENT_TYPE")
STRING("\"%type\"")
PERCENT_TOKEN
IDENT("PERCENT_POSITION")
STRING("\"%position\"")
PERCENT_TOKEN
IDENT("PERCENT_LEFT")
STRING("\"%left\"")
PERCENT_TOKEN
IDENT("PERCENT_RIGHT")
STRING("\"%right\"")
PERCENT_TOKEN
IDENT("PERCENT_NONASSOC")
STRING("\"%nonassoc\"")
PERCENT_TOKEN
IDENT("PERCENT_PREC")
STRING("\"%prec\"")
PERCENT_TOKEN
IDENT("PERCENT_DERIVE")
STRING("\"%derive\"")
PERCENT_TOKEN
IDENT("PERCENT_INLINE")
STRING("\"%inline\"")
PERCENT_TOKEN
IDENT("LBRACKET")
STRING("\"[\"")
PERCENT_TOKEN
IDENT("RBRACKET")
STRING("\"]\"")
PERCENT_TOKEN
IDENT("LPAREN")
STRING("\"(\"")
PERCENT_TOKEN
IDENT("RPAREN")
STRING("\")\"")
PERCENT_TOKEN
IDENT("COMMA")
STRING("\",\"")
PERCENT_TOKEN
IDENT("ARROW")
STRING("\"->\"")
PERCENT_TOKEN
IDENT("QUESTION")
STRING("\"?\"")
PERCENT_TOKEN
IDENT("COLON")
STRING("\":\"")
PERCENT_TOKEN
IDENT("BAR")
STRING("\"|\"")
PERCENT_TOKEN
IDENT("EQ")
STRING("\"=\"")
PERCENT_TOKEN
IDENT("SEMI")
STRING("\";\"")
PERCENT_PERCENT
IDENT("spec")
ARROW
PKG_AND_IDENT(("ast", "ParserSpec"))
COLON
IDENT("header")
EQ
IDENT("header")
IDENT("decl_list")
EQ
IDENT("decl_list")
STRING("\"%%\"")
IDENT("rule_list")
EQ
IDENT("rule_list")
IDENT("trailer")
EQ
IDENT("trailer")
IDENT("EOF")
LBRACE_CODE_RBRACE((" { header, decls: decl_list.to_array(), rules: rule_list.to_array(), trailer } ", 997, []))
SEMI
IDENT("header")
ARROW
LPAREN
PKG_AND_IDENT(("ast", "Code"))
COMMA
IDENT("Int")
COMMA
IDENT("Int")
RPAREN
QUESTION
COLON
IDENT("code")
EQ
IDENT("PERCENT_LBRACE_CODE_PERCENT_RBRACE")
LBRACE_CODE_RBRACE((" Some(code) ", 1161, []))
BAR
LBRACE_CODE_RBRACE((" None ", 1180, []))
SEMI
IDENT("trailer")
ARROW
LPAREN
PKG_AND_IDENT(("ast", "Code"))
COMMA
IDENT("Int")
COMMA
IDENT("Int")
RPAREN
QUESTION
COLON
IDENT("code")
EQ
IDENT("PERCENT_LBRACE_CODE_PERCENT_RBRACE")
LBRACE_CODE_RBRACE((" Some(code) ", 1272, []))
BAR
IDENT("code")
EQ
IDENT("PERCENT_PERCENT_CODE_EOF")
LBRACE_CODE_RBRACE((" Some(code) ", 1321, []))
BAR
LBRACE_CODE_RBRACE((" None ", 1340, []))
SEMI
IDENT("decl_list")
ARROW
PKG_AND_IDENT(("immut/list", "T"))
LBRACKET
PKG_AND_IDENT(("ast", "Declaration"))
RBRACKET
COLON
IDENT("decl")
EQ
IDENT("decl")
IDENT("decl_list")
EQ
IDENT("decl_list")
LBRACE_CODE_RBRACE((" Cons(decl, decl_list) ", 1433, []))
BAR
LBRACE_CODE_RBRACE((" Nil ", 1463, []))
SEMI
IDENT("decl")
ARROW
PKG_AND_IDENT(("ast", "Declaration"))
COLON
STRING("\"%start\"")
IDENT("symbol_list")
EQ
IDENT("nonempty_symbol_list")
LBRACE_CODE_RBRACE((" Start(symbol_list.to_array()) ", 1547, []))
BAR
STRING("\"%token\"")
IDENT("symbol_list")
EQ
IDENT("nonempty_symbol_list")
LBRACE_CODE_RBRACE((" Token(symbol_list.to_array(), type_=None) ", 1627, []))
BAR
STRING("\"%token\"")
IDENT("type_")
EQ
IDENT("LANGLE_CODE_RANGLE")
IDENT("symbol_list")
EQ
IDENT("nonempty_symbol_list")
LBRACE_CODE_RBRACE((" Token(symbol_list.to_array(), type_=Some(type_)) ", 1744, []))
BAR
STRING("\"%token\"")
IDENT("symbol")
EQ
IDENT("symbol")
IDENT("image")
EQ
IDENT("STRING")
LBRACE_CODE_RBRACE((" Token1(symbol, type_=None, image=image) ", 1837, []))
BAR
STRING("\"%token\"")
IDENT("type_")
EQ
IDENT("LANGLE_CODE_RANGLE")
IDENT("symbol")
EQ
IDENT("symbol")
IDENT("image")
EQ
IDENT("STRING")
LBRACE_CODE_RBRACE((" Token1(symbol, type_=Some(type_), image=image) ", 1946, []))
BAR
STRING("\"%type\"")
IDENT("type_")
EQ
IDENT("LANGLE_CODE_RANGLE")
IDENT("symbol_list")
EQ
IDENT("nonempty_symbol_list")
LBRACE_CODE_RBRACE((" Type(symbol_list.to_array(), type_=type_) ", 2067, []))
BAR
STRING("\"%position\"")
IDENT("type_")
EQ
IDENT("LANGLE_CODE_RANGLE")
LBRACE_CODE_RBRACE((" Position(type_=type_) ", 2154, []))
BAR
STRING("\"%left\"")
IDENT("symbol_list")
EQ
IDENT("nonempty_prec_symbol_list")
LBRACE_CODE_RBRACE((" Left(symbol_list.to_array()) ", 2230, []))
BAR
STRING("\"%right\"")
IDENT("symbol_list")
EQ
IDENT("nonempty_prec_symbol_list")
LBRACE_CODE_RBRACE((" Right(symbol_list.to_array()) ", 2314, []))
BAR
STRING("\"%nonassoc\"")
IDENT("symbol_list")
EQ
IDENT("nonempty_prec_symbol_list")
LBRACE_CODE_RBRACE((" Nonassoc(symbol_list.to_array()) ", 2402, []))
BAR
STRING("\"%derive\"")
IDENT("traits")
EQ
IDENT("LANGLE_CODE_RANGLE")
IDENT("type_")
EQ
IDENT("IDENT")
LBRACE_CODE_RBRACE((" Derive(traits=traits, type_=type_) ", 2491, []))
SEMI
IDENT("rule_list")
ARROW
PKG_AND_IDENT(("immut/list", "T"))
LBRACKET
PKG_AND_IDENT(("ast", "Rule"))
RBRACKET
COLON
IDENT("rule")
EQ
IDENT("rule")
LBRACE_CODE_RBRACE((" Cons(rule, Nil) ", 2587, []))
BAR
IDENT("rule")
EQ
IDENT("rule")
IDENT("rule_list")
EQ
IDENT("rule_list")
LBRACE_CODE_RBRACE((" Cons(rule, rule_list) ", 2641, []))
SEMI
IDENT("rule")
ARROW
PKG_AND_IDENT(("ast", "Rule"))
COLON
IDENT("rule_no_modifiers")
LBRACE_CODE_RBRACE((" $1 ", 2712, [{start: 1, end: 3, desc: Dollar(1)}]))
BAR
STRING("\"%inline\"")
IDENT("rule_no_modifiers")
LBRACE_CODE_RBRACE((" { ..$2, inline: true } ", 2751, [{start: 5, end: 7, desc: Dollar(2)}]))
SEMI
IDENT("rule_no_modifiers")
ARROW
PKG_AND_IDENT(("ast", "Rule"))
COLON
IDENT("nonterminal")
EQ
IDENT("symbol")
IDENT("type_")
EQ
IDENT("opt_rule_return_type")
STRING("\":\"")
IDENT("clause_list")
EQ
IDENT("clause_list")
IDENT("option")
LPAREN
STRING("\";\"")
RPAREN
LBRACE_CODE_RBRACE(("\n    { inline: false, nonterminal, generic_params: [], params: [], type_, clauses: clause_list.to_array() }\n  ", 2904, []))
BAR
IDENT("nonterminal")
EQ
IDENT("symbol")
IDENT("generic_params")
EQ
IDENT("opt_rule_generic_params")
STRING("\"(\"")
IDENT("param_list")
EQ
IDENT("nonempty_rule_param_list")
STRING("\")\"")
IDENT("type_")
EQ
IDENT("opt_rule_return_type")
STRING("\":\"")
IDENT("clause_list")
EQ
IDENT("clause_list")
IDENT("option")
LPAREN
STRING("\";\"")
RPAREN
LBRACE_CODE_RBRACE(("\n    { inline: false, nonterminal, generic_params, params: param_list.to_array(),  type_, clauses: clause_list.to_array() }\n  ", 3190, []))
SEMI
IDENT("opt_rule_return_type")
ARROW
PKG_AND_IDENT(("ast", "TypeExpr"))
QUESTION
COLON
STRING("\"->\"")
IDENT("type_")
EQ
IDENT("type_expr")
LBRACE_CODE_RBRACE((" Some(type_) ", 3388, []))
BAR
LBRACE_CODE_RBRACE((" None ", 3408, []))
SEMI
IDENT("nonempty_rule_param_list")
ARROW
PKG_AND_IDENT(("immut/list", "T"))
LBRACKET
LPAREN
IDENT("String")
COMMA
PKG_AND_IDENT(("ast", "TypeExpr"))
QUESTION
RPAREN
RBRACKET
COLON
IDENT("IDENT")
LBRACE_CODE_RBRACE((" Cons(($1, None), Nil) ", 3500, [{start: 7, end: 9, desc: Dollar(1)}]))
BAR
IDENT("IDENT")
STRING("\":\"")
IDENT("type_expr")
LBRACE_CODE_RBRACE((" Cons(($1, Some($3)), Nil) ", 3550, [{start: 7, end: 9, desc: Dollar(1)}, {start: 16, end: 18, desc: Dollar(3)}]))
BAR
IDENT("IDENT")
STRING("\",\"")
IDENT("nonempty_rule_param_list")
LBRACE_CODE_RBRACE((" Cons(($1, None), $3) ", 3619, [{start: 7, end: 9, desc: Dollar(1)}, {start: 18, end: 20, desc: Dollar(3)}]))
BAR
IDENT("IDENT")
STRING("\":\"")
IDENT("type_expr")
STRING("\",\"")
IDENT("nonempty_rule_param_list")
LBRACE_CODE_RBRACE((" Cons(($1, Some($3)), $5) ", 3697, [{start: 7, end: 9, desc: Dollar(1)}, {start: 16, end: 18, desc: Dollar(3)}, {start: 22, end: 24, desc: Dollar(5)}]))
SEMI
IDENT("opt_rule_generic_params")
ARROW
IDENT("Array")
LBRACKET
IDENT("String")
RBRACKET
COLON
LBRACE_CODE_RBRACE((" [] ", 3776, []))
BAR
STRING("\"[\"")
IDENT("nonempty_comma_ident_list")
STRING("\"]\"")
LBRACE_CODE_RBRACE((" $2.to_array() ", 3821, [{start: 1, end: 3, desc: Dollar(2)}]))
SEMI
IDENT("nonempty_comma_ident_list")
ARROW
PKG_AND_IDENT(("immut/list", "T"))
LBRACKET
IDENT("String")
RBRACKET
COLON
IDENT("IDENT")
LBRACE_CODE_RBRACE((" Cons($1, Nil) ", 3905, [{start: 6, end: 8, desc: Dollar(1)}]))
BAR
IDENT("IDENT")
STRING("\",\"")
IDENT("nonempty_comma_ident_list")
LBRACE_CODE_RBRACE((" Cons($1, $3) ", 3963, [{start: 6, end: 8, desc: Dollar(1)}, {start: 10, end: 12, desc: Dollar(3)}]))
SEMI
IDENT("type_expr")
ARROW
PKG_AND_IDENT(("ast", "TypeExpr"))
COLON
IDENT("postfix_type_expr")
LBRACE_CODE_RBRACE((" $1 ", 4034, [{start: 1, end: 3, desc: Dollar(1)}]))
BAR
STRING("\"(\"")
STRING("\")\"")
STRING("\"->\"")
IDENT("type_expr")
LBRACE_CODE_RBRACE((" Arrow([], $4) ", 4068, [{start: 11, end: 13, desc: Dollar(4)}]))
BAR
STRING("\"(\"")
IDENT("type_expr")
STRING("\")\"")
STRING("\"->\"")
IDENT("type_expr")
LBRACE_CODE_RBRACE((" Arrow([$2], $5) ", 4123, [{start: 8, end: 10, desc: Dollar(2)}, {start: 13, end: 15, desc: Dollar(5)}]))
BAR
STRING("\"(\"")
IDENT("type_expr")
STRING("\",\"")
STRING("\")\"")
STRING("\"->\"")
IDENT("type_expr")
LBRACE_CODE_RBRACE((" Arrow([$2], $6) ", 4184, [{start: 8, end: 10, desc: Dollar(2)}, {start: 13, end: 15, desc: Dollar(6)}]))
BAR
STRING("\"(\"")
IDENT("type_expr")
STRING("\",\"")
IDENT("nonempty_type_expr_list")
STRING("\")\"")
STRING("\"->\"")
IDENT("type_expr")
LBRACE_CODE_RBRACE((" Arrow(@immut/list.Cons($2, $4).to_array(), $7) ", 4269, [{start: 24, end: 26, desc: Dollar(2)}, {start: 28, end: 30, desc: Dollar(4)}, {start: 44, end: 46, desc: Dollar(7)}]))
SEMI
IDENT("postfix_type_expr")
ARROW
PKG_AND_IDENT(("ast", "TypeExpr"))
COLON
IDENT("basic_type_expr")
LBRACE_CODE_RBRACE((" $1 ", 4380, [{start: 1, end: 3, desc: Dollar(1)}]))
BAR
IDENT("postfix_type_expr")
STRING("\"?\"")
LBRACE_CODE_RBRACE((" Option($1) ", 4413, [{start: 8, end: 10, desc: Dollar(1)}]))
SEMI
IDENT("basic_type_expr")
ARROW
PKG_AND_IDENT(("ast", "TypeExpr"))
COLON
IDENT("IDENT")
LBRACE_CODE_RBRACE((" Constr(pkg=None, $1, []) ", 4476, [{start: 18, end: 20, desc: Dollar(1)}]))
BAR
IDENT("PKG_AND_IDENT")
LBRACE_CODE_RBRACE((" Constr(pkg=Some($1.0), $1.1, []) ", 4523, [{start: 17, end: 19, desc: Dollar(1)}, {start: 24, end: 26, desc: Dollar(1)}]))
BAR
IDENT("IDENT")
STRING("\"[\"")
IDENT("nonempty_type_expr_list")
STRING("\"]\"")
LBRACE_CODE_RBRACE((" Constr(pkg=None, $1, $3.to_array()) ", 4602, [{start: 18, end: 20, desc: Dollar(1)}, {start: 22, end: 24, desc: Dollar(3)}]))
BAR
IDENT("PKG_AND_IDENT")
STRING("\"[\"")
IDENT("nonempty_type_expr_list")
STRING("\"]\"")
LBRACE_CODE_RBRACE((" Constr(pkg=Some($1.0), $1.1, $3.to_array()) ", 4692, [{start: 17, end: 19, desc: Dollar(1)}, {start: 24, end: 26, desc: Dollar(1)}, {start: 30, end: 32, desc: Dollar(3)}]))
BAR
STRING("\"(\"")
IDENT("type_expr")
STRING("\",\"")
IDENT("nonempty_type_expr_list")
STRING("\")\"")
LBRACE_CODE_RBRACE((" Tuple(@immut/list.Cons($2, $4).to_array()) ", 4790, [{start: 24, end: 26, desc: Dollar(2)}, {start: 28, end: 30, desc: Dollar(4)}]))
BAR
STRING("\"(\"")
IDENT("type_expr")
STRING("\")\"")
LBRACE_CODE_RBRACE((" $2 ", 4859, [{start: 1, end: 3, desc: Dollar(2)}]))
SEMI
IDENT("nonempty_type_expr_list")
ARROW
PKG_AND_IDENT(("immut/list", "T"))
LBRACKET
PKG_AND_IDENT(("ast", "TypeExpr"))
RBRACKET
COLON
IDENT("type_expr")
EQ
IDENT("type_expr")
LBRACE_CODE_RBRACE((" Cons(type_expr, Nil) ", 4951, []))
BAR
IDENT("type_expr")
EQ
IDENT("type_expr")
STRING("\",\"")
IDENT("type_expr_list")
EQ
IDENT("nonempty_type_expr_list")
LBRACE_CODE_RBRACE((" Cons(type_expr, type_expr_list) ", 5043, []))
SEMI
IDENT("clause_list")
ARROW
PKG_AND_IDENT(("immut/list", "T"))
LBRACKET
LPAREN
PKG_AND_IDENT(("immut/list", "T"))
LBRACKET
PKG_AND_IDENT(("ast", "ClauseWithoutAction"))
RBRACKET
COMMA
PKG_AND_IDENT(("ast", "ClauseAction"))
RPAREN
RBRACKET
COLON
STRING("\"|\"")
IDENT("nonempty_clause_list")
LBRACE_CODE_RBRACE((" $2 ", 5204, [{start: 1, end: 3, desc: Dollar(2)}]))
BAR
IDENT("nonempty_clause_list")
LBRACE_CODE_RBRACE((" $1 ", 5236, [{start: 1, end: 3, desc: Dollar(1)}]))
SEMI
IDENT("nonempty_clause_list")
ARROW
PKG_AND_IDENT(("immut/list", "T"))
LBRACKET
LPAREN
PKG_AND_IDENT(("immut/list", "T"))
LBRACKET
PKG_AND_IDENT(("ast", "ClauseWithoutAction"))
RBRACKET
COMMA
PKG_AND_IDENT(("ast", "ClauseAction"))
RPAREN
RBRACKET
COLON
IDENT("clause_woa")
EQ
IDENT("clause_without_action")
IDENT("action")
EQ
IDENT("clause_action")
LBRACE_CODE_RBRACE((" Cons((Cons(clause_woa, Nil), action), Nil) ", 5406, []))
BAR
IDENT("clause_woa")
EQ
IDENT("clause_without_action")
IDENT("action")
EQ
IDENT("clause_action")
STRING("\"|\"")
IDENT("clause_list")
EQ
IDENT("nonempty_clause_list")
LBRACE_CODE_RBRACE((" Cons((Cons(clause_woa, Nil), action), clause_list) ", 5548, []))
BAR
IDENT("clause_woa")
EQ
IDENT("nonempty_clause_without_action")
STRING("\"|\"")
IDENT("clause_list")
EQ
IDENT("nonempty_clause_list")
LBRACE_CODE_RBRACE(("\n    guard clause_list is Cons((clause_woa_list, action), tail_clause_list)\n    Cons((Cons(clause_woa, clause_woa_list), action), tail_clause_list)\n  ", 5686, []))
SEMI
PERCENT_INLINE
IDENT("clause_without_action")
ARROW
PKG_AND_IDENT(("ast", "ClauseWithoutAction"))
COLON
IDENT("empty_clause_without_action")
LBRACE_CODE_RBRACE((" $1 ", 5934, [{start: 1, end: 3, desc: Dollar(1)}]))
BAR
IDENT("nonempty_clause_without_action")
LBRACE_CODE_RBRACE((" $1 ", 5976, [{start: 1, end: 3, desc: Dollar(1)}]))
SEMI
IDENT("empty_clause_without_action")
ARROW
PKG_AND_IDENT(("ast", "ClauseWithoutAction"))
COLON
IDENT("prec")
EQ
IDENT("rule_prec")
LBRACE_CODE_RBRACE((" { items: [], prec, loc: ($startpos, $endpos - $startpos) } ", 6063, [{start: 26, end: 35, desc: StartPos}, {start: 37, end: 44, desc: EndPos}, {start: 47, end: 56, desc: StartPos}]))
SEMI
IDENT("nonempty_clause_without_action")
ARROW
PKG_AND_IDENT(("ast", "ClauseWithoutAction"))
COLON
IDENT("item_list")
EQ
IDENT("nonempty_item_list")
IDENT("prec")
EQ
IDENT("rule_prec")
LBRACE_CODE_RBRACE((" { items: item_list.to_array(), prec, loc: ($startpos, $endpos - $startpos) } ", 6238, [{start: 44, end: 53, desc: StartPos}, {start: 55, end: 62, desc: EndPos}, {start: 65, end: 74, desc: StartPos}]))
SEMI
IDENT("clause_action")
ARROW
PKG_AND_IDENT(("ast", "ClauseAction"))
COLON
IDENT("code")
EQ
IDENT("LBRACE_CODE_RBRACE")
LBRACE_CODE_RBRACE(("\n      let (code, utf8_pos, subst) = code\n      { code: Some({ code, utf8_pos, subst }), loc: ($startpos, $endpos - $startpos) }\n  ", 6387, [{start: 95, end: 104, desc: StartPos}, {start: 106, end: 113, desc: EndPos}, {start: 116, end: 125, desc: StartPos}]))
SEMI
IDENT("rule_prec")
ARROW
PKG_AND_IDENT(("ast", "PrecSymbol"))
QUESTION
COLON
STRING("\"%prec\"")
IDENT("symbol")
EQ
IDENT("prec_symbol")
LBRACE_CODE_RBRACE((" Some(symbol) ", 6587, []))
BAR
LBRACE_CODE_RBRACE((" None ", 6608, []))
SEMI
IDENT("nonempty_item_list")
ARROW
PKG_AND_IDENT(("immut/list", "T"))
LBRACKET
PKG_AND_IDENT(("ast", "ClauseItem"))
RBRACKET
COLON
IDENT("item")
EQ
IDENT("item")
LBRACE_CODE_RBRACE((" Cons(item, Nil) ", 6689, []))
BAR
IDENT("item")
EQ
IDENT("item")
IDENT("item_list")
EQ
IDENT("nonempty_item_list")
LBRACE_CODE_RBRACE((" Cons(item, item_list) ", 6752, []))
SEMI
IDENT("item")
ARROW
PKG_AND_IDENT(("ast", "ClauseItem"))
COLON
IDENT("term")
EQ
IDENT("term")
LBRACE_CODE_RBRACE((" { binder: None, term: term } ", 6821, []))
BAR
IDENT("binder")
EQ
IDENT("IDENT")
STRING("\"=\"")
IDENT("term")
EQ
IDENT("term")
LBRACE_CODE_RBRACE((" { binder: Some(binder), term: term } ", 6885, []))
SEMI
IDENT("term")
ARROW
PKG_AND_IDENT(("ast", "Term"))
COLON
IDENT("symbol")
EQ
IDENT("symbol")
LBRACE_CODE_RBRACE((" Symbol(symbol, loc=($startpos, $endpos)) ", 6967, [{start: 21, end: 30, desc: StartPos}, {start: 32, end: 39, desc: EndPos}]))
BAR
IDENT("symbol")
EQ
IDENT("symbol")
STRING("\"(\"")
IDENT("nonempty_comma_term_list")
STRING("\")\"")
LBRACE_CODE_RBRACE((" RuleCall(symbol, symbol_loc=($startpos(symbol), $endpos(symbol)), $3.to_array()) ", 7063, [{start: 30, end: 47, desc: StartPosOf(Name("symbol"))}, {start: 49, end: 64, desc: EndPosOf(Name("symbol"))}, {start: 67, end: 69, desc: Dollar(3)}]))
BAR
IDENT("image")
EQ
IDENT("STRING")
LBRACE_CODE_RBRACE((" Image(image, loc=($startpos, $endpos)) ", 7165, [{start: 19, end: 28, desc: StartPos}, {start: 30, end: 37, desc: EndPos}]))
SEMI
IDENT("nonempty_comma_term_list")
ARROW
PKG_AND_IDENT(("immut/list", "T"))
LBRACKET
PKG_AND_IDENT(("ast", "Term"))
RBRACKET
COLON
IDENT("term")
EQ
IDENT("term")
LBRACE_CODE_RBRACE((" Cons(term, Nil) ", 7280, []))
BAR
IDENT("term")
EQ
IDENT("term")
STRING("\",\"")
IDENT("term_list")
EQ
IDENT("nonempty_comma_term_list")
LBRACE_CODE_RBRACE((" Cons(term, term_list) ", 7353, []))
SEMI
IDENT("nonempty_symbol_list")
ARROW
PKG_AND_IDENT(("immut/list", "T"))
LBRACKET
PKG_AND_IDENT(("ast", "Symbol"))
RBRACKET
COLON
IDENT("symbol")
EQ
IDENT("symbol")
LBRACE_CODE_RBRACE((" Cons(symbol, Nil) ", 7453, []))
BAR
IDENT("symbol")
EQ
IDENT("symbol")
IDENT("symbol_list")
EQ
IDENT("nonempty_symbol_list")
LBRACE_CODE_RBRACE((" Cons(symbol, symbol_list) ", 7526, []))
SEMI
IDENT("nonempty_prec_symbol_list")
ARROW
PKG_AND_IDENT(("immut/list", "T"))
LBRACKET
PKG_AND_IDENT(("ast", "PrecSymbol"))
RBRACKET
COLON
IDENT("symbol")
EQ
IDENT("prec_symbol")
LBRACE_CODE_RBRACE((" Cons(symbol, Nil) ", 7644, []))
BAR
IDENT("symbol")
EQ
IDENT("prec_symbol")
IDENT("symbol_list")
EQ
IDENT("nonempty_prec_symbol_list")
LBRACE_CODE_RBRACE((" Cons(symbol, symbol_list) ", 7727, []))
SEMI
IDENT("prec_symbol")
ARROW
PKG_AND_IDENT(("ast", "PrecSymbol"))
COLON
IDENT("symbol")
EQ
IDENT("symbol")
LBRACE_CODE_RBRACE((" Symbol(symbol) ", 7811, []))
BAR
IDENT("image")
EQ
IDENT("STRING")
LBRACE_CODE_RBRACE((" Image(image) ", 7847, []))
SEMI
IDENT("symbol")
ARROW
PKG_AND_IDENT(("ast", "Symbol"))
COLON
IDENT("ident")
EQ
IDENT("IDENT")
LBRACE_CODE_RBRACE((" ident ", 7907, []))
SEMI
EOF
