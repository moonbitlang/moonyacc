// Copyright (C) 2025 International Digital Economy Academy
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, see <https://www.gnu.org/licenses/>.

%start parse_type_expr
%position<Int>
%derive<Show> ParseError
%derive<Show> Token

%token EOF

%token LPAREN "("
%token RPAREN ")"
%token LBRACKET "["
%token RBRACKET "]"
%token COMMA ","
%token ARROW "->"
%token QUESTION "?"

%token<String> IDENT
%token<(String, String)> PKG_AND_IDENT

%%

parse_type_expr -> @ast.TypeExpr
  : type_expr EOF { $1 }
  ;

type_expr -> @ast.TypeExpr
  : postfix_type_expr { $1 }
  | "(" ")" "->" type_expr { Arrow([], $4) }
  | "(" type_expr ")" "->" type_expr { Arrow([$2], $5) }
  | "(" type_expr "," ")" "->" type_expr { Arrow([$2], $6) }
  | "(" type_expr "," nonempty_type_expr_list ")" "->" type_expr { Arrow(@immut/list.Cons($2, $4).to_array(), $7) }
  ;

postfix_type_expr -> @ast.TypeExpr
  : basic_type_expr { $1 }
  | postfix_type_expr "?" { Option($1) }
  ;

basic_type_expr -> @ast.TypeExpr
  : IDENT { Constr(pkg=None, $1, []) }
  | PKG_AND_IDENT { Constr(pkg=Some($1.0), $1.1, []) }
  | IDENT "[" nonempty_type_expr_list "]" { Constr(pkg=None, $1, $3.to_array()) }
  | PKG_AND_IDENT "[" nonempty_type_expr_list "]" { Constr(pkg=Some($1.0), $1.1, $3.to_array()) }
  | "(" type_expr "," nonempty_type_expr_list ")" { Tuple(@immut/list.Cons($2, $4).to_array()) }
  | "(" type_expr ")" { $2 }
  ;

nonempty_type_expr_list -> @immut/list.T[@ast.TypeExpr]
  : type_expr=type_expr { Cons(type_expr, Nil) }
  | type_expr=type_expr "," type_expr_list=nonempty_type_expr_list { Cons(type_expr, type_expr_list) }
  ;
