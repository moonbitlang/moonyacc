// Copyright (C) 2025 International Digital Economy Academy
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, see <https://www.gnu.org/licenses/>.

{
pub type! LexError {
  Unrecognized(Char, Int)
} derive(Show)
}

regex ident_start = ['A'-'Z' 'a'-'z' '_'];
regex ident_char = ['A'-'Z' 'a'-'z' '0'-'9' '_'];
regex ident = ident_start ident_char*;

rule token(lexbuf : @lexbuf.StringLexbuf) -> (Token, Int, Int)!LexError {
  parse {
    [' ' '\t' '\n' ]+ => { token!(lexbuf) }
    "@" (ident ("/" ident)* as pkg) "." (ident as id) as t => { (PKG_AND_IDENT((pkg, id)), $startpos(t), $endpos(t)) }
    ident as t => { (IDENT(t), $startpos(t), $endpos(t)) }
    "->" as t => { (ARROW, $startpos(t), $endpos(t)) }
    "[" as t => { (LBRACKET, $startpos(t), $endpos(t)) }
    "]" as t => { (RBRACKET, $startpos(t), $endpos(t)) }
    "(" as t => { (LPAREN, $startpos(t), $endpos(t)) }
    ")" as t => { (RPAREN, $startpos(t), $endpos(t)) }
    "," as t => { (COMMA, $startpos(t), $endpos(t)) }
    "?" as t => { (QUESTION, $startpos(t), $endpos(t)) }
    _ as t => { raise(Unrecognized(t, $startpos(t))) }
    eof as t => { (EOF, $startpos(t), $endpos(t)) }
  }
}
