///|
struct Lexbuf {
  content : String
  mut pos : Int
}

///|
pub fn Lexbuf::from_string(content : String) -> Lexbuf {
  { content, pos: 0 }
}

// NOTE: MoonBit do have unboxed Option[Char] optimization
///|
fn next(self : Lexbuf) -> Char? {
  if self.pos < self.content.length() {
    let ch = self.content[self.pos]
    self.pos += 1
    Some(ch)
  } else {
    None
  }
}

///|
fn substring(self : Lexbuf, start : Int, end : Int) -> String {
  self.content.substring(start~, end~)
}

///|
typealias LexTagAction = Array[Array[Int]]

///|
typealias LexState = Int

///|
typealias LexInput = Int

///|
pub(all) struct LexEngine {
  graph : Array[(LexState) -> (LexState, LexTagAction)]
  end_nodes : Array[(Int, Array[((Int, Int), (Int, Int))])?]
  start_tags : Array[Int]
  code_blocks_n : Int
}

///|
pub fn run(self : LexEngine, lexbuf : Lexbuf) -> (Int, Array[(Int, Int)]) {
  let mut state = 0
  let mut tagState : Array[Array[Int]] = []
  let backtrace = Array::make(self.code_blocks_n, None)
  for tag in self.start_tags {
    while tagState.length() <= tag {
      tagState.push([])
    }
    tagState[tag].push(lexbuf.pos)
  }
  while state != -1 {
    match self.end_nodes[state] {
      Some(t) => backtrace[t.0] = Some((lexbuf.pos, state, tagState))
      _ => ()
    }
    let b = match lexbuf.next() {
      Some(b) => b.to_int()
      None => -1
    }
    let next = self.graph[state](b)
    state = next.0
    let new_tagState : Array[Array[Int]] = []
    for i = 0; i < next.1.length(); i = i + 1 {
      new_tagState.push([])
      for j = 0; j < next.1[i].length(); j = j + 1 {
        let t = next.1[i][j]
        if t == -1 {
          new_tagState[i].push(lexbuf.pos)
        } else {
          new_tagState[i].push(tagState[i][t])
        }
      }
    }
    tagState = new_tagState
  }
  for index, b in backtrace {
    match b {
      Some((p, state, tagState)) => {
        lexbuf.pos = p
        let captures = self.end_nodes[state].unwrap().1.map(fn {
          ((b_t, b_r), (e_t, e_r)) => (tagState[b_t][b_r], tagState[e_t][e_r])
        })
        break (index, captures)
      }
      None => ()
    }
  } else {
    (self.code_blocks_n, [])
  }
}

///|
pub type! LexError {
  Unrecognized(String, Int)
} derive(Show)

///|
let token_tag_action_row_0 : Array[Int] = []

///|
let token_tag_action_row_2 : Array[Int] = [-1]

///|
let token_tag_action_row_1 : Array[Int] = [0]

///|
let token_tag_action_row_3 : Array[Int] = [-1, 0]

///|
let token_tag_action_0 : Array[Array[Int]] = [
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_1, token_tag_action_row_2,
]

///|
let token_tag_action_1 : Array[Array[Int]] = [
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_7 : Array[Array[Int]] = [
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_1, token_tag_action_row_2, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_5 : Array[Array[Int]] = [
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_4 : Array[Array[Int]] = [
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_1, token_tag_action_row_2, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_3 : Array[Array[Int]] = [
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_11 : Array[Array[Int]] = [
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_1, token_tag_action_row_2, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_10 : Array[Array[Int]] = [
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_6 : Array[Array[Int]] = [
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_1, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_14 : Array[Array[Int]] = [
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_1, token_tag_action_row_2, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_12 : Array[Array[Int]] = [
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_9 : Array[Array[Int]] = [
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_2 : Array[Array[Int]] = [
  token_tag_action_row_2, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_2, token_tag_action_row_0,
  token_tag_action_row_2, token_tag_action_row_0, token_tag_action_row_2, token_tag_action_row_0,
  token_tag_action_row_2, token_tag_action_row_0, token_tag_action_row_2, token_tag_action_row_0,
  token_tag_action_row_2, token_tag_action_row_0, token_tag_action_row_2, token_tag_action_row_0,
  token_tag_action_row_2, token_tag_action_row_0, token_tag_action_row_3, token_tag_action_row_2,
  token_tag_action_row_2, token_tag_action_row_0,
]

///|
let token_tag_action_8 : Array[Array[Int]] = [
  token_tag_action_row_1, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_2, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_16 : Array[Array[Int]] = [
  token_tag_action_row_1, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_1, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_13 : Array[Array[Int]] = [
  token_tag_action_row_1, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_1, token_tag_action_row_2, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_15 : Array[Array[Int]] = [
  token_tag_action_row_1, token_tag_action_row_0, token_tag_action_row_2, token_tag_action_row_0,
  token_tag_action_row_1, token_tag_action_row_1, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
let token_tag_action_17 : Array[Array[Int]] = [
  token_tag_action_row_1, token_tag_action_row_2, token_tag_action_row_1, token_tag_action_row_2,
  token_tag_action_row_1, token_tag_action_row_1, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0, token_tag_action_row_0,
  token_tag_action_row_0, token_tag_action_row_0,
]

///|
fn token_state_0(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    -1 => (10, token_tag_action_0)
    0..=8 => (5, token_tag_action_1)
    9..=10 => (2, token_tag_action_2)
    11..=31 => (5, token_tag_action_1)
    32 => (2, token_tag_action_2)
    33..=39 => (5, token_tag_action_1)
    40 => (8, token_tag_action_3)
    41 => (1, token_tag_action_4)
    42..=43 => (5, token_tag_action_1)
    44 => (7, token_tag_action_5)
    45 => (12, token_tag_action_6)
    46..=62 => (5, token_tag_action_1)
    63 => (6, token_tag_action_7)
    64 => (11, token_tag_action_8)
    65..=90 => (9, token_tag_action_9)
    91 => (4, token_tag_action_10)
    92 => (5, token_tag_action_1)
    93 => (3, token_tag_action_11)
    94 => (5, token_tag_action_1)
    95 => (9, token_tag_action_9)
    96 => (5, token_tag_action_1)
    97..=122 => (9, token_tag_action_9)
    123..=1114111 => (5, token_tag_action_1)
    _ => (-1, [])
  }
}

///|
fn token_state_1(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    _ => (-1, [])
  }
}

///|
fn token_state_2(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    -1 => (10, token_tag_action_0)
    0..=8 => (5, token_tag_action_1)
    9..=10 => (2, token_tag_action_2)
    11..=31 => (5, token_tag_action_1)
    32 => (2, token_tag_action_2)
    33..=39 => (5, token_tag_action_1)
    40 => (8, token_tag_action_3)
    41 => (1, token_tag_action_4)
    42..=43 => (5, token_tag_action_1)
    44 => (7, token_tag_action_5)
    45 => (12, token_tag_action_6)
    46..=62 => (5, token_tag_action_1)
    63 => (6, token_tag_action_7)
    64 => (11, token_tag_action_8)
    65..=90 => (9, token_tag_action_9)
    91 => (4, token_tag_action_10)
    92 => (5, token_tag_action_1)
    93 => (3, token_tag_action_11)
    94 => (5, token_tag_action_1)
    95 => (9, token_tag_action_9)
    96 => (5, token_tag_action_1)
    97..=122 => (9, token_tag_action_9)
    123..=1114111 => (5, token_tag_action_1)
    _ => (-1, [])
  }
}

///|
fn token_state_3(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    _ => (-1, [])
  }
}

///|
fn token_state_4(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    _ => (-1, [])
  }
}

///|
fn token_state_5(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    _ => (-1, [])
  }
}

///|
fn token_state_6(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    _ => (-1, [])
  }
}

///|
fn token_state_7(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    _ => (-1, [])
  }
}

///|
fn token_state_8(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    _ => (-1, [])
  }
}

///|
fn token_state_9(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    48..=57 => (13, token_tag_action_12)
    65..=90 => (13, token_tag_action_12)
    95 => (13, token_tag_action_12)
    97..=122 => (13, token_tag_action_12)
    _ => (-1, [])
  }
}

///|
fn token_state_10(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    _ => (-1, [])
  }
}

///|
fn token_state_11(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    65..=90 => (14, token_tag_action_13)
    95 => (14, token_tag_action_13)
    97..=122 => (14, token_tag_action_13)
    _ => (-1, [])
  }
}

///|
fn token_state_12(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    62 => (15, token_tag_action_14)
    _ => (-1, [])
  }
}

///|
fn token_state_13(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    48..=57 => (13, token_tag_action_12)
    65..=90 => (13, token_tag_action_12)
    95 => (13, token_tag_action_12)
    97..=122 => (13, token_tag_action_12)
    _ => (-1, [])
  }
}

///|
fn token_state_14(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    46 => (18, token_tag_action_15)
    47 => (17, token_tag_action_16)
    48..=57 => (16, token_tag_action_13)
    65..=90 => (16, token_tag_action_13)
    95 => (16, token_tag_action_13)
    97..=122 => (16, token_tag_action_13)
    _ => (-1, [])
  }
}

///|
fn token_state_15(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    _ => (-1, [])
  }
}

///|
fn token_state_16(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    46 => (18, token_tag_action_15)
    47 => (17, token_tag_action_16)
    48..=57 => (16, token_tag_action_13)
    65..=90 => (16, token_tag_action_13)
    95 => (16, token_tag_action_13)
    97..=122 => (16, token_tag_action_13)
    _ => (-1, [])
  }
}

///|
fn token_state_17(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    65..=90 => (19, token_tag_action_13)
    95 => (19, token_tag_action_13)
    97..=122 => (19, token_tag_action_13)
    _ => (-1, [])
  }
}

///|
fn token_state_18(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    65..=90 => (20, token_tag_action_17)
    95 => (20, token_tag_action_17)
    97..=122 => (20, token_tag_action_17)
    _ => (-1, [])
  }
}

///|
fn token_state_19(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    46 => (18, token_tag_action_15)
    47 => (17, token_tag_action_16)
    48..=57 => (21, token_tag_action_13)
    65..=90 => (21, token_tag_action_13)
    95 => (21, token_tag_action_13)
    97..=122 => (21, token_tag_action_13)
    _ => (-1, [])
  }
}

///|
fn token_state_20(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    48..=57 => (22, token_tag_action_17)
    65..=90 => (22, token_tag_action_17)
    95 => (22, token_tag_action_17)
    97..=122 => (22, token_tag_action_17)
    _ => (-1, [])
  }
}

///|
fn token_state_21(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    46 => (18, token_tag_action_15)
    47 => (17, token_tag_action_16)
    48..=57 => (21, token_tag_action_13)
    65..=90 => (21, token_tag_action_13)
    95 => (21, token_tag_action_13)
    97..=122 => (21, token_tag_action_13)
    _ => (-1, [])
  }
}

///|
fn token_state_22(input : LexInput) -> (LexState, LexTagAction) {
  match input {
    48..=57 => (22, token_tag_action_17)
    65..=90 => (22, token_tag_action_17)
    95 => (22, token_tag_action_17)
    97..=122 => (22, token_tag_action_17)
    _ => (-1, [])
  }
}

///|
let __mbtlex_engine_token : LexEngine = {
  graph: [
    token_state_0, token_state_1, token_state_2, token_state_3, token_state_4, token_state_5,
    token_state_6, token_state_7, token_state_8, token_state_9, token_state_10, token_state_11,
    token_state_12, token_state_13, token_state_14, token_state_15, token_state_16,
    token_state_17, token_state_18, token_state_19, token_state_20, token_state_21,
    token_state_22,
  ],
  end_nodes: [
    None,
    Some((7, [((16, 0), (17, 0))])),
    Some((0, [])),
    Some((5, [((12, 0), (13, 0))])),
    Some((4, [((10, 0), (11, 0))])),
    Some((10, [((22, 0), (23, 0))])),
    Some((9, [((20, 0), (21, 0))])),
    Some((8, [((18, 0), (19, 0))])),
    Some((6, [((14, 0), (15, 0))])),
    Some((2, [((6, 0), (7, 0))])),
    Some((11, [((24, 0), (25, 0))])),
    Some((10, [((22, 0), (23, 0))])),
    Some((10, [((22, 0), (23, 0))])),
    Some((2, [((6, 0), (7, 0))])),
    None,
    Some((3, [((8, 0), (9, 0))])),
    None,
    None,
    None,
    None,
    Some((1, [((0, 0), (1, 0)), ((2, 0), (3, 0)), ((4, 0), (5, 0))])),
    None,
    Some((1, [((0, 0), (1, 0)), ((2, 0), (3, 0)), ((4, 0), (5, 0))])),
  ],
  start_tags: [0, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24],
  code_blocks_n: 12,
}

///|
fn token(lexbuf : Lexbuf) -> (Token, Int, Int)!LexError {
  match __mbtlex_engine_token.run(lexbuf) {
    (0, __mbtlex_captures) => token!(lexbuf)
    (1, __mbtlex_captures) => {
      let (_start_pos_of_t, _end_pos_of_t) = __mbtlex_captures[0]
      let t : String = lexbuf.substring(_start_pos_of_t, _end_pos_of_t)
      ignore(t)
      let (_start_pos_of_id, _end_pos_of_id) = __mbtlex_captures[1]
      let id : String = lexbuf.substring(_start_pos_of_id, _end_pos_of_id)
      let (_start_pos_of_pkg, _end_pos_of_pkg) = __mbtlex_captures[2]
      let pkg : String = lexbuf.substring(_start_pos_of_pkg, _end_pos_of_pkg)
      (PKG_AND_IDENT((pkg, id)), _start_pos_of_t, _end_pos_of_t)
    }
    (2, __mbtlex_captures) => {
      let (_start_pos_of_t, _end_pos_of_t) = __mbtlex_captures[0]
      let t : String = lexbuf.substring(_start_pos_of_t, _end_pos_of_t)
      ignore(t)
      (IDENT(t), _start_pos_of_t, _end_pos_of_t)
    }
    (3, __mbtlex_captures) => {
      let (_start_pos_of_t, _end_pos_of_t) = __mbtlex_captures[0]
      let t : String = lexbuf.substring(_start_pos_of_t, _end_pos_of_t)
      ignore(t)
      (ARROW, _start_pos_of_t, _end_pos_of_t)
    }
    (4, __mbtlex_captures) => {
      let (_start_pos_of_t, _end_pos_of_t) = __mbtlex_captures[0]
      let t : String = lexbuf.substring(_start_pos_of_t, _end_pos_of_t)
      ignore(t)
      (LBRACKET, _start_pos_of_t, _end_pos_of_t)
    }
    (5, __mbtlex_captures) => {
      let (_start_pos_of_t, _end_pos_of_t) = __mbtlex_captures[0]
      let t : String = lexbuf.substring(_start_pos_of_t, _end_pos_of_t)
      ignore(t)
      (RBRACKET, _start_pos_of_t, _end_pos_of_t)
    }
    (6, __mbtlex_captures) => {
      let (_start_pos_of_t, _end_pos_of_t) = __mbtlex_captures[0]
      let t : String = lexbuf.substring(_start_pos_of_t, _end_pos_of_t)
      ignore(t)
      (LPAREN, _start_pos_of_t, _end_pos_of_t)
    }
    (7, __mbtlex_captures) => {
      let (_start_pos_of_t, _end_pos_of_t) = __mbtlex_captures[0]
      let t : String = lexbuf.substring(_start_pos_of_t, _end_pos_of_t)
      ignore(t)
      (RPAREN, _start_pos_of_t, _end_pos_of_t)
    }
    (8, __mbtlex_captures) => {
      let (_start_pos_of_t, _end_pos_of_t) = __mbtlex_captures[0]
      let t : String = lexbuf.substring(_start_pos_of_t, _end_pos_of_t)
      ignore(t)
      (COMMA, _start_pos_of_t, _end_pos_of_t)
    }
    (9, __mbtlex_captures) => {
      let (_start_pos_of_t, _end_pos_of_t) = __mbtlex_captures[0]
      let t : String = lexbuf.substring(_start_pos_of_t, _end_pos_of_t)
      ignore(t)
      (QUESTION, _start_pos_of_t, _end_pos_of_t)
    }
    (10, __mbtlex_captures) => {
      let (_start_pos_of_t, _end_pos_of_t) = __mbtlex_captures[0]
      let t : String = lexbuf.substring(_start_pos_of_t, _end_pos_of_t)
      ignore(t)
      raise Unrecognized(t, _start_pos_of_t)
    }
    (11, __mbtlex_captures) => {
      let (_start_pos_of_t, _end_pos_of_t) = __mbtlex_captures[0]
      let t : String = lexbuf.substring(_start_pos_of_t, _end_pos_of_t)
      ignore(t)
      (EOF, _start_pos_of_t, _end_pos_of_t)
    }
    _ => abort("lex: fail to match")
  }
}
