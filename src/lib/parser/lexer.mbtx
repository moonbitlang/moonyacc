{
pub type! LexError {
  UnexpectedEndOfFile
  Unrecognized(Char, Int)
}

struct Lexer {
  buf : @lexbuf.StringLexbuf
  // 0 %%
  // %% 1
  // %% %% 2
  phase : Ref[Int]
}
}

regex ident_start = ['A'-'Z' 'a'-'z' '_'];
regex ident_char = ['A'-'Z' 'a'-'z' '0'-'9' '_'];
regex ident = ident_start ident_char*;

rule token(phase : Ref[Int], lexbuf : @lexbuf.StringLexbuf) -> (Token, Int, Int)!LexError {
  parse {
    [' ' '\t' '\n' ]+ => { token!(phase, lexbuf) }
    "(*)" => { token!(phase, lexbuf) }
    "(*" => {
      comment_star_rparen!(lexbuf)
      token!(phase, lexbuf)
    }
    "/*" ([^ '/'] | "/" [^ '*'])* "*/" => { token!(phase, lexbuf) }
    "//" [^ '\n']* '\n'? => { token!(phase, lexbuf) }
    "@" (ident ("/" ident)* as pkg) "." (ident as id) as t => { (PKG_AND_IDENT((pkg, id)), $startpos(t), $endpos(t)) }
    ident as t => { (IDENT(t), $startpos(t), $endpos(t)) }
    "%start" as t => { (PERCENT_START, $startpos(t), $endpos(t)) }
    "%token" as t => { (PERCENT_TOKEN, $startpos(t), $endpos(t)) }
    "%type" as t => { (PERCENT_TYPE, $startpos(t), $endpos(t)) }
    "%position" as t => { (PERCENT_POSITION, $startpos(t), $endpos(t)) }
    "%left" as t => { (PERCENT_LEFT, $startpos(t), $endpos(t)) }
    "%right" as t => { (PERCENT_RIGHT, $startpos(t), $endpos(t)) }
    "%nonassoc" as t => { (PERCENT_NONASSOC, $startpos(t), $endpos(t)) }
    "%prec" as t => { (PERCENT_PREC, $startpos(t), $endpos(t)) }
    "%derive" as t => { (PERCENT_DERIVE, $startpos(t), $endpos(t)) }
    "%inline" as t => { (PERCENT_INLINE, $startpos(t), $endpos(t)) }
    "%%" as t => {
      if phase.val <= 0 {
        phase.val += 1
        (PERCENT_PERCENT, $startpos(t), $endpos(t))
      } else {
        phase.val += 1
        let sb = StringBuilder::new()
        code_eof(sb, lexbuf)
        (PERCENT_PERCENT_CODE_EOF((sb.to_string(), $endpos(t), lexbuf.pos - $endpos(t))), $startpos(t), lexbuf.pos)
      }
    }
    "->" as t => { (ARROW, $startpos(t), $endpos(t)) }
    ":" as t => { (COLON, $startpos(t), $endpos(t)) }
    "|" as t => { (BAR, $startpos(t), $endpos(t)) }
    "=" as t => { (EQ, $startpos(t), $endpos(t)) }
    ";" as t => { (SEMI, $startpos(t), $endpos(t)) }
    "%{" as t => {
      let sb = StringBuilder::new()
      code_percent_rbrace!(sb, lexbuf)
      (PERCENT_LBRACE_CODE_PERCENT_RBRACE((sb.to_string(), $endpos(t), lexbuf.pos - $endpos(t))), $startpos(t), lexbuf.pos)
    }
    "<" as t => {
      let sb = StringBuilder::new()
      code_rangle!(sb, lexbuf)
      (LANGLE_CODE_RANGLE(sb.to_string()), $startpos(t), lexbuf.pos)
    }
    "[" as t => { (LBRACKET, $startpos(t), $endpos(t)) }
    "]" as t => { (RBRACKET, $startpos(t), $endpos(t)) }
    "(" as t => { (LPAREN, $startpos(t), $endpos(t)) }
    ")" as t => { (RPAREN, $startpos(t), $endpos(t)) }
    "," as t => { (COMMA, $startpos(t), $endpos(t)) }
    "?" as t => { (QUESTION, $startpos(t), $endpos(t)) }
    "{" as t => {
      let sb = StringBuilder::new()
      let subst = []
      let base = lexbuf.pos
      code_rbrace!(sb, subst, base, lexbuf)
      (LBRACE_CODE_RBRACE((sb.to_string(), base, subst)), $startpos(t), lexbuf.pos)
    }
    ('"' [^ '"']+ '"') as t => { (STRING(t), $startpos(t), $endpos(t)) }
    _ as t => { raise(Unrecognized(t, $startpos(t))) }
    eof as t => { (EOF, $startpos(t), $endpos(t)) }
  }
}

rule comment_star_rparen(lexbuf : @lexbuf.StringLexbuf) -> Unit!LexError {
  parse {
    "(*" => {
      comment_star_rparen!(lexbuf)
      comment_star_rparen!(lexbuf)
    }
    "*)" => { () }
    _ => { comment_star_rparen!(lexbuf) }
    eof => { raise(UnexpectedEndOfFile) }
  }
}

rule code_eof(sb : StringBuilder, lexbuf : @lexbuf.StringLexbuf) -> Unit {
  parse {
    _ as t => { sb.write_char(t); code_eof(sb, lexbuf) }
    eof => { () }
  }
}

rule code_rangle(sb : StringBuilder, lexbuf : @lexbuf.StringLexbuf) -> Unit!LexError {
  parse {
    ">" => { () }
    _ as t => {
      sb.write_char(t)
      code_rangle!(sb, lexbuf)
    }
    eof => { raise(UnexpectedEndOfFile) }
  }
}

rule code_percent_rbrace(sb : StringBuilder, lexbuf : @lexbuf.StringLexbuf) -> Unit!LexError {
  parse {
    "%}" => { () }
    _ as t => {
      sb.write_char(t)
      code_percent_rbrace!(sb, lexbuf)
    }
    eof => { raise(UnexpectedEndOfFile) }
  }
}

rule code_rbrace(sb : StringBuilder, subst: Array[@ast.SubstItem], base : Int, lexbuf : @lexbuf.StringLexbuf) -> Unit!LexError {
  parse {
    "{" => {
      sb.write_string("{")
      code_rbrace!(sb, subst, base, lexbuf)
      sb.write_string("}")
      code_rbrace!(sb, subst, base, lexbuf)
    }
    "}" => { () }
    ("$" ((['0'-'9']+) as t1)) as t => {
      sb.write_string(t)
      let index = try @strconv.parse_int!(t1, base=10) catch { err => abort(Show::to_string(err)) }
      subst.push({
        start: $startpos(t) - base,
        end: $endpos(t) - base,
        desc: Dollar(index)
      })
      code_rbrace!(sb, subst, base, lexbuf)
    }
    ("$" (("startpos" | "endpos" | "loc") as t1) "(" [' ' '\t']* (("$" ['0'-'9']+ | ['A'-'Z' 'a'-'z' '_'] ['A'-'Z' 'a'-'z' '0'-'9' '_']*) as t2) [' ' '\t']* ")") as t => {
      sb.write_string(t)
      let arg : @ast.ClauseItemIdent = if t2.has_prefix("$") {
        let index = try @strconv.parse_int!(t2.substring(start=1), base=10) catch { err => abort(Show::to_string(err)) }
        Dollar(index)
      } else {
        Name(t2)
      }
      subst.push({
        start: $startpos(t) - base,
        end: $endpos(t) - base,
        desc: match t1 {
          "startpos" => StartPosOf(arg)
          "endpos" => EndPosOf(arg)
          "loc" => LocOf(arg)
          _ => panic()
        }
      })
      code_rbrace!(sb, subst, base, lexbuf)
    }
    ("$" (("startpos" | "endpos" | "loc" | "symbolstartpos" | "sloc") as t1)) as t => {
      sb.write_string(t)
      subst.push({
        start: $startpos(t) - base,
        end: $endpos(t) - base,
        desc: match t1 {
          "startpos" => StartPos
          "endpos" => EndPos
          "loc" => Loc
          "symbolstartpos" => SymbolStartPos
          "sloc" => Sloc
          _ => panic()
        }
      })
      code_rbrace!(sb, subst, base, lexbuf)
    }
    ("$" ['A'-'Z' 'a'-'z' '_'] ['A'-'Z' 'a'-'z' '0'-'9' '_']*) as t => {
      sb.write_string(t)
      code_rbrace!(sb, subst, base, lexbuf)
    }
    _ as t => {
      sb.write_char(t)
      code_rbrace!(sb, subst, base, lexbuf)
    }
    eof => { raise(UnexpectedEndOfFile) }
  }
}

{
pub fn new_lexer(input : String) -> Lexer {
  { buf : @lexbuf.StringLexbuf::from_string(input), phase: { val: 0 } }
}

pub fn next_token(self : Lexer) -> (Token, Int, Int)!LexError {
  token!(self.phase, self.buf)
}
}
