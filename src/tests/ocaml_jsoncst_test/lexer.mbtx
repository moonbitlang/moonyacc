{
pub(all) type Lexer @lexbuf.StringLexbuf

let all_keywords : Map[String, Token] = {
  "and": AND,
  "as": AS,
  "assert": ASSERT,
  "begin": BEGIN,
  "class": CLASS,
  "constraint": CONSTRAINT,
  "do": DO,
  "done": DONE,
  "downto": DOWNTO,
  "else": ELSE,
  "end": END,
  "exception": EXCEPTION,
  "external": EXTERNAL,
  "false": FALSE,
  "for": FOR,
  "fun": FUN,
  "function": FUNCTION,
  "functor": FUNCTOR,
  "if": IF,
  "in": IN,
  "include": INCLUDE,
  "inherit": INHERIT,
  "initializer": INITIALIZER,
  "lazy": LAZY,
  "let": LET,
  "match": MATCH,
  "method": METHOD,
  "module": MODULE,
  "mutable": MUTABLE,
  "new": NEW,
  "nonrec": NONREC,
  "object": OBJECT,
  "of": OF,
  "open": OPEN,
  "or": OR,
  "private": PRIVATE,
  "rec": REC,
  "sig": SIG,
  "struct": STRUCT,
  "then": THEN,
  "do": TO,
  "true": TRUE,
  "try": TRY,
  "type": TYPE,
  "val": VAL,
  "virtual": VIRTUAL,
  "when": WHEN,
  "while": WHILE,
  "with": WITH,
}
}

rule token(lexbuf : @lexbuf.StringLexbuf) -> (Token, Int, Int) {
  parse {
    [' ' '\t' '\x0c' '\r' '\n']+ => { token(lexbuf) }
    "&&" as t => { (AMPERAMPER, $startpos(t), $endpos(t)) }
    "&" as t => { (AMPERSAND, $startpos(t), $endpos(t)) }
    "`" as t => { (BACKQUOTE, $startpos(t), $endpos(t)) }
    "!" as t => { (BANG, $startpos(t), $endpos(t)) }
    "|" as t => { (BAR, $startpos(t), $endpos(t)) }
    "||" as t => { (BARBAR, $startpos(t), $endpos(t)) }
    "|]" as t => { (BARRBRACKET, $startpos(t), $endpos(t)) }
    "<todo1>" as t => { (CHAR, $startpos(t), $endpos(t)) }
    ":" as t => { (COLON, $startpos(t), $endpos(t)) }
    "::" as t => { (COLONCOLON, $startpos(t), $endpos(t)) }
    ":=" as t => { (COLONEQUAL, $startpos(t), $endpos(t)) }
    ":>" as t => { (COLONGREATER, $startpos(t), $endpos(t)) }
    "," as t => { (COMMA, $startpos(t), $endpos(t)) }
    "." as t => { (DOT, $startpos(t), $endpos(t)) }
    ".." as t => { (DOTDOT, $startpos(t), $endpos(t)) }
    eof as t => { (EOF, $startpos(t), $endpos(t)) }
    "=" as t => { (EQUAL, $startpos(t), $endpos(t)) }
    "<todo3>" as t => { (FLOAT, $startpos(t), $endpos(t)) }
    ">" as t => { (GREATER, $startpos(t), $endpos(t)) }
    ">}" as t => { (GREATERRBRACE, $startpos(t), $endpos(t)) }
    ">]" as t => { (GREATERRBRACKET, $startpos(t), $endpos(t)) }
    (['=' '<' '>' '|' '&' '$'] ['!' '$' '%' '&' '*' '+' '-' '.' '/' ':' '<' '=' '>' '?' '@' '^' '|' '~']*) as t => { (INFIXOP0, $startpos(t), $endpos(t)) }
    (['@' '^'] ['!' '$' '%' '&' '*' '+' '-' '.' '/' ':' '<' '=' '>' '?' '@' '^' '|' '~']*) as t => { (INFIXOP1, $startpos(t), $endpos(t)) }
    (['+' '-'] ['!' '$' '%' '&' '*' '+' '-' '.' '/' ':' '<' '=' '>' '?' '@' '^' '|' '~']*) as t => { (INFIXOP2, $startpos(t), $endpos(t)) }
    (['*' '/' '%'] ['!' '$' '%' '&' '*' '+' '-' '.' '/' ':' '<' '=' '>' '?' '@' '^' '|' '~']*) as t => { (INFIXOP3, $startpos(t), $endpos(t)) }
    "<todo8>" as t => { (INFIXOP4, $startpos(t), $endpos(t)) }
    "<todo9>" as t => { (DOTOP, $startpos(t), $endpos(t)) }
    (['0'-'9'] ['0'-'9' '_']*) as t => { (INT, $startpos(t), $endpos(t)) }
    "<todo11>" as t => { (LABEL, $startpos(t), $endpos(t)) }
    "{" as t => { (LBRACE, $startpos(t), $endpos(t)) }
    "{<" as t => { (LBRACELESS, $startpos(t), $endpos(t)) }
    "[" as t => { (LBRACKET, $startpos(t), $endpos(t)) }
    "[|" as t => { (LBRACKETBAR, $startpos(t), $endpos(t)) }
    "[<" as t => { (LBRACKETLESS, $startpos(t), $endpos(t)) }
    "[>" as t => { (LBRACKETGREATER, $startpos(t), $endpos(t)) }
    "[%" as t => { (LBRACKETPERCENT, $startpos(t), $endpos(t)) }
    "[%%" as t => { (LBRACKETPERCENTPERCENT, $startpos(t), $endpos(t)) }
    "<" as t => { (LESS, $startpos(t), $endpos(t)) }
    "<-" as t => { (LESSMINUS, $startpos(t), $endpos(t)) }
    (['a'-'z'] ['A'-'Z' 'a'-'z' '_' '0'-'9']*) as t => { (all_keywords.get(t).unwrap_or(LIDENT), $startpos(t), $endpos(t)) }
    "(" as t => { (LPAREN, $startpos(t), $endpos(t)) }
    "[@" as t => { (LBRACKETAT, $startpos(t), $endpos(t)) }
    "[@@" as t => { (LBRACKETATAT, $startpos(t), $endpos(t)) }
    "[@@@" as t => { (LBRACKETATATAT, $startpos(t), $endpos(t)) }
    "-" as t => { (MINUS, $startpos(t), $endpos(t)) }
    "-." as t => { (MINUSDOT, $startpos(t), $endpos(t)) }
    "->" as t => { (MINUSGREATER, $startpos(t), $endpos(t)) }
    "<todo13>" as t => { (OPTLABEL, $startpos(t), $endpos(t)) }
    "%" as t => { (PERCENT, $startpos(t), $endpos(t)) }
    "+" as t => { (PLUS, $startpos(t), $endpos(t)) }
    "+." as t => { (PLUSDOT, $startpos(t), $endpos(t)) }
    "+=" as t => { (PLUSEQ, $startpos(t), $endpos(t)) }
    "<todo14>" as t => { (PREFIXOP, $startpos(t), $endpos(t)) }
    "?" as t => { (QUESTION, $startpos(t), $endpos(t)) }
    "\"" as t => { (QUOTE, $startpos(t), $endpos(t)) }
    "}" as t => { (RBRACE, $startpos(t), $endpos(t)) }
    "]" as t => { (RBRACKET, $startpos(t), $endpos(t)) }
    ")" as t => { (RPAREN, $startpos(t), $endpos(t)) }
    ";" as t => { (SEMI, $startpos(t), $endpos(t)) }
    ";;" as t => { (SEMISEMI, $startpos(t), $endpos(t)) }
    "#" as t => { (HASH, $startpos(t), $endpos(t)) }
    "<todo15>" as t => { (HASHOP, $startpos(t), $endpos(t)) }
    "*" as t => { (STAR, $startpos(t), $endpos(t)) }
    "<todo16>" as t => { (STRING, $startpos(t), $endpos(t)) }
    "~" as t => { (TILDE, $startpos(t), $endpos(t)) }
    (['A'-'Z'] ['A'-'Z' 'a'-'z' '_' '0'-'9']*) as t => { (UIDENT, $startpos(t), $endpos(t)) }
    "_" as t => { (UNDERSCORE, $startpos(t), $endpos(t)) }
  }
}

{
pub fn new_lexer(input : String) -> Lexer {
  @lexbuf.StringLexbuf::from_string(input)
}

pub fn next_token(self : Lexer) -> (Token, Int, Int) {
  token(self._)
}
}
